
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800fa98  0800fa98  0001fa98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100a4  080100a4  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  080100a4  080100a4  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100ac  080100ac  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100ac  080100ac  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100b0  080100b0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080100b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb0  200001d8  0801028c  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003188  0801028c  00033188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025b05  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000509f  00000000  00000000  00055d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  0005adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001751  00000000  00000000  0005cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002db3c  00000000  00000000  0005e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024bd1  00000000  00000000  0008bead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115e6c  00000000  00000000  000b0a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000931c  00000000  00000000  001c68ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001cfc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa80 	.word	0x0800fa80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800fa80 	.word	0x0800fa80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	char* result;
	result= memchr(uartRecieveBuffer, 'P', strlen(uartRecieveBuffer));
 8000ff6:	483e      	ldr	r0, [pc, #248]	; (80010f0 <ProcessUartData+0x100>)
 8000ff8:	f7ff f93a 	bl	8000270 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	2150      	movs	r1, #80	; 0x50
 8001002:	483b      	ldr	r0, [pc, #236]	; (80010f0 <ProcessUartData+0x100>)
 8001004:	f7ff f8e4 	bl	80001d0 <memchr>
 8001008:	6078      	str	r0, [r7, #4]
	Fingers_Status.Pinky.SetPoint = atof(result+2);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3302      	adds	r3, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fbac 	bl	800b76c <atof>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <ProcessUartData+0x104>)
 8001024:	6513      	str	r3, [r2, #80]	; 0x50
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 8001026:	4832      	ldr	r0, [pc, #200]	; (80010f0 <ProcessUartData+0x100>)
 8001028:	f7ff f922 	bl	8000270 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	2152      	movs	r1, #82	; 0x52
 8001032:	482f      	ldr	r0, [pc, #188]	; (80010f0 <ProcessUartData+0x100>)
 8001034:	f7ff f8cc 	bl	80001d0 <memchr>
 8001038:	6078      	str	r0, [r7, #4]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3302      	adds	r3, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f00a fb94 	bl	800b76c <atof>
 8001044:	ec53 2b10 	vmov	r2, r3, d0
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdcc 	bl	8000be8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <ProcessUartData+0x104>)
 8001054:	63d3      	str	r3, [r2, #60]	; 0x3c
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <ProcessUartData+0x100>)
 8001058:	f7ff f90a 	bl	8000270 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	214d      	movs	r1, #77	; 0x4d
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <ProcessUartData+0x100>)
 8001064:	f7ff f8b4 	bl	80001d0 <memchr>
 8001068:	6078      	str	r0, [r7, #4]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3302      	adds	r3, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f00a fb7c 	bl	800b76c <atof>
 8001074:	ec53 2b10 	vmov	r2, r3, d0
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fdb4 	bl	8000be8 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <ProcessUartData+0x104>)
 8001084:	6293      	str	r3, [r2, #40]	; 0x28
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <ProcessUartData+0x100>)
 8001088:	f7ff f8f2 	bl	8000270 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	2149      	movs	r1, #73	; 0x49
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <ProcessUartData+0x100>)
 8001094:	f7ff f89c 	bl	80001d0 <memchr>
 8001098:	6078      	str	r0, [r7, #4]
	Fingers_Status.Index.SetPoint= atof(result+2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a fb64 	bl	800b76c <atof>
 80010a4:	ec53 2b10 	vmov	r2, r3, d0
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd9c 	bl	8000be8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <ProcessUartData+0x104>)
 80010b4:	6153      	str	r3, [r2, #20]
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <ProcessUartData+0x100>)
 80010b8:	f7ff f8da 	bl	8000270 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	2154      	movs	r1, #84	; 0x54
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <ProcessUartData+0x100>)
 80010c4:	f7ff f884 	bl	80001d0 <memchr>
 80010c8:	6078      	str	r0, [r7, #4]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3302      	adds	r3, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00a fb4c 	bl	800b76c <atof>
 80010d4:	ec53 2b10 	vmov	r2, r3, d0
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd84 	bl	8000be8 <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <ProcessUartData+0x104>)
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f8 	.word	0x200001f8
 80010f4:	200015e0 	.word	0x200015e0

080010f8 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <HAL_UART_RxCpltCallback+0x94>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d13c      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x8c>
		uartRecieveBuffer[uartCounter]=RXuart;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_UART_RxCpltCallback+0x9c>)
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 8001116:	5499      	strb	r1, [r3, r2]
		if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d123      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	2b0d      	cmp	r3, #13
 8001132:	d11c      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	3b02      	subs	r3, #2
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	2b7d      	cmp	r3, #125	; 0x7d
 8001140:	d115      	bne.n	800116e <HAL_UART_RxCpltCallback+0x76>
			ProcessUartData();
 8001142:	f7ff ff55 	bl	8000ff0 <ProcessUartData>
			ManualControl=1;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_UART_RxCpltCallback+0xa4>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
			uartCounter=-1;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	801a      	strh	r2, [r3, #0]

			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	e006      	b.n	8001168 <HAL_UART_RxCpltCallback+0x70>
				uartRecieveBuffer[cleanCounter]=0;
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_UART_RxCpltCallback+0xa0>)
 800115e:	2100      	movs	r1, #0
 8001160:	54d1      	strb	r1, [r2, r3]
			for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	2b95      	cmp	r3, #149	; 0x95
 800116c:	d9f5      	bls.n	800115a <HAL_UART_RxCpltCallback+0x62>
		}
		uartCounter++;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_UART_RxCpltCallback+0x98>)
 8001178:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 800117a:	2201      	movs	r2, #1
 800117c:	4905      	ldr	r1, [pc, #20]	; (8001194 <HAL_UART_RxCpltCallback+0x9c>)
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_UART_RxCpltCallback+0xa8>)
 8001180:	f006 fd8a 	bl	8007c98 <HAL_UART_Receive_IT>
	}
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013800 	.word	0x40013800
 8001190:	200001f4 	.word	0x200001f4
 8001194:	2000028e 	.word	0x2000028e
 8001198:	200001f8 	.word	0x200001f8
 800119c:	20001694 	.word	0x20001694
 80011a0:	20001558 	.word	0x20001558

080011a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <MX_ADC1_Init+0xe4>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <MX_ADC1_Init+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_ADC1_Init+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_ADC1_Init+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001228:	f002 f9dc 	bl	80035e4 <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001232:	f000 ff33 	bl	800209c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <MX_ADC1_Init+0xe0>)
 8001242:	f003 faad 	bl	80047a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800124c:	f000 ff26 	bl	800209c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_ADC1_Init+0xe8>)
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001254:	2306      	movs	r3, #6
 8001256:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001258:	2306      	movs	r3, #6
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125c:	237f      	movs	r3, #127	; 0x7f
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001260:	2304      	movs	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_ADC1_Init+0xe0>)
 800126e:	f002 fcdd 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001278:	f000 ff10 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000290 	.word	0x20000290
 8001288:	50040000 	.word	0x50040000
 800128c:	0c900008 	.word	0x0c900008

08001290 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC2_Init+0xbc>)
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <MX_ADC2_Init+0xc0>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_ADC2_Init+0xbc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC2_Init+0xbc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_ADC2_Init+0xbc>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_ADC2_Init+0xbc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC2_Init+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC2_Init+0xbc>)
 80012d8:	2201      	movs	r2, #1
 80012da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_ADC2_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC2_Init+0xbc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_ADC2_Init+0xbc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_ADC2_Init+0xbc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_ADC2_Init+0xbc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_ADC2_Init+0xbc>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_ADC2_Init+0xbc>)
 8001308:	f002 f96c 	bl	80035e4 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001312:	f000 fec3 	bl	800209c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_ADC2_Init+0xc4>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	237f      	movs	r3, #127	; 0x7f
 8001324:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001326:	2304      	movs	r3, #4
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_ADC2_Init+0xbc>)
 8001334:	f002 fc7a 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 fead 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002f4 	.word	0x200002f4
 8001350:	50040100 	.word	0x50040100
 8001354:	21800100 	.word	0x21800100

08001358 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_ADC_MspInit+0x150>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d146      	bne.n	8001408 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001382:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001384:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10b      	bne.n	80013a4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a41      	ldr	r2, [pc, #260]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 80013d4:	230c      	movs	r3, #12
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d8:	230b      	movs	r3, #11
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4833      	ldr	r0, [pc, #204]	; (80014b4 <HAL_ADC_MspInit+0x15c>)
 80013e8:	f003 fc68 	bl	8004cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 80013ec:	2334      	movs	r3, #52	; 0x34
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013f0:	230b      	movs	r3, #11
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f003 fc5b 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001406:	e04a      	b.n	800149e <HAL_ADC_MspInit+0x146>
  else if(adcHandle->Instance==ADC2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_ADC_MspInit+0x160>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d145      	bne.n	800149e <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0x154>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a24      	ldr	r2, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800141a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_ADC_MspInit+0x154>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10b      	bne.n	800143c <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800142a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_ADC_MspInit+0x158>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 800146c:	2303      	movs	r3, #3
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001470:	230b      	movs	r3, #11
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0x15c>)
 8001480:	f003 fc1c 	bl	8004cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 8001484:	23ca      	movs	r3, #202	; 0xca
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001488:	230b      	movs	r3, #11
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f003 fc0f 	bl	8004cbc <HAL_GPIO_Init>
}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	50040000 	.word	0x50040000
 80014ac:	20000358 	.word	0x20000358
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800
 80014b8:	50040100 	.word	0x50040100

080014bc <ADC_Select_Pinky_CH>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_Pinky_CH (void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <ADC_Select_Pinky_CH+0x48>)
 80014d4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d6:	2306      	movs	r3, #6
 80014d8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80014da:	2306      	movs	r3, #6
 80014dc:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <ADC_Select_Pinky_CH+0x4c>)
 80014e8:	f002 fba0 	bl	8003c2c <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <ADC_Select_Pinky_CH+0x3a>
	  {
	    Error_Handler();
 80014f2:	f000 fdd3 	bl	800209c <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80014f6:	b662      	cpsie	i
}
 80014f8:	bf00      	nop
	  }
	  __enable_irq();
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2e300800 	.word	0x2e300800
 8001508:	200002f4 	.word	0x200002f4
 800150c:	00000000 	.word	0x00000000

08001510 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	af00      	add	r7, sp, #0
	ADC_Select_Pinky_CH();
 8001514:	f7ff ffd2 	bl	80014bc <ADC_Select_Pinky_CH>
	HAL_ADC_Start(&hadc2);
 8001518:	4831      	ldr	r0, [pc, #196]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 800151a:	f002 f9b3 	bl	8003884 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800151e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001522:	482f      	ldr	r0, [pc, #188]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 8001524:	f002 fa9c 	bl	8003a60 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc2);
 8001528:	482d      	ldr	r0, [pc, #180]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 800152a:	f002 fb71 	bl	8003c10 <HAL_ADC_GetValue>
 800152e:	4603      	mov	r3, r0
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 8001532:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc2);
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <ADC_ReadCurrent_Pinky+0xd0>)
 8001536:	f002 fa5f 	bl	80039f8 <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*Current_motor[1]))/1.01;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 800153c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ffef 	bl	8000524 <__aeabi_i2d>
 8001546:	4604      	mov	r4, r0
 8001548:	460d      	mov	r5, r1
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffd8 	bl	8000504 <__aeabi_ui2d>
 8001554:	a31e      	add	r3, pc, #120	; (adr r3, 80015d0 <ADC_ReadCurrent_Pinky+0xc0>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe91 	bl	800028c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	a319      	add	r3, pc, #100	; (adr r3, 80015d8 <ADC_ReadCurrent_Pinky+0xc8>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f968 	bl	800084c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb10 	bl	8000ba8 <__aeabi_d2uiz>
 8001588:	4603      	mov	r3, r0
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 800158e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Current_motor[1]=Fingers_Status.Pinky.Current;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 8001594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001598:	461a      	mov	r2, r3
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <ADC_ReadCurrent_Pinky+0xd4>)
 800159c:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015a4:	f640 62d8 	movw	r2, #3800	; 0xed8
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d805      	bhi.n	80015b8 <ADC_ReadCurrent_Pinky+0xa8>
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015b6:	d204      	bcs.n	80015c2 <ADC_ReadCurrent_Pinky+0xb2>
		Fingers_Status.Pinky.Stuck_Finger=1;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80015c0:	e004      	b.n	80015cc <ADC_ReadCurrent_Pinky+0xbc>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <ADC_ReadCurrent_Pinky+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	47ae147b 	.word	0x47ae147b
 80015d4:	3f847ae1 	.word	0x3f847ae1
 80015d8:	c28f5c29 	.word	0xc28f5c29
 80015dc:	3ff028f5 	.word	0x3ff028f5
 80015e0:	200002f4 	.word	0x200002f4
 80015e4:	20001644 	.word	0x20001644
 80015e8:	200015e0 	.word	0x200015e0

080015ec <ADC_Select_Ring_CH>:
void ADC_Select_Ring_CH (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <ADC_Select_Ring_CH+0x48>)
 8001604:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001606:	2306      	movs	r3, #6
 8001608:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800160a:	2306      	movs	r3, #6
 800160c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800160e:	b672      	cpsid	i
}
 8001610:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <ADC_Select_Ring_CH+0x4c>)
 8001618:	f002 fb08 	bl	8003c2c <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <ADC_Select_Ring_CH+0x3a>
	  {
	    Error_Handler();
 8001622:	f000 fd3b 	bl	800209c <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001626:	b662      	cpsie	i
}
 8001628:	bf00      	nop
	  }
	  __enable_irq();
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	21800100 	.word	0x21800100
 8001638:	200002f4 	.word	0x200002f4
 800163c:	00000000 	.word	0x00000000

08001640 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	ADC_Select_Ring_CH();
 8001644:	f7ff ffd2 	bl	80015ec <ADC_Select_Ring_CH>
	HAL_ADC_Start(&hadc2);
 8001648:	4831      	ldr	r0, [pc, #196]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 800164a:	f002 f91b 	bl	8003884 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800164e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001652:	482f      	ldr	r0, [pc, #188]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 8001654:	f002 fa04 	bl	8003a60 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc2);
 8001658:	482d      	ldr	r0, [pc, #180]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 800165a:	f002 fad9 	bl	8003c10 <HAL_ADC_GetValue>
 800165e:	4603      	mov	r3, r0
 8001660:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 8001662:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc2);
 8001664:	482a      	ldr	r0, [pc, #168]	; (8001710 <ADC_ReadCurrent_Ring+0xd0>)
 8001666:	f002 f9c7 	bl	80039f8 <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*Current_motor[2]))/1.01;
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 800166c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff40 	bl	8000504 <__aeabi_ui2d>
 8001684:	a31e      	add	r3, pc, #120	; (adr r3, 8001700 <ADC_ReadCurrent_Ring+0xc0>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffb5 	bl	80005f8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe fdf9 	bl	800028c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	a319      	add	r3, pc, #100	; (adr r3, 8001708 <ADC_ReadCurrent_Ring+0xc8>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f8d0 	bl	800084c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa78 	bl	8000ba8 <__aeabi_d2uiz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Current_motor[2]=Fingers_Status.Ring.Current;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016c4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <ADC_ReadCurrent_Ring+0xd4>)
 80016cc:	609a      	str	r2, [r3, #8]
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016d0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016d4:	f640 62d8 	movw	r2, #3800	; 0xed8
 80016d8:	4293      	cmp	r3, r2
 80016da:	d805      	bhi.n	80016e8 <ADC_ReadCurrent_Ring+0xa8>
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016e6:	d204      	bcs.n	80016f2 <ADC_ReadCurrent_Ring+0xb2>
		Fingers_Status.Ring.Stuck_Finger=1;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80016f0:	e004      	b.n	80016fc <ADC_ReadCurrent_Ring+0xbc>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <ADC_ReadCurrent_Ring+0xd8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	47ae147b 	.word	0x47ae147b
 8001704:	3f847ae1 	.word	0x3f847ae1
 8001708:	c28f5c29 	.word	0xc28f5c29
 800170c:	3ff028f5 	.word	0x3ff028f5
 8001710:	200002f4 	.word	0x200002f4
 8001714:	20001644 	.word	0x20001644
 8001718:	200015e0 	.word	0x200015e0

0800171c <ADC_Select_Middle_CH>:
void ADC_Select_Middle_CH (void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <ADC_Select_Middle_CH+0x48>)
 8001734:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2306      	movs	r3, #6
 8001738:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800173a:	2306      	movs	r3, #6
 800173c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
}
 8001740:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4808      	ldr	r0, [pc, #32]	; (8001768 <ADC_Select_Middle_CH+0x4c>)
 8001748:	f002 fa70 	bl	8003c2c <HAL_ADC_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <ADC_Select_Middle_CH+0x3a>
	  {
	    Error_Handler();
 8001752:	f000 fca3 	bl	800209c <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001756:	b662      	cpsie	i
}
 8001758:	bf00      	nop
	  }
	  __enable_irq();
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	19200040 	.word	0x19200040
 8001768:	200002f4 	.word	0x200002f4
 800176c:	00000000 	.word	0x00000000

08001770 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	af00      	add	r7, sp, #0
	ADC_Select_Middle_CH();
 8001774:	f7ff ffd2 	bl	800171c <ADC_Select_Middle_CH>
	HAL_ADC_Start(&hadc2);
 8001778:	482f      	ldr	r0, [pc, #188]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 800177a:	f002 f883 	bl	8003884 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800177e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001782:	482d      	ldr	r0, [pc, #180]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 8001784:	f002 f96c 	bl	8003a60 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc2);
 8001788:	482b      	ldr	r0, [pc, #172]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 800178a:	f002 fa41 	bl	8003c10 <HAL_ADC_GetValue>
 800178e:	4603      	mov	r3, r0
 8001790:	4a2a      	ldr	r2, [pc, #168]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 8001792:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc2);
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <ADC_ReadCurrent_Middle+0xc8>)
 8001796:	f002 f92f 	bl	80039f8 <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*Current_motor[3]))/1.01;
 800179a:	4b29      	ldr	r3, [pc, #164]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 800179c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec0 	bl	8000524 <__aeabi_i2d>
 80017a4:	4604      	mov	r4, r0
 80017a6:	460d      	mov	r5, r1
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fea9 	bl	8000504 <__aeabi_ui2d>
 80017b2:	a31d      	add	r3, pc, #116	; (adr r3, 8001828 <ADC_ReadCurrent_Middle+0xb8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff1e 	bl	80005f8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd62 	bl	800028c <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	a317      	add	r3, pc, #92	; (adr r3, 8001830 <ADC_ReadCurrent_Middle+0xc0>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7ff f839 	bl	800084c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f9e1 	bl	8000ba8 <__aeabi_d2uiz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017ec:	871a      	strh	r2, [r3, #56]	; 0x38
	Current_motor[3]=Fingers_Status.Middle.Current;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017f0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <ADC_ReadCurrent_Middle+0xcc>)
 80017f6:	60da      	str	r2, [r3, #12]
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 80017fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017fc:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001800:	4293      	cmp	r3, r2
 8001802:	d804      	bhi.n	800180e <ADC_ReadCurrent_Middle+0x9e>
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 8001806:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001808:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800180c:	d204      	bcs.n	8001818 <ADC_ReadCurrent_Middle+0xa8>
		Fingers_Status.Middle.Stuck_Finger=1;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001816:	e004      	b.n	8001822 <ADC_ReadCurrent_Middle+0xb2>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <ADC_ReadCurrent_Middle+0xd0>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
 8001826:	bf00      	nop
 8001828:	47ae147b 	.word	0x47ae147b
 800182c:	3f847ae1 	.word	0x3f847ae1
 8001830:	c28f5c29 	.word	0xc28f5c29
 8001834:	3ff028f5 	.word	0x3ff028f5
 8001838:	200002f4 	.word	0x200002f4
 800183c:	20001644 	.word	0x20001644
 8001840:	200015e0 	.word	0x200015e0

08001844 <ADC_Select_Index_CH>:
void ADC_Select_Index_CH (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	463b      	mov	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <ADC_Select_Index_CH+0x48>)
 800185c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185e:	2306      	movs	r3, #6
 8001860:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001862:	2306      	movs	r3, #6
 8001864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001866:	b672      	cpsid	i
}
 8001868:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <ADC_Select_Index_CH+0x4c>)
 8001870:	f002 f9dc 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <ADC_Select_Index_CH+0x3a>
	  {
	    Error_Handler();
 800187a:	f000 fc0f 	bl	800209c <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 800187e:	b662      	cpsie	i
}
 8001880:	bf00      	nop
	  }
	  __enable_irq();
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08600004 	.word	0x08600004
 8001890:	200002f4 	.word	0x200002f4
 8001894:	00000000 	.word	0x00000000

08001898 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	af00      	add	r7, sp, #0
	ADC_Select_Index_CH();
 800189c:	f7ff ffd2 	bl	8001844 <ADC_Select_Index_CH>
	HAL_ADC_Start(&hadc2);
 80018a0:	482f      	ldr	r0, [pc, #188]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018a2:	f001 ffef 	bl	8003884 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80018a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018aa:	482d      	ldr	r0, [pc, #180]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018ac:	f002 f8d8 	bl	8003a60 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc2);
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018b2:	f002 f9ad 	bl	8003c10 <HAL_ADC_GetValue>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 80018ba:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc2);
 80018bc:	4828      	ldr	r0, [pc, #160]	; (8001960 <ADC_ReadCurrent_Index+0xc8>)
 80018be:	f002 f89b 	bl	80039f8 <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*Current_motor[4]))/1.01;
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 80018c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe15 	bl	8000504 <__aeabi_ui2d>
 80018da:	a31d      	add	r3, pc, #116	; (adr r3, 8001950 <ADC_ReadCurrent_Index+0xb8>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe8a 	bl	80005f8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe fcce 	bl	800028c <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <ADC_ReadCurrent_Index+0xc0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffa5 	bl	800084c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f94d 	bl	8000ba8 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001914:	849a      	strh	r2, [r3, #36]	; 0x24
	Current_motor[4]=Fingers_Status.Index.Current;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800191a:	461a      	mov	r2, r3
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <ADC_ReadCurrent_Index+0xcc>)
 800191e:	611a      	str	r2, [r3, #16]
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001924:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001928:	4293      	cmp	r3, r2
 800192a:	d804      	bhi.n	8001936 <ADC_ReadCurrent_Index+0x9e>
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 800192e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001930:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001934:	d204      	bcs.n	8001940 <ADC_ReadCurrent_Index+0xa8>
		Fingers_Status.Index.Stuck_Finger=1;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800193e:	e004      	b.n	800194a <ADC_ReadCurrent_Index+0xb2>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <ADC_ReadCurrent_Index+0xd0>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f847ae1 	.word	0x3f847ae1
 8001958:	c28f5c29 	.word	0xc28f5c29
 800195c:	3ff028f5 	.word	0x3ff028f5
 8001960:	200002f4 	.word	0x200002f4
 8001964:	20001644 	.word	0x20001644
 8001968:	200015e0 	.word	0x200015e0

0800196c <ADC_Select_Thumb_CH>:
void ADC_Select_Thumb_CH (void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <ADC_Select_Thumb_CH+0x48>)
 8001984:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001986:	2306      	movs	r3, #6
 8001988:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800198a:	2306      	movs	r3, #6
 800198c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800198e:	b672      	cpsid	i
}
 8001990:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <ADC_Select_Thumb_CH+0x4c>)
 8001998:	f002 f948 	bl	8003c2c <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <ADC_Select_Thumb_CH+0x3a>
	  {
	    Error_Handler();
 80019a2:	f000 fb7b 	bl	800209c <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80019a6:	b662      	cpsie	i
}
 80019a8:	bf00      	nop
	  }
	  __enable_irq();
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	04300002 	.word	0x04300002
 80019b8:	200002f4 	.word	0x200002f4
 80019bc:	00000000 	.word	0x00000000

080019c0 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	ADC_Select_Thumb_CH();
 80019c4:	f7ff ffd2 	bl	800196c <ADC_Select_Thumb_CH>
	HAL_ADC_Start(&hadc2);
 80019c8:	482f      	ldr	r0, [pc, #188]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019ca:	f001 ff5b 	bl	8003884 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80019ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d2:	482d      	ldr	r0, [pc, #180]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019d4:	f002 f844 	bl	8003a60 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc2);
 80019d8:	482b      	ldr	r0, [pc, #172]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019da:	f002 f919 	bl	8003c10 <HAL_ADC_GetValue>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 80019e2:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc2);
 80019e4:	4828      	ldr	r0, [pc, #160]	; (8001a88 <ADC_ReadCurrent_Thumb+0xc8>)
 80019e6:	f002 f807 	bl	80039f8 <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*Current_motor[5]))/1.01;
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 80019ec:	8a1b      	ldrh	r3, [r3, #16]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd81 	bl	8000504 <__aeabi_ui2d>
 8001a02:	a31d      	add	r3, pc, #116	; (adr r3, 8001a78 <ADC_ReadCurrent_Thumb+0xb8>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc3a 	bl	800028c <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	a317      	add	r3, pc, #92	; (adr r3, 8001a80 <ADC_ReadCurrent_Thumb+0xc0>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe ff11 	bl	800084c <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8b9 	bl	8000ba8 <__aeabi_d2uiz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a3c:	821a      	strh	r2, [r3, #16]
	Current_motor[5]=Fingers_Status.Thumb.Current;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a40:	8a1b      	ldrh	r3, [r3, #16]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <ADC_ReadCurrent_Thumb+0xcc>)
 8001a46:	615a      	str	r2, [r3, #20]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a4a:	8a1b      	ldrh	r3, [r3, #16]
 8001a4c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d804      	bhi.n	8001a5e <ADC_ReadCurrent_Thumb+0x9e>
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a56:	8a1b      	ldrh	r3, [r3, #16]
 8001a58:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a5c:	d203      	bcs.n	8001a66 <ADC_ReadCurrent_Thumb+0xa6>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	735a      	strb	r2, [r3, #13]
 8001a64:	e003      	b.n	8001a6e <ADC_ReadCurrent_Thumb+0xae>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	735a      	strb	r2, [r3, #13]
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	47ae147b 	.word	0x47ae147b
 8001a7c:	3f847ae1 	.word	0x3f847ae1
 8001a80:	c28f5c29 	.word	0xc28f5c29
 8001a84:	3ff028f5 	.word	0x3ff028f5
 8001a88:	200002f4 	.word	0x200002f4
 8001a8c:	20001644 	.word	0x20001644
 8001a90:	200015e0 	.word	0x200015e0

08001a94 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <MX_CAN1_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ab6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_CAN1_Init+0x64>)
 8001ae4:	f002 ff0c 	bl	8004900 <HAL_CAN_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001aee:	f000 fad5 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000035c 	.word	0x2000035c
 8001afc:	40006400 	.word	0x40006400

08001b00 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_CAN_MspInit+0x80>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d129      	bne.n	8001b76 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_CAN_MspInit+0x84>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b64:	2309      	movs	r3, #9
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f003 f8a3 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40006400 	.word	0x40006400
 8001b84:	40021000 	.word	0x40021000

08001b88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_T */
  ThumbFinger_THandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_T_attributes);
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_FREERTOS_Init+0x68>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <MX_FREERTOS_Init+0x6c>)
 8001b92:	f007 f8b7 	bl	8008d04 <osThreadNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <MX_FREERTOS_Init+0x70>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_T */
  IndexFinger_THandle = osThreadNew(IndexFinger, NULL, &IndexFinger_T_attributes);
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <MX_FREERTOS_Init+0x74>)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4817      	ldr	r0, [pc, #92]	; (8001c00 <MX_FREERTOS_Init+0x78>)
 8001ba2:	f007 f8af 	bl	8008d04 <osThreadNew>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <MX_FREERTOS_Init+0x7c>)
 8001baa:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_T */
  MiddleFinger_THandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_T_attributes);
 8001bac:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <MX_FREERTOS_Init+0x80>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <MX_FREERTOS_Init+0x84>)
 8001bb2:	f007 f8a7 	bl	8008d04 <osThreadNew>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <MX_FREERTOS_Init+0x88>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* creation of RingFinger_T */
  RingFinger_THandle = osThreadNew(RingFinger, NULL, &RingFinger_T_attributes);
 8001bbc:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <MX_FREERTOS_Init+0x8c>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_FREERTOS_Init+0x90>)
 8001bc2:	f007 f89f 	bl	8008d04 <osThreadNew>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <MX_FREERTOS_Init+0x94>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_T */
  PinkyFinger_THandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_T_attributes);
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <MX_FREERTOS_Init+0x98>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_FREERTOS_Init+0x9c>)
 8001bd2:	f007 f897 	bl	8008d04 <osThreadNew>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <MX_FREERTOS_Init+0xa0>)
 8001bda:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <MX_FREERTOS_Init+0xa4>)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <MX_FREERTOS_Init+0xa8>)
 8001be2:	f007 f88f 	bl	8008d04 <osThreadNew>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_FREERTOS_Init+0xac>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	0800fb58 	.word	0x0800fb58
 8001bf4:	08001c39 	.word	0x08001c39
 8001bf8:	20000384 	.word	0x20000384
 8001bfc:	0800fb7c 	.word	0x0800fb7c
 8001c00:	08001c69 	.word	0x08001c69
 8001c04:	20000630 	.word	0x20000630
 8001c08:	0800fba0 	.word	0x0800fba0
 8001c0c:	08001c9d 	.word	0x08001c9d
 8001c10:	200008dc 	.word	0x200008dc
 8001c14:	0800fbc4 	.word	0x0800fbc4
 8001c18:	08001cd5 	.word	0x08001cd5
 8001c1c:	20000b88 	.word	0x20000b88
 8001c20:	0800fbe8 	.word	0x0800fbe8
 8001c24:	08001d0d 	.word	0x08001d0d
 8001c28:	20000e34 	.word	0x20000e34
 8001c2c:	0800fc0c 	.word	0x0800fc0c
 8001c30:	08001d45 	.word	0x08001d45
 8001c34:	200010e0 	.word	0x200010e0

08001c38 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThumbFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Thumb.Stuck_Finger)
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <ThumbFinger+0x2c>)
 8001c42:	7b5b      	ldrb	r3, [r3, #13]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <ThumbFinger+0x16>
			Fingers_Status.Thumb.Direction=Stop;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <ThumbFinger+0x2c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	729a      	strb	r2, [r3, #10]
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001c4e:	4905      	ldr	r1, [pc, #20]	; (8001c64 <ThumbFinger+0x2c>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f001 f819 	bl	8002c88 <SetMotor>
		ADC_ReadCurrent_Thumb();
 8001c56:	f7ff feb3 	bl	80019c0 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f007 f8e4 	bl	8008e28 <osDelay>
		if(Fingers_Status.Thumb.Stuck_Finger)
 8001c60:	e7ee      	b.n	8001c40 <ThumbFinger+0x8>
 8001c62:	bf00      	nop
 8001c64:	200015e0 	.word	0x200015e0

08001c68 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IndexFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Index.Stuck_Finger)
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <IndexFinger+0x2c>)
 8001c72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <IndexFinger+0x18>
			Fingers_Status.Index.Direction=Stop;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <IndexFinger+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	779a      	strb	r2, [r3, #30]
		SetMotor(Index, &Fingers_Status.Index);
 8001c80:	4905      	ldr	r1, [pc, #20]	; (8001c98 <IndexFinger+0x30>)
 8001c82:	2001      	movs	r0, #1
 8001c84:	f001 f800 	bl	8002c88 <SetMotor>
		ADC_ReadCurrent_Index();
 8001c88:	f7ff fe06 	bl	8001898 <ADC_ReadCurrent_Index>
		osDelay(1);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f007 f8cb 	bl	8008e28 <osDelay>
		if(Fingers_Status.Index.Stuck_Finger)
 8001c92:	e7ed      	b.n	8001c70 <IndexFinger+0x8>
 8001c94:	200015e0 	.word	0x200015e0
 8001c98:	200015f4 	.word	0x200015f4

08001c9c <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiddleFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Middle.Stuck_Finger)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MiddleFinger+0x30>)
 8001ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <MiddleFinger+0x1a>
			Fingers_Status.Middle.Direction=Stop;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MiddleFinger+0x30>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		SetMotor(Middle, &Fingers_Status.Middle);
 8001cb6:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <MiddleFinger+0x34>)
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 ffe5 	bl	8002c88 <SetMotor>
		ADC_ReadCurrent_Middle();
 8001cbe:	f7ff fd57 	bl	8001770 <ADC_ReadCurrent_Middle>
		osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f007 f8b0 	bl	8008e28 <osDelay>
		if(Fingers_Status.Middle.Stuck_Finger)
 8001cc8:	e7ec      	b.n	8001ca4 <MiddleFinger+0x8>
 8001cca:	bf00      	nop
 8001ccc:	200015e0 	.word	0x200015e0
 8001cd0:	20001608 	.word	0x20001608

08001cd4 <RingFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RingFinger */
void RingFinger(void *argument)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RingFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Ring.Stuck_Finger)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <RingFinger+0x30>)
 8001cde:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <RingFinger+0x1a>
			Fingers_Status.Ring.Direction=Stop;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <RingFinger+0x30>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		SetMotor(Ring, &Fingers_Status.Ring);
 8001cee:	4906      	ldr	r1, [pc, #24]	; (8001d08 <RingFinger+0x34>)
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 ffc9 	bl	8002c88 <SetMotor>
		ADC_ReadCurrent_Ring();
 8001cf6:	f7ff fca3 	bl	8001640 <ADC_ReadCurrent_Ring>
		osDelay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f007 f894 	bl	8008e28 <osDelay>
		if(Fingers_Status.Ring.Stuck_Finger)
 8001d00:	e7ec      	b.n	8001cdc <RingFinger+0x8>
 8001d02:	bf00      	nop
 8001d04:	200015e0 	.word	0x200015e0
 8001d08:	2000161c 	.word	0x2000161c

08001d0c <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PinkyFinger */
	/* Infinite loop */
	for(;;)
	{
		if(Fingers_Status.Pinky.Stuck_Finger)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <PinkyFinger+0x30>)
 8001d16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <PinkyFinger+0x1a>
			Fingers_Status.Pinky.Direction=Stop;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <PinkyFinger+0x30>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001d26:	4906      	ldr	r1, [pc, #24]	; (8001d40 <PinkyFinger+0x34>)
 8001d28:	2004      	movs	r0, #4
 8001d2a:	f000 ffad 	bl	8002c88 <SetMotor>
		ADC_ReadCurrent_Pinky();
 8001d2e:	f7ff fbef 	bl	8001510 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f007 f878 	bl	8008e28 <osDelay>
		if(Fingers_Status.Pinky.Stuck_Finger)
 8001d38:	e7ec      	b.n	8001d14 <PinkyFinger+0x8>
 8001d3a:	bf00      	nop
 8001d3c:	200015e0 	.word	0x200015e0
 8001d40:	20001630 	.word	0x20001630

08001d44 <CommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 8001d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d48:	b09a      	sub	sp, #104	; 0x68
 8001d4a:	af08      	add	r7, sp, #32
 8001d4c:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN CommunicationTask */
	char uartTX[50];
	/* Infinite loop */
	for(;;)
	{
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <CommunicationTask+0xe0>)
 8001d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001d54:	461c      	mov	r4, r3
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <CommunicationTask+0xe0>)
 8001d58:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <CommunicationTask+0xe0>)
 8001d60:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <CommunicationTask+0xe0>)
 8001d66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <CommunicationTask+0xe0>)
 8001d6c:	8a1b      	ldrh	r3, [r3, #16]
 8001d6e:	f107 0014 	add.w	r0, r7, #20
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	9101      	str	r1, [sp, #4]
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	462b      	mov	r3, r5
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	492a      	ldr	r1, [pc, #168]	; (8001e28 <CommunicationTask+0xe4>)
 8001d7e:	f00b f829 	bl	800cdd4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fa72 	bl	8000270 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f107 0114 	add.w	r1, r7, #20
 8001d94:	2305      	movs	r3, #5
 8001d96:	4825      	ldr	r0, [pc, #148]	; (8001e2c <CommunicationTask+0xe8>)
 8001d98:	f005 fef4 	bl	8007b84 <HAL_UART_Transmit>
		sprintf(uartTX,"{PP:%.2fPR:%.2fPM:%.2fPI:%.2fPT:%.2f}\n",Fingers_Status.Pinky.position,Fingers_Status.Ring.position,Fingers_Status.Middle.position,Fingers_Status.Index.position,Fingers_Status.Thumb.position);
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <CommunicationTask+0xe0>)
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbd1 	bl	8000548 <__aeabi_f2d>
 8001da6:	e9c7 0100 	strd	r0, r1, [r7]
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <CommunicationTask+0xe0>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbca 	bl	8000548 <__aeabi_f2d>
 8001db4:	4604      	mov	r4, r0
 8001db6:	460d      	mov	r5, r1
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <CommunicationTask+0xe0>)
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbc3 	bl	8000548 <__aeabi_f2d>
 8001dc2:	4680      	mov	r8, r0
 8001dc4:	4689      	mov	r9, r1
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <CommunicationTask+0xe0>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbbc 	bl	8000548 <__aeabi_f2d>
 8001dd0:	4682      	mov	sl, r0
 8001dd2:	468b      	mov	fp, r1
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <CommunicationTask+0xe0>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbb5 	bl	8000548 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	f107 0014 	add.w	r0, r7, #20
 8001de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001dea:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001dee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001df2:	e9cd 4500 	strd	r4, r5, [sp]
 8001df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dfa:	490d      	ldr	r1, [pc, #52]	; (8001e30 <CommunicationTask+0xec>)
 8001dfc:	f00a ffea 	bl	800cdd4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fa33 	bl	8000270 <strlen>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f107 0114 	add.w	r1, r7, #20
 8001e12:	2305      	movs	r3, #5
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <CommunicationTask+0xe8>)
 8001e16:	f005 feb5 	bl	8007b84 <HAL_UART_Transmit>
		osDelay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f007 f804 	bl	8008e28 <osDelay>
		sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001e20:	e795      	b.n	8001d4e <CommunicationTask+0xa>
 8001e22:	bf00      	nop
 8001e24:	200015e0 	.word	0x200015e0
 8001e28:	0800faf8 	.word	0x0800faf8
 8001e2c:	20001558 	.word	0x20001558
 8001e30:	0800fb18 	.word	0x0800fb18

08001e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <MX_GPIO_Init+0xf8>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001eb0:	481f      	ldr	r0, [pc, #124]	; (8001f30 <MX_GPIO_Init+0xfc>)
 8001eb2:	f003 f8ad 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001eb6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4818      	ldr	r0, [pc, #96]	; (8001f30 <MX_GPIO_Init+0xfc>)
 8001ed0:	f002 fef4 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001ed4:	2330      	movs	r3, #48	; 0x30
 8001ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <MX_GPIO_Init+0xfc>)
 8001ee8:	f002 fee8 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001eec:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001ef0:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_GPIO_Init+0x100>)
 8001f02:	f002 fedb 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f002 fecd 	bl	8004cbc <HAL_GPIO_Init>

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000400 	.word	0x48000400

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f001 f8e7 	bl	800310e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f40:	f000 f81f 	bl	8001f82 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f44:	f000 f86c 	bl	8002020 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f48:	f7ff ff74 	bl	8001e34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f4c:	f7ff f92a 	bl	80011a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f50:	f7ff f99e 	bl	8001290 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001f54:	f7ff fd9e 	bl	8001a94 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001f58:	f000 fa40 	bl	80023dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f5c:	f000 fada 	bl	8002514 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f60:	f000 fb46 	bl	80025f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f64:	f000 fbaa 	bl	80026bc <MX_TIM4_Init>
  MX_TIM8_Init();
 8001f68:	f000 fc0e 	bl	8002788 <MX_TIM8_Init>
  MX_UART4_Init();
 8001f6c:	f000 fde0 	bl	8002b30 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  init_motor_controller();
 8001f70:	f001 f83e 	bl	8002ff0 <init_motor_controller>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f74:	f006 fe7c 	bl	8008c70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f78:	f7ff fe06 	bl	8001b88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f7c:	f006 fe9c 	bl	8008cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <main+0x48>

08001f82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b096      	sub	sp, #88	; 0x58
 8001f86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2244      	movs	r2, #68	; 0x44
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00a ff82 	bl	800ce9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fa4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fa8:	f003 f858 	bl	800505c <HAL_PWREx_ControlVoltageScaling>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fb2:	f000 f873 	bl	800209c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f891 	bl	8005108 <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001fec:	f000 f856 	bl	800209c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fc59 	bl	80058c0 <HAL_RCC_ClockConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002014:	f000 f842 	bl	800209c <Error_Handler>
  }
}
 8002018:	bf00      	nop
 800201a:	3758      	adds	r7, #88	; 0x58
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0a2      	sub	sp, #136	; 0x88
 8002024:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2288      	movs	r2, #136	; 0x88
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f00a ff34 	bl	800ce9a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002032:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002036:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800203c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800203e:	2303      	movs	r3, #3
 8002040:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002046:	2308      	movs	r3, #8
 8002048:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800204a:	2307      	movs	r3, #7
 800204c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800204e:	2302      	movs	r3, #2
 8002050:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002052:	2302      	movs	r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fe84 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800206a:	f000 f817 	bl	800209c <Error_Handler>
  }
}
 800206e:	bf00      	nop
 8002070:	3788      	adds	r7, #136	; 0x88
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800208a:	f001 f859 	bl	8003140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40001400 	.word	0x40001400

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020a0:	b672      	cpsid	i
}
 80020a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <Error_Handler+0x8>
	...

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_MspInit+0x4c>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	4a10      	ldr	r2, [pc, #64]	; (80020f4 <HAL_MspInit+0x4c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_MspInit+0x4c>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_MspInit+0x4c>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_MspInit+0x4c>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_MspInit+0x4c>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	210f      	movs	r1, #15
 80020e2:	f06f 0001 	mvn.w	r0, #1
 80020e6:	f002 fdbf 	bl	8004c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002106:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_InitTick+0xe0>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <HAL_InitTick+0xe0>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_InitTick+0xe0>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800211e:	f107 0210 	add.w	r2, r7, #16
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fd8d 	bl	8005c48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002138:	f003 fd5a 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 800213c:	6378      	str	r0, [r7, #52]	; 0x34
 800213e:	e004      	b.n	800214a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002140:	f003 fd56 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8002144:	4603      	mov	r3, r0
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_InitTick+0xe4>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9b      	lsrs	r3, r3, #18
 8002154:	3b01      	subs	r3, #1
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_InitTick+0xe8>)
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_InitTick+0xec>)
 800215c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_InitTick+0xe8>)
 8002160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002164:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_InitTick+0xe8>)
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_InitTick+0xe8>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_InitTick+0xe8>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_InitTick+0xe8>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800217e:	4818      	ldr	r0, [pc, #96]	; (80021e0 <HAL_InitTick+0xe8>)
 8002180:	f004 fab0 	bl	80066e4 <HAL_TIM_Base_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800218a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11b      	bne.n	80021ca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002192:	4813      	ldr	r0, [pc, #76]	; (80021e0 <HAL_InitTick+0xe8>)
 8002194:	f004 fb08 	bl	80067a8 <HAL_TIM_Base_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800219e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d111      	bne.n	80021ca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021a6:	2037      	movs	r0, #55	; 0x37
 80021a8:	f002 fd7a 	bl	8004ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d808      	bhi.n	80021c4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80021b2:	2200      	movs	r2, #0
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	2037      	movs	r0, #55	; 0x37
 80021b8:	f002 fd56 	bl	8004c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_InitTick+0xf0>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e002      	b.n	80021ca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3738      	adds	r7, #56	; 0x38
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	2000138c 	.word	0x2000138c
 80021e4:	40001400 	.word	0x40001400
 80021e8:	20000004 	.word	0x20000004

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <TIM7_IRQHandler+0x10>)
 800221e:	f004 fcf1 	bl	8006c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000138c 	.word	0x2000138c

0800222c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_kill>:

int _kill(int pid, int sig)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002246:	f00a fee3 	bl	800d010 <__errno>
 800224a:	4603      	mov	r3, r0
 800224c:	2216      	movs	r2, #22
 800224e:	601a      	str	r2, [r3, #0]
	return -1;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_exit>:

void _exit (int status)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffe7 	bl	800223c <_kill>
	while (1) {}		/* Make sure we hang here */
 800226e:	e7fe      	b.n	800226e <_exit+0x12>

08002270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00a      	b.n	8002298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002282:	f3af 8000 	nop.w
 8002286:	4601      	mov	r1, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf0      	blt.n	8002282 <_read+0x12>
	}

return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e009      	b.n	80022d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf1      	blt.n	80022bc <_write+0x12>
	}
	return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_close>:

int _close(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
	return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230a:	605a      	str	r2, [r3, #4]
	return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_isatty>:

int _isatty(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	return 1;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <_sbrk+0x5c>)
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <_sbrk+0x60>)
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_sbrk+0x64>)
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <_sbrk+0x68>)
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800237c:	f00a fe48 	bl	800d010 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	220c      	movs	r2, #12
 8002384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e009      	b.n	80023a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <_sbrk+0x64>)
 800239c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20018000 	.word	0x20018000
 80023ac:	00000400 	.word	0x00000400
 80023b0:	200013d8 	.word	0x200013d8
 80023b4:	20003188 	.word	0x20003188

080023b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <SystemInit+0x20>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <SystemInit+0x20>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b096      	sub	sp, #88	; 0x58
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	222c      	movs	r2, #44	; 0x2c
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00a fd46 	bl	800ce9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800240e:	4b3f      	ldr	r3, [pc, #252]	; (800250c <MX_TIM1_Init+0x130>)
 8002410:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <MX_TIM1_Init+0x134>)
 8002412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <MX_TIM1_Init+0x130>)
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b3c      	ldr	r3, [pc, #240]	; (800250c <MX_TIM1_Init+0x130>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <MX_TIM1_Init+0x130>)
 8002422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <MX_TIM1_Init+0x130>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <MX_TIM1_Init+0x130>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b35      	ldr	r3, [pc, #212]	; (800250c <MX_TIM1_Init+0x130>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800243a:	4834      	ldr	r0, [pc, #208]	; (800250c <MX_TIM1_Init+0x130>)
 800243c:	f004 fa85 	bl	800694a <HAL_TIM_PWM_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002446:	f7ff fe29 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002456:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800245a:	4619      	mov	r1, r3
 800245c:	482b      	ldr	r0, [pc, #172]	; (800250c <MX_TIM1_Init+0x130>)
 800245e:	f005 fa1f 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002468:	f7ff fe18 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246c:	2360      	movs	r3, #96	; 0x60
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	4619      	mov	r1, r3
 8002490:	481e      	ldr	r0, [pc, #120]	; (800250c <MX_TIM1_Init+0x130>)
 8002492:	f004 fd33 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800249c:	f7ff fdfe 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a4:	2204      	movs	r2, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4818      	ldr	r0, [pc, #96]	; (800250c <MX_TIM1_Init+0x130>)
 80024aa:	f004 fd27 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80024b4:	f7ff fdf2 	bl	800209c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4807      	ldr	r0, [pc, #28]	; (800250c <MX_TIM1_Init+0x130>)
 80024ee:	f005 fa5f 	bl	80079b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80024f8:	f7ff fdd0 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <MX_TIM1_Init+0x130>)
 80024fe:	f000 fa4d 	bl	800299c <HAL_TIM_MspPostInit>

}
 8002502:	bf00      	nop
 8002504:	3758      	adds	r7, #88	; 0x58
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200013dc 	.word	0x200013dc
 8002510:	40012c00 	.word	0x40012c00

08002514 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	615a      	str	r2, [r3, #20]
 8002536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <MX_TIM2_Init+0xd8>)
 800253a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <MX_TIM2_Init+0xd8>)
 800254e:	f04f 32ff 	mov.w	r2, #4294967295
 8002552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <MX_TIM2_Init+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002560:	4822      	ldr	r0, [pc, #136]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002562:	f004 f9f2 	bl	800694a <HAL_TIM_PWM_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800256c:	f7ff fd96 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002570:	481e      	ldr	r0, [pc, #120]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002572:	f004 f989 	bl	8006888 <HAL_TIM_OC_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800257c:	f7ff fd8e 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	4817      	ldr	r0, [pc, #92]	; (80025ec <MX_TIM2_Init+0xd8>)
 8002590:	f005 f986 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800259a:	f7ff fd7f 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259e:	2360      	movs	r3, #96	; 0x60
 80025a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	2208      	movs	r2, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	480d      	ldr	r0, [pc, #52]	; (80025ec <MX_TIM2_Init+0xd8>)
 80025b6:	f004 fca1 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80025c0:	f7ff fd6c 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80025c4:	2300      	movs	r3, #0
 80025c6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025c8:	463b      	mov	r3, r7
 80025ca:	220c      	movs	r2, #12
 80025cc:	4619      	mov	r1, r3
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <MX_TIM2_Init+0xd8>)
 80025d0:	f004 fc1a 	bl	8006e08 <HAL_TIM_OC_ConfigChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80025da:	f7ff fd5f 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <MX_TIM2_Init+0xd8>)
 80025e0:	f000 f9dc 	bl	800299c <HAL_TIM_MspPostInit>

}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	; 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20001428 	.word	0x20001428

080025f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	463b      	mov	r3, r7
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <MX_TIM3_Init+0xc8>)
 8002618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <MX_TIM3_Init+0xc4>)
 800261c:	2200      	movs	r2, #0
 800261e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002626:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800263a:	481e      	ldr	r0, [pc, #120]	; (80026b4 <MX_TIM3_Init+0xc4>)
 800263c:	f004 f985 	bl	800694a <HAL_TIM_PWM_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002646:	f7ff fd29 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	4816      	ldr	r0, [pc, #88]	; (80026b4 <MX_TIM3_Init+0xc4>)
 800265a:	f005 f921 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002664:	f7ff fd1a 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002668:	2360      	movs	r3, #96	; 0x60
 800266a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002680:	f004 fc3c 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800268a:	f7ff fd07 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800268e:	463b      	mov	r3, r7
 8002690:	2204      	movs	r2, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <MX_TIM3_Init+0xc4>)
 8002696:	f004 fc31 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80026a0:	f7ff fcfc 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <MX_TIM3_Init+0xc4>)
 80026a6:	f000 f979 	bl	800299c <HAL_TIM_MspPostInit>

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20001474 	.word	0x20001474
 80026b8:	40000400 	.word	0x40000400

080026bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	463b      	mov	r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <MX_TIM4_Init+0xc4>)
 80026e2:	4a28      	ldr	r2, [pc, #160]	; (8002784 <MX_TIM4_Init+0xc8>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <MX_TIM4_Init+0xc4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b24      	ldr	r3, [pc, #144]	; (8002780 <MX_TIM4_Init+0xc4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <MX_TIM4_Init+0xc4>)
 80026f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <MX_TIM4_Init+0xc4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MX_TIM4_Init+0xc4>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002706:	481e      	ldr	r0, [pc, #120]	; (8002780 <MX_TIM4_Init+0xc4>)
 8002708:	f004 f91f 	bl	800694a <HAL_TIM_PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002712:	f7ff fcc3 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	4816      	ldr	r0, [pc, #88]	; (8002780 <MX_TIM4_Init+0xc4>)
 8002726:	f005 f8bb 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002730:	f7ff fcb4 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002734:	2360      	movs	r3, #96	; 0x60
 8002736:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	4619      	mov	r1, r3
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <MX_TIM4_Init+0xc4>)
 800274c:	f004 fbd6 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002756:	f7ff fca1 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800275a:	463b      	mov	r3, r7
 800275c:	2204      	movs	r2, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <MX_TIM4_Init+0xc4>)
 8002762:	f004 fbcb 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800276c:	f7ff fc96 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <MX_TIM4_Init+0xc4>)
 8002772:	f000 f913 	bl	800299c <HAL_TIM_MspPostInit>

}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200014c0 	.word	0x200014c0
 8002784:	40000800 	.word	0x40000800

08002788 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	615a      	str	r2, [r3, #20]
 80027ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	222c      	movs	r2, #44	; 0x2c
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f00a fb70 	bl	800ce9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027bc:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <MX_TIM8_Init+0x134>)
 80027be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027e6:	4834      	ldr	r0, [pc, #208]	; (80028b8 <MX_TIM8_Init+0x130>)
 80027e8:	f004 f8af 	bl	800694a <HAL_TIM_PWM_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80027f2:	f7ff fc53 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002802:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002806:	4619      	mov	r1, r3
 8002808:	482b      	ldr	r0, [pc, #172]	; (80028b8 <MX_TIM8_Init+0x130>)
 800280a:	f005 f849 	bl	80078a0 <HAL_TIMEx_MasterConfigSynchronization>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002814:	f7ff fc42 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002818:	2360      	movs	r3, #96	; 0x60
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	481e      	ldr	r0, [pc, #120]	; (80028b8 <MX_TIM8_Init+0x130>)
 800283e:	f004 fb5d 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002848:	f7ff fc28 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800284c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002850:	2204      	movs	r2, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4818      	ldr	r0, [pc, #96]	; (80028b8 <MX_TIM8_Init+0x130>)
 8002856:	f004 fb51 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002860:	f7ff fc1c 	bl	800209c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <MX_TIM8_Init+0x130>)
 800289a:	f005 f889 	bl	80079b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80028a4:	f7ff fbfa 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028a8:	4803      	ldr	r0, [pc, #12]	; (80028b8 <MX_TIM8_Init+0x130>)
 80028aa:	f000 f877 	bl	800299c <HAL_TIM_MspPostInit>

}
 80028ae:	bf00      	nop
 80028b0:	3758      	adds	r7, #88	; 0x58
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000150c 	.word	0x2000150c
 80028bc:	40013400 	.word	0x40013400

080028c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <HAL_TIM_PWM_MspInit+0xc8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10c      	bne.n	80028ec <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	4a2d      	ldr	r2, [pc, #180]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 80028d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028dc:	6613      	str	r3, [r2, #96]	; 0x60
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80028ea:	e046      	b.n	800297a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d10c      	bne.n	8002910 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6593      	str	r3, [r2, #88]	; 0x58
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	69bb      	ldr	r3, [r7, #24]
}
 800290e:	e034      	b.n	800297a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_TIM_PWM_MspInit+0xd0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10c      	bne.n	8002934 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6593      	str	r3, [r2, #88]	; 0x58
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
}
 8002932:	e022      	b.n	800297a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_TIM_PWM_MspInit+0xd4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10c      	bne.n	8002958 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
}
 8002956:	e010      	b.n	800297a <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_TIM_PWM_MspInit+0xd8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10b      	bne.n	800297a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296c:	6613      	str	r3, [r2, #96]	; 0x60
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_TIM_PWM_MspInit+0xcc>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	bf00      	nop
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40013400 	.word	0x40013400

0800299c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_TIM_MspPostInit+0x178>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11e      	bne.n	80029fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 80029d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f6:	f002 f961 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80029fa:	e087      	b.n	8002b0c <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d11d      	bne.n	8002a42 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 8002a1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4838      	ldr	r0, [pc, #224]	; (8002b1c <HAL_TIM_MspPostInit+0x180>)
 8002a3c:	f002 f93e 	bl	8004cbc <HAL_GPIO_Init>
}
 8002a40:	e064      	b.n	8002b0c <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <HAL_TIM_MspPostInit+0x184>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d11c      	bne.n	8002a86 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	4a31      	ldr	r2, [pc, #196]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 8002a64:	2330      	movs	r3, #48	; 0x30
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a74:	2302      	movs	r3, #2
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4827      	ldr	r0, [pc, #156]	; (8002b1c <HAL_TIM_MspPostInit+0x180>)
 8002a80:	f002 f91c 	bl	8004cbc <HAL_GPIO_Init>
}
 8002a84:	e042      	b.n	8002b0c <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_TIM_MspPostInit+0x188>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d11c      	bne.n	8002aca <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4a20      	ldr	r2, [pc, #128]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 8002aa8:	23c0      	movs	r3, #192	; 0xc0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4816      	ldr	r0, [pc, #88]	; (8002b1c <HAL_TIM_MspPostInit+0x180>)
 8002ac4:	f002 f8fa 	bl	8004cbc <HAL_GPIO_Init>
}
 8002ac8:	e020      	b.n	8002b0c <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIM_MspPostInit+0x18c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_TIM_MspPostInit+0x17c>)
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002afc:	2303      	movs	r3, #3
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_TIM_MspPostInit+0x190>)
 8002b08:	f002 f8d8 	bl	8004cbc <HAL_GPIO_Init>
}
 8002b0c:	bf00      	nop
 8002b0e:	3730      	adds	r7, #48	; 0x30
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	48000800 	.word	0x48000800

08002b30 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <MX_UART4_Init+0x5c>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <MX_UART4_Init+0x58>)
 8002b74:	f004 ffb8 	bl	8007ae8 <HAL_UART_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002b7e:	f7ff fa8d 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20001558 	.word	0x20001558
 8002b8c:	40004c00 	.word	0x40004c00

08002b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0ac      	sub	sp, #176	; 0xb0
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2288      	movs	r2, #136	; 0x88
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00a f972 	bl	800ce9a <memset>
  if(uartHandle->Instance==UART4)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_UART_MspInit+0xb0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d13b      	bne.n	8002c38 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f8cd 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bd8:	f7ff fa60 	bl	800209c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_UART_MspInit+0xb4>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_TX_ESP_RX_Pin|MCU_RX_ESP_TX_Pin;
 8002c0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c26:	2308      	movs	r3, #8
 8002c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c30:	4619      	mov	r1, r3
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <HAL_UART_MspInit+0xb8>)
 8002c34:	f002 f842 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002c38:	bf00      	nop
 8002c3a:	37b0      	adds	r7, #176	; 0xb0
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40004c00 	.word	0x40004c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000800 	.word	0x48000800

08002c4c <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <SetMotor>:
	}
}
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	f200 819f 	bhi.w	8002fda <SetMotor+0x352>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <SetMotor+0x1c>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb9 	.word	0x08002cb9
 8002ca8:	08002d45 	.word	0x08002d45
 8002cac:	08002dd9 	.word	0x08002dd9
 8002cb0:	08002e75 	.word	0x08002e75
 8002cb4:	08002f09 	.word	0x08002f09
	case Thumb :
		if ( FingerStruct->Direction== Open) {
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7a9b      	ldrb	r3, [r3, #10]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10e      	bne.n	8002cde <SetMotor+0x56>
			htim3.Instance->CCR1 = FingerStruct->speed;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7b9a      	ldrb	r2, [r3, #14]
 8002cc4:	4b9b      	ldr	r3, [pc, #620]	; (8002f34 <SetMotor+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8002cca:	4b9a      	ldr	r3, [pc, #616]	; (8002f34 <SetMotor+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor5_GPIO_Port, IN1_Motor5_Pin,1);
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	4898      	ldr	r0, [pc, #608]	; (8002f38 <SetMotor+0x2b0>)
 8002cd8:	f002 f99a 	bl	8005010 <HAL_GPIO_WritePin>
 8002cdc:	e024      	b.n	8002d28 <SetMotor+0xa0>
		} else if (FingerStruct->Direction == Close) {
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	7a9b      	ldrb	r3, [r3, #10]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d10e      	bne.n	8002d04 <SetMotor+0x7c>
			htim3.Instance->CCR2 = FingerStruct->speed;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7b9a      	ldrb	r2, [r3, #14]
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <SetMotor+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 8002cf0:	4b90      	ldr	r3, [pc, #576]	; (8002f34 <SetMotor+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor5_GPIO_Port, IN2_Motor5_Pin,1);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	488e      	ldr	r0, [pc, #568]	; (8002f38 <SetMotor+0x2b0>)
 8002cfe:	f002 f987 	bl	8005010 <HAL_GPIO_WritePin>
 8002d02:	e011      	b.n	8002d28 <SetMotor+0xa0>
		} else {
			htim3.Instance->CCR1 =0;
 8002d04:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <SetMotor+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8002d0c:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <SetMotor+0x2ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor5_GPIO_Port, IN2_Motor5_Pin,1);
 8002d14:	2201      	movs	r2, #1
 8002d16:	2110      	movs	r1, #16
 8002d18:	4887      	ldr	r0, [pc, #540]	; (8002f38 <SetMotor+0x2b0>)
 8002d1a:	f002 f979 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor5_GPIO_Port, IN1_Motor5_Pin,1);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2120      	movs	r1, #32
 8002d22:	4885      	ldr	r0, [pc, #532]	; (8002f38 <SetMotor+0x2b0>)
 8002d24:	f002 f974 	bl	8005010 <HAL_GPIO_WritePin>
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	891b      	ldrh	r3, [r3, #8]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002f3c <SetMotor+0x2b4>
 8002d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002d42:	e14b      	b.n	8002fdc <SetMotor+0x354>
	case Index :
		if ( FingerStruct->Direction== Open) {
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	7a9b      	ldrb	r3, [r3, #10]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10e      	bne.n	8002d6a <SetMotor+0xe2>
			htim4.Instance->CCR1 = FingerStruct->speed;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	7b9a      	ldrb	r2, [r3, #14]
 8002d50:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <SetMotor+0x2b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8002d56:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <SetMotor+0x2b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor4_GPIO_Port, IN1_Motor4_Pin,1);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	4875      	ldr	r0, [pc, #468]	; (8002f38 <SetMotor+0x2b0>)
 8002d64:	f002 f954 	bl	8005010 <HAL_GPIO_WritePin>
 8002d68:	e024      	b.n	8002db4 <SetMotor+0x12c>
		} else if (FingerStruct->Direction == Close) {
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	7a9b      	ldrb	r3, [r3, #10]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d10e      	bne.n	8002d90 <SetMotor+0x108>
			htim4.Instance->CCR2 = FingerStruct->speed;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	7b9a      	ldrb	r2, [r3, #14]
 8002d76:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <SetMotor+0x2b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 8002d7c:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <SetMotor+0x2b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor4_GPIO_Port, IN2_Motor4_Pin,1);
 8002d84:	2201      	movs	r2, #1
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	486b      	ldr	r0, [pc, #428]	; (8002f38 <SetMotor+0x2b0>)
 8002d8a:	f002 f941 	bl	8005010 <HAL_GPIO_WritePin>
 8002d8e:	e011      	b.n	8002db4 <SetMotor+0x12c>
		} else {
			htim4.Instance->CCR1 =0;
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <SetMotor+0x2b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8002d98:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <SetMotor+0x2b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor4_GPIO_Port, IN2_Motor4_Pin,1);
 8002da0:	2201      	movs	r2, #1
 8002da2:	2140      	movs	r1, #64	; 0x40
 8002da4:	4864      	ldr	r0, [pc, #400]	; (8002f38 <SetMotor+0x2b0>)
 8002da6:	f002 f933 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor4_GPIO_Port, IN1_Motor4_Pin,1);
 8002daa:	2201      	movs	r2, #1
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	4862      	ldr	r0, [pc, #392]	; (8002f38 <SetMotor+0x2b0>)
 8002db0:	f002 f92e 	bl	8005010 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	891b      	ldrh	r3, [r3, #8]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002f44 <SetMotor+0x2bc>
 8002dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002f3c <SetMotor+0x2b4>
 8002dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002dd6:	e101      	b.n	8002fdc <SetMotor+0x354>
	case Middle :
		if ( FingerStruct->Direction== Open) {
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7a9b      	ldrb	r3, [r3, #10]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10f      	bne.n	8002e00 <SetMotor+0x178>
			htim2.Instance->CCR4 = FingerStruct->speed;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7b9a      	ldrb	r2, [r3, #14]
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <SetMotor+0x2c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 8002dea:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <SetMotor+0x2c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(IN1_Motor3_GPIO_Port, IN1_Motor3_Pin,1);
 8002df2:	2201      	movs	r2, #1
 8002df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df8:	484f      	ldr	r0, [pc, #316]	; (8002f38 <SetMotor+0x2b0>)
 8002dfa:	f002 f909 	bl	8005010 <HAL_GPIO_WritePin>
 8002dfe:	e027      	b.n	8002e50 <SetMotor+0x1c8>
		} else if (FingerStruct->Direction == Close) {
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7a9b      	ldrb	r3, [r3, #10]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d10f      	bne.n	8002e28 <SetMotor+0x1a0>
			htim2.Instance->CCR3 = FingerStruct->speed;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	7b9a      	ldrb	r2, [r3, #14]
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <SetMotor+0x2c0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <SetMotor+0x2c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(IN2_Motor3_GPIO_Port, IN2_Motor3_Pin,1);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e20:	4845      	ldr	r0, [pc, #276]	; (8002f38 <SetMotor+0x2b0>)
 8002e22:	f002 f8f5 	bl	8005010 <HAL_GPIO_WritePin>
 8002e26:	e013      	b.n	8002e50 <SetMotor+0x1c8>
		} else {
			htim2.Instance->CCR3 =0;
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <SetMotor+0x2c0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <SetMotor+0x2c0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(IN2_Motor3_GPIO_Port, IN2_Motor3_Pin,1);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e3e:	483e      	ldr	r0, [pc, #248]	; (8002f38 <SetMotor+0x2b0>)
 8002e40:	f002 f8e6 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor3_GPIO_Port, IN1_Motor3_Pin,1);
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e4a:	483b      	ldr	r0, [pc, #236]	; (8002f38 <SetMotor+0x2b0>)
 8002e4c:	f002 f8e0 	bl	8005010 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	891b      	ldrh	r3, [r3, #8]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002f4c <SetMotor+0x2c4>
 8002e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e64:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002f3c <SetMotor+0x2b4>
 8002e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002e72:	e0b3      	b.n	8002fdc <SetMotor+0x354>
	case Ring :
		if ( FingerStruct->Direction== Open) {
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	7a9b      	ldrb	r3, [r3, #10]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d10e      	bne.n	8002e9a <SetMotor+0x212>
			htim8.Instance->CCR1 = FingerStruct->speed;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	7b9a      	ldrb	r2, [r3, #14]
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <SetMotor+0x2c8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <SetMotor+0x2c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor2_GPIO_Port, IN1_Motor2_Pin,1);
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	4830      	ldr	r0, [pc, #192]	; (8002f54 <SetMotor+0x2cc>)
 8002e94:	f002 f8bc 	bl	8005010 <HAL_GPIO_WritePin>
 8002e98:	e024      	b.n	8002ee4 <SetMotor+0x25c>
		} else if (FingerStruct->Direction == Close) {
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	7a9b      	ldrb	r3, [r3, #10]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d10e      	bne.n	8002ec0 <SetMotor+0x238>
			htim8.Instance->CCR2 = FingerStruct->speed;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	7b9a      	ldrb	r2, [r3, #14]
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <SetMotor+0x2c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <SetMotor+0x2c8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor2_GPIO_Port, IN2_Motor2_Pin,1);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	4826      	ldr	r0, [pc, #152]	; (8002f54 <SetMotor+0x2cc>)
 8002eba:	f002 f8a9 	bl	8005010 <HAL_GPIO_WritePin>
 8002ebe:	e011      	b.n	8002ee4 <SetMotor+0x25c>
		} else {
			htim8.Instance->CCR1 =0;
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <SetMotor+0x2c8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8002ec8:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <SetMotor+0x2c8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor2_GPIO_Port, IN2_Motor2_Pin,1);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	481f      	ldr	r0, [pc, #124]	; (8002f54 <SetMotor+0x2cc>)
 8002ed6:	f002 f89b 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor2_GPIO_Port, IN1_Motor2_Pin,1);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	481d      	ldr	r0, [pc, #116]	; (8002f54 <SetMotor+0x2cc>)
 8002ee0:	f002 f896 	bl	8005010 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	891b      	ldrh	r3, [r3, #8]
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002f58 <SetMotor+0x2d0>
 8002ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f3c <SetMotor+0x2b4>
 8002efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002f06:	e069      	b.n	8002fdc <SetMotor+0x354>
	case Pinky :
		if ( FingerStruct->Direction== Open) {
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7a9b      	ldrb	r3, [r3, #10]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d127      	bne.n	8002f60 <SetMotor+0x2d8>
			htim1.Instance->CCR1 = FingerStruct->speed;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7b9a      	ldrb	r2, [r3, #14]
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <SetMotor+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <SetMotor+0x2d4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN1_Motor1_GPIO_Port, IN1_Motor1_Pin,1);
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2c:	f002 f870 	bl	8005010 <HAL_GPIO_WritePin>
 8002f30:	e041      	b.n	8002fb6 <SetMotor+0x32e>
 8002f32:	bf00      	nop
 8002f34:	20001474 	.word	0x20001474
 8002f38:	48000400 	.word	0x48000400
 8002f3c:	42c80000 	.word	0x42c80000
 8002f40:	200014c0 	.word	0x200014c0
 8002f44:	46d54800 	.word	0x46d54800
 8002f48:	20001428 	.word	0x20001428
 8002f4c:	46e03800 	.word	0x46e03800
 8002f50:	2000150c 	.word	0x2000150c
 8002f54:	48000800 	.word	0x48000800
 8002f58:	46d7a000 	.word	0x46d7a000
 8002f5c:	200013dc 	.word	0x200013dc
		} else if (FingerStruct->Direction == Close) {
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	7a9b      	ldrb	r3, [r3, #10]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d110      	bne.n	8002f8a <SetMotor+0x302>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7b9a      	ldrb	r2, [r3, #14]
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <SetMotor+0x35c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <SetMotor+0x35c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN2_Motor1_GPIO_Port, IN2_Motor1_Pin,1);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f84:	f002 f844 	bl	8005010 <HAL_GPIO_WritePin>
 8002f88:	e015      	b.n	8002fb6 <SetMotor+0x32e>
		} else {
			htim1.Instance->CCR1 =0;
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <SetMotor+0x35c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <SetMotor+0x35c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(IN2_Motor1_GPIO_Port, IN2_Motor1_Pin,1);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa4:	f002 f834 	bl	8005010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN1_Motor1_GPIO_Port, IN1_Motor1_Pin,1);
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb2:	f002 f82d 	bl	8005010 <HAL_GPIO_WritePin>
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	891b      	ldrh	r3, [r3, #8]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fc2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002fe8 <SetMotor+0x360>
 8002fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002fec <SetMotor+0x364>
 8002fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002fd8:	e000      	b.n	8002fdc <SetMotor+0x354>

	default:

		break;
 8002fda:	bf00      	nop
	}
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200013dc 	.word	0x200013dc
 8002fe8:	46cbe800 	.word	0x46cbe800
 8002fec:	42c80000 	.word	0x42c80000

08002ff0 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	//start read data from ADC
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4827      	ldr	r0, [pc, #156]	; (8003094 <init_motor_controller+0xa4>)
 8002ff8:	f003 fcfe 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4825      	ldr	r0, [pc, #148]	; (8003094 <init_motor_controller+0xa4>)
 8003000:	f003 fcfa 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003004:	2108      	movs	r1, #8
 8003006:	4823      	ldr	r0, [pc, #140]	; (8003094 <init_motor_controller+0xa4>)
 8003008:	f003 fcf6 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800300c:	210c      	movs	r1, #12
 800300e:	4821      	ldr	r0, [pc, #132]	; (8003094 <init_motor_controller+0xa4>)
 8003010:	f003 fcf2 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003014:	2100      	movs	r1, #0
 8003016:	4820      	ldr	r0, [pc, #128]	; (8003098 <init_motor_controller+0xa8>)
 8003018:	f003 fcee 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_ADC_MspInit(&hadc1);
 800301c:	481f      	ldr	r0, [pc, #124]	; (800309c <init_motor_controller+0xac>)
 800301e:	f7fe f99b 	bl	8001358 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 8003022:	2201      	movs	r2, #1
 8003024:	491e      	ldr	r1, [pc, #120]	; (80030a0 <init_motor_controller+0xb0>)
 8003026:	481f      	ldr	r0, [pc, #124]	; (80030a4 <init_motor_controller+0xb4>)
 8003028:	f004 fe36 	bl	8007c98 <HAL_UART_Receive_IT>
	TX_State=idel;
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <init_motor_controller+0xb8>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
	// Configure settings
	controller.AntiWindup = ENABLED;
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <init_motor_controller+0xbc>)
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <init_motor_controller+0xbc>)
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <init_motor_controller+0xbc>)
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <init_motor_controller+0xc0>)
 8003046:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <init_motor_controller+0xbc>)
 800304a:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <init_motor_controller+0xc4>)
 800304c:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <init_motor_controller+0xbc>)
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <init_motor_controller+0xc8>)
 8003052:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <init_motor_controller+0xbc>)
 8003056:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800305a:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <init_motor_controller+0xbc>)
 800305e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003062:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 8003064:	4811      	ldr	r0, [pc, #68]	; (80030ac <init_motor_controller+0xbc>)
 8003066:	f7ff fdf1 	bl	8002c4c <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <init_motor_controller+0xbc>)
 800306c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003070:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <init_motor_controller+0xbc>)
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <init_motor_controller+0xc0>)
 8003076:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <init_motor_controller+0xbc>)
 800307a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800307e:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <init_motor_controller+0xbc>)
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <init_motor_controller+0xc8>)
 8003084:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <init_motor_controller+0xbc>)
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200013dc 	.word	0x200013dc
 8003098:	20001428 	.word	0x20001428
 800309c:	20000290 	.word	0x20000290
 80030a0:	2000028e 	.word	0x2000028e
 80030a4:	20001558 	.word	0x20001558
 80030a8:	2000028f 	.word	0x2000028f
 80030ac:	2000165c 	.word	0x2000165c
 80030b0:	42480000 	.word	0x42480000
 80030b4:	c2480000 	.word	0xc2480000
 80030b8:	40400000 	.word	0x40400000

080030bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c0:	f7ff f97a 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80030c6:	490d      	ldr	r1, [pc, #52]	; (80030fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80030c8:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <LoopForever+0xe>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030dc:	4c0a      	ldr	r4, [pc, #40]	; (8003108 <LoopForever+0x16>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ea:	f009 ff97 	bl	800d01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ee:	f7fe ff23 	bl	8001f38 <main>

080030f2 <LoopForever>:

LoopForever:
    b LoopForever
 80030f2:	e7fe      	b.n	80030f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003100:	080100b4 	.word	0x080100b4
  ldr r2, =_sbss
 8003104:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003108:	20003188 	.word	0x20003188

0800310c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800310c:	e7fe      	b.n	800310c <ADC1_2_IRQHandler>

0800310e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003118:	2003      	movs	r0, #3
 800311a:	f001 fd9a 	bl	8004c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800311e:	200f      	movs	r0, #15
 8003120:	f7fe ffea 	bl	80020f8 <HAL_InitTick>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	71fb      	strb	r3, [r7, #7]
 800312e:	e001      	b.n	8003134 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003130:	f7fe ffba 	bl	80020a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003134:	79fb      	ldrb	r3, [r7, #7]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_IncTick+0x20>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_IncTick+0x24>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4413      	add	r3, r2
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <HAL_IncTick+0x24>)
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000008 	.word	0x20000008
 8003164:	20001698 	.word	0x20001698

08003168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_GetTick+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20001698 	.word	0x20001698

08003180 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <LL_ADC_SetOffset+0x44>)
 800320a:	4013      	ands	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	4313      	orrs	r3, r2
 8003218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	03fff000 	.word	0x03fff000

08003230 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	461a      	mov	r2, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3360      	adds	r3, #96	; 0x60
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3330      	adds	r3, #48	; 0x30
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	211f      	movs	r1, #31
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0e9b      	lsrs	r3, r3, #26
 80032f0:	f003 011f 	and.w	r1, r3, #31
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	431a      	orrs	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3314      	adds	r3, #20
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	0e5b      	lsrs	r3, r3, #25
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	0d1b      	lsrs	r3, r3, #20
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2107      	movs	r1, #7
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0d1b      	lsrs	r3, r3, #20
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0318 	and.w	r3, r3, #24
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800338c:	40d9      	lsrs	r1, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	400b      	ands	r3, r1
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	431a      	orrs	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	0007ffff 	.word	0x0007ffff

080033b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 031f 	and.w	r3, r3, #31
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6093      	str	r3, [r2, #8]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034c0:	f043 0202 	orr.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <LL_ADC_IsEnabled+0x18>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <LL_ADC_IsEnabled+0x1a>
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d101      	bne.n	8003512 <LL_ADC_IsDisableOngoing+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_ADC_IsDisableOngoing+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003534:	f043 0204 	orr.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800355c:	f043 0210 	orr.w	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d101      	bne.n	8003588 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e130      	b.n	8003860 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fd fea3 	bl	8001358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fef1 	bl	800340c <LL_ADC_IsDeepPowerDownEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fed7 	bl	80033e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff0c 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d115      	bne.n	8003676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fef0 	bl	8003434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003654:	4b84      	ldr	r3, [pc, #528]	; (8003868 <HAL_ADC_Init+0x284>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	4a84      	ldr	r2, [pc, #528]	; (800386c <HAL_ADC_Init+0x288>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003668:	e002      	b.n	8003670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f9      	bne.n	800366a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff feee 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	f043 0210 	orr.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff62 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 80c9 	bne.w	800384e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 80c5 	bne.w	800384e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fefb 	bl	80034d4 <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d115      	bne.n	8003710 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e4:	4862      	ldr	r0, [pc, #392]	; (8003870 <HAL_ADC_Init+0x28c>)
 80036e6:	f7ff fef5 	bl	80034d4 <LL_ADC_IsEnabled>
 80036ea:	4604      	mov	r4, r0
 80036ec:	4861      	ldr	r0, [pc, #388]	; (8003874 <HAL_ADC_Init+0x290>)
 80036ee:	f7ff fef1 	bl	80034d4 <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	431c      	orrs	r4, r3
 80036f6:	4860      	ldr	r0, [pc, #384]	; (8003878 <HAL_ADC_Init+0x294>)
 80036f8:	f7ff feec 	bl	80034d4 <LL_ADC_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4323      	orrs	r3, r4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	485c      	ldr	r0, [pc, #368]	; (800387c <HAL_ADC_Init+0x298>)
 800370c:	f7ff fd38 	bl	8003180 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e5b      	ldrb	r3, [r3, #25]
 8003714:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800371a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003720:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003726:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d106      	bne.n	800374c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	3b01      	subs	r3, #1
 8003744:	045b      	lsls	r3, r3, #17
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b44      	ldr	r3, [pc, #272]	; (8003880 <HAL_ADC_Init+0x29c>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	430b      	orrs	r3, r1
 800377a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff1c 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8003786:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d13d      	bne.n	800380a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13a      	bne.n	800380a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003798:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b0:	f023 0302 	bic.w	r3, r3, #2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d118      	bne.n	80037fa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037d2:	f023 0304 	bic.w	r3, r3, #4
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	611a      	str	r2, [r3, #16]
 80037f8:	e007      	b.n	800380a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10c      	bne.n	800382c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f023 010f 	bic.w	r1, r3, #15
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	1e5a      	subs	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
 800382a:	e007      	b.n	800383c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020f 	bic.w	r2, r2, #15
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f023 0303 	bic.w	r3, r3, #3
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
 800384c:	e007      	b.n	800385e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800385e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3724      	adds	r7, #36	; 0x24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	20000000 	.word	0x20000000
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	50040000 	.word	0x50040000
 8003874:	50040100 	.word	0x50040100
 8003878:	50040200 	.word	0x50040200
 800387c:	50040300 	.word	0x50040300
 8003880:	fff0c007 	.word	0xfff0c007

08003884 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800388c:	4857      	ldr	r0, [pc, #348]	; (80039ec <HAL_ADC_Start+0x168>)
 800388e:	f7ff fd8f 	bl	80033b0 <LL_ADC_GetMultimode>
 8003892:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fe69 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 809c 	bne.w	80039de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_Start+0x30>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e097      	b.n	80039e4 <HAL_ADC_Start+0x160>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fe63 	bl	8004588 <ADC_Enable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 8083 	bne.w	80039d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_ADC_Start+0x16c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d002      	beq.n	80038f2 <HAL_ADC_Start+0x6e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e000      	b.n	80038f4 <HAL_ADC_Start+0x70>
 80038f2:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_ADC_Start+0x170>)
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d002      	beq.n	8003902 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391a:	d106      	bne.n	800392a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f023 0206 	bic.w	r2, r3, #6
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	; 0x58
 8003928:	e002      	b.n	8003930 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	221c      	movs	r2, #28
 8003936:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_ADC_Start+0x16c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d002      	beq.n	8003950 <HAL_ADC_Start+0xcc>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	e000      	b.n	8003952 <HAL_ADC_Start+0xce>
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_ADC_Start+0x170>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4293      	cmp	r3, r2
 8003958:	d008      	beq.n	800396c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d002      	beq.n	800396c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b09      	cmp	r3, #9
 800396a:	d114      	bne.n	8003996 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fdc6 	bl	8003520 <LL_ADC_REG_StartConversion>
 8003994:	e025      	b.n	80039e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <HAL_ADC_Start+0x16c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d002      	beq.n	80039b2 <HAL_ADC_Start+0x12e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	e000      	b.n	80039b4 <HAL_ADC_Start+0x130>
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_ADC_Start+0x170>)
 80039b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00f      	beq.n	80039e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
 80039d2:	e006      	b.n	80039e2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039dc:	e001      	b.n	80039e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	50040300 	.word	0x50040300
 80039f0:	50040100 	.word	0x50040100
 80039f4:	50040000 	.word	0x50040000

080039f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Stop+0x16>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e023      	b.n	8003a56 <HAL_ADC_Stop+0x5e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a16:	2103      	movs	r1, #3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fcf9 	bl	8004410 <ADC_ConversionStop>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fe33 	bl	8004694 <ADC_Disable>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a6a:	4866      	ldr	r0, [pc, #408]	; (8003c04 <HAL_ADC_PollForConversion+0x1a4>)
 8003a6c:	f7ff fca0 	bl	80033b0 <LL_ADC_GetMultimode>
 8003a70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d102      	bne.n	8003a80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e02a      	b.n	8003ad6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d002      	beq.n	8003a92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b09      	cmp	r3, #9
 8003a90:	d111      	bne.n	8003ab6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0a4      	b.n	8003bfa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003ab4:	e00f      	b.n	8003ad6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ab6:	4853      	ldr	r0, [pc, #332]	; (8003c04 <HAL_ADC_PollForConversion+0x1a4>)
 8003ab8:	f7ff fc88 	bl	80033cc <LL_ADC_GetMultiDMATransfer>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e093      	b.n	8003bfa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ad6:	f7ff fb47 	bl	8003168 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003adc:	e021      	b.n	8003b22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d01d      	beq.n	8003b22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ae6:	f7ff fb3f 	bl	8003168 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <HAL_ADC_PollForConversion+0x9c>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d112      	bne.n	8003b22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e06b      	b.n	8003bfa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0d6      	beq.n	8003ade <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fba6 	bl	8003292 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e5b      	ldrb	r3, [r3, #25]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d118      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d111      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <HAL_ADC_PollForConversion+0x1a8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_PollForConversion+0x136>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_PollForConversion+0x138>
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_ADC_PollForConversion+0x1ac>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d002      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d104      	bne.n	8003bbc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e00c      	b.n	8003bd6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_ADC_PollForConversion+0x1a8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d002      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x16c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	e000      	b.n	8003bce <HAL_ADC_PollForConversion+0x16e>
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <HAL_ADC_PollForConversion+0x1ac>)
 8003bce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d104      	bne.n	8003be6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e008      	b.n	8003bf8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	220c      	movs	r2, #12
 8003bf6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	50040300 	.word	0x50040300
 8003c08:	50040100 	.word	0x50040100
 8003c0c:	50040000 	.word	0x50040000

08003c10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0b6      	sub	sp, #216	; 0xd8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x22>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e3c9      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x7b6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fc88 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 83aa 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d824      	bhi.n	8003cc2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d81b      	bhi.n	8003cba <HAL_ADC_ConfigChannel+0x8e>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_ADC_ConfigChannel+0x5c>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003ca9 	.word	0x08003ca9
 8003c94:	08003cb1 	.word	0x08003cb1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c98:	230c      	movs	r3, #12
 8003c9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c9e:	e010      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003ca0:	2312      	movs	r3, #18
 8003ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ca6:	e00c      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003ca8:	2318      	movs	r3, #24
 8003caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003cae:	e008      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003cb8:	e003      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003cba:	2306      	movs	r3, #6
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003cc0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003cd0:	f7ff faf2 	bl	80032b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fc49 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fc69 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8003cec:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f040 81a4 	bne.w	8004042 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 819f 	bne.w	8004042 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	461a      	mov	r2, r3
 8003d12:	f7ff fafd 	bl	8003310 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	08db      	lsrs	r3, r3, #3
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00a      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6919      	ldr	r1, [r3, #16]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d48:	f7ff fa4e 	bl	80031e8 <LL_ADC_SetOffset>
 8003d4c:	e179      	b.n	8004042 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fa6b 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x14e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fa60 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	e01e      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x18c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fa55 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e004      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x1a4>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	e018      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x1d6>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e004      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d106      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fa24 	bl	800325c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fa08 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x214>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff f9fd 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	0e9b      	lsrs	r3, r3, #26
 8003e3a:	f003 021f 	and.w	r2, r3, #31
 8003e3e:	e01e      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x252>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff f9f2 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e004      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x26a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	0e9b      	lsrs	r3, r3, #26
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	e018      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x29c>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003eba:	2320      	movs	r3, #32
 8003ebc:	e004      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d106      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f9c1 	bl	800325c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f9a5 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x2da>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff f99a 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	e01e      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x318>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f98f 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e004      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x330>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	e014      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x35a>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003f78:	2320      	movs	r3, #32
 8003f7a:	e004      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d106      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f962 	bl	800325c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2103      	movs	r1, #3
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f946 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x398>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff f93b 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	f003 021f 	and.w	r2, r3, #31
 8003fc2:	e017      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x3c8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2103      	movs	r1, #3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff f930 	bl	8003230 <LL_ADC_GetOffsetChannel>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003fe6:	2320      	movs	r3, #32
 8003fe8:	e003      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_ADC_ConfigChannel+0x3e0>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0e9b      	lsrs	r3, r3, #26
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	e011      	b.n	8004030 <HAL_ADC_ConfigChannel+0x404>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800401a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800401e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e003      	b.n	8004030 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004030:	429a      	cmp	r2, r3
 8004032:	d106      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	2103      	movs	r1, #3
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f90d 	bl	800325c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fa44 	bl	80034d4 <LL_ADC_IsEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 8140 	bne.w	80042d4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	461a      	mov	r2, r3
 8004062:	f7ff f981 	bl	8003368 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a8f      	ldr	r2, [pc, #572]	; (80042a8 <HAL_ADC_ConfigChannel+0x67c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	f040 8131 	bne.w	80042d4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_ADC_ConfigChannel+0x46e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	3301      	adds	r3, #1
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2b09      	cmp	r3, #9
 8004090:	bf94      	ite	ls
 8004092:	2301      	movls	r3, #1
 8004094:	2300      	movhi	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e019      	b.n	80040ce <HAL_ADC_ConfigChannel+0x4a2>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a2:	fa93 f3a3 	rbit	r3, r3
 80040a6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80040a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80040ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80040b2:	2320      	movs	r3, #32
 80040b4:	e003      	b.n	80040be <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80040b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	3301      	adds	r3, #1
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	bf94      	ite	ls
 80040c8:	2301      	movls	r3, #1
 80040ca:	2300      	movhi	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d079      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d107      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x4c2>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	0e9b      	lsrs	r3, r3, #26
 80040e4:	3301      	adds	r3, #1
 80040e6:	069b      	lsls	r3, r3, #26
 80040e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ec:	e015      	b.n	800411a <HAL_ADC_ConfigChannel+0x4ee>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80040fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004106:	2320      	movs	r3, #32
 8004108:	e003      	b.n	8004112 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3301      	adds	r3, #1
 8004114:	069b      	lsls	r3, r3, #26
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_ADC_ConfigChannel+0x50e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	0e9b      	lsrs	r3, r3, #26
 800412c:	3301      	adds	r3, #1
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	e017      	b.n	800416a <HAL_ADC_ConfigChannel+0x53e>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800414c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004152:	2320      	movs	r3, #32
 8004154:	e003      	b.n	800415e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	ea42 0103 	orr.w	r1, r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x564>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	0e9b      	lsrs	r3, r3, #26
 8004180:	3301      	adds	r3, #1
 8004182:	f003 021f 	and.w	r2, r3, #31
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	051b      	lsls	r3, r3, #20
 800418e:	e018      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x596>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c2:	430b      	orrs	r3, r1
 80041c4:	e081      	b.n	80042ca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x5b6>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	3301      	adds	r3, #1
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e0:	e015      	b.n	800420e <HAL_ADC_ConfigChannel+0x5e2>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80041fa:	2320      	movs	r3, #32
 80041fc:	e003      	b.n	8004206 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3301      	adds	r3, #1
 8004208:	069b      	lsls	r3, r3, #26
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_ADC_ConfigChannel+0x602>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	3301      	adds	r3, #1
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	e017      	b.n	800425e <HAL_ADC_ConfigChannel+0x632>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	61bb      	str	r3, [r7, #24]
  return result;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10d      	bne.n	800428a <HAL_ADC_ConfigChannel+0x65e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	3301      	adds	r3, #1
 8004276:	f003 021f 	and.w	r2, r3, #31
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	3b1e      	subs	r3, #30
 8004282:	051b      	lsls	r3, r3, #20
 8004284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004288:	e01e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x69c>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	60fb      	str	r3, [r7, #12]
  return result;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80042a2:	2320      	movs	r3, #32
 80042a4:	e006      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x688>
 80042a6:	bf00      	nop
 80042a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f003 021f 	and.w	r2, r3, #31
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	3b1e      	subs	r3, #30
 80042c2:	051b      	lsls	r3, r3, #20
 80042c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7ff f81e 	bl	8003310 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_ADC_ConfigChannel+0x7c0>)
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d07a      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e0:	4843      	ldr	r0, [pc, #268]	; (80043f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80042e2:	f7fe ff73 	bl	80031cc <LL_ADC_GetCommonPathInternalCh>
 80042e6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a41      	ldr	r2, [pc, #260]	; (80043f4 <HAL_ADC_ConfigChannel+0x7c8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d12c      	bne.n	800434e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d126      	bne.n	800434e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x6e8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <HAL_ADC_ConfigChannel+0x7d0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d15d      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004314:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800431c:	4619      	mov	r1, r3
 800431e:	4834      	ldr	r0, [pc, #208]	; (80043f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004320:	f7fe ff41 	bl	80031a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <HAL_ADC_ConfigChannel+0x7d4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_ADC_ConfigChannel+0x7d8>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800433e:	e002      	b.n	8004346 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3b01      	subs	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f9      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800434c:	e040      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2d      	ldr	r2, [pc, #180]	; (8004408 <HAL_ADC_ConfigChannel+0x7dc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d118      	bne.n	800438a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800435c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d112      	bne.n	800438a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <HAL_ADC_ConfigChannel+0x7cc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x74c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_ADC_ConfigChannel+0x7d0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d12d      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800437c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004380:	4619      	mov	r1, r3
 8004382:	481b      	ldr	r0, [pc, #108]	; (80043f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004384:	f7fe ff0f 	bl	80031a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004388:	e024      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_ADC_ConfigChannel+0x7e0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d120      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <HAL_ADC_ConfigChannel+0x7cc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d115      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043b2:	4619      	mov	r1, r3
 80043b4:	480e      	ldr	r0, [pc, #56]	; (80043f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80043b6:	f7fe fef6 	bl	80031a6 <LL_ADC_SetCommonPathInternalCh>
 80043ba:	e00c      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80043ce:	e002      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	37d8      	adds	r7, #216	; 0xd8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	80080000 	.word	0x80080000
 80043f0:	50040300 	.word	0x50040300
 80043f4:	c7520000 	.word	0xc7520000
 80043f8:	50040000 	.word	0x50040000
 80043fc:	50040200 	.word	0x50040200
 8004400:	20000000 	.word	0x20000000
 8004404:	053e2d63 	.word	0x053e2d63
 8004408:	cb840000 	.word	0xcb840000
 800440c:	80000001 	.word	0x80000001

08004410 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f8a2 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 800442c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f8c3 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8004438:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8098 	beq.w	8004578 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02a      	beq.n	80044ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7e5b      	ldrb	r3, [r3, #25]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d126      	bne.n	80044ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7e1b      	ldrb	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d122      	bne.n	80044ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800446a:	e014      	b.n	8004496 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4a45      	ldr	r2, [pc, #276]	; (8004584 <ADC_ConversionStop+0x174>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d90d      	bls.n	8004490 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e074      	b.n	800457a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d1e3      	bne.n	800446c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2240      	movs	r2, #64	; 0x40
 80044aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d014      	beq.n	80044dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f85a 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff f817 	bl	80034fa <LL_ADC_IsDisableOngoing>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f836 	bl	8003548 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d014      	beq.n	800450c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff f869 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe ffff 	bl	80034fa <LL_ADC_IsDisableOngoing>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff f845 	bl	8003596 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d005      	beq.n	800451e <ADC_ConversionStop+0x10e>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d105      	bne.n	8004524 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004518:	230c      	movs	r3, #12
 800451a:	617b      	str	r3, [r7, #20]
        break;
 800451c:	e005      	b.n	800452a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800451e:	2308      	movs	r3, #8
 8004520:	617b      	str	r3, [r7, #20]
        break;
 8004522:	e002      	b.n	800452a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004524:	2304      	movs	r3, #4
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800452a:	f7fe fe1d 	bl	8003168 <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004530:	e01b      	b.n	800456a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004532:	f7fe fe19 	bl	8003168 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b05      	cmp	r3, #5
 800453e:	d914      	bls.n	800456a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f043 0210 	orr.w	r2, r3, #16
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e007      	b.n	800457a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1dc      	bne.n	8004532 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	a33fffff 	.word	0xa33fffff

08004588 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe ff9b 	bl	80034d4 <LL_ADC_IsEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d169      	bne.n	8004678 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4b36      	ldr	r3, [pc, #216]	; (8004684 <ADC_Enable+0xfc>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f043 0210 	orr.w	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e055      	b.n	800467a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe ff56 	bl	8003484 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045d8:	482b      	ldr	r0, [pc, #172]	; (8004688 <ADC_Enable+0x100>)
 80045da:	f7fe fdf7 	bl	80031cc <LL_ADC_GetCommonPathInternalCh>
 80045de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <ADC_Enable+0x104>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	4a28      	ldr	r2, [pc, #160]	; (8004690 <ADC_Enable+0x108>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004602:	e002      	b.n	800460a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3b01      	subs	r3, #1
 8004608:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f9      	bne.n	8004604 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004610:	f7fe fdaa 	bl	8003168 <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004616:	e028      	b.n	800466a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe ff59 	bl	80034d4 <LL_ADC_IsEnabled>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe ff29 	bl	8003484 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004632:	f7fe fd99 	bl	8003168 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d914      	bls.n	800466a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d00d      	beq.n	800466a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e007      	b.n	800467a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d1cf      	bne.n	8004618 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	8000003f 	.word	0x8000003f
 8004688:	50040300 	.word	0x50040300
 800468c:	20000000 	.word	0x20000000
 8004690:	053e2d63 	.word	0x053e2d63

08004694 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe ff2a 	bl	80034fa <LL_ADC_IsDisableOngoing>
 80046a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe ff11 	bl	80034d4 <LL_ADC_IsEnabled>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d047      	beq.n	8004748 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d144      	bne.n	8004748 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030d 	and.w	r3, r3, #13
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10c      	bne.n	80046e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe feeb 	bl	80034ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2203      	movs	r2, #3
 80046dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046de:	f7fe fd43 	bl	8003168 <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046e4:	e029      	b.n	800473a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0210 	orr.w	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e023      	b.n	800474a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004702:	f7fe fd31 	bl	8003168 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d914      	bls.n	800473a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e007      	b.n	800474a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1dc      	bne.n	8004702 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <LL_ADC_IsEnabled>:
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <LL_ADC_IsEnabled+0x18>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <LL_ADC_IsEnabled+0x1a>
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_ADC_REG_IsConversionOngoing>:
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d101      	bne.n	8004790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b09f      	sub	sp, #124	; 0x7c
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e093      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047c6:	2300      	movs	r3, #0
 80047c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047ca:	2300      	movs	r3, #0
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a47      	ldr	r2, [pc, #284]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d102      	bne.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047d8:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	e001      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e072      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ffb8 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 8004808:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff ffb2 	bl	8004778 <LL_ADC_REG_IsConversionOngoing>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d154      	bne.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800481a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800481c:	2b00      	cmp	r3, #0
 800481e:	d151      	bne.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004822:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02c      	beq.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800483e:	035b      	lsls	r3, r3, #13
 8004840:	430b      	orrs	r3, r1
 8004842:	431a      	orrs	r2, r3
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004848:	4829      	ldr	r0, [pc, #164]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800484a:	f7ff ff82 	bl	8004752 <LL_ADC_IsEnabled>
 800484e:	4604      	mov	r4, r0
 8004850:	4828      	ldr	r0, [pc, #160]	; (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004852:	f7ff ff7e 	bl	8004752 <LL_ADC_IsEnabled>
 8004856:	4603      	mov	r3, r0
 8004858:	431c      	orrs	r4, r3
 800485a:	4828      	ldr	r0, [pc, #160]	; (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800485c:	f7ff ff79 	bl	8004752 <LL_ADC_IsEnabled>
 8004860:	4603      	mov	r3, r0
 8004862:	4323      	orrs	r3, r4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d137      	bne.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004870:	f023 030f 	bic.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	6811      	ldr	r1, [r2, #0]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	6892      	ldr	r2, [r2, #8]
 800487c:	430a      	orrs	r2, r1
 800487e:	431a      	orrs	r2, r3
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004884:	e028      	b.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004890:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004892:	4817      	ldr	r0, [pc, #92]	; (80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004894:	f7ff ff5d 	bl	8004752 <LL_ADC_IsEnabled>
 8004898:	4604      	mov	r4, r0
 800489a:	4816      	ldr	r0, [pc, #88]	; (80048f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800489c:	f7ff ff59 	bl	8004752 <LL_ADC_IsEnabled>
 80048a0:	4603      	mov	r3, r0
 80048a2:	431c      	orrs	r4, r3
 80048a4:	4815      	ldr	r0, [pc, #84]	; (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80048a6:	f7ff ff54 	bl	8004752 <LL_ADC_IsEnabled>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4323      	orrs	r3, r4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d112      	bne.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048ba:	f023 030f 	bic.w	r3, r3, #15
 80048be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048c2:	e009      	b.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80048d6:	e000      	b.n	80048da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	377c      	adds	r7, #124	; 0x7c
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd90      	pop	{r4, r7, pc}
 80048ee:	bf00      	nop
 80048f0:	50040000 	.word	0x50040000
 80048f4:	50040100 	.word	0x50040100
 80048f8:	50040300 	.word	0x50040300
 80048fc:	50040200 	.word	0x50040200

08004900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0ed      	b.n	8004aee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd f8ee 	bl	8001b00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004934:	f7fe fc18 	bl	8003168 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800493a:	e012      	b.n	8004962 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800493c:	f7fe fc14 	bl	8003168 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b0a      	cmp	r3, #10
 8004948:	d90b      	bls.n	8004962 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2205      	movs	r2, #5
 800495a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0c5      	b.n	8004aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0e5      	beq.n	800493c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0202 	bic.w	r2, r2, #2
 800497e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004980:	f7fe fbf2 	bl	8003168 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004986:	e012      	b.n	80049ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004988:	f7fe fbee 	bl	8003168 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b0a      	cmp	r3, #10
 8004994:	d90b      	bls.n	80049ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2205      	movs	r2, #5
 80049a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e09f      	b.n	8004aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7e1b      	ldrb	r3, [r3, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d108      	bne.n	80049d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e007      	b.n	80049e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	7e5b      	ldrb	r3, [r3, #25]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d108      	bne.n	8004a00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e007      	b.n	8004a10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e9b      	ldrb	r3, [r3, #26]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d108      	bne.n	8004a2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0220 	orr.w	r2, r2, #32
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e007      	b.n	8004a3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0220 	bic.w	r2, r2, #32
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7edb      	ldrb	r3, [r3, #27]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d108      	bne.n	8004a54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0210 	bic.w	r2, r2, #16
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e007      	b.n	8004a64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0210 	orr.w	r2, r2, #16
 8004a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	7f1b      	ldrb	r3, [r3, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d108      	bne.n	8004a7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e007      	b.n	8004a8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0208 	bic.w	r2, r2, #8
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7f5b      	ldrb	r3, [r3, #29]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d108      	bne.n	8004aa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0204 	orr.w	r2, r2, #4
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e007      	b.n	8004ab8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	ea42 0103 	orr.w	r1, r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b14:	4013      	ands	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b2a:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <__NVIC_SetPriorityGrouping+0x44>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	60d3      	str	r3, [r2, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <__NVIC_GetPriorityGrouping+0x18>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 0307 	and.w	r3, r3, #7
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db0b      	blt.n	8004b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	4907      	ldr	r1, [pc, #28]	; (8004b94 <__NVIC_EnableIRQ+0x38>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000e100 	.word	0xe000e100

08004b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db0a      	blt.n	8004bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	490c      	ldr	r1, [pc, #48]	; (8004be4 <__NVIC_SetPriority+0x4c>)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	440b      	add	r3, r1
 8004bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc0:	e00a      	b.n	8004bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4908      	ldr	r1, [pc, #32]	; (8004be8 <__NVIC_SetPriority+0x50>)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	3b04      	subs	r3, #4
 8004bd0:	0112      	lsls	r2, r2, #4
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	761a      	strb	r2, [r3, #24]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000e100 	.word	0xe000e100
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f1c3 0307 	rsb	r3, r3, #7
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	bf28      	it	cs
 8004c0a:	2304      	movcs	r3, #4
 8004c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3304      	adds	r3, #4
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d902      	bls.n	8004c1c <NVIC_EncodePriority+0x30>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3b03      	subs	r3, #3
 8004c1a:	e000      	b.n	8004c1e <NVIC_EncodePriority+0x32>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	401a      	ands	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c34:	f04f 31ff 	mov.w	r1, #4294967295
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	43d9      	mvns	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	4313      	orrs	r3, r2
         );
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff4c 	bl	8004af8 <__NVIC_SetPriorityGrouping>
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c7a:	f7ff ff61 	bl	8004b40 <__NVIC_GetPriorityGrouping>
 8004c7e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7ff ffb1 	bl	8004bec <NVIC_EncodePriority>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ff80 	bl	8004b98 <__NVIC_SetPriority>
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff54 	bl	8004b5c <__NVIC_EnableIRQ>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	e17f      	b.n	8004fcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8171 	beq.w	8004fc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d005      	beq.n	8004cfc <HAL_GPIO_Init+0x40>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d130      	bne.n	8004d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d32:	2201      	movs	r2, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0201 	and.w	r2, r3, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d118      	bne.n	8004d9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d70:	2201      	movs	r2, #1
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	f003 0201 	and.w	r2, r3, #1
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d017      	beq.n	8004dd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2203      	movs	r2, #3
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d123      	bne.n	8004e2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	08da      	lsrs	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3208      	adds	r2, #8
 8004dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	220f      	movs	r2, #15
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	08da      	lsrs	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2203      	movs	r2, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0203 	and.w	r2, r3, #3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80ac 	beq.w	8004fc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6e:	4b5f      	ldr	r3, [pc, #380]	; (8004fec <HAL_GPIO_Init+0x330>)
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	4a5e      	ldr	r2, [pc, #376]	; (8004fec <HAL_GPIO_Init+0x330>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6613      	str	r3, [r2, #96]	; 0x60
 8004e7a:	4b5c      	ldr	r3, [pc, #368]	; (8004fec <HAL_GPIO_Init+0x330>)
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e86:	4a5a      	ldr	r2, [pc, #360]	; (8004ff0 <HAL_GPIO_Init+0x334>)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x242>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4f      	ldr	r2, [pc, #316]	; (8004ff4 <HAL_GPIO_Init+0x338>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x23e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4e      	ldr	r2, [pc, #312]	; (8004ff8 <HAL_GPIO_Init+0x33c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x23a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4d      	ldr	r2, [pc, #308]	; (8004ffc <HAL_GPIO_Init+0x340>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x236>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4c      	ldr	r2, [pc, #304]	; (8005000 <HAL_GPIO_Init+0x344>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x232>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4b      	ldr	r2, [pc, #300]	; (8005004 <HAL_GPIO_Init+0x348>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x22e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4a      	ldr	r2, [pc, #296]	; (8005008 <HAL_GPIO_Init+0x34c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x22a>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e00c      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00a      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e008      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e004      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_GPIO_Init+0x244>
 8004efe:	2300      	movs	r3, #0
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	f002 0203 	and.w	r2, r2, #3
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4093      	lsls	r3, r2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f10:	4937      	ldr	r1, [pc, #220]	; (8004ff0 <HAL_GPIO_Init+0x334>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f1e:	4b3b      	ldr	r3, [pc, #236]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f48:	4b30      	ldr	r3, [pc, #192]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f96:	4a1d      	ldr	r2, [pc, #116]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_GPIO_Init+0x350>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fc0:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_GPIO_Init+0x350>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f47f ae78 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	48000400 	.word	0x48000400
 8004ff8:	48000800 	.word	0x48000800
 8004ffc:	48000c00 	.word	0x48000c00
 8005000:	48001000 	.word	0x48001000
 8005004:	48001400 	.word	0x48001400
 8005008:	48001800 	.word	0x48001800
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
 800501c:	4613      	mov	r3, r2
 800501e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005020:	787b      	ldrb	r3, [r7, #1]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800502c:	e002      	b.n	8005034 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_PWREx_GetVoltageRange+0x18>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40007000 	.word	0x40007000

0800505c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506a:	d130      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800506c:	4b23      	ldr	r3, [pc, #140]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005078:	d038      	beq.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005088:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2232      	movs	r2, #50	; 0x32
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a0:	e002      	b.n	80050a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d102      	bne.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f2      	bne.n	80050a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c8:	d110      	bne.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e00f      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ce:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050da:	d007      	beq.n	80050ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050e4:	4a05      	ldr	r2, [pc, #20]	; (80050fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40007000 	.word	0x40007000
 8005100:	20000000 	.word	0x20000000
 8005104:	431bde83 	.word	0x431bde83

08005108 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e3ca      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b97      	ldr	r3, [pc, #604]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005124:	4b94      	ldr	r3, [pc, #592]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80e4 	beq.w	8005304 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_RCC_OscConfig+0x4a>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	f040 808b 	bne.w	8005260 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b01      	cmp	r3, #1
 800514e:	f040 8087 	bne.w	8005260 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005152:	4b89      	ldr	r3, [pc, #548]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x62>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e3a2      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	4b82      	ldr	r3, [pc, #520]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <HAL_RCC_OscConfig+0x7c>
 800517a:	4b7f      	ldr	r3, [pc, #508]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005182:	e005      	b.n	8005190 <HAL_RCC_OscConfig+0x88>
 8005184:	4b7c      	ldr	r3, [pc, #496]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005190:	4293      	cmp	r3, r2
 8005192:	d223      	bcs.n	80051dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fd87 	bl	8005cac <RCC_SetFlashLatencyFromMSIRange>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e383      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051a8:	4b73      	ldr	r3, [pc, #460]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a72      	ldr	r2, [pc, #456]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051ae:	f043 0308 	orr.w	r3, r3, #8
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b70      	ldr	r3, [pc, #448]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	496d      	ldr	r1, [pc, #436]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051c6:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	4968      	ldr	r1, [pc, #416]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
 80051da:	e025      	b.n	8005228 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051dc:	4b66      	ldr	r3, [pc, #408]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a65      	ldr	r2, [pc, #404]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b63      	ldr	r3, [pc, #396]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4960      	ldr	r1, [pc, #384]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	495b      	ldr	r1, [pc, #364]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fd47 	bl	8005cac <RCC_SetFlashLatencyFromMSIRange>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e343      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005228:	f000 fc4a 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b52      	ldr	r3, [pc, #328]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	4950      	ldr	r1, [pc, #320]	; (800537c <HAL_RCC_OscConfig+0x274>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	4a4e      	ldr	r2, [pc, #312]	; (8005380 <HAL_RCC_OscConfig+0x278>)
 8005246:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005248:	4b4e      	ldr	r3, [pc, #312]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fc ff53 	bl	80020f8 <HAL_InitTick>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d052      	beq.n	8005302 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	e327      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d032      	beq.n	80052ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005268:	4b43      	ldr	r3, [pc, #268]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a42      	ldr	r2, [pc, #264]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005274:	f7fd ff78 	bl	8003168 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800527c:	f7fd ff74 	bl	8003168 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e310      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800528e:	4b3a      	ldr	r3, [pc, #232]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800529a:	4b37      	ldr	r3, [pc, #220]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a36      	ldr	r2, [pc, #216]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052a0:	f043 0308 	orr.w	r3, r3, #8
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	4b34      	ldr	r3, [pc, #208]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4931      	ldr	r1, [pc, #196]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052b8:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	492c      	ldr	r1, [pc, #176]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
 80052cc:	e01a      	b.n	8005304 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a29      	ldr	r2, [pc, #164]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052da:	f7fd ff45 	bl	8003168 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052e2:	f7fd ff41 	bl	8003168 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e2dd      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x1da>
 8005300:	e000      	b.n	8005304 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005302:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d074      	beq.n	80053fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d005      	beq.n	8005322 <HAL_RCC_OscConfig+0x21a>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d10e      	bne.n	800533a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d10b      	bne.n	800533a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d064      	beq.n	80053f8 <HAL_RCC_OscConfig+0x2f0>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d160      	bne.n	80053f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e2ba      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x24a>
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e026      	b.n	80053a0 <HAL_RCC_OscConfig+0x298>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800535a:	d115      	bne.n	8005388 <HAL_RCC_OscConfig+0x280>
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a05      	ldr	r2, [pc, #20]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 8005362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a02      	ldr	r2, [pc, #8]	; (8005378 <HAL_RCC_OscConfig+0x270>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e014      	b.n	80053a0 <HAL_RCC_OscConfig+0x298>
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	0800fc30 	.word	0x0800fc30
 8005380:	20000000 	.word	0x20000000
 8005384:	20000004 	.word	0x20000004
 8005388:	4ba0      	ldr	r3, [pc, #640]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a9f      	ldr	r2, [pc, #636]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b9d      	ldr	r3, [pc, #628]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a9c      	ldr	r2, [pc, #624]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd fede 	bl	8003168 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd feda 	bl	8003168 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e276      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c2:	4b92      	ldr	r3, [pc, #584]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x2a8>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd feca 	bl	8003168 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fd fec6 	bl	8003168 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e262      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ea:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x2d0>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d060      	beq.n	80054c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x310>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d119      	bne.n	8005446 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d116      	bne.n	8005446 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005418:	4b7c      	ldr	r3, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x328>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e23f      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005430:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	4973      	ldr	r1, [pc, #460]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005444:	e040      	b.n	80054c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d023      	beq.n	8005496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544e:	4b6f      	ldr	r3, [pc, #444]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6e      	ldr	r2, [pc, #440]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fd fe85 	bl	8003168 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005462:	f7fd fe81 	bl	8003168 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e21d      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005480:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	495f      	ldr	r1, [pc, #380]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	e018      	b.n	80054c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005496:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5c      	ldr	r2, [pc, #368]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800549c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a2:	f7fd fe61 	bl	8003168 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054aa:	f7fd fe5d 	bl	8003168 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1f9      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d03c      	beq.n	800554e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01c      	beq.n	8005516 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054dc:	4b4b      	ldr	r3, [pc, #300]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e2:	4a4a      	ldr	r2, [pc, #296]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fd fe3c 	bl	8003168 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fd fe38 	bl	8003168 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1d4      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ef      	beq.n	80054f4 <HAL_RCC_OscConfig+0x3ec>
 8005514:	e01b      	b.n	800554e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005516:	4b3d      	ldr	r3, [pc, #244]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551c:	4a3b      	ldr	r2, [pc, #236]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fd fe1f 	bl	8003168 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fd fe1b 	bl	8003168 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1b7      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005540:	4b32      	ldr	r3, [pc, #200]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1ef      	bne.n	800552e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80a6 	beq.w	80056a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005576:	6593      	str	r3, [r2, #88]	; 0x58
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCC_OscConfig+0x504>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005584:	2301      	movs	r3, #1
 8005586:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <HAL_RCC_OscConfig+0x508>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d118      	bne.n	80055c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <HAL_RCC_OscConfig+0x508>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_RCC_OscConfig+0x508>)
 800559a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a0:	f7fd fde2 	bl	8003168 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a8:	f7fd fdde 	bl	8003168 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e17a      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCC_OscConfig+0x508>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d108      	bne.n	80055e0 <HAL_RCC_OscConfig+0x4d8>
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	4a0d      	ldr	r2, [pc, #52]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055de:	e029      	b.n	8005634 <HAL_RCC_OscConfig+0x52c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d115      	bne.n	8005614 <HAL_RCC_OscConfig+0x50c>
 80055e8:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	4a07      	ldr	r2, [pc, #28]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80055f0:	f043 0304 	orr.w	r3, r3, #4
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCC_OscConfig+0x504>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	4a03      	ldr	r2, [pc, #12]	; (800560c <HAL_RCC_OscConfig+0x504>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005608:	e014      	b.n	8005634 <HAL_RCC_OscConfig+0x52c>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	40007000 	.word	0x40007000
 8005614:	4b9c      	ldr	r3, [pc, #624]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	4a9b      	ldr	r2, [pc, #620]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005624:	4b98      	ldr	r3, [pc, #608]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	4a97      	ldr	r2, [pc, #604]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d016      	beq.n	800566a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fd fd94 	bl	8003168 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f7fd fd90 	bl	8003168 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e12a      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565a:	4b8b      	ldr	r3, [pc, #556]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ed      	beq.n	8005644 <HAL_RCC_OscConfig+0x53c>
 8005668:	e015      	b.n	8005696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fd fd7d 	bl	8003168 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005670:	e00a      	b.n	8005688 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fd fd79 	bl	8003168 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e113      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005688:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1ed      	bne.n	8005672 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005696:	7ffb      	ldrb	r3, [r7, #31]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d105      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800569c:	4b7a      	ldr	r3, [pc, #488]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	4a79      	ldr	r2, [pc, #484]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80056a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80fe 	beq.w	80058ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	f040 80d0 	bne.w	800585c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056bc:	4b72      	ldr	r3, [pc, #456]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 0203 	and.w	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d130      	bne.n	8005732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d127      	bne.n	8005732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d11f      	bne.n	8005732 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056fc:	2a07      	cmp	r2, #7
 80056fe:	bf14      	ite	ne
 8005700:	2201      	movne	r2, #1
 8005702:	2200      	moveq	r2, #0
 8005704:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005706:	4293      	cmp	r3, r2
 8005708:	d113      	bne.n	8005732 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d109      	bne.n	8005732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d06e      	beq.n	8005810 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d069      	beq.n	800580c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005738:	4b53      	ldr	r3, [pc, #332]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005744:	4b50      	ldr	r3, [pc, #320]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0ad      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005754:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a4b      	ldr	r2, [pc, #300]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800575a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800575e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005760:	f7fd fd02 	bl	8003168 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005768:	f7fd fcfe 	bl	8003168 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e09a      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005786:	4b40      	ldr	r3, [pc, #256]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	4b40      	ldr	r3, [pc, #256]	; (800588c <HAL_RCC_OscConfig+0x784>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005796:	3a01      	subs	r2, #1
 8005798:	0112      	lsls	r2, r2, #4
 800579a:	4311      	orrs	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057a0:	0212      	lsls	r2, r2, #8
 80057a2:	4311      	orrs	r1, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057a8:	0852      	lsrs	r2, r2, #1
 80057aa:	3a01      	subs	r2, #1
 80057ac:	0552      	lsls	r2, r2, #21
 80057ae:	4311      	orrs	r1, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057b4:	0852      	lsrs	r2, r2, #1
 80057b6:	3a01      	subs	r2, #1
 80057b8:	0652      	lsls	r2, r2, #25
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057c0:	0912      	lsrs	r2, r2, #4
 80057c2:	0452      	lsls	r2, r2, #17
 80057c4:	430a      	orrs	r2, r1
 80057c6:	4930      	ldr	r1, [pc, #192]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057cc:	4b2e      	ldr	r3, [pc, #184]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2d      	ldr	r2, [pc, #180]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80057d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 80057de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057e4:	f7fd fcc0 	bl	8003168 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fd fcbc 	bl	8003168 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e058      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fe:	4b22      	ldr	r3, [pc, #136]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800580a:	e050      	b.n	80058ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e04f      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005810:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d148      	bne.n	80058ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005826:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005828:	4b17      	ldr	r3, [pc, #92]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a16      	ldr	r2, [pc, #88]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 800582e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005832:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005834:	f7fd fc98 	bl	8003168 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fd fc94 	bl	8003168 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e030      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x734>
 800585a:	e028      	b.n	80058ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d023      	beq.n	80058aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a08      	ldr	r2, [pc, #32]	; (8005888 <HAL_RCC_OscConfig+0x780>)
 8005868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fd fc7b 	bl	8003168 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005874:	e00c      	b.n	8005890 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005876:	f7fd fc77 	bl	8003168 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d905      	bls.n	8005890 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e013      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
 8005888:	40021000 	.word	0x40021000
 800588c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005890:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_OscConfig+0x7b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ec      	bne.n	8005876 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCC_OscConfig+0x7b0>)
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	4905      	ldr	r1, [pc, #20]	; (80058b8 <HAL_RCC_OscConfig+0x7b0>)
 80058a2:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCC_OscConfig+0x7b4>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60cb      	str	r3, [r1, #12]
 80058a8:	e001      	b.n	80058ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40021000 	.word	0x40021000
 80058bc:	feeefffc 	.word	0xfeeefffc

080058c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0e7      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d4:	4b75      	ldr	r3, [pc, #468]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d910      	bls.n	8005904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 0207 	bic.w	r2, r3, #7
 80058ea:	4970      	ldr	r1, [pc, #448]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0cf      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b66      	ldr	r3, [pc, #408]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591c:	429a      	cmp	r2, r3
 800591e:	d908      	bls.n	8005932 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005920:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4960      	ldr	r1, [pc, #384]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d04c      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b03      	cmp	r3, #3
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005946:	4b5a      	ldr	r3, [pc, #360]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d121      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0a6      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800595e:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d115      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e09a      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005976:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e08e      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e086      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005996:	4b46      	ldr	r3, [pc, #280]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0203 	bic.w	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4943      	ldr	r1, [pc, #268]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a8:	f7fd fbde 	bl	8003168 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fd fbda 	bl	8003168 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e06e      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 020c 	and.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1eb      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	492b      	ldr	r1, [pc, #172]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d210      	bcs.n	8005a36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 0207 	bic.w	r2, r3, #7
 8005a1c:	4923      	ldr	r1, [pc, #140]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a24:	4b21      	ldr	r3, [pc, #132]	; (8005aac <HAL_RCC_ClockConfig+0x1ec>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e036      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4918      	ldr	r1, [pc, #96]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4910      	ldr	r1, [pc, #64]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a74:	f000 f824 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	490b      	ldr	r1, [pc, #44]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1fc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fc fb2d 	bl	80020f8 <HAL_InitTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	0800fc30 	.word	0x0800fc30
 8005ab8:	20000000 	.word	0x20000000
 8005abc:	20000004 	.word	0x20000004

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ace:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ad8:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d121      	bne.n	8005b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11e      	bne.n	8005b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b00:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e005      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b10:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b30:	e00a      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d102      	bne.n	8005b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e004      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b44:	4b23      	ldr	r3, [pc, #140]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d134      	bne.n	8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d003      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0xac>
 8005b64:	e005      	b.n	8005b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b68:	617b      	str	r3, [r7, #20]
      break;
 8005b6a:	e005      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b6e:	617b      	str	r3, [r7, #20]
      break;
 8005b70:	e002      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	617b      	str	r3, [r7, #20]
      break;
 8005b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	3301      	adds	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	fb03 f202 	mul.w	r2, r3, r2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	0e5b      	lsrs	r3, r3, #25
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	3301      	adds	r3, #1
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3724      	adds	r7, #36	; 0x24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	0800fc48 	.word	0x0800fc48
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_RCC_GetHCLKFreq+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000000 	.word	0x20000000

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bf4:	f7ff fff0 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800fc40 	.word	0x0800fc40

08005c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c20:	f7ff ffda 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	0adb      	lsrs	r3, r3, #11
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4904      	ldr	r1, [pc, #16]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800fc40 	.word	0x0800fc40

08005c48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	220f      	movs	r2, #15
 8005c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0203 	and.w	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005c70:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_RCC_GetClockConfig+0x60>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0207 	and.w	r2, r3, #7
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40022000 	.word	0x40022000

08005cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cb8:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005cc4:	f7ff f9bc 	bl	8005040 <HAL_PWREx_GetVoltageRange>
 8005cc8:	6178      	str	r0, [r7, #20]
 8005cca:	e014      	b.n	8005cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ccc:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd8:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ce4:	f7ff f9ac 	bl	8005040 <HAL_PWREx_GetVoltageRange>
 8005ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cea:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cfc:	d10b      	bne.n	8005d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b80      	cmp	r3, #128	; 0x80
 8005d02:	d919      	bls.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2ba0      	cmp	r3, #160	; 0xa0
 8005d08:	d902      	bls.n	8005d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	e013      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d10:	2301      	movs	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	e010      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b80      	cmp	r3, #128	; 0x80
 8005d1a:	d902      	bls.n	8005d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	e00a      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d102      	bne.n	8005d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d28:	2302      	movs	r3, #2
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e004      	b.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b70      	cmp	r3, #112	; 0x70
 8005d32:	d101      	bne.n	8005d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d34:	2301      	movs	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 0207 	bic.w	r2, r3, #7
 8005d40:	4909      	ldr	r1, [pc, #36]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40022000 	.word	0x40022000

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d74:	2300      	movs	r3, #0
 8005d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d041      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d90:	d02a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d96:	d824      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d9c:	d008      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005da2:	d81e      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dae:	e018      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005db0:	4b86      	ldr	r3, [pc, #536]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4a85      	ldr	r2, [pc, #532]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dbc:	e015      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fabb 	bl	8006340 <RCCEx_PLLSAI1_Config>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dce:	e00c      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3320      	adds	r3, #32
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fba6 	bl	8006528 <RCCEx_PLLSAI2_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	74fb      	strb	r3, [r7, #19]
      break;
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dea:	7cfb      	ldrb	r3, [r7, #19]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005df0:	4b76      	ldr	r3, [pc, #472]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfe:	4973      	ldr	r1, [pc, #460]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e06:	e001      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	7cfb      	ldrb	r3, [r7, #19]
 8005e0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d041      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e20:	d02a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e26:	d824      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2c:	d008      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e32:	d81e      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e3c:	d010      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e3e:	e018      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e40:	4b62      	ldr	r3, [pc, #392]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a61      	ldr	r2, [pc, #388]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e4c:	e015      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fa73 	bl	8006340 <RCCEx_PLLSAI1_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e5e:	e00c      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3320      	adds	r3, #32
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb5e 	bl	8006528 <RCCEx_PLLSAI2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	74fb      	strb	r3, [r7, #19]
      break;
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e80:	4b52      	ldr	r3, [pc, #328]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8e:	494f      	ldr	r1, [pc, #316]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e96:	e001      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a0 	beq.w	8005fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec4:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec8:	4a40      	ldr	r2, [pc, #256]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ece:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed0:	4b3e      	ldr	r3, [pc, #248]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005edc:	2301      	movs	r3, #1
 8005ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eec:	f7fd f93c 	bl	8003168 <HAL_GetTick>
 8005ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ef2:	e009      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef4:	f7fd f938 	bl	8003168 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d902      	bls.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	74fb      	strb	r3, [r7, #19]
        break;
 8005f06:	e005      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f08:	4b31      	ldr	r3, [pc, #196]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0ef      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d15c      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01f      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d019      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f38:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f44:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4a:	4a20      	ldr	r2, [pc, #128]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f54:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f64:	4a19      	ldr	r2, [pc, #100]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d016      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fd f8f7 	bl	8003168 <HAL_GetTick>
 8005f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fd f8f3 	bl	8003168 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d902      	bls.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	74fb      	strb	r3, [r7, #19]
            break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ec      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005fa4:	7cfb      	ldrb	r3, [r7, #19]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fba:	4904      	ldr	r1, [pc, #16]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fc2:	e009      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	74bb      	strb	r3, [r7, #18]
 8005fc8:	e006      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fca:	bf00      	nop
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd8:	7c7b      	ldrb	r3, [r7, #17]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d105      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fde:	4b9e      	ldr	r3, [pc, #632]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	4a9d      	ldr	r2, [pc, #628]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ff6:	4b98      	ldr	r3, [pc, #608]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f023 0203 	bic.w	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	4994      	ldr	r1, [pc, #592]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006018:	4b8f      	ldr	r3, [pc, #572]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f023 020c 	bic.w	r2, r3, #12
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	498c      	ldr	r1, [pc, #560]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800603a:	4b87      	ldr	r3, [pc, #540]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006040:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	4983      	ldr	r1, [pc, #524]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800605c:	4b7e      	ldr	r3, [pc, #504]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	497b      	ldr	r1, [pc, #492]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800607e:	4b76      	ldr	r3, [pc, #472]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608c:	4972      	ldr	r1, [pc, #456]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060a0:	4b6d      	ldr	r3, [pc, #436]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	496a      	ldr	r1, [pc, #424]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060c2:	4b65      	ldr	r3, [pc, #404]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	4961      	ldr	r1, [pc, #388]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060e4:	4b5c      	ldr	r3, [pc, #368]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	4959      	ldr	r1, [pc, #356]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006106:	4b54      	ldr	r3, [pc, #336]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	4950      	ldr	r1, [pc, #320]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006128:	4b4b      	ldr	r3, [pc, #300]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	4948      	ldr	r1, [pc, #288]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800614a:	4b43      	ldr	r3, [pc, #268]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	493f      	ldr	r1, [pc, #252]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d028      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800616c:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	4937      	ldr	r1, [pc, #220]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800618a:	d106      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800618c:	4b32      	ldr	r3, [pc, #200]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a31      	ldr	r2, [pc, #196]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006196:	60d3      	str	r3, [r2, #12]
 8006198:	e011      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061a2:	d10c      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f8c8 	bl	8006340 <RCCEx_PLLSAI1_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d028      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	491f      	ldr	r1, [pc, #124]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e8:	d106      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ea:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061f4:	60d3      	str	r3, [r2, #12]
 80061f6:	e011      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006200:	d10c      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3304      	adds	r3, #4
 8006206:	2101      	movs	r1, #1
 8006208:	4618      	mov	r0, r3
 800620a:	f000 f899 	bl	8006340 <RCCEx_PLLSAI1_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006218:	7cfb      	ldrb	r3, [r7, #19]
 800621a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d02b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006236:	4908      	ldr	r1, [pc, #32]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006246:	d109      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4a02      	ldr	r2, [pc, #8]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006252:	60d3      	str	r3, [r2, #12]
 8006254:	e014      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006264:	d10c      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	2101      	movs	r1, #1
 800626c:	4618      	mov	r0, r3
 800626e:	f000 f867 	bl	8006340 <RCCEx_PLLSAI1_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02f      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800628c:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	4928      	ldr	r1, [pc, #160]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062aa:	d10d      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f844 	bl	8006340 <RCCEx_PLLSAI1_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d014      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062c2:	7cfb      	ldrb	r3, [r7, #19]
 80062c4:	74bb      	strb	r3, [r7, #18]
 80062c6:	e011      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3320      	adds	r3, #32
 80062d6:	2102      	movs	r1, #2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 f925 	bl	8006528 <RCCEx_PLLSAI2_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062f8:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006306:	490d      	ldr	r1, [pc, #52]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800632a:	4904      	ldr	r1, [pc, #16]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006332:	7cbb      	ldrb	r3, [r7, #18]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40021000 	.word	0x40021000

08006340 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800634e:	4b75      	ldr	r3, [pc, #468]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d018      	beq.n	800638c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800635a:	4b72      	ldr	r3, [pc, #456]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0203 	and.w	r2, r3, #3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d10d      	bne.n	8006386 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
       ||
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006372:	4b6c      	ldr	r3, [pc, #432]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
       ||
 8006382:	429a      	cmp	r2, r3
 8006384:	d047      	beq.n	8006416 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
 800638a:	e044      	b.n	8006416 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d018      	beq.n	80063c6 <RCCEx_PLLSAI1_Config+0x86>
 8006394:	2b03      	cmp	r3, #3
 8006396:	d825      	bhi.n	80063e4 <RCCEx_PLLSAI1_Config+0xa4>
 8006398:	2b01      	cmp	r3, #1
 800639a:	d002      	beq.n	80063a2 <RCCEx_PLLSAI1_Config+0x62>
 800639c:	2b02      	cmp	r3, #2
 800639e:	d009      	beq.n	80063b4 <RCCEx_PLLSAI1_Config+0x74>
 80063a0:	e020      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063a2:	4b60      	ldr	r3, [pc, #384]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11d      	bne.n	80063ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b2:	e01a      	b.n	80063ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063b4:	4b5b      	ldr	r3, [pc, #364]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d116      	bne.n	80063ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c4:	e013      	b.n	80063ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063c6:	4b57      	ldr	r3, [pc, #348]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063d2:	4b54      	ldr	r3, [pc, #336]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e004      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063ea:	bf00      	nop
 80063ec:	e002      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063fa:	4b4a      	ldr	r3, [pc, #296]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	3b01      	subs	r3, #1
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	430b      	orrs	r3, r1
 8006410:	4944      	ldr	r1, [pc, #272]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d17d      	bne.n	8006518 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800641c:	4b41      	ldr	r3, [pc, #260]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a40      	ldr	r2, [pc, #256]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006428:	f7fc fe9e 	bl	8003168 <HAL_GetTick>
 800642c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800642e:	e009      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006430:	f7fc fe9a 	bl	8003168 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d902      	bls.n	8006444 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	73fb      	strb	r3, [r7, #15]
        break;
 8006442:	e005      	b.n	8006450 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006444:	4b37      	ldr	r3, [pc, #220]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ef      	bne.n	8006430 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d160      	bne.n	8006518 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d111      	bne.n	8006480 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800645c:	4b31      	ldr	r3, [pc, #196]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	0211      	lsls	r1, r2, #8
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	0912      	lsrs	r2, r2, #4
 8006474:	0452      	lsls	r2, r2, #17
 8006476:	430a      	orrs	r2, r1
 8006478:	492a      	ldr	r1, [pc, #168]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
 800647e:	e027      	b.n	80064d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d112      	bne.n	80064ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006486:	4b27      	ldr	r3, [pc, #156]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800648e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	0211      	lsls	r1, r2, #8
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6912      	ldr	r2, [r2, #16]
 800649c:	0852      	lsrs	r2, r2, #1
 800649e:	3a01      	subs	r2, #1
 80064a0:	0552      	lsls	r2, r2, #21
 80064a2:	430a      	orrs	r2, r1
 80064a4:	491f      	ldr	r1, [pc, #124]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	610b      	str	r3, [r1, #16]
 80064aa:	e011      	b.n	80064d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	0211      	lsls	r1, r2, #8
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6952      	ldr	r2, [r2, #20]
 80064c2:	0852      	lsrs	r2, r2, #1
 80064c4:	3a01      	subs	r2, #1
 80064c6:	0652      	lsls	r2, r2, #25
 80064c8:	430a      	orrs	r2, r1
 80064ca:	4916      	ldr	r1, [pc, #88]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064dc:	f7fc fe44 	bl	8003168 <HAL_GetTick>
 80064e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064e2:	e009      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064e4:	f7fc fe40 	bl	8003168 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d902      	bls.n	80064f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	73fb      	strb	r3, [r7, #15]
          break;
 80064f6:	e005      	b.n	8006504 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064f8:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ef      	beq.n	80064e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	4904      	ldr	r1, [pc, #16]	; (8006524 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006514:	4313      	orrs	r3, r2
 8006516:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000

08006528 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006536:	4b6a      	ldr	r3, [pc, #424]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d018      	beq.n	8006574 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006542:	4b67      	ldr	r3, [pc, #412]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0203 	and.w	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d10d      	bne.n	800656e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
       ||
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800655a:	4b61      	ldr	r3, [pc, #388]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
       ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d047      	beq.n	80065fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e044      	b.n	80065fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d018      	beq.n	80065ae <RCCEx_PLLSAI2_Config+0x86>
 800657c:	2b03      	cmp	r3, #3
 800657e:	d825      	bhi.n	80065cc <RCCEx_PLLSAI2_Config+0xa4>
 8006580:	2b01      	cmp	r3, #1
 8006582:	d002      	beq.n	800658a <RCCEx_PLLSAI2_Config+0x62>
 8006584:	2b02      	cmp	r3, #2
 8006586:	d009      	beq.n	800659c <RCCEx_PLLSAI2_Config+0x74>
 8006588:	e020      	b.n	80065cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11d      	bne.n	80065d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800659a:	e01a      	b.n	80065d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800659c:	4b50      	ldr	r3, [pc, #320]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d116      	bne.n	80065d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ac:	e013      	b.n	80065d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ae:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ba:	4b49      	ldr	r3, [pc, #292]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ca:	e006      	b.n	80065da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065d2:	bf00      	nop
 80065d4:	e002      	b.n	80065dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065da:	bf00      	nop
    }

    if(status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065e2:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6819      	ldr	r1, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	430b      	orrs	r3, r1
 80065f8:	4939      	ldr	r1, [pc, #228]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d167      	bne.n	80066d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a35      	ldr	r2, [pc, #212]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800660a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006610:	f7fc fdaa 	bl	8003168 <HAL_GetTick>
 8006614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006616:	e009      	b.n	800662c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006618:	f7fc fda6 	bl	8003168 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d902      	bls.n	800662c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	73fb      	strb	r3, [r7, #15]
        break;
 800662a:	e005      	b.n	8006638 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800662c:	4b2c      	ldr	r3, [pc, #176]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ef      	bne.n	8006618 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d14a      	bne.n	80066d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d111      	bne.n	8006668 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006644:	4b26      	ldr	r3, [pc, #152]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6892      	ldr	r2, [r2, #8]
 8006654:	0211      	lsls	r1, r2, #8
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68d2      	ldr	r2, [r2, #12]
 800665a:	0912      	lsrs	r2, r2, #4
 800665c:	0452      	lsls	r2, r2, #17
 800665e:	430a      	orrs	r2, r1
 8006660:	491f      	ldr	r1, [pc, #124]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006662:	4313      	orrs	r3, r2
 8006664:	614b      	str	r3, [r1, #20]
 8006666:	e011      	b.n	800668c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6892      	ldr	r2, [r2, #8]
 8006678:	0211      	lsls	r1, r2, #8
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6912      	ldr	r2, [r2, #16]
 800667e:	0852      	lsrs	r2, r2, #1
 8006680:	3a01      	subs	r2, #1
 8006682:	0652      	lsls	r2, r2, #25
 8006684:	430a      	orrs	r2, r1
 8006686:	4916      	ldr	r1, [pc, #88]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006688:	4313      	orrs	r3, r2
 800668a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800668c:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006698:	f7fc fd66 	bl	8003168 <HAL_GetTick>
 800669c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800669e:	e009      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066a0:	f7fc fd62 	bl	8003168 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d902      	bls.n	80066b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	73fb      	strb	r3, [r7, #15]
          break;
 80066b2:	e005      	b.n	80066c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ef      	beq.n	80066a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	4904      	ldr	r1, [pc, #16]	; (80066e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40021000 	.word	0x40021000

080066e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e049      	b.n	800678a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f841 	bl	8006792 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 fd26 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d001      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e04f      	b.n	8006860 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a23      	ldr	r2, [pc, #140]	; (800686c <HAL_TIM_Base_Start_IT+0xc4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01d      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d018      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1f      	ldr	r2, [pc, #124]	; (8006870 <HAL_TIM_Base_Start_IT+0xc8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <HAL_TIM_Base_Start_IT+0xcc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <HAL_TIM_Base_Start_IT+0xd0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1b      	ldr	r2, [pc, #108]	; (800687c <HAL_TIM_Base_Start_IT+0xd4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_TIM_Base_Start_IT+0x76>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a19      	ldr	r2, [pc, #100]	; (8006880 <HAL_TIM_Base_Start_IT+0xd8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d115      	bne.n	800684a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	4b17      	ldr	r3, [pc, #92]	; (8006884 <HAL_TIM_Base_Start_IT+0xdc>)
 8006826:	4013      	ands	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b06      	cmp	r3, #6
 800682e:	d015      	beq.n	800685c <HAL_TIM_Base_Start_IT+0xb4>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d011      	beq.n	800685c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006848:	e008      	b.n	800685c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	e000      	b.n	800685e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40014000 	.word	0x40014000
 8006884:	00010007 	.word	0x00010007

08006888 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e049      	b.n	800692e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f841 	bl	8006936 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 fc54 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e049      	b.n	80069f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fb ffa5 	bl	80028c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f000 fbf3 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <HAL_TIM_PWM_Start+0x24>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	e03c      	b.n	8006a96 <HAL_TIM_PWM_Start+0x9e>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d109      	bne.n	8006a36 <HAL_TIM_PWM_Start+0x3e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	e02f      	b.n	8006a96 <HAL_TIM_PWM_Start+0x9e>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d109      	bne.n	8006a50 <HAL_TIM_PWM_Start+0x58>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e022      	b.n	8006a96 <HAL_TIM_PWM_Start+0x9e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b0c      	cmp	r3, #12
 8006a54:	d109      	bne.n	8006a6a <HAL_TIM_PWM_Start+0x72>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e015      	b.n	8006a96 <HAL_TIM_PWM_Start+0x9e>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d109      	bne.n	8006a84 <HAL_TIM_PWM_Start+0x8c>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	e008      	b.n	8006a96 <HAL_TIM_PWM_Start+0x9e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e09c      	b.n	8006bd8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <HAL_TIM_PWM_Start+0xb6>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aac:	e023      	b.n	8006af6 <HAL_TIM_PWM_Start+0xfe>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d104      	bne.n	8006abe <HAL_TIM_PWM_Start+0xc6>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006abc:	e01b      	b.n	8006af6 <HAL_TIM_PWM_Start+0xfe>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d104      	bne.n	8006ace <HAL_TIM_PWM_Start+0xd6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006acc:	e013      	b.n	8006af6 <HAL_TIM_PWM_Start+0xfe>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b0c      	cmp	r3, #12
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Start+0xe6>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006adc:	e00b      	b.n	8006af6 <HAL_TIM_PWM_Start+0xfe>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Start+0xf6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	e003      	b.n	8006af6 <HAL_TIM_PWM_Start+0xfe>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2201      	movs	r2, #1
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fea8 	bl	8007854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <HAL_TIM_PWM_Start+0x1e8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x13e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a34      	ldr	r2, [pc, #208]	; (8006be4 <HAL_TIM_PWM_Start+0x1ec>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x13e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a32      	ldr	r2, [pc, #200]	; (8006be8 <HAL_TIM_PWM_Start+0x1f0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x13e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a31      	ldr	r2, [pc, #196]	; (8006bec <HAL_TIM_PWM_Start+0x1f4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x13e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2f      	ldr	r2, [pc, #188]	; (8006bf0 <HAL_TIM_PWM_Start+0x1f8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_Start+0x142>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <HAL_TIM_PWM_Start+0x144>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <HAL_TIM_PWM_Start+0x1e8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b62:	d018      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_TIM_PWM_Start+0x1fc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <HAL_TIM_PWM_Start+0x200>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <HAL_TIM_PWM_Start+0x204>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <HAL_TIM_PWM_Start+0x1ec>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIM_PWM_Start+0x19e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <HAL_TIM_PWM_Start+0x1f0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d115      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	4b18      	ldr	r3, [pc, #96]	; (8006c00 <HAL_TIM_PWM_Start+0x208>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	d015      	beq.n	8006bd4 <HAL_TIM_PWM_Start+0x1dc>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d011      	beq.n	8006bd4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e008      	b.n	8006bd4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e000      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	00010007 	.word	0x00010007

08006c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d020      	beq.n	8006c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0202 	mvn.w	r2, #2
 8006c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa72 	bl	8007138 <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa64 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa75 	bl	800714c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d020      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01b      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0204 	mvn.w	r2, #4
 8006c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa4c 	bl	8007138 <HAL_TIM_IC_CaptureCallback>
 8006ca0:	e005      	b.n	8006cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa3e 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa4f 	bl	800714c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d020      	beq.n	8006d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01b      	beq.n	8006d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0208 	mvn.w	r2, #8
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa26 	bl	8007138 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa18 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa29 	bl	800714c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d020      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01b      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0210 	mvn.w	r2, #16
 8006d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2208      	movs	r2, #8
 8006d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa00 	bl	8007138 <HAL_TIM_IC_CaptureCallback>
 8006d38:	e005      	b.n	8006d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9f2 	bl	8007124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa03 	bl	800714c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0201 	mvn.w	r2, #1
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fb f984 	bl	8002078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fe96 	bl	8007ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fe8e 	bl	8007ad4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9c2 	bl	8007160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0220 	mvn.w	r2, #32
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fe56 	bl	8007aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e066      	b.n	8006ef4 <HAL_TIM_OC_ConfigChannel+0xec>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b14      	cmp	r3, #20
 8006e32:	d857      	bhi.n	8006ee4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006ee5 	.word	0x08006ee5
 8006e44:	08006ee5 	.word	0x08006ee5
 8006e48:	08006ee5 	.word	0x08006ee5
 8006e4c:	08006e9f 	.word	0x08006e9f
 8006e50:	08006ee5 	.word	0x08006ee5
 8006e54:	08006ee5 	.word	0x08006ee5
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006ee5 	.word	0x08006ee5
 8006e64:	08006ee5 	.word	0x08006ee5
 8006e68:	08006ee5 	.word	0x08006ee5
 8006e6c:	08006ebb 	.word	0x08006ebb
 8006e70:	08006ee5 	.word	0x08006ee5
 8006e74:	08006ee5 	.word	0x08006ee5
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	08006ec9 	.word	0x08006ec9
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	08006ee5 	.word	0x08006ee5
 8006e8c:	08006ed7 	.word	0x08006ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fa06 	bl	80072a8 <TIM_OC1_SetConfig>
      break;
 8006e9c:	e025      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fa8f 	bl	80073c8 <TIM_OC2_SetConfig>
      break;
 8006eaa:	e01e      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fb12 	bl	80074dc <TIM_OC3_SetConfig>
      break;
 8006eb8:	e017      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fb93 	bl	80075ec <TIM_OC4_SetConfig>
      break;
 8006ec6:	e010      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fbf6 	bl	80076c0 <TIM_OC5_SetConfig>
      break;
 8006ed4:	e009      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fc53 	bl	8007788 <TIM_OC6_SetConfig>
      break;
 8006ee2:	e002      	b.n	8006eea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0ff      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b14      	cmp	r3, #20
 8006f26:	f200 80f0 	bhi.w	800710a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	0800710b 	.word	0x0800710b
 8006f38:	0800710b 	.word	0x0800710b
 8006f3c:	0800710b 	.word	0x0800710b
 8006f40:	08006fc5 	.word	0x08006fc5
 8006f44:	0800710b 	.word	0x0800710b
 8006f48:	0800710b 	.word	0x0800710b
 8006f4c:	0800710b 	.word	0x0800710b
 8006f50:	08007007 	.word	0x08007007
 8006f54:	0800710b 	.word	0x0800710b
 8006f58:	0800710b 	.word	0x0800710b
 8006f5c:	0800710b 	.word	0x0800710b
 8006f60:	08007047 	.word	0x08007047
 8006f64:	0800710b 	.word	0x0800710b
 8006f68:	0800710b 	.word	0x0800710b
 8006f6c:	0800710b 	.word	0x0800710b
 8006f70:	08007089 	.word	0x08007089
 8006f74:	0800710b 	.word	0x0800710b
 8006f78:	0800710b 	.word	0x0800710b
 8006f7c:	0800710b 	.word	0x0800710b
 8006f80:	080070c9 	.word	0x080070c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f98c 	bl	80072a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0208 	orr.w	r2, r2, #8
 8006f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0204 	bic.w	r2, r2, #4
 8006fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6999      	ldr	r1, [r3, #24]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	619a      	str	r2, [r3, #24]
      break;
 8006fc2:	e0a5      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 f9fc 	bl	80073c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6999      	ldr	r1, [r3, #24]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	021a      	lsls	r2, r3, #8
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	619a      	str	r2, [r3, #24]
      break;
 8007004:	e084      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fa65 	bl	80074dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0208 	orr.w	r2, r2, #8
 8007020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0204 	bic.w	r2, r2, #4
 8007030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69d9      	ldr	r1, [r3, #28]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	61da      	str	r2, [r3, #28]
      break;
 8007044:	e064      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 facd 	bl	80075ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69d9      	ldr	r1, [r3, #28]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	021a      	lsls	r2, r3, #8
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	61da      	str	r2, [r3, #28]
      break;
 8007086:	e043      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fb16 	bl	80076c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0208 	orr.w	r2, r2, #8
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0204 	bic.w	r2, r2, #4
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070c6:	e023      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb5a 	bl	8007788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	021a      	lsls	r2, r3, #8
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007108:	e002      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
      break;
 800710e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a40      	ldr	r2, [pc, #256]	; (8007288 <TIM_Base_SetConfig+0x114>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a3d      	ldr	r2, [pc, #244]	; (800728c <TIM_Base_SetConfig+0x118>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a3c      	ldr	r2, [pc, #240]	; (8007290 <TIM_Base_SetConfig+0x11c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a3b      	ldr	r2, [pc, #236]	; (8007294 <TIM_Base_SetConfig+0x120>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0x40>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a3a      	ldr	r2, [pc, #232]	; (8007298 <TIM_Base_SetConfig+0x124>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d108      	bne.n	80071c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2f      	ldr	r2, [pc, #188]	; (8007288 <TIM_Base_SetConfig+0x114>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01f      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d01b      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a2c      	ldr	r2, [pc, #176]	; (800728c <TIM_Base_SetConfig+0x118>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d017      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a2b      	ldr	r2, [pc, #172]	; (8007290 <TIM_Base_SetConfig+0x11c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <TIM_Base_SetConfig+0x120>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00f      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a29      	ldr	r2, [pc, #164]	; (8007298 <TIM_Base_SetConfig+0x124>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00b      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a28      	ldr	r2, [pc, #160]	; (800729c <TIM_Base_SetConfig+0x128>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d007      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a27      	ldr	r2, [pc, #156]	; (80072a0 <TIM_Base_SetConfig+0x12c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_Base_SetConfig+0x9a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <TIM_Base_SetConfig+0x130>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d108      	bne.n	8007220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a10      	ldr	r2, [pc, #64]	; (8007288 <TIM_Base_SetConfig+0x114>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00f      	beq.n	800726c <TIM_Base_SetConfig+0xf8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a12      	ldr	r2, [pc, #72]	; (8007298 <TIM_Base_SetConfig+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00b      	beq.n	800726c <TIM_Base_SetConfig+0xf8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a11      	ldr	r2, [pc, #68]	; (800729c <TIM_Base_SetConfig+0x128>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_Base_SetConfig+0xf8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <TIM_Base_SetConfig+0x12c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_Base_SetConfig+0xf8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0f      	ldr	r2, [pc, #60]	; (80072a4 <TIM_Base_SetConfig+0x130>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d103      	bne.n	8007274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	615a      	str	r2, [r3, #20]
}
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800
 8007294:	40000c00 	.word	0x40000c00
 8007298:	40013400 	.word	0x40013400
 800729c:	40014000 	.word	0x40014000
 80072a0:	40014400 	.word	0x40014400
 80072a4:	40014800 	.word	0x40014800

080072a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f023 0201 	bic.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 0302 	bic.w	r3, r3, #2
 80072f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a2c      	ldr	r2, [pc, #176]	; (80073b4 <TIM_OC1_SetConfig+0x10c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00f      	beq.n	8007328 <TIM_OC1_SetConfig+0x80>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a2b      	ldr	r2, [pc, #172]	; (80073b8 <TIM_OC1_SetConfig+0x110>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00b      	beq.n	8007328 <TIM_OC1_SetConfig+0x80>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a2a      	ldr	r2, [pc, #168]	; (80073bc <TIM_OC1_SetConfig+0x114>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d007      	beq.n	8007328 <TIM_OC1_SetConfig+0x80>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <TIM_OC1_SetConfig+0x118>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC1_SetConfig+0x80>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <TIM_OC1_SetConfig+0x11c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10c      	bne.n	8007342 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0308 	bic.w	r3, r3, #8
 800732e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <TIM_OC1_SetConfig+0x10c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00f      	beq.n	800736a <TIM_OC1_SetConfig+0xc2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a1a      	ldr	r2, [pc, #104]	; (80073b8 <TIM_OC1_SetConfig+0x110>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00b      	beq.n	800736a <TIM_OC1_SetConfig+0xc2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a19      	ldr	r2, [pc, #100]	; (80073bc <TIM_OC1_SetConfig+0x114>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d007      	beq.n	800736a <TIM_OC1_SetConfig+0xc2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a18      	ldr	r2, [pc, #96]	; (80073c0 <TIM_OC1_SetConfig+0x118>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_OC1_SetConfig+0xc2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <TIM_OC1_SetConfig+0x11c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d111      	bne.n	800738e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	621a      	str	r2, [r3, #32]
}
 80073a8:	bf00      	nop
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	40012c00 	.word	0x40012c00
 80073b8:	40013400 	.word	0x40013400
 80073bc:	40014000 	.word	0x40014000
 80073c0:	40014400 	.word	0x40014400
 80073c4:	40014800 	.word	0x40014800

080073c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	f023 0210 	bic.w	r2, r3, #16
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0320 	bic.w	r3, r3, #32
 8007416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a28      	ldr	r2, [pc, #160]	; (80074c8 <TIM_OC2_SetConfig+0x100>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_OC2_SetConfig+0x6c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a27      	ldr	r2, [pc, #156]	; (80074cc <TIM_OC2_SetConfig+0x104>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d10d      	bne.n	8007450 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800743a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800744e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <TIM_OC2_SetConfig+0x100>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00f      	beq.n	8007478 <TIM_OC2_SetConfig+0xb0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <TIM_OC2_SetConfig+0x104>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_OC2_SetConfig+0xb0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <TIM_OC2_SetConfig+0x108>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC2_SetConfig+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a1a      	ldr	r2, [pc, #104]	; (80074d4 <TIM_OC2_SetConfig+0x10c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC2_SetConfig+0xb0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <TIM_OC2_SetConfig+0x110>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d113      	bne.n	80074a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800747e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800

080074dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a27      	ldr	r2, [pc, #156]	; (80075d8 <TIM_OC3_SetConfig+0xfc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_OC3_SetConfig+0x6a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a26      	ldr	r2, [pc, #152]	; (80075dc <TIM_OC3_SetConfig+0x100>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d10d      	bne.n	8007562 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800754c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a1c      	ldr	r2, [pc, #112]	; (80075d8 <TIM_OC3_SetConfig+0xfc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_OC3_SetConfig+0xae>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <TIM_OC3_SetConfig+0x100>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_OC3_SetConfig+0xae>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <TIM_OC3_SetConfig+0x104>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_OC3_SetConfig+0xae>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <TIM_OC3_SetConfig+0x108>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC3_SetConfig+0xae>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <TIM_OC3_SetConfig+0x10c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d113      	bne.n	80075b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800

080075ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800763a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <TIM_OC4_SetConfig+0xc0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <TIM_OC4_SetConfig+0xc4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	; (80076b4 <TIM_OC4_SetConfig+0xc8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <TIM_OC4_SetConfig+0xcc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a14      	ldr	r2, [pc, #80]	; (80076bc <TIM_OC4_SetConfig+0xd0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800

080076c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007704:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a17      	ldr	r2, [pc, #92]	; (8007774 <TIM_OC5_SetConfig+0xb4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_OC5_SetConfig+0x7a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a16      	ldr	r2, [pc, #88]	; (8007778 <TIM_OC5_SetConfig+0xb8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_OC5_SetConfig+0x7a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a15      	ldr	r2, [pc, #84]	; (800777c <TIM_OC5_SetConfig+0xbc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_OC5_SetConfig+0x7a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a14      	ldr	r2, [pc, #80]	; (8007780 <TIM_OC5_SetConfig+0xc0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_OC5_SetConfig+0x7a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <TIM_OC5_SetConfig+0xc4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d109      	bne.n	800774e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800

08007788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	051b      	lsls	r3, r3, #20
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a18      	ldr	r2, [pc, #96]	; (8007840 <TIM_OC6_SetConfig+0xb8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC6_SetConfig+0x7c>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a17      	ldr	r2, [pc, #92]	; (8007844 <TIM_OC6_SetConfig+0xbc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC6_SetConfig+0x7c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a16      	ldr	r2, [pc, #88]	; (8007848 <TIM_OC6_SetConfig+0xc0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC6_SetConfig+0x7c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a15      	ldr	r2, [pc, #84]	; (800784c <TIM_OC6_SetConfig+0xc4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC6_SetConfig+0x7c>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a14      	ldr	r2, [pc, #80]	; (8007850 <TIM_OC6_SetConfig+0xc8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d109      	bne.n	8007818 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800

08007854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2201      	movs	r2, #1
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	43db      	mvns	r3, r3
 8007876:	401a      	ands	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	431a      	orrs	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e068      	b.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a2e      	ldr	r2, [pc, #184]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2d      	ldr	r2, [pc, #180]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d108      	bne.n	80078fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01d      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d018      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1a      	ldr	r2, [pc, #104]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00e      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d009      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a13      	ldr	r2, [pc, #76]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a14      	ldr	r2, [pc, #80]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d10c      	bne.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4313      	orrs	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40013400 	.word	0x40013400
 80079a0:	40000400 	.word	0x40000400
 80079a4:	40000800 	.word	0x40000800
 80079a8:	40000c00 	.word	0x40000c00
 80079ac:	40014000 	.word	0x40014000

080079b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e065      	b.n	8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a14      	ldr	r2, [pc, #80]	; (8007aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d115      	bne.n	8007a86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	051b      	lsls	r3, r3, #20
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	40012c00 	.word	0x40012c00
 8007aa8:	40013400 	.word	0x40013400

08007aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e040      	b.n	8007b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fb f840 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2224      	movs	r2, #36	; 0x24
 8007b14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0201 	bic.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fbc2 	bl	80082b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f907 	bl	8007d48 <UART_SetConfig>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e01b      	b.n	8007b7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0201 	orr.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc41 	bl	80083fc <UART_CheckIdleState>
 8007b7a:	4603      	mov	r3, r0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d178      	bne.n	8007c8e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_UART_Transmit+0x24>
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e071      	b.n	8007c90 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2221      	movs	r2, #33	; 0x21
 8007bb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bba:	f7fb fad5 	bl	8003168 <HAL_GetTick>
 8007bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd8:	d108      	bne.n	8007bec <HAL_UART_Transmit+0x68>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	e003      	b.n	8007bf4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bf4:	e030      	b.n	8007c58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2180      	movs	r1, #128	; 0x80
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fca3 	bl	800854c <UART_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e03c      	b.n	8007c90 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	881a      	ldrh	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	3302      	adds	r3, #2
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e008      	b.n	8007c46 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	3301      	adds	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1c8      	bne.n	8007bf6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2140      	movs	r1, #64	; 0x40
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fc6c 	bl	800854c <UART_WaitOnFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d004      	beq.n	8007c84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e005      	b.n	8007c90 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e000      	b.n	8007c90 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	; 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d137      	bne.n	8007d20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_UART_Receive_IT+0x24>
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e030      	b.n	8007d22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a18      	ldr	r2, [pc, #96]	; (8007d2c <HAL_UART_Receive_IT+0x94>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d01f      	beq.n	8007d10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d018      	beq.n	8007d10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	613b      	str	r3, [r7, #16]
   return(result);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	623b      	str	r3, [r7, #32]
 8007cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69f9      	ldr	r1, [r7, #28]
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fc80 	bl	800861c <UART_Start_Receive_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	e000      	b.n	8007d22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
  }
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3728      	adds	r7, #40	; 0x28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40008000 	.word	0x40008000

08007d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d4c:	b08a      	sub	sp, #40	; 0x28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4ba4      	ldr	r3, [pc, #656]	; (8008008 <UART_SetConfig+0x2c0>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a99      	ldr	r2, [pc, #612]	; (800800c <UART_SetConfig+0x2c4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db0:	4313      	orrs	r3, r2
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a90      	ldr	r2, [pc, #576]	; (8008010 <UART_SetConfig+0x2c8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d126      	bne.n	8007e20 <UART_SetConfig+0xd8>
 8007dd2:	4b90      	ldr	r3, [pc, #576]	; (8008014 <UART_SetConfig+0x2cc>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d81b      	bhi.n	8007e18 <UART_SetConfig+0xd0>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <UART_SetConfig+0xa0>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007e09 	.word	0x08007e09
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfe:	e116      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e06:	e112      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0e:	e10e      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e10a      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1e:	e106      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7c      	ldr	r2, [pc, #496]	; (8008018 <UART_SetConfig+0x2d0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d138      	bne.n	8007e9c <UART_SetConfig+0x154>
 8007e2a:	4b7a      	ldr	r3, [pc, #488]	; (8008014 <UART_SetConfig+0x2cc>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e30:	f003 030c 	and.w	r3, r3, #12
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	d82d      	bhi.n	8007e94 <UART_SetConfig+0x14c>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <UART_SetConfig+0xf8>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e75 	.word	0x08007e75
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e95 	.word	0x08007e95
 8007e4c:	08007e95 	.word	0x08007e95
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e95 	.word	0x08007e95
 8007e5c:	08007e95 	.word	0x08007e95
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	08007e95 	.word	0x08007e95
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e8d 	.word	0x08007e8d
 8007e74:	2300      	movs	r3, #0
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e7a:	e0d8      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e82:	e0d4      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e84:	2304      	movs	r3, #4
 8007e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e8a:	e0d0      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e8c:	2308      	movs	r3, #8
 8007e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e92:	e0cc      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e94:	2310      	movs	r3, #16
 8007e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e9a:	e0c8      	b.n	800802e <UART_SetConfig+0x2e6>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5e      	ldr	r2, [pc, #376]	; (800801c <UART_SetConfig+0x2d4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d125      	bne.n	8007ef2 <UART_SetConfig+0x1aa>
 8007ea6:	4b5b      	ldr	r3, [pc, #364]	; (8008014 <UART_SetConfig+0x2cc>)
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007eb0:	2b30      	cmp	r3, #48	; 0x30
 8007eb2:	d016      	beq.n	8007ee2 <UART_SetConfig+0x19a>
 8007eb4:	2b30      	cmp	r3, #48	; 0x30
 8007eb6:	d818      	bhi.n	8007eea <UART_SetConfig+0x1a2>
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d00a      	beq.n	8007ed2 <UART_SetConfig+0x18a>
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d814      	bhi.n	8007eea <UART_SetConfig+0x1a2>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <UART_SetConfig+0x182>
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d008      	beq.n	8007eda <UART_SetConfig+0x192>
 8007ec8:	e00f      	b.n	8007eea <UART_SetConfig+0x1a2>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed0:	e0ad      	b.n	800802e <UART_SetConfig+0x2e6>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed8:	e0a9      	b.n	800802e <UART_SetConfig+0x2e6>
 8007eda:	2304      	movs	r3, #4
 8007edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee0:	e0a5      	b.n	800802e <UART_SetConfig+0x2e6>
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee8:	e0a1      	b.n	800802e <UART_SetConfig+0x2e6>
 8007eea:	2310      	movs	r3, #16
 8007eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef0:	e09d      	b.n	800802e <UART_SetConfig+0x2e6>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a4a      	ldr	r2, [pc, #296]	; (8008020 <UART_SetConfig+0x2d8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d125      	bne.n	8007f48 <UART_SetConfig+0x200>
 8007efc:	4b45      	ldr	r3, [pc, #276]	; (8008014 <UART_SetConfig+0x2cc>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f06:	2bc0      	cmp	r3, #192	; 0xc0
 8007f08:	d016      	beq.n	8007f38 <UART_SetConfig+0x1f0>
 8007f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f0c:	d818      	bhi.n	8007f40 <UART_SetConfig+0x1f8>
 8007f0e:	2b80      	cmp	r3, #128	; 0x80
 8007f10:	d00a      	beq.n	8007f28 <UART_SetConfig+0x1e0>
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d814      	bhi.n	8007f40 <UART_SetConfig+0x1f8>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <UART_SetConfig+0x1d8>
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	d008      	beq.n	8007f30 <UART_SetConfig+0x1e8>
 8007f1e:	e00f      	b.n	8007f40 <UART_SetConfig+0x1f8>
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f26:	e082      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2e:	e07e      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f36:	e07a      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f3e:	e076      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f46:	e072      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a35      	ldr	r2, [pc, #212]	; (8008024 <UART_SetConfig+0x2dc>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d12a      	bne.n	8007fa8 <UART_SetConfig+0x260>
 8007f52:	4b30      	ldr	r3, [pc, #192]	; (8008014 <UART_SetConfig+0x2cc>)
 8007f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f60:	d01a      	beq.n	8007f98 <UART_SetConfig+0x250>
 8007f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f66:	d81b      	bhi.n	8007fa0 <UART_SetConfig+0x258>
 8007f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6c:	d00c      	beq.n	8007f88 <UART_SetConfig+0x240>
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f72:	d815      	bhi.n	8007fa0 <UART_SetConfig+0x258>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <UART_SetConfig+0x238>
 8007f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7c:	d008      	beq.n	8007f90 <UART_SetConfig+0x248>
 8007f7e:	e00f      	b.n	8007fa0 <UART_SetConfig+0x258>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f86:	e052      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8e:	e04e      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f96:	e04a      	b.n	800802e <UART_SetConfig+0x2e6>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f9e:	e046      	b.n	800802e <UART_SetConfig+0x2e6>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fa6:	e042      	b.n	800802e <UART_SetConfig+0x2e6>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a17      	ldr	r2, [pc, #92]	; (800800c <UART_SetConfig+0x2c4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d13a      	bne.n	8008028 <UART_SetConfig+0x2e0>
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <UART_SetConfig+0x2cc>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fc0:	d01a      	beq.n	8007ff8 <UART_SetConfig+0x2b0>
 8007fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fc6:	d81b      	bhi.n	8008000 <UART_SetConfig+0x2b8>
 8007fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fcc:	d00c      	beq.n	8007fe8 <UART_SetConfig+0x2a0>
 8007fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd2:	d815      	bhi.n	8008000 <UART_SetConfig+0x2b8>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <UART_SetConfig+0x298>
 8007fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fdc:	d008      	beq.n	8007ff0 <UART_SetConfig+0x2a8>
 8007fde:	e00f      	b.n	8008000 <UART_SetConfig+0x2b8>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe6:	e022      	b.n	800802e <UART_SetConfig+0x2e6>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fee:	e01e      	b.n	800802e <UART_SetConfig+0x2e6>
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff6:	e01a      	b.n	800802e <UART_SetConfig+0x2e6>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ffe:	e016      	b.n	800802e <UART_SetConfig+0x2e6>
 8008000:	2310      	movs	r3, #16
 8008002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008006:	e012      	b.n	800802e <UART_SetConfig+0x2e6>
 8008008:	efff69f3 	.word	0xefff69f3
 800800c:	40008000 	.word	0x40008000
 8008010:	40013800 	.word	0x40013800
 8008014:	40021000 	.word	0x40021000
 8008018:	40004400 	.word	0x40004400
 800801c:	40004800 	.word	0x40004800
 8008020:	40004c00 	.word	0x40004c00
 8008024:	40005000 	.word	0x40005000
 8008028:	2310      	movs	r3, #16
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a9f      	ldr	r2, [pc, #636]	; (80082b0 <UART_SetConfig+0x568>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d17a      	bne.n	800812e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800803c:	2b08      	cmp	r3, #8
 800803e:	d824      	bhi.n	800808a <UART_SetConfig+0x342>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x300>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800806d 	.word	0x0800806d
 800804c:	0800808b 	.word	0x0800808b
 8008050:	08008075 	.word	0x08008075
 8008054:	0800808b 	.word	0x0800808b
 8008058:	0800807b 	.word	0x0800807b
 800805c:	0800808b 	.word	0x0800808b
 8008060:	0800808b 	.word	0x0800808b
 8008064:	0800808b 	.word	0x0800808b
 8008068:	08008083 	.word	0x08008083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fd fdc0 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8008070:	61f8      	str	r0, [r7, #28]
        break;
 8008072:	e010      	b.n	8008096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008074:	4b8f      	ldr	r3, [pc, #572]	; (80082b4 <UART_SetConfig+0x56c>)
 8008076:	61fb      	str	r3, [r7, #28]
        break;
 8008078:	e00d      	b.n	8008096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807a:	f7fd fd21 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 800807e:	61f8      	str	r0, [r7, #28]
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008086:	61fb      	str	r3, [r7, #28]
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80fb 	beq.w	8008294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d305      	bcc.n	80080ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d903      	bls.n	80080c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080c0:	e0e8      	b.n	8008294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2200      	movs	r2, #0
 80080c6:	461c      	mov	r4, r3
 80080c8:	4615      	mov	r5, r2
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	022b      	lsls	r3, r5, #8
 80080d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80080d8:	0222      	lsls	r2, r4, #8
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	6849      	ldr	r1, [r1, #4]
 80080de:	0849      	lsrs	r1, r1, #1
 80080e0:	2000      	movs	r0, #0
 80080e2:	4688      	mov	r8, r1
 80080e4:	4681      	mov	r9, r0
 80080e6:	eb12 0a08 	adds.w	sl, r2, r8
 80080ea:	eb43 0b09 	adc.w	fp, r3, r9
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 fdc2 	bl	8000c88 <__aeabi_uldivmod>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4613      	mov	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008112:	d308      	bcc.n	8008126 <UART_SetConfig+0x3de>
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800811a:	d204      	bcs.n	8008126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	60da      	str	r2, [r3, #12]
 8008124:	e0b6      	b.n	8008294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800812c:	e0b2      	b.n	8008294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008136:	d15e      	bne.n	80081f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800813c:	2b08      	cmp	r3, #8
 800813e:	d828      	bhi.n	8008192 <UART_SetConfig+0x44a>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0x400>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	0800816d 	.word	0x0800816d
 800814c:	08008175 	.word	0x08008175
 8008150:	0800817d 	.word	0x0800817d
 8008154:	08008193 	.word	0x08008193
 8008158:	08008183 	.word	0x08008183
 800815c:	08008193 	.word	0x08008193
 8008160:	08008193 	.word	0x08008193
 8008164:	08008193 	.word	0x08008193
 8008168:	0800818b 	.word	0x0800818b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800816c:	f7fd fd40 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8008170:	61f8      	str	r0, [r7, #28]
        break;
 8008172:	e014      	b.n	800819e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008174:	f7fd fd52 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8008178:	61f8      	str	r0, [r7, #28]
        break;
 800817a:	e010      	b.n	800819e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800817c:	4b4d      	ldr	r3, [pc, #308]	; (80082b4 <UART_SetConfig+0x56c>)
 800817e:	61fb      	str	r3, [r7, #28]
        break;
 8008180:	e00d      	b.n	800819e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008182:	f7fd fc9d 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8008186:	61f8      	str	r0, [r7, #28]
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	61fb      	str	r3, [r7, #28]
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800819c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d077      	beq.n	8008294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	005a      	lsls	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	441a      	add	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b0f      	cmp	r3, #15
 80081be:	d916      	bls.n	80081ee <UART_SetConfig+0x4a6>
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c6:	d212      	bcs.n	80081ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f023 030f 	bic.w	r3, r3, #15
 80081d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	085b      	lsrs	r3, r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f003 0307 	and.w	r3, r3, #7
 80081dc:	b29a      	uxth	r2, r3
 80081de:	8afb      	ldrh	r3, [r7, #22]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	8afa      	ldrh	r2, [r7, #22]
 80081ea:	60da      	str	r2, [r3, #12]
 80081ec:	e052      	b.n	8008294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081f4:	e04e      	b.n	8008294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d827      	bhi.n	800824e <UART_SetConfig+0x506>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <UART_SetConfig+0x4bc>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008229 	.word	0x08008229
 8008208:	08008231 	.word	0x08008231
 800820c:	08008239 	.word	0x08008239
 8008210:	0800824f 	.word	0x0800824f
 8008214:	0800823f 	.word	0x0800823f
 8008218:	0800824f 	.word	0x0800824f
 800821c:	0800824f 	.word	0x0800824f
 8008220:	0800824f 	.word	0x0800824f
 8008224:	08008247 	.word	0x08008247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fd fce2 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 800822c:	61f8      	str	r0, [r7, #28]
        break;
 800822e:	e014      	b.n	800825a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008230:	f7fd fcf4 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 8008234:	61f8      	str	r0, [r7, #28]
        break;
 8008236:	e010      	b.n	800825a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008238:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <UART_SetConfig+0x56c>)
 800823a:	61fb      	str	r3, [r7, #28]
        break;
 800823c:	e00d      	b.n	800825a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800823e:	f7fd fc3f 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8008242:	61f8      	str	r0, [r7, #28]
        break;
 8008244:	e009      	b.n	800825a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824a:	61fb      	str	r3, [r7, #28]
        break;
 800824c:	e005      	b.n	800825a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008258:	bf00      	nop
    }

    if (pclk != 0U)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d019      	beq.n	8008294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	085a      	lsrs	r2, r3, #1
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d909      	bls.n	800828e <UART_SetConfig+0x546>
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008280:	d205      	bcs.n	800828e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	e002      	b.n	8008294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80082a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3728      	adds	r7, #40	; 0x28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ae:	bf00      	nop
 80082b0:	40008000 	.word	0x40008000
 80082b4:	00f42400 	.word	0x00f42400

080082b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	f003 0308 	and.w	r3, r3, #8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00a      	beq.n	80082e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01a      	beq.n	80083ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b6:	d10a      	bne.n	80083ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b098      	sub	sp, #96	; 0x60
 8008400:	af02      	add	r7, sp, #8
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800840c:	f7fa feac 	bl	8003168 <HAL_GetTick>
 8008410:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	2b08      	cmp	r3, #8
 800841e:	d12e      	bne.n	800847e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008428:	2200      	movs	r2, #0
 800842a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f88c 	bl	800854c <UART_WaitOnFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d021      	beq.n	800847e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800844e:	653b      	str	r3, [r7, #80]	; 0x50
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
 800845a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800845e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e6      	bne.n	800843a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e062      	b.n	8008544 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b04      	cmp	r3, #4
 800848a:	d149      	bne.n	8008520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008494:	2200      	movs	r2, #0
 8008496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f856 	bl	800854c <UART_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d03c      	beq.n	8008520 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	623b      	str	r3, [r7, #32]
   return(result);
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30
 80084c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3308      	adds	r3, #8
 80084de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f8:	61fa      	str	r2, [r7, #28]
 80084fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e5      	bne.n	80084d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e011      	b.n	8008544 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3758      	adds	r7, #88	; 0x58
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800855c:	e049      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d045      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008566:	f7fa fdff 	bl	8003168 <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	429a      	cmp	r2, r3
 8008574:	d302      	bcc.n	800857c <UART_WaitOnFlagUntilTimeout+0x30>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e048      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d031      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b08      	cmp	r3, #8
 800859a:	d110      	bne.n	80085be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f8ff 	bl	80087a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2208      	movs	r2, #8
 80085ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e029      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085cc:	d111      	bne.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f8e5 	bl	80087a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00f      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4013      	ands	r3, r2
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	429a      	cmp	r2, r3
 800860e:	d0a6      	beq.n	800855e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800861c:	b480      	push	{r7}
 800861e:	b097      	sub	sp, #92	; 0x5c
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	d10e      	bne.n	800866e <UART_Start_Receive_IT+0x52>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d105      	bne.n	8008664 <UART_Start_Receive_IT+0x48>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800865e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008662:	e02d      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	22ff      	movs	r2, #255	; 0xff
 8008668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800866c:	e028      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <UART_Start_Receive_IT+0x76>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <UART_Start_Receive_IT+0x6c>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	22ff      	movs	r2, #255	; 0xff
 8008682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008686:	e01b      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	227f      	movs	r2, #127	; 0x7f
 800868c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008690:	e016      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800869a:	d10d      	bne.n	80086b8 <UART_Start_Receive_IT+0x9c>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <UART_Start_Receive_IT+0x92>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	227f      	movs	r2, #127	; 0x7f
 80086a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ac:	e008      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	223f      	movs	r2, #63	; 0x3f
 80086b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b6:	e003      	b.n	80086c0 <UART_Start_Receive_IT+0xa4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2222      	movs	r2, #34	; 0x22
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	657b      	str	r3, [r7, #84]	; 0x54
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80086f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870c:	d107      	bne.n	800871e <UART_Start_Receive_IT+0x102>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <UART_Start_Receive_IT+0x184>)
 800871a:	669a      	str	r2, [r3, #104]	; 0x68
 800871c:	e002      	b.n	8008724 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4a20      	ldr	r2, [pc, #128]	; (80087a4 <UART_Start_Receive_IT+0x188>)
 8008722:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d019      	beq.n	8008760 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
 800874c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e6      	bne.n	800872c <UART_Start_Receive_IT+0x110>
 800875e:	e018      	b.n	8008792 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f043 0320 	orr.w	r3, r3, #32
 8008774:	653b      	str	r3, [r7, #80]	; 0x50
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877e:	623b      	str	r3, [r7, #32]
 8008780:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	69f9      	ldr	r1, [r7, #28]
 8008784:	6a3a      	ldr	r2, [r7, #32]
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	61bb      	str	r3, [r7, #24]
   return(result);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e6      	bne.n	8008760 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	375c      	adds	r7, #92	; 0x5c
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	08008a2d 	.word	0x08008a2d
 80087a4:	08008871 	.word	0x08008871

080087a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b095      	sub	sp, #84	; 0x54
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ce:	643b      	str	r3, [r7, #64]	; 0x40
 80087d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e6      	bne.n	80087b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f023 0301 	bic.w	r3, r3, #1
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008802:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e5      	bne.n	80087e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881a:	2b01      	cmp	r3, #1
 800881c:	d118      	bne.n	8008850 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	60bb      	str	r3, [r7, #8]
   return(result);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f023 0310 	bic.w	r3, r3, #16
 8008832:	647b      	str	r3, [r7, #68]	; 0x44
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883c:	61bb      	str	r3, [r7, #24]
 800883e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	613b      	str	r3, [r7, #16]
   return(result);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e6      	bne.n	800881e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008864:	bf00      	nop
 8008866:	3754      	adds	r7, #84	; 0x54
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b09c      	sub	sp, #112	; 0x70
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800887e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008888:	2b22      	cmp	r3, #34	; 0x22
 800888a:	f040 80be 	bne.w	8008a0a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008894:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008898:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800889c:	b2d9      	uxtb	r1, r3
 800889e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a8:	400a      	ands	r2, r1
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 80a3 	bne.w	8008a1e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80088f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	667b      	str	r3, [r7, #100]	; 0x64
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800892a:	647a      	str	r2, [r7, #68]	; 0x44
 800892c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e5      	bne.n	800890a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a34      	ldr	r2, [pc, #208]	; (8008a28 <UART_RxISR_8BIT+0x1b8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d01f      	beq.n	800899c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	623b      	str	r3, [r7, #32]
   return(result);
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800897e:	663b      	str	r3, [r7, #96]	; 0x60
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008988:	633b      	str	r3, [r7, #48]	; 0x30
 800898a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800898e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e6      	bne.n	800896a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d12e      	bne.n	8008a02 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0310 	bic.w	r3, r3, #16
 80089be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	69b9      	ldr	r1, [r7, #24]
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	617b      	str	r3, [r7, #20]
   return(result);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e6      	bne.n	80089aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d103      	bne.n	80089f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2210      	movs	r2, #16
 80089f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff f998 	bl	8007d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a00:	e00d      	b.n	8008a1e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7f8 fb78 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 8008a08:	e009      	b.n	8008a1e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	8b1b      	ldrh	r3, [r3, #24]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0208 	orr.w	r2, r2, #8
 8008a1a:	b292      	uxth	r2, r2
 8008a1c:	831a      	strh	r2, [r3, #24]
}
 8008a1e:	bf00      	nop
 8008a20:	3770      	adds	r7, #112	; 0x70
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40008000 	.word	0x40008000

08008a2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b09c      	sub	sp, #112	; 0x70
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a44:	2b22      	cmp	r3, #34	; 0x22
 8008a46:	f040 80be 	bne.w	8008bc6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a58:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a62:	4013      	ands	r3, r2
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	1c9a      	adds	r2, r3, #2
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f040 80a3 	bne.w	8008bda <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e6      	bne.n	8008a94 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	f023 0301 	bic.w	r3, r3, #1
 8008adc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ae6:	643a      	str	r2, [r7, #64]	; 0x40
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e5      	bne.n	8008ac6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2220      	movs	r2, #32
 8008afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a34      	ldr	r2, [pc, #208]	; (8008be4 <UART_RxISR_16BIT+0x1b8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d01f      	beq.n	8008b58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d018      	beq.n	8008b58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d12e      	bne.n	8008bbe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f023 0310 	bic.w	r3, r3, #16
 8008b7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6979      	ldr	r1, [r7, #20]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	613b      	str	r3, [r7, #16]
   return(result);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e6      	bne.n	8008b66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d103      	bne.n	8008bae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2210      	movs	r2, #16
 8008bac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff f8ba 	bl	8007d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bbc:	e00d      	b.n	8008bda <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7f8 fa9a 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 8008bc4:	e009      	b.n	8008bda <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	8b1b      	ldrh	r3, [r3, #24]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0208 	orr.w	r2, r2, #8
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	831a      	strh	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	3770      	adds	r7, #112	; 0x70
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40008000 	.word	0x40008000

08008be8 <__NVIC_SetPriority>:
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db0a      	blt.n	8008c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	490c      	ldr	r1, [pc, #48]	; (8008c34 <__NVIC_SetPriority+0x4c>)
 8008c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c06:	0112      	lsls	r2, r2, #4
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c10:	e00a      	b.n	8008c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	4908      	ldr	r1, [pc, #32]	; (8008c38 <__NVIC_SetPriority+0x50>)
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	0112      	lsls	r2, r2, #4
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	440b      	add	r3, r1
 8008c26:	761a      	strb	r2, [r3, #24]
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	e000e100 	.word	0xe000e100
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c40:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <SysTick_Handler+0x1c>)
 8008c42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c44:	f001 fd28 	bl	800a698 <xTaskGetSchedulerState>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c4e:	f002 fb13 	bl	800b278 <xPortSysTickHandler>
  }
}
 8008c52:	bf00      	nop
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	e000e010 	.word	0xe000e010

08008c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c60:	2100      	movs	r1, #0
 8008c62:	f06f 0004 	mvn.w	r0, #4
 8008c66:	f7ff ffbf 	bl	8008be8 <__NVIC_SetPriority>
#endif
}
 8008c6a:	bf00      	nop
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c76:	f3ef 8305 	mrs	r3, IPSR
 8008c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c82:	f06f 0305 	mvn.w	r3, #5
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e00c      	b.n	8008ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <osKernelInitialize+0x44>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d105      	bne.n	8008c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c92:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <osKernelInitialize+0x44>)
 8008c94:	2201      	movs	r2, #1
 8008c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	e002      	b.n	8008ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ca4:	687b      	ldr	r3, [r7, #4]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	2000169c 	.word	0x2000169c

08008cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cbe:	f3ef 8305 	mrs	r3, IPSR
 8008cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8008cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cca:	f06f 0305 	mvn.w	r3, #5
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	e010      	b.n	8008cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <osKernelStart+0x48>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d109      	bne.n	8008cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cda:	f7ff ffbf 	bl	8008c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cde:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <osKernelStart+0x48>)
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ce4:	f001 f87c 	bl	8009de0 <vTaskStartScheduler>
      stat = osOK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	e002      	b.n	8008cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cf4:	687b      	ldr	r3, [r7, #4]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	2000169c 	.word	0x2000169c

08008d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08e      	sub	sp, #56	; 0x38
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d14:	f3ef 8305 	mrs	r3, IPSR
 8008d18:	617b      	str	r3, [r7, #20]
  return(result);
 8008d1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d17e      	bne.n	8008e1e <osThreadNew+0x11a>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d07b      	beq.n	8008e1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d26:	2380      	movs	r3, #128	; 0x80
 8008d28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d2a:	2318      	movs	r3, #24
 8008d2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d045      	beq.n	8008dca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <osThreadNew+0x48>
        name = attr->name;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <osThreadNew+0x6e>
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b38      	cmp	r3, #56	; 0x38
 8008d64:	d805      	bhi.n	8008d72 <osThreadNew+0x6e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <osThreadNew+0x72>
        return (NULL);
 8008d72:	2300      	movs	r3, #0
 8008d74:	e054      	b.n	8008e20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	089b      	lsrs	r3, r3, #2
 8008d84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <osThreadNew+0xa8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	2ba7      	cmp	r3, #167	; 0xa7
 8008d94:	d90a      	bls.n	8008dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <osThreadNew+0xa8>
        mem = 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e010      	b.n	8008dce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10c      	bne.n	8008dce <osThreadNew+0xca>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <osThreadNew+0xca>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <osThreadNew+0xca>
          mem = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e001      	b.n	8008dce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d110      	bne.n	8008df6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ddc:	9202      	str	r2, [sp, #8]
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6a3a      	ldr	r2, [r7, #32]
 8008de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fe0c 	bl	8009a08 <xTaskCreateStatic>
 8008df0:	4603      	mov	r3, r0
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	e013      	b.n	8008e1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d110      	bne.n	8008e1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	f107 0310 	add.w	r3, r7, #16
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fe57 	bl	8009ac2 <xTaskCreate>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d001      	beq.n	8008e1e <osThreadNew+0x11a>
            hTask = NULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e1e:	693b      	ldr	r3, [r7, #16]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3728      	adds	r7, #40	; 0x28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e30:	f3ef 8305 	mrs	r3, IPSR
 8008e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <osDelay+0x1c>
    stat = osErrorISR;
 8008e3c:	f06f 0305 	mvn.w	r3, #5
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e007      	b.n	8008e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 ff92 	bl	8009d78 <vTaskDelay>
    }
  }

  return (stat);
 8008e54:	68fb      	ldr	r3, [r7, #12]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <vApplicationGetIdleTaskMemory+0x30>)
 8008e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2280      	movs	r2, #128	; 0x80
 8008e7c:	601a      	str	r2, [r3, #0]
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	200016a0 	.word	0x200016a0
 8008e90:	20001748 	.word	0x20001748

08008e94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a07      	ldr	r2, [pc, #28]	; (8008ec0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ea4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4a06      	ldr	r2, [pc, #24]	; (8008ec4 <vApplicationGetTimerTaskMemory+0x30>)
 8008eaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20001948 	.word	0x20001948
 8008ec4:	200019f0 	.word	0x200019f0

08008ec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f103 0208 	add.w	r2, r3, #8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f103 0208 	add.w	r2, r3, #8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d103      	bne.n	8008f8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e00c      	b.n	8008fa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e002      	b.n	8008f98 <vListInsert+0x2e>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d2f6      	bcs.n	8008f92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6892      	ldr	r2, [r2, #8]
 8008ff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6852      	ldr	r2, [r2, #4]
 8008ffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	429a      	cmp	r2, r3
 8009006:	d103      	bne.n	8009010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1e5a      	subs	r2, r3, #1
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800905a:	f002 f87b 	bl	800b154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	441a      	add	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908a:	3b01      	subs	r3, #1
 800908c:	68f9      	ldr	r1, [r7, #12]
 800908e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d114      	bne.n	80090da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3310      	adds	r3, #16
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 f929 	bl	800a314 <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <xQueueGenericReset+0xcc>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	e009      	b.n	80090ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3310      	adds	r3, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fef2 	bl	8008ec8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3324      	adds	r3, #36	; 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff feed 	bl	8008ec8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ee:	f002 f861 	bl	800b1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090f2:	2301      	movs	r3, #1
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <xQueueGenericCreateStatic+0x52>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <xQueueGenericCreateStatic+0x56>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericCreateStatic+0x58>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	623b      	str	r3, [r7, #32]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <xQueueGenericCreateStatic+0x7e>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <xQueueGenericCreateStatic+0x82>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericCreateStatic+0x84>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800919e:	2350      	movs	r3, #80	; 0x50
 80091a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b50      	cmp	r3, #80	; 0x50
 80091a6:	d00a      	beq.n	80091be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f805 	bl	80091f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3730      	adds	r7, #48	; 0x30
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e002      	b.n	8009212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800921e:	2101      	movs	r1, #1
 8009220:	69b8      	ldr	r0, [r7, #24]
 8009222:	f7ff ff05 	bl	8009030 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009246:	2300      	movs	r3, #0
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericSend+0x32>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <xQueueGenericSend+0x40>
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericSend+0x44>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericSend+0x46>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <xQueueGenericSend+0x60>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d103      	bne.n	80092a6 <xQueueGenericSend+0x6e>
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <xQueueGenericSend+0x72>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <xQueueGenericSend+0x74>
 80092aa:	2300      	movs	r3, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	623b      	str	r3, [r7, #32]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c6:	f001 f9e7 	bl	800a698 <xTaskGetSchedulerState>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <xQueueGenericSend+0x9e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <xQueueGenericSend+0xa2>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <xQueueGenericSend+0xa4>
 80092da:	2300      	movs	r3, #0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	61fb      	str	r3, [r7, #28]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092f6:	f001 ff2d 	bl	800b154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <xQueueGenericSend+0xd4>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d129      	bne.n	8009360 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009312:	f000 fa0b 	bl	800972c <prvCopyDataToQueue>
 8009316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	d010      	beq.n	8009342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fff5 	bl	800a314 <xTaskRemoveFromEventList>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d013      	beq.n	8009358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009330:	4b3f      	ldr	r3, [pc, #252]	; (8009430 <xQueueGenericSend+0x1f8>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	e00a      	b.n	8009358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009348:	4b39      	ldr	r3, [pc, #228]	; (8009430 <xQueueGenericSend+0x1f8>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009358:	f001 ff2c 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	e063      	b.n	8009428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009366:	f001 ff25 	bl	800b1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800936a:	2300      	movs	r3, #0
 800936c:	e05c      	b.n	8009428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f82f 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800937e:	2301      	movs	r3, #1
 8009380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009382:	f001 ff17 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009386:	f000 fd9b 	bl	8009ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800938a:	f001 fee3 	bl	800b154 <vPortEnterCritical>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009394:	b25b      	sxtb	r3, r3
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d103      	bne.n	80093a4 <xQueueGenericSend+0x16c>
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d103      	bne.n	80093ba <xQueueGenericSend+0x182>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093ba:	f001 fefb 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093be:	1d3a      	adds	r2, r7, #4
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f81e 	bl	800a408 <xTaskCheckForTimeOut>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d124      	bne.n	800941c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d4:	f000 faa2 	bl	800991c <prvIsQueueFull>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d018      	beq.n	8009410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	3310      	adds	r3, #16
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 ff44 	bl	800a274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ee:	f000 fa2d 	bl	800984c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093f2:	f000 fd73 	bl	8009edc <xTaskResumeAll>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af7c 	bne.w	80092f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093fe:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <xQueueGenericSend+0x1f8>)
 8009400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	e772      	b.n	80092f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009412:	f000 fa1b 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009416:	f000 fd61 	bl	8009edc <xTaskResumeAll>
 800941a:	e76c      	b.n	80092f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800941c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941e:	f000 fa15 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009422:	f000 fd5b 	bl	8009edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009428:	4618      	mov	r0, r3
 800942a:	3738      	adds	r7, #56	; 0x38
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b090      	sub	sp, #64	; 0x40
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <xQueueGenericSendFromISR+0x3c>
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <xQueueGenericSendFromISR+0x40>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <xQueueGenericSendFromISR+0x42>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d103      	bne.n	800949e <xQueueGenericSendFromISR+0x6a>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <xQueueGenericSendFromISR+0x6e>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <xQueueGenericSendFromISR+0x70>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	623b      	str	r3, [r7, #32]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094be:	f001 ff2b 	bl	800b318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094c2:	f3ef 8211 	mrs	r2, BASEPRI
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <xQueueGenericSendFromISR+0xbc>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d12f      	bne.n	8009550 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009506:	f000 f911 	bl	800972c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800950a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d112      	bne.n	800953a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d016      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	3324      	adds	r3, #36	; 0x24
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fef7 	bl	800a314 <xTaskRemoveFromEventList>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e007      	b.n	800954a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800953a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800953e:	3301      	adds	r3, #1
 8009540:	b2db      	uxtb	r3, r3
 8009542:	b25a      	sxtb	r2, r3
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800954a:	2301      	movs	r3, #1
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800954e:	e001      	b.n	8009554 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800955e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009562:	4618      	mov	r0, r3
 8009564:	3740      	adds	r7, #64	; 0x40
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xQueueReceive+0x30>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	623b      	str	r3, [r7, #32]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x3e>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <xQueueReceive+0x42>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <xQueueReceive+0x44>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xQueueReceive+0x5e>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61fb      	str	r3, [r7, #28]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ca:	f001 f865 	bl	800a698 <xTaskGetSchedulerState>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <xQueueReceive+0x6e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <xQueueReceive+0x72>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <xQueueReceive+0x74>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueReceive+0x8e>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	61bb      	str	r3, [r7, #24]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095fa:	f001 fdab 	bl	800b154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01f      	beq.n	800964a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f000 f8f7 	bl	8009800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	1e5a      	subs	r2, r3, #1
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00f      	beq.n	8009642 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fe74 	bl	800a314 <xTaskRemoveFromEventList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d007      	beq.n	8009642 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009632:	4b3d      	ldr	r3, [pc, #244]	; (8009728 <xQueueReceive+0x1bc>)
 8009634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009642:	f001 fdb7 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 8009646:	2301      	movs	r3, #1
 8009648:	e069      	b.n	800971e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d103      	bne.n	8009658 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009650:	f001 fdb0 	bl	800b1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009654:	2300      	movs	r3, #0
 8009656:	e062      	b.n	800971e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800965e:	f107 0310 	add.w	r3, r7, #16
 8009662:	4618      	mov	r0, r3
 8009664:	f000 feba 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800966c:	f001 fda2 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009670:	f000 fc26 	bl	8009ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009674:	f001 fd6e 	bl	800b154 <vPortEnterCritical>
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800967e:	b25b      	sxtb	r3, r3
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d103      	bne.n	800968e <xQueueReceive+0x122>
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009694:	b25b      	sxtb	r3, r3
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d103      	bne.n	80096a4 <xQueueReceive+0x138>
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a4:	f001 fd86 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096a8:	1d3a      	adds	r2, r7, #4
 80096aa:	f107 0310 	add.w	r3, r7, #16
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fea9 	bl	800a408 <xTaskCheckForTimeOut>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d123      	bne.n	8009704 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096be:	f000 f917 	bl	80098f0 <prvIsQueueEmpty>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fdcf 	bl	800a274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d8:	f000 f8b8 	bl	800984c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096dc:	f000 fbfe 	bl	8009edc <xTaskResumeAll>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d189      	bne.n	80095fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <xQueueReceive+0x1bc>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	e780      	b.n	80095fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fa:	f000 f8a7 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096fe:	f000 fbed 	bl	8009edc <xTaskResumeAll>
 8009702:	e77a      	b.n	80095fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009706:	f000 f8a1 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800970a:	f000 fbe7 	bl	8009edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800970e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009710:	f000 f8ee 	bl	80098f0 <prvIsQueueEmpty>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f af6f 	beq.w	80095fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800971c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800971e:	4618      	mov	r0, r3
 8009720:	3730      	adds	r7, #48	; 0x30
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10d      	bne.n	8009766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d14d      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ffbc 	bl	800a6d4 <xTaskPriorityDisinherit>
 800975c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	609a      	str	r2, [r3, #8]
 8009764:	e043      	b.n	80097ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d119      	bne.n	80097a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6858      	ldr	r0, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	461a      	mov	r2, r3
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	f003 fc76 	bl	800d068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d32b      	bcc.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	e026      	b.n	80097ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	68d8      	ldr	r0, [r3, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	461a      	mov	r2, r3
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	f003 fc5c 	bl	800d068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	425b      	negs	r3, r3
 80097ba:	441a      	add	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d207      	bcs.n	80097dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	425b      	negs	r3, r3
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d105      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097f6:	697b      	ldr	r3, [r7, #20]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d018      	beq.n	8009844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	441a      	add	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d303      	bcc.n	8009834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68d9      	ldr	r1, [r3, #12]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	461a      	mov	r2, r3
 800983e:	6838      	ldr	r0, [r7, #0]
 8009840:	f003 fc12 	bl	800d068 <memcpy>
	}
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009854:	f001 fc7e 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009860:	e011      	b.n	8009886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d012      	beq.n	8009890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fd50 	bl	800a314 <xTaskRemoveFromEventList>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800987a:	f000 fe27 	bl	800a4cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	3b01      	subs	r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dce9      	bgt.n	8009862 <prvUnlockQueue+0x16>
 800988e:	e000      	b.n	8009892 <prvUnlockQueue+0x46>
					break;
 8009890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800989a:	f001 fc8b 	bl	800b1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800989e:	f001 fc59 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098aa:	e011      	b.n	80098d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d012      	beq.n	80098da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3310      	adds	r3, #16
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fd2b 	bl	800a314 <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098c4:	f000 fe02 	bl	800a4cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dce9      	bgt.n	80098ac <prvUnlockQueue+0x60>
 80098d8:	e000      	b.n	80098dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	22ff      	movs	r2, #255	; 0xff
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098e4:	f001 fc66 	bl	800b1b4 <vPortExitCritical>
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098f8:	f001 fc2c 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e001      	b.n	800990e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f001 fc51 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009924:	f001 fc16 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009930:	429a      	cmp	r2, r3
 8009932:	d102      	bne.n	800993a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e001      	b.n	800993e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800993e:	f001 fc39 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e014      	b.n	8009986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800995c:	4a0f      	ldr	r2, [pc, #60]	; (800999c <vQueueAddToRegistry+0x50>)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10b      	bne.n	8009980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009968:	490c      	ldr	r1, [pc, #48]	; (800999c <vQueueAddToRegistry+0x50>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009972:	4a0a      	ldr	r2, [pc, #40]	; (800999c <vQueueAddToRegistry+0x50>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800997e:	e006      	b.n	800998e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b07      	cmp	r3, #7
 800998a:	d9e7      	bls.n	800995c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20001df0 	.word	0x20001df0

080099a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099b0:	f001 fbd0 	bl	800b154 <vPortEnterCritical>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ba:	b25b      	sxtb	r3, r3
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d103      	bne.n	80099ca <vQueueWaitForMessageRestricted+0x2a>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d0:	b25b      	sxtb	r3, r3
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d103      	bne.n	80099e0 <vQueueWaitForMessageRestricted+0x40>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e0:	f001 fbe8 	bl	800b1b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fc61 	bl	800a2bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff26 	bl	800984c <prvUnlockQueue>
	}
 8009a00:	bf00      	nop
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	; 0x38
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	623b      	str	r3, [r7, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xTaskCreateStatic+0x46>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	61fb      	str	r3, [r7, #28]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a4e:	23a8      	movs	r3, #168	; 0xa8
 8009a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2ba8      	cmp	r3, #168	; 0xa8
 8009a56:	d00a      	beq.n	8009a6e <xTaskCreateStatic+0x66>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	61bb      	str	r3, [r7, #24]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01e      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01b      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	f107 0314 	add.w	r3, r7, #20
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f850 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aae:	f000 f8f3 	bl	8009c98 <prvAddNewTaskToReadyList>
 8009ab2:	e001      	b.n	8009ab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ab8:	697b      	ldr	r3, [r7, #20]
	}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	; 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08c      	sub	sp, #48	; 0x30
 8009ac6:	af04      	add	r7, sp, #16
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fc5e 	bl	800b398 <pvPortMalloc>
 8009adc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ae4:	20a8      	movs	r0, #168	; 0xa8
 8009ae6:	f001 fc57 	bl	800b398 <pvPortMalloc>
 8009aea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
 8009af8:	e005      	b.n	8009b06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	f001 fd18 	bl	800b530 <vPortFree>
 8009b00:	e001      	b.n	8009b06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d017      	beq.n	8009b3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f80e 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 f8b1 	bl	8009c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e002      	b.n	8009b42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b42:	69bb      	ldr	r3, [r7, #24]
	}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3720      	adds	r7, #32
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	461a      	mov	r2, r3
 8009b64:	21a5      	movs	r1, #165	; 0xa5
 8009b66:	f003 f998 	bl	800ce9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b74:	3b01      	subs	r3, #1
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f023 0307 	bic.w	r3, r3, #7
 8009b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01f      	beq.n	8009bea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e012      	b.n	8009bd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	7819      	ldrb	r1, [r3, #0]
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3334      	adds	r3, #52	; 0x34
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b0f      	cmp	r3, #15
 8009bda:	d9e9      	bls.n	8009bb0 <prvInitialiseNewTask+0x64>
 8009bdc:	e000      	b.n	8009be0 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009be8:	e003      	b.n	8009bf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	2b37      	cmp	r3, #55	; 0x37
 8009bf6:	d901      	bls.n	8009bfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bf8:	2337      	movs	r3, #55	; 0x37
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	3304      	adds	r3, #4
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f978 	bl	8008f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	3318      	adds	r3, #24
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f973 	bl	8008f08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	3354      	adds	r3, #84	; 0x54
 8009c4c:	224c      	movs	r2, #76	; 0x4c
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f003 f922 	bl	800ce9a <memset>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <prvInitialiseNewTask+0x140>)
 8009c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	4a0c      	ldr	r2, [pc, #48]	; (8009c90 <prvInitialiseNewTask+0x144>)
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	4a0b      	ldr	r2, [pc, #44]	; (8009c94 <prvInitialiseNewTask+0x148>)
 8009c66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f001 f941 	bl	800aef4 <pxPortInitialiseStack>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c84:	bf00      	nop
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	2000303c 	.word	0x2000303c
 8009c90:	200030a4 	.word	0x200030a4
 8009c94:	2000310c 	.word	0x2000310c

08009c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ca0:	f001 fa58 	bl	800b154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ca4:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a2c      	ldr	r2, [pc, #176]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cae:	4b2c      	ldr	r3, [pc, #176]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cbc:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d110      	bne.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cc4:	f000 fc26 	bl	800a514 <prvInitialiseTaskLists>
 8009cc8:	e00d      	b.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cca:	4b26      	ldr	r3, [pc, #152]	; (8009d64 <prvAddNewTaskToReadyList+0xcc>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cd2:	4b23      	ldr	r3, [pc, #140]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d802      	bhi.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ce0:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ce6:	4b20      	ldr	r3, [pc, #128]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a1e      	ldr	r2, [pc, #120]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009cee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cf0:	4b1d      	ldr	r3, [pc, #116]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <prvAddNewTaskToReadyList+0xd4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d903      	bls.n	8009d0c <prvAddNewTaskToReadyList+0x74>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <prvAddNewTaskToReadyList+0xd4>)
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <prvAddNewTaskToReadyList+0xd8>)
 8009d1a:	441a      	add	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f7ff f8fd 	bl	8008f22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d28:	f001 fa44 	bl	800b1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <prvAddNewTaskToReadyList+0xcc>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d207      	bcs.n	8009d52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d42:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <prvAddNewTaskToReadyList+0xdc>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20002304 	.word	0x20002304
 8009d60:	20001e30 	.word	0x20001e30
 8009d64:	20002310 	.word	0x20002310
 8009d68:	20002320 	.word	0x20002320
 8009d6c:	2000230c 	.word	0x2000230c
 8009d70:	20001e34 	.word	0x20001e34
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d017      	beq.n	8009dba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <vTaskDelay+0x60>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <vTaskDelay+0x30>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	60bb      	str	r3, [r7, #8]
}
 8009da4:	bf00      	nop
 8009da6:	e7fe      	b.n	8009da6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009da8:	f000 f88a 	bl	8009ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fcfe 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009db4:	f000 f892 	bl	8009edc <xTaskResumeAll>
 8009db8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d107      	bne.n	8009dd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009dc0:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <vTaskDelay+0x64>)
 8009dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	2000232c 	.word	0x2000232c
 8009ddc:	e000ed04 	.word	0xe000ed04

08009de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	; 0x28
 8009de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dee:	463a      	mov	r2, r7
 8009df0:	1d39      	adds	r1, r7, #4
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff f832 	bl	8008e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	9202      	str	r2, [sp, #8]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	2300      	movs	r3, #0
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	4924      	ldr	r1, [pc, #144]	; (8009ea0 <vTaskStartScheduler+0xc0>)
 8009e10:	4824      	ldr	r0, [pc, #144]	; (8009ea4 <vTaskStartScheduler+0xc4>)
 8009e12:	f7ff fdf9 	bl	8009a08 <xTaskCreateStatic>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a23      	ldr	r2, [pc, #140]	; (8009ea8 <vTaskStartScheduler+0xc8>)
 8009e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e1c:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <vTaskStartScheduler+0xc8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e001      	b.n	8009e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d102      	bne.n	8009e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e34:	f000 fd10 	bl	800a858 <xTimerCreateTimerTask>
 8009e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d11b      	bne.n	8009e78 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e54:	4b15      	ldr	r3, [pc, #84]	; (8009eac <vTaskStartScheduler+0xcc>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3354      	adds	r3, #84	; 0x54
 8009e5a:	4a15      	ldr	r2, [pc, #84]	; (8009eb0 <vTaskStartScheduler+0xd0>)
 8009e5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <vTaskStartScheduler+0xd4>)
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <vTaskStartScheduler+0xd8>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e6c:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <vTaskStartScheduler+0xdc>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e72:	f001 f8cd 	bl	800b010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e76:	e00e      	b.n	8009e96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d10a      	bne.n	8009e96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <vTaskStartScheduler+0xb4>
}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0800fb40 	.word	0x0800fb40
 8009ea4:	0800a4e5 	.word	0x0800a4e5
 8009ea8:	20002328 	.word	0x20002328
 8009eac:	20001e30 	.word	0x20001e30
 8009eb0:	200001d4 	.word	0x200001d4
 8009eb4:	20002324 	.word	0x20002324
 8009eb8:	20002310 	.word	0x20002310
 8009ebc:	20002308 	.word	0x20002308

08009ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ec4:	4b04      	ldr	r3, [pc, #16]	; (8009ed8 <vTaskSuspendAll+0x18>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	4a03      	ldr	r2, [pc, #12]	; (8009ed8 <vTaskSuspendAll+0x18>)
 8009ecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	2000232c 	.word	0x2000232c

08009edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eea:	4b42      	ldr	r3, [pc, #264]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	603b      	str	r3, [r7, #0]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f08:	f001 f924 	bl	800b154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f0c:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	4a38      	ldr	r2, [pc, #224]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f16:	4b37      	ldr	r3, [pc, #220]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d162      	bne.n	8009fe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f1e:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <xTaskResumeAll+0x11c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d05e      	beq.n	8009fe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f26:	e02f      	b.n	8009f88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f28:	4b34      	ldr	r3, [pc, #208]	; (8009ffc <xTaskResumeAll+0x120>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3318      	adds	r3, #24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff f851 	bl	8008fdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff f84c 	bl	8008fdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <xTaskResumeAll+0x124>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d903      	bls.n	8009f58 <xTaskResumeAll+0x7c>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a2a      	ldr	r2, [pc, #168]	; (800a000 <xTaskResumeAll+0x124>)
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a27      	ldr	r2, [pc, #156]	; (800a004 <xTaskResumeAll+0x128>)
 8009f66:	441a      	add	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fe ffd7 	bl	8008f22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4b23      	ldr	r3, [pc, #140]	; (800a008 <xTaskResumeAll+0x12c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d302      	bcc.n	8009f88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f82:	4b22      	ldr	r3, [pc, #136]	; (800a00c <xTaskResumeAll+0x130>)
 8009f84:	2201      	movs	r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <xTaskResumeAll+0x120>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1cb      	bne.n	8009f28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f96:	f000 fb5f 	bl	800a658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <xTaskResumeAll+0x134>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d010      	beq.n	8009fc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fa6:	f000 f847 	bl	800a038 <xTaskIncrementTick>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fb0:	4b16      	ldr	r3, [pc, #88]	; (800a00c <xTaskResumeAll+0x130>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f1      	bne.n	8009fa6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fc2:	4b13      	ldr	r3, [pc, #76]	; (800a010 <xTaskResumeAll+0x134>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fc8:	4b10      	ldr	r3, [pc, #64]	; (800a00c <xTaskResumeAll+0x130>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fd4:	4b0f      	ldr	r3, [pc, #60]	; (800a014 <xTaskResumeAll+0x138>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 f8e6 	bl	800b1b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2000232c 	.word	0x2000232c
 8009ff8:	20002304 	.word	0x20002304
 8009ffc:	200022c4 	.word	0x200022c4
 800a000:	2000230c 	.word	0x2000230c
 800a004:	20001e34 	.word	0x20001e34
 800a008:	20001e30 	.word	0x20001e30
 800a00c:	20002318 	.word	0x20002318
 800a010:	20002314 	.word	0x20002314
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <xTaskGetTickCount+0x1c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a024:	687b      	ldr	r3, [r7, #4]
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20002308 	.word	0x20002308

0800a038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a042:	4b4f      	ldr	r3, [pc, #316]	; (800a180 <xTaskIncrementTick+0x148>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f040 808f 	bne.w	800a16a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a04c:	4b4d      	ldr	r3, [pc, #308]	; (800a184 <xTaskIncrementTick+0x14c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a054:	4a4b      	ldr	r2, [pc, #300]	; (800a184 <xTaskIncrementTick+0x14c>)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d120      	bne.n	800a0a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a060:	4b49      	ldr	r3, [pc, #292]	; (800a188 <xTaskIncrementTick+0x150>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <xTaskIncrementTick+0x48>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	603b      	str	r3, [r7, #0]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <xTaskIncrementTick+0x46>
 800a080:	4b41      	ldr	r3, [pc, #260]	; (800a188 <xTaskIncrementTick+0x150>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	4b41      	ldr	r3, [pc, #260]	; (800a18c <xTaskIncrementTick+0x154>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <xTaskIncrementTick+0x150>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	4a3f      	ldr	r2, [pc, #252]	; (800a18c <xTaskIncrementTick+0x154>)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <xTaskIncrementTick+0x158>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3301      	adds	r3, #1
 800a09a:	4a3d      	ldr	r2, [pc, #244]	; (800a190 <xTaskIncrementTick+0x158>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	f000 fadb 	bl	800a658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0a2:	4b3c      	ldr	r3, [pc, #240]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d349      	bcc.n	800a140 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ac:	4b36      	ldr	r3, [pc, #216]	; (800a188 <xTaskIncrementTick+0x150>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d104      	bne.n	800a0c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b6:	4b37      	ldr	r3, [pc, #220]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	601a      	str	r2, [r3, #0]
					break;
 800a0be:	e03f      	b.n	800a140 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c0:	4b31      	ldr	r3, [pc, #196]	; (800a188 <xTaskIncrementTick+0x150>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d203      	bcs.n	800a0e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0d8:	4a2e      	ldr	r2, [pc, #184]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0de:	e02f      	b.n	800a140 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe ff79 	bl	8008fdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe ff70 	bl	8008fdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <xTaskIncrementTick+0x160>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d903      	bls.n	800a110 <xTaskIncrementTick+0xd8>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	4a22      	ldr	r2, [pc, #136]	; (800a198 <xTaskIncrementTick+0x160>)
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <xTaskIncrementTick+0x164>)
 800a11e:	441a      	add	r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7fe fefb 	bl	8008f22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <xTaskIncrementTick+0x168>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	429a      	cmp	r2, r3
 800a138:	d3b8      	bcc.n	800a0ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13e:	e7b5      	b.n	800a0ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <xTaskIncrementTick+0x168>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a146:	4915      	ldr	r1, [pc, #84]	; (800a19c <xTaskIncrementTick+0x164>)
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d901      	bls.n	800a15c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <xTaskIncrementTick+0x16c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a164:	2301      	movs	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e004      	b.n	800a174 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <xTaskIncrementTick+0x170>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <xTaskIncrementTick+0x170>)
 800a172:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a174:	697b      	ldr	r3, [r7, #20]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	2000232c 	.word	0x2000232c
 800a184:	20002308 	.word	0x20002308
 800a188:	200022bc 	.word	0x200022bc
 800a18c:	200022c0 	.word	0x200022c0
 800a190:	2000231c 	.word	0x2000231c
 800a194:	20002324 	.word	0x20002324
 800a198:	2000230c 	.word	0x2000230c
 800a19c:	20001e34 	.word	0x20001e34
 800a1a0:	20001e30 	.word	0x20001e30
 800a1a4:	20002318 	.word	0x20002318
 800a1a8:	20002314 	.word	0x20002314

0800a1ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1b2:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <vTaskSwitchContext+0xb0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1ba:	4b29      	ldr	r3, [pc, #164]	; (800a260 <vTaskSwitchContext+0xb4>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1c0:	e046      	b.n	800a250 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a1c2:	4b27      	ldr	r3, [pc, #156]	; (800a260 <vTaskSwitchContext+0xb4>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c8:	4b26      	ldr	r3, [pc, #152]	; (800a264 <vTaskSwitchContext+0xb8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	e010      	b.n	800a1f2 <vTaskSwitchContext+0x46>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <vTaskSwitchContext+0x40>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	607b      	str	r3, [r7, #4]
}
 800a1e8:	bf00      	nop
 800a1ea:	e7fe      	b.n	800a1ea <vTaskSwitchContext+0x3e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	491d      	ldr	r1, [pc, #116]	; (800a268 <vTaskSwitchContext+0xbc>)
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0e4      	beq.n	800a1d0 <vTaskSwitchContext+0x24>
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <vTaskSwitchContext+0xbc>)
 800a212:	4413      	add	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	605a      	str	r2, [r3, #4]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	3308      	adds	r3, #8
 800a228:	429a      	cmp	r2, r3
 800a22a:	d104      	bne.n	800a236 <vTaskSwitchContext+0x8a>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	605a      	str	r2, [r3, #4]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	4a0b      	ldr	r2, [pc, #44]	; (800a26c <vTaskSwitchContext+0xc0>)
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	4a08      	ldr	r2, [pc, #32]	; (800a264 <vTaskSwitchContext+0xb8>)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <vTaskSwitchContext+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3354      	adds	r3, #84	; 0x54
 800a24c:	4a08      	ldr	r2, [pc, #32]	; (800a270 <vTaskSwitchContext+0xc4>)
 800a24e:	6013      	str	r3, [r2, #0]
}
 800a250:	bf00      	nop
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	2000232c 	.word	0x2000232c
 800a260:	20002318 	.word	0x20002318
 800a264:	2000230c 	.word	0x2000230c
 800a268:	20001e34 	.word	0x20001e34
 800a26c:	20001e30 	.word	0x20001e30
 800a270:	200001d4 	.word	0x200001d4

0800a274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a29a:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <vTaskPlaceOnEventList+0x44>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3318      	adds	r3, #24
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7fe fe61 	bl	8008f6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	6838      	ldr	r0, [r7, #0]
 800a2ac:	f000 fa80 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20001e30 	.word	0x20001e30

0800a2bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	617b      	str	r3, [r7, #20]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3318      	adds	r3, #24
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7fe fe18 	bl	8008f22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68b8      	ldr	r0, [r7, #8]
 800a302:	f000 fa55 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
	}
 800a306:	bf00      	nop
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20001e30 	.word	0x20001e30

0800a314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	60fb      	str	r3, [r7, #12]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3318      	adds	r3, #24
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fe49 	bl	8008fdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a34a:	4b1e      	ldr	r3, [pc, #120]	; (800a3c4 <xTaskRemoveFromEventList+0xb0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d11d      	bne.n	800a38e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3304      	adds	r3, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fe40 	bl	8008fdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <xTaskRemoveFromEventList+0xb4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	429a      	cmp	r2, r3
 800a366:	d903      	bls.n	800a370 <xTaskRemoveFromEventList+0x5c>
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <xTaskRemoveFromEventList+0xb4>)
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4a13      	ldr	r2, [pc, #76]	; (800a3cc <xTaskRemoveFromEventList+0xb8>)
 800a37e:	441a      	add	r2, r3
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3304      	adds	r3, #4
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f7fe fdcb 	bl	8008f22 <vListInsertEnd>
 800a38c:	e005      	b.n	800a39a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3318      	adds	r3, #24
 800a392:	4619      	mov	r1, r3
 800a394:	480e      	ldr	r0, [pc, #56]	; (800a3d0 <xTaskRemoveFromEventList+0xbc>)
 800a396:	f7fe fdc4 	bl	8008f22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <xTaskRemoveFromEventList+0xc0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d905      	bls.n	800a3b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <xTaskRemoveFromEventList+0xc4>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	e001      	b.n	800a3b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3b8:	697b      	ldr	r3, [r7, #20]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2000232c 	.word	0x2000232c
 800a3c8:	2000230c 	.word	0x2000230c
 800a3cc:	20001e34 	.word	0x20001e34
 800a3d0:	200022c4 	.word	0x200022c4
 800a3d4:	20001e30 	.word	0x20001e30
 800a3d8:	20002318 	.word	0x20002318

0800a3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <vTaskInternalSetTimeOutState+0x24>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <vTaskInternalSetTimeOutState+0x28>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	2000231c 	.word	0x2000231c
 800a404:	20002308 	.word	0x20002308

0800a408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	613b      	str	r3, [r7, #16]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a44a:	f000 fe83 	bl	800b154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <xTaskCheckForTimeOut+0xbc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d102      	bne.n	800a46e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a468:	2300      	movs	r3, #0
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e023      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <xTaskCheckForTimeOut+0xc0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d007      	beq.n	800a48a <xTaskCheckForTimeOut+0x82>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	429a      	cmp	r2, r3
 800a482:	d302      	bcc.n	800a48a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	61fb      	str	r3, [r7, #28]
 800a488:	e015      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	429a      	cmp	r2, r3
 800a492:	d20b      	bcs.n	800a4ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff9b 	bl	800a3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e004      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f000 fe7d 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20002308 	.word	0x20002308
 800a4c8:	2000231c 	.word	0x2000231c

0800a4cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <vTaskMissedYield+0x14>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20002318 	.word	0x20002318

0800a4e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4ec:	f000 f852 	bl	800a594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <prvIdleTask+0x28>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d9f9      	bls.n	800a4ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <prvIdleTask+0x2c>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a508:	e7f0      	b.n	800a4ec <prvIdleTask+0x8>
 800a50a:	bf00      	nop
 800a50c:	20001e34 	.word	0x20001e34
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e00c      	b.n	800a53a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4a12      	ldr	r2, [pc, #72]	; (800a574 <prvInitialiseTaskLists+0x60>)
 800a52c:	4413      	add	r3, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fcca 	bl	8008ec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3301      	adds	r3, #1
 800a538:	607b      	str	r3, [r7, #4]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b37      	cmp	r3, #55	; 0x37
 800a53e:	d9ef      	bls.n	800a520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a540:	480d      	ldr	r0, [pc, #52]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a542:	f7fe fcc1 	bl	8008ec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a546:	480d      	ldr	r0, [pc, #52]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a548:	f7fe fcbe 	bl	8008ec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a54c:	480c      	ldr	r0, [pc, #48]	; (800a580 <prvInitialiseTaskLists+0x6c>)
 800a54e:	f7fe fcbb 	bl	8008ec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a552:	480c      	ldr	r0, [pc, #48]	; (800a584 <prvInitialiseTaskLists+0x70>)
 800a554:	f7fe fcb8 	bl	8008ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a558:	480b      	ldr	r0, [pc, #44]	; (800a588 <prvInitialiseTaskLists+0x74>)
 800a55a:	f7fe fcb5 	bl	8008ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <prvInitialiseTaskLists+0x78>)
 800a560:	4a05      	ldr	r2, [pc, #20]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvInitialiseTaskLists+0x7c>)
 800a566:	4a05      	ldr	r2, [pc, #20]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a568:	601a      	str	r2, [r3, #0]
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20001e34 	.word	0x20001e34
 800a578:	20002294 	.word	0x20002294
 800a57c:	200022a8 	.word	0x200022a8
 800a580:	200022c4 	.word	0x200022c4
 800a584:	200022d8 	.word	0x200022d8
 800a588:	200022f0 	.word	0x200022f0
 800a58c:	200022bc 	.word	0x200022bc
 800a590:	200022c0 	.word	0x200022c0

0800a594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a59a:	e019      	b.n	800a5d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a59c:	f000 fdda 	bl	800b154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <prvCheckTasksWaitingTermination+0x50>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fd15 	bl	8008fdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5c6:	f000 fdf5 	bl	800b1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f810 	bl	800a5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e1      	bne.n	800a59c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200022d8 	.word	0x200022d8
 800a5e8:	20002304 	.word	0x20002304
 800a5ec:	200022ec 	.word	0x200022ec

0800a5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3354      	adds	r3, #84	; 0x54
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f002 fc7b 	bl	800cef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d108      	bne.n	800a61e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	4618      	mov	r0, r3
 800a612:	f000 ff8d 	bl	800b530 <vPortFree>
				vPortFree( pxTCB );
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 ff8a 	bl	800b530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a61c:	e018      	b.n	800a650 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a624:	2b01      	cmp	r3, #1
 800a626:	d103      	bne.n	800a630 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 ff81 	bl	800b530 <vPortFree>
	}
 800a62e:	e00f      	b.n	800a650 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a636:	2b02      	cmp	r3, #2
 800a638:	d00a      	beq.n	800a650 <prvDeleteTCB+0x60>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <prvDeleteTCB+0x5e>
	}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295
 800a66e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a670:	e008      	b.n	800a684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a04      	ldr	r2, [pc, #16]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a682:	6013      	str	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	200022bc 	.word	0x200022bc
 800a694:	20002324 	.word	0x20002324

0800a698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <xTaskGetSchedulerState+0x34>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	e008      	b.n	800a6be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ac:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <xTaskGetSchedulerState+0x38>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e001      	b.n	800a6be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6be:	687b      	ldr	r3, [r7, #4]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20002310 	.word	0x20002310
 800a6d0:	2000232c 	.word	0x2000232c

0800a6d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d056      	beq.n	800a798 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6ea:	4b2e      	ldr	r3, [pc, #184]	; (800a7a4 <xTaskPriorityDisinherit+0xd0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d00a      	beq.n	800a70a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	60fb      	str	r3, [r7, #12]
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60bb      	str	r3, [r7, #8]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	1e5a      	subs	r2, r3, #1
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d02c      	beq.n	800a798 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a742:	2b00      	cmp	r3, #0
 800a744:	d128      	bne.n	800a798 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	3304      	adds	r3, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fc46 	bl	8008fdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <xTaskPriorityDisinherit+0xd4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d903      	bls.n	800a778 <xTaskPriorityDisinherit+0xa4>
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	4a0c      	ldr	r2, [pc, #48]	; (800a7a8 <xTaskPriorityDisinherit+0xd4>)
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4a09      	ldr	r2, [pc, #36]	; (800a7ac <xTaskPriorityDisinherit+0xd8>)
 800a786:	441a      	add	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7fe fbc7 	bl	8008f22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a798:	697b      	ldr	r3, [r7, #20]
	}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20001e30 	.word	0x20001e30
 800a7a8:	2000230c 	.word	0x2000230c
 800a7ac:	20001e34 	.word	0x20001e34

0800a7b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c0:	4b20      	ldr	r3, [pc, #128]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc08 	bl	8008fdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d2:	d10a      	bne.n	800a7ea <prvAddCurrentTaskToDelayedList+0x3a>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7da:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4819      	ldr	r0, [pc, #100]	; (800a848 <prvAddCurrentTaskToDelayedList+0x98>)
 800a7e4:	f7fe fb9d 	bl	8008f22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7e8:	e026      	b.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7f2:	4b14      	ldr	r3, [pc, #80]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d209      	bcs.n	800a816 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a802:	4b12      	ldr	r3, [pc, #72]	; (800a84c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe fbab 	bl	8008f6a <vListInsert>
}
 800a814:	e010      	b.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a816:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3304      	adds	r3, #4
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7fe fba1 	bl	8008f6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d202      	bcs.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a832:	4a08      	ldr	r2, [pc, #32]	; (800a854 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	6013      	str	r3, [r2, #0]
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20002308 	.word	0x20002308
 800a844:	20001e30 	.word	0x20001e30
 800a848:	200022f0 	.word	0x200022f0
 800a84c:	200022c0 	.word	0x200022c0
 800a850:	200022bc 	.word	0x200022bc
 800a854:	20002324 	.word	0x20002324

0800a858 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a862:	f000 fb07 	bl	800ae74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <xTimerCreateTimerTask+0x80>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d021      	beq.n	800a8b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a876:	1d3a      	adds	r2, r7, #4
 800a878:	f107 0108 	add.w	r1, r7, #8
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	4618      	mov	r0, r3
 800a882:	f7fe fb07 	bl	8008e94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	9202      	str	r2, [sp, #8]
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2302      	movs	r3, #2
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	460a      	mov	r2, r1
 800a898:	4910      	ldr	r1, [pc, #64]	; (800a8dc <xTimerCreateTimerTask+0x84>)
 800a89a:	4811      	ldr	r0, [pc, #68]	; (800a8e0 <xTimerCreateTimerTask+0x88>)
 800a89c:	f7ff f8b4 	bl	8009a08 <xTaskCreateStatic>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4a10      	ldr	r2, [pc, #64]	; (800a8e4 <xTimerCreateTimerTask+0x8c>)
 800a8a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <xTimerCreateTimerTask+0x8c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	613b      	str	r3, [r7, #16]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8ce:	697b      	ldr	r3, [r7, #20]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20002360 	.word	0x20002360
 800a8dc:	0800fb48 	.word	0x0800fb48
 800a8e0:	0800aa1d 	.word	0x0800aa1d
 800a8e4:	20002364 	.word	0x20002364

0800a8e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	623b      	str	r3, [r7, #32]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a916:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <xTimerGenericCommand+0x98>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d02a      	beq.n	800a974 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b05      	cmp	r3, #5
 800a92e:	dc18      	bgt.n	800a962 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a930:	f7ff feb2 	bl	800a698 <xTaskGetSchedulerState>
 800a934:	4603      	mov	r3, r0
 800a936:	2b02      	cmp	r3, #2
 800a938:	d109      	bne.n	800a94e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a93a:	4b11      	ldr	r3, [pc, #68]	; (800a980 <xTimerGenericCommand+0x98>)
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f107 0110 	add.w	r1, r7, #16
 800a942:	2300      	movs	r3, #0
 800a944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a946:	f7fe fc77 	bl	8009238 <xQueueGenericSend>
 800a94a:	6278      	str	r0, [r7, #36]	; 0x24
 800a94c:	e012      	b.n	800a974 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <xTimerGenericCommand+0x98>)
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	f107 0110 	add.w	r1, r7, #16
 800a956:	2300      	movs	r3, #0
 800a958:	2200      	movs	r2, #0
 800a95a:	f7fe fc6d 	bl	8009238 <xQueueGenericSend>
 800a95e:	6278      	str	r0, [r7, #36]	; 0x24
 800a960:	e008      	b.n	800a974 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <xTimerGenericCommand+0x98>)
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f107 0110 	add.w	r1, r7, #16
 800a96a:	2300      	movs	r3, #0
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	f7fe fd61 	bl	8009434 <xQueueGenericSendFromISR>
 800a972:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	; 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20002360 	.word	0x20002360

0800a984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a98e:	4b22      	ldr	r3, [pc, #136]	; (800aa18 <prvProcessExpiredTimer+0x94>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fb1d 	bl	8008fdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d022      	beq.n	800a9f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	699a      	ldr	r2, [r3, #24]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	18d1      	adds	r1, r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	6978      	ldr	r0, [r7, #20]
 800a9be:	f000 f8d1 	bl	800ab64 <prvInsertTimerInActiveList>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01f      	beq.n	800aa08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6978      	ldr	r0, [r7, #20]
 800a9d4:	f7ff ff88 	bl	800a8e8 <xTimerGenericCommand>
 800a9d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d113      	bne.n	800aa08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	60fb      	str	r3, [r7, #12]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	6978      	ldr	r0, [r7, #20]
 800aa0e:	4798      	blx	r3
}
 800aa10:	bf00      	nop
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	20002358 	.word	0x20002358

0800aa1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa24:	f107 0308 	add.w	r3, r7, #8
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 f857 	bl	800aadc <prvGetNextExpireTime>
 800aa2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	4619      	mov	r1, r3
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 f803 	bl	800aa40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa3a:	f000 f8d5 	bl	800abe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa3e:	e7f1      	b.n	800aa24 <prvTimerTask+0x8>

0800aa40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa4a:	f7ff fa39 	bl	8009ec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa4e:	f107 0308 	add.w	r3, r7, #8
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 f866 	bl	800ab24 <prvSampleTimeNow>
 800aa58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d130      	bne.n	800aac2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10a      	bne.n	800aa7c <prvProcessTimerOrBlockTask+0x3c>
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d806      	bhi.n	800aa7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa6e:	f7ff fa35 	bl	8009edc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa72:	68f9      	ldr	r1, [r7, #12]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff ff85 	bl	800a984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa7a:	e024      	b.n	800aac6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d008      	beq.n	800aa94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa82:	4b13      	ldr	r3, [pc, #76]	; (800aad0 <prvProcessTimerOrBlockTask+0x90>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <prvProcessTimerOrBlockTask+0x50>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e000      	b.n	800aa92 <prvProcessTimerOrBlockTask+0x52>
 800aa90:	2300      	movs	r3, #0
 800aa92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa94:	4b0f      	ldr	r3, [pc, #60]	; (800aad4 <prvProcessTimerOrBlockTask+0x94>)
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	f7fe ff7d 	bl	80099a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aaa6:	f7ff fa19 	bl	8009edc <xTaskResumeAll>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aab0:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <prvProcessTimerOrBlockTask+0x98>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
}
 800aac0:	e001      	b.n	800aac6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aac2:	f7ff fa0b 	bl	8009edc <xTaskResumeAll>
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	2000235c 	.word	0x2000235c
 800aad4:	20002360 	.word	0x20002360
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aae4:	4b0e      	ldr	r3, [pc, #56]	; (800ab20 <prvGetNextExpireTime+0x44>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <prvGetNextExpireTime+0x16>
 800aaee:	2201      	movs	r2, #1
 800aaf0:	e000      	b.n	800aaf4 <prvGetNextExpireTime+0x18>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab00:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <prvGetNextExpireTime+0x44>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	e001      	b.n	800ab10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab10:	68fb      	ldr	r3, [r7, #12]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	20002358 	.word	0x20002358

0800ab24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab2c:	f7ff fa74 	bl	800a018 <xTaskGetTickCount>
 800ab30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab32:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <prvSampleTimeNow+0x3c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d205      	bcs.n	800ab48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab3c:	f000 f936 	bl	800adac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	e002      	b.n	800ab4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab4e:	4a04      	ldr	r2, [pc, #16]	; (800ab60 <prvSampleTimeNow+0x3c>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab54:	68fb      	ldr	r3, [r7, #12]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20002368 	.word	0x20002368

0800ab64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d812      	bhi.n	800abb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d302      	bcc.n	800ab9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	e01b      	b.n	800abd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab9e:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <prvInsertTimerInActiveList+0x7c>)
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3304      	adds	r3, #4
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7fe f9de 	bl	8008f6a <vListInsert>
 800abae:	e012      	b.n	800abd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d206      	bcs.n	800abc6 <prvInsertTimerInActiveList+0x62>
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d302      	bcc.n	800abc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abc0:	2301      	movs	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e007      	b.n	800abd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abc6:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <prvInsertTimerInActiveList+0x80>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3304      	adds	r3, #4
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7fe f9ca 	bl	8008f6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abd6:	697b      	ldr	r3, [r7, #20]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	2000235c 	.word	0x2000235c
 800abe4:	20002358 	.word	0x20002358

0800abe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08e      	sub	sp, #56	; 0x38
 800abec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abee:	e0ca      	b.n	800ad86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	da18      	bge.n	800ac28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abf6:	1d3b      	adds	r3, r7, #4
 800abf8:	3304      	adds	r3, #4
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	61fb      	str	r3, [r7, #28]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac1e:	6850      	ldr	r0, [r2, #4]
 800ac20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac22:	6892      	ldr	r2, [r2, #8]
 800ac24:	4611      	mov	r1, r2
 800ac26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f2c0 80ab 	blt.w	800ad86 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe f9cb 	bl	8008fdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac46:	463b      	mov	r3, r7
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff ff6b 	bl	800ab24 <prvSampleTimeNow>
 800ac4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	f200 8096 	bhi.w	800ad84 <prvProcessReceivedCommands+0x19c>
 800ac58:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <prvProcessReceivedCommands+0x78>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac89 	.word	0x0800ac89
 800ac68:	0800ac89 	.word	0x0800ac89
 800ac6c:	0800acfd 	.word	0x0800acfd
 800ac70:	0800ad11 	.word	0x0800ad11
 800ac74:	0800ad5b 	.word	0x0800ad5b
 800ac78:	0800ac89 	.word	0x0800ac89
 800ac7c:	0800ac89 	.word	0x0800ac89
 800ac80:	0800acfd 	.word	0x0800acfd
 800ac84:	0800ad11 	.word	0x0800ad11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	18d1      	adds	r1, r2, r3
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca8:	f7ff ff5c 	bl	800ab64 <prvInsertTimerInActiveList>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d069      	beq.n	800ad86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d05e      	beq.n	800ad86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	441a      	add	r2, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	2300      	movs	r3, #0
 800acd6:	2100      	movs	r1, #0
 800acd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acda:	f7ff fe05 	bl	800a8e8 <xTimerGenericCommand>
 800acde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d14f      	bne.n	800ad86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	61bb      	str	r3, [r7, #24]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad02:	f023 0301 	bic.w	r3, r3, #1
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad0e:	e03a      	b.n	800ad86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10a      	bne.n	800ad46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	617b      	str	r3, [r7, #20]
}
 800ad42:	bf00      	nop
 800ad44:	e7fe      	b.n	800ad44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	699a      	ldr	r2, [r3, #24]
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	18d1      	adds	r1, r2, r3
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad54:	f7ff ff06 	bl	800ab64 <prvInsertTimerInActiveList>
					break;
 800ad58:	e015      	b.n	800ad86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad60:	f003 0302 	and.w	r3, r3, #2
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6a:	f000 fbe1 	bl	800b530 <vPortFree>
 800ad6e:	e00a      	b.n	800ad86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad76:	f023 0301 	bic.w	r3, r3, #1
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad82:	e000      	b.n	800ad86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ad84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <prvProcessReceivedCommands+0x1c0>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	1d39      	adds	r1, r7, #4
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fbec 	bl	800956c <xQueueReceive>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f47f af2a 	bne.w	800abf0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	3730      	adds	r7, #48	; 0x30
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20002360 	.word	0x20002360

0800adac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adb2:	e048      	b.n	800ae46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adb4:	4b2d      	ldr	r3, [pc, #180]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adbe:	4b2b      	ldr	r3, [pc, #172]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3304      	adds	r3, #4
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe f905 	bl	8008fdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d02e      	beq.n	800ae46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4413      	add	r3, r2
 800adf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d90e      	bls.n	800ae18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae06:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4610      	mov	r0, r2
 800ae12:	f7fe f8aa 	bl	8008f6a <vListInsert>
 800ae16:	e016      	b.n	800ae46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	2100      	movs	r1, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7ff fd60 	bl	800a8e8 <xTimerGenericCommand>
 800ae28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	603b      	str	r3, [r7, #0]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1b1      	bne.n	800adb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae50:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae56:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <prvSwitchTimerLists+0xc4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a04      	ldr	r2, [pc, #16]	; (800ae6c <prvSwitchTimerLists+0xc0>)
 800ae5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae5e:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <prvSwitchTimerLists+0xc4>)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	6013      	str	r3, [r2, #0]
}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20002358 	.word	0x20002358
 800ae70:	2000235c 	.word	0x2000235c

0800ae74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae7a:	f000 f96b 	bl	800b154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae7e:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <prvCheckForValidListAndQueue+0x60>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d120      	bne.n	800aec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae86:	4814      	ldr	r0, [pc, #80]	; (800aed8 <prvCheckForValidListAndQueue+0x64>)
 800ae88:	f7fe f81e 	bl	8008ec8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae8c:	4813      	ldr	r0, [pc, #76]	; (800aedc <prvCheckForValidListAndQueue+0x68>)
 800ae8e:	f7fe f81b 	bl	8008ec8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <prvCheckForValidListAndQueue+0x6c>)
 800ae94:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <prvCheckForValidListAndQueue+0x64>)
 800ae96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae98:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <prvCheckForValidListAndQueue+0x70>)
 800ae9a:	4a10      	ldr	r2, [pc, #64]	; (800aedc <prvCheckForValidListAndQueue+0x68>)
 800ae9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <prvCheckForValidListAndQueue+0x74>)
 800aea4:	4a11      	ldr	r2, [pc, #68]	; (800aeec <prvCheckForValidListAndQueue+0x78>)
 800aea6:	2110      	movs	r1, #16
 800aea8:	200a      	movs	r0, #10
 800aeaa:	f7fe f929 	bl	8009100 <xQueueGenericCreateStatic>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4a08      	ldr	r2, [pc, #32]	; (800aed4 <prvCheckForValidListAndQueue+0x60>)
 800aeb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aeb4:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <prvCheckForValidListAndQueue+0x60>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d005      	beq.n	800aec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <prvCheckForValidListAndQueue+0x60>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	490b      	ldr	r1, [pc, #44]	; (800aef0 <prvCheckForValidListAndQueue+0x7c>)
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fd42 	bl	800994c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aec8:	f000 f974 	bl	800b1b4 <vPortExitCritical>
}
 800aecc:	bf00      	nop
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20002360 	.word	0x20002360
 800aed8:	20002330 	.word	0x20002330
 800aedc:	20002344 	.word	0x20002344
 800aee0:	20002358 	.word	0x20002358
 800aee4:	2000235c 	.word	0x2000235c
 800aee8:	2000240c 	.word	0x2000240c
 800aeec:	2000236c 	.word	0x2000236c
 800aef0:	0800fb50 	.word	0x0800fb50

0800aef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3b04      	subs	r3, #4
 800af04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3b04      	subs	r3, #4
 800af12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f023 0201 	bic.w	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3b04      	subs	r3, #4
 800af22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af24:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <pxPortInitialiseStack+0x64>)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3b14      	subs	r3, #20
 800af2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3b04      	subs	r3, #4
 800af3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f06f 0202 	mvn.w	r2, #2
 800af42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3b20      	subs	r3, #32
 800af48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af4a:	68fb      	ldr	r3, [r7, #12]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	0800af5d 	.word	0x0800af5d

0800af5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af66:	4b12      	ldr	r3, [pc, #72]	; (800afb0 <prvTaskExitError+0x54>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	d00a      	beq.n	800af86 <prvTaskExitError+0x2a>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <prvTaskExitError+0x28>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	60bb      	str	r3, [r7, #8]
}
 800af98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af9a:	bf00      	nop
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0fc      	beq.n	800af9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	2000000c 	.word	0x2000000c
	...

0800afc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <pxCurrentTCBConst2>)
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6808      	ldr	r0, [r1, #0]
 800afc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	f380 8809 	msr	PSP, r0
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8811 	msr	BASEPRI, r0
 800afda:	4770      	bx	lr
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst2>:
 800afe0:	20001e30 	.word	0x20001e30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afe8:	4808      	ldr	r0, [pc, #32]	; (800b00c <prvPortStartFirstTask+0x24>)
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	6800      	ldr	r0, [r0, #0]
 800afee:	f380 8808 	msr	MSP, r0
 800aff2:	f04f 0000 	mov.w	r0, #0
 800aff6:	f380 8814 	msr	CONTROL, r0
 800affa:	b662      	cpsie	i
 800affc:	b661      	cpsie	f
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	df00      	svc	0
 800b008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b00a:	bf00      	nop
 800b00c:	e000ed08 	.word	0xe000ed08

0800b010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b016:	4b46      	ldr	r3, [pc, #280]	; (800b130 <xPortStartScheduler+0x120>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a46      	ldr	r2, [pc, #280]	; (800b134 <xPortStartScheduler+0x124>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10a      	bne.n	800b036 <xPortStartScheduler+0x26>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b036:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <xPortStartScheduler+0x120>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a3f      	ldr	r2, [pc, #252]	; (800b138 <xPortStartScheduler+0x128>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d10a      	bne.n	800b056 <xPortStartScheduler+0x46>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	60fb      	str	r3, [r7, #12]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <xPortStartScheduler+0x12c>)
 800b058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	4b31      	ldr	r3, [pc, #196]	; (800b140 <xPortStartScheduler+0x130>)
 800b07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b07e:	4b31      	ldr	r3, [pc, #196]	; (800b144 <xPortStartScheduler+0x134>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b084:	e009      	b.n	800b09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b086:	4b2f      	ldr	r3, [pc, #188]	; (800b144 <xPortStartScheduler+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	4a2d      	ldr	r2, [pc, #180]	; (800b144 <xPortStartScheduler+0x134>)
 800b08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	b2db      	uxtb	r3, r3
 800b098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a2:	2b80      	cmp	r3, #128	; 0x80
 800b0a4:	d0ef      	beq.n	800b086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0a6:	4b27      	ldr	r3, [pc, #156]	; (800b144 <xPortStartScheduler+0x134>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f1c3 0307 	rsb	r3, r3, #7
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d00a      	beq.n	800b0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60bb      	str	r3, [r7, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <xPortStartScheduler+0x134>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0da:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <xPortStartScheduler+0x134>)
 800b0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <xPortStartScheduler+0x138>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a17      	ldr	r2, [pc, #92]	; (800b148 <xPortStartScheduler+0x138>)
 800b0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a14      	ldr	r2, [pc, #80]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0fe:	f000 f8dd 	bl	800b2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b102:	4b12      	ldr	r3, [pc, #72]	; (800b14c <xPortStartScheduler+0x13c>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b108:	f000 f8fc 	bl	800b304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <xPortStartScheduler+0x140>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0f      	ldr	r2, [pc, #60]	; (800b150 <xPortStartScheduler+0x140>)
 800b112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b118:	f7ff ff66 	bl	800afe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b11c:	f7ff f846 	bl	800a1ac <vTaskSwitchContext>
	prvTaskExitError();
 800b120:	f7ff ff1c 	bl	800af5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	e000ed00 	.word	0xe000ed00
 800b134:	410fc271 	.word	0x410fc271
 800b138:	410fc270 	.word	0x410fc270
 800b13c:	e000e400 	.word	0xe000e400
 800b140:	2000245c 	.word	0x2000245c
 800b144:	20002460 	.word	0x20002460
 800b148:	e000ed20 	.word	0xe000ed20
 800b14c:	2000000c 	.word	0x2000000c
 800b150:	e000ef34 	.word	0xe000ef34

0800b154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b16e:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <vPortEnterCritical+0x58>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a0d      	ldr	r2, [pc, #52]	; (800b1ac <vPortEnterCritical+0x58>)
 800b176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <vPortEnterCritical+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d10f      	bne.n	800b1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <vPortEnterCritical+0x5c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00a      	beq.n	800b1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	603b      	str	r3, [r7, #0]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <vPortEnterCritical+0x4a>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	2000000c 	.word	0x2000000c
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ba:	4b12      	ldr	r3, [pc, #72]	; (800b204 <vPortExitCritical+0x50>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <vPortExitCritical+0x24>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	607b      	str	r3, [r7, #4]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <vPortExitCritical+0x50>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <vPortExitCritical+0x50>)
 800b1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1e2:	4b08      	ldr	r3, [pc, #32]	; (800b204 <vPortExitCritical+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <vPortExitCritical+0x42>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	f383 8811 	msr	BASEPRI, r3
}
 800b1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	2000000c 	.word	0x2000000c
	...

0800b210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b210:	f3ef 8009 	mrs	r0, PSP
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4b15      	ldr	r3, [pc, #84]	; (800b270 <pxCurrentTCBConst>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f01e 0f10 	tst.w	lr, #16
 800b220:	bf08      	it	eq
 800b222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b234:	f380 8811 	msr	BASEPRI, r0
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f7fe ffb4 	bl	800a1ac <vTaskSwitchContext>
 800b244:	f04f 0000 	mov.w	r0, #0
 800b248:	f380 8811 	msr	BASEPRI, r0
 800b24c:	bc09      	pop	{r0, r3}
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b256:	f01e 0f10 	tst.w	lr, #16
 800b25a:	bf08      	it	eq
 800b25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b260:	f380 8809 	msr	PSP, r0
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst>:
 800b270:	20001e30 	.word	0x20001e30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b292:	f7fe fed1 	bl	800a038 <xTaskIncrementTick>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <xPortSysTickHandler+0x40>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f383 8811 	msr	BASEPRI, r3
}
 800b2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <vPortSetupTimerInterrupt+0x38>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vPortSetupTimerInterrupt+0x40>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	099b      	lsrs	r3, r3, #6
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <vPortSetupTimerInterrupt+0x44>)
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	e000e018 	.word	0xe000e018
 800b2f8:	20000000 	.word	0x20000000
 800b2fc:	10624dd3 	.word	0x10624dd3
 800b300:	e000e014 	.word	0xe000e014

0800b304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b314 <vPortEnableVFP+0x10>
 800b308:	6801      	ldr	r1, [r0, #0]
 800b30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b30e:	6001      	str	r1, [r0, #0]
 800b310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b312:	bf00      	nop
 800b314:	e000ed88 	.word	0xe000ed88

0800b318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b31e:	f3ef 8305 	mrs	r3, IPSR
 800b322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b0f      	cmp	r3, #15
 800b328:	d914      	bls.n	800b354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <vPortValidateInterruptPriority+0x70>)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b334:	4b15      	ldr	r3, [pc, #84]	; (800b38c <vPortValidateInterruptPriority+0x74>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	7afa      	ldrb	r2, [r7, #11]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d20a      	bcs.n	800b354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	607b      	str	r3, [r7, #4]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b354:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <vPortValidateInterruptPriority+0x78>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <vPortValidateInterruptPriority+0x7c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d90a      	bls.n	800b37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	603b      	str	r3, [r7, #0]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <vPortValidateInterruptPriority+0x60>
	}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	e000e3f0 	.word	0xe000e3f0
 800b38c:	2000245c 	.word	0x2000245c
 800b390:	e000ed0c 	.word	0xe000ed0c
 800b394:	20002460 	.word	0x20002460

0800b398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3a4:	f7fe fd8c 	bl	8009ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3a8:	4b5b      	ldr	r3, [pc, #364]	; (800b518 <pvPortMalloc+0x180>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3b0:	f000 f920 	bl	800b5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3b4:	4b59      	ldr	r3, [pc, #356]	; (800b51c <pvPortMalloc+0x184>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 8093 	bne.w	800b4e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01d      	beq.n	800b404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3c8:	2208      	movs	r2, #8
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d014      	beq.n	800b404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f023 0307 	bic.w	r3, r3, #7
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <pvPortMalloc+0x6c>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	617b      	str	r3, [r7, #20]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d06e      	beq.n	800b4e8 <pvPortMalloc+0x150>
 800b40a:	4b45      	ldr	r3, [pc, #276]	; (800b520 <pvPortMalloc+0x188>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d869      	bhi.n	800b4e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b414:	4b43      	ldr	r3, [pc, #268]	; (800b524 <pvPortMalloc+0x18c>)
 800b416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b418:	4b42      	ldr	r3, [pc, #264]	; (800b524 <pvPortMalloc+0x18c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b41e:	e004      	b.n	800b42a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <pvPortMalloc+0xa4>
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f1      	bne.n	800b420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b43c:	4b36      	ldr	r3, [pc, #216]	; (800b518 <pvPortMalloc+0x180>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b442:	429a      	cmp	r2, r3
 800b444:	d050      	beq.n	800b4e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2208      	movs	r2, #8
 800b44c:	4413      	add	r3, r2
 800b44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	1ad2      	subs	r2, r2, r3
 800b460:	2308      	movs	r3, #8
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	429a      	cmp	r2, r3
 800b466:	d91f      	bls.n	800b4a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4413      	add	r3, r2
 800b46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <pvPortMalloc+0xf8>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	613b      	str	r3, [r7, #16]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4a2:	69b8      	ldr	r0, [r7, #24]
 800b4a4:	f000 f908 	bl	800b6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4a8:	4b1d      	ldr	r3, [pc, #116]	; (800b520 <pvPortMalloc+0x188>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	4a1b      	ldr	r2, [pc, #108]	; (800b520 <pvPortMalloc+0x188>)
 800b4b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <pvPortMalloc+0x188>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	4b1b      	ldr	r3, [pc, #108]	; (800b528 <pvPortMalloc+0x190>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d203      	bcs.n	800b4ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4c2:	4b17      	ldr	r3, [pc, #92]	; (800b520 <pvPortMalloc+0x188>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a18      	ldr	r2, [pc, #96]	; (800b528 <pvPortMalloc+0x190>)
 800b4c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b13      	ldr	r3, [pc, #76]	; (800b51c <pvPortMalloc+0x184>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	2200      	movs	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4de:	4b13      	ldr	r3, [pc, #76]	; (800b52c <pvPortMalloc+0x194>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	4a11      	ldr	r2, [pc, #68]	; (800b52c <pvPortMalloc+0x194>)
 800b4e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4e8:	f7fe fcf8 	bl	8009edc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <pvPortMalloc+0x174>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <pvPortMalloc+0x172>
	return pvReturn;
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3728      	adds	r7, #40	; 0x28
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20003024 	.word	0x20003024
 800b51c:	20003038 	.word	0x20003038
 800b520:	20003028 	.word	0x20003028
 800b524:	2000301c 	.word	0x2000301c
 800b528:	2000302c 	.word	0x2000302c
 800b52c:	20003030 	.word	0x20003030

0800b530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d04d      	beq.n	800b5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b542:	2308      	movs	r3, #8
 800b544:	425b      	negs	r3, r3
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	4413      	add	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	4b24      	ldr	r3, [pc, #144]	; (800b5e8 <vPortFree+0xb8>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4013      	ands	r3, r2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <vPortFree+0x44>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	60fb      	str	r3, [r7, #12]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <vPortFree+0x62>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60bb      	str	r3, [r7, #8]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <vPortFree+0xb8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4013      	ands	r3, r2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d01e      	beq.n	800b5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11a      	bne.n	800b5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <vPortFree+0xb8>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	43db      	mvns	r3, r3
 800b5b2:	401a      	ands	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5b8:	f7fe fc82 	bl	8009ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <vPortFree+0xbc>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <vPortFree+0xbc>)
 800b5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5ca:	6938      	ldr	r0, [r7, #16]
 800b5cc:	f000 f874 	bl	800b6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5d0:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <vPortFree+0xc0>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a06      	ldr	r2, [pc, #24]	; (800b5f0 <vPortFree+0xc0>)
 800b5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5da:	f7fe fc7f 	bl	8009edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5de:	bf00      	nop
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20003038 	.word	0x20003038
 800b5ec:	20003028 	.word	0x20003028
 800b5f0:	20003034 	.word	0x20003034

0800b5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <prvHeapInit+0xac>)
 800b602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00c      	beq.n	800b628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3307      	adds	r3, #7
 800b612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0307 	bic.w	r3, r3, #7
 800b61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <prvHeapInit+0xac>)
 800b624:	4413      	add	r3, r2
 800b626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <prvHeapInit+0xb0>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <prvHeapInit+0xb0>)
 800b634:	2200      	movs	r2, #0
 800b636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4413      	add	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b640:	2208      	movs	r2, #8
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f023 0307 	bic.w	r3, r3, #7
 800b64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	4a15      	ldr	r2, [pc, #84]	; (800b6a8 <prvHeapInit+0xb4>)
 800b654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b656:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <prvHeapInit+0xb4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b65e:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <prvHeapInit+0xb4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b674:	4b0c      	ldr	r3, [pc, #48]	; (800b6a8 <prvHeapInit+0xb4>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <prvHeapInit+0xb8>)
 800b682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <prvHeapInit+0xbc>)
 800b68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b68c:	4b09      	ldr	r3, [pc, #36]	; (800b6b4 <prvHeapInit+0xc0>)
 800b68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b692:	601a      	str	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20002464 	.word	0x20002464
 800b6a4:	2000301c 	.word	0x2000301c
 800b6a8:	20003024 	.word	0x20003024
 800b6ac:	2000302c 	.word	0x2000302c
 800b6b0:	20003028 	.word	0x20003028
 800b6b4:	20003038 	.word	0x20003038

0800b6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6c0:	4b28      	ldr	r3, [pc, #160]	; (800b764 <prvInsertBlockIntoFreeList+0xac>)
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e002      	b.n	800b6cc <prvInsertBlockIntoFreeList+0x14>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d8f7      	bhi.n	800b6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d108      	bne.n	800b6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	441a      	add	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	441a      	add	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d118      	bne.n	800b740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b15      	ldr	r3, [pc, #84]	; (800b768 <prvInsertBlockIntoFreeList+0xb0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d00d      	beq.n	800b736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	441a      	add	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	e008      	b.n	800b748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b736:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <prvInsertBlockIntoFreeList+0xb0>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e003      	b.n	800b748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d002      	beq.n	800b756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	2000301c 	.word	0x2000301c
 800b768:	20003024 	.word	0x20003024

0800b76c <atof>:
 800b76c:	2100      	movs	r1, #0
 800b76e:	f000 be0f 	b.w	800c390 <strtod>

0800b772 <sulp>:
 800b772:	b570      	push	{r4, r5, r6, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	ec45 4b10 	vmov	d0, r4, r5
 800b77c:	4616      	mov	r6, r2
 800b77e:	f003 fadb 	bl	800ed38 <__ulp>
 800b782:	ec51 0b10 	vmov	r0, r1, d0
 800b786:	b17e      	cbz	r6, 800b7a8 <sulp+0x36>
 800b788:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b78c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b790:	2b00      	cmp	r3, #0
 800b792:	dd09      	ble.n	800b7a8 <sulp+0x36>
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b79a:	2400      	movs	r4, #0
 800b79c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f7f4 ff28 	bl	80005f8 <__aeabi_dmul>
 800b7a8:	bd70      	pop	{r4, r5, r6, pc}
 800b7aa:	0000      	movs	r0, r0
 800b7ac:	0000      	movs	r0, r0
	...

0800b7b0 <_strtod_l>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	ed2d 8b02 	vpush	{d8}
 800b7b8:	b09b      	sub	sp, #108	; 0x6c
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	9213      	str	r2, [sp, #76]	; 0x4c
 800b7be:	2200      	movs	r2, #0
 800b7c0:	9216      	str	r2, [sp, #88]	; 0x58
 800b7c2:	460d      	mov	r5, r1
 800b7c4:	f04f 0800 	mov.w	r8, #0
 800b7c8:	f04f 0900 	mov.w	r9, #0
 800b7cc:	460a      	mov	r2, r1
 800b7ce:	9215      	str	r2, [sp, #84]	; 0x54
 800b7d0:	7811      	ldrb	r1, [r2, #0]
 800b7d2:	292b      	cmp	r1, #43	; 0x2b
 800b7d4:	d04c      	beq.n	800b870 <_strtod_l+0xc0>
 800b7d6:	d83a      	bhi.n	800b84e <_strtod_l+0x9e>
 800b7d8:	290d      	cmp	r1, #13
 800b7da:	d834      	bhi.n	800b846 <_strtod_l+0x96>
 800b7dc:	2908      	cmp	r1, #8
 800b7de:	d834      	bhi.n	800b84a <_strtod_l+0x9a>
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	d03d      	beq.n	800b860 <_strtod_l+0xb0>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	920a      	str	r2, [sp, #40]	; 0x28
 800b7e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b7ea:	7832      	ldrb	r2, [r6, #0]
 800b7ec:	2a30      	cmp	r2, #48	; 0x30
 800b7ee:	f040 80b4 	bne.w	800b95a <_strtod_l+0x1aa>
 800b7f2:	7872      	ldrb	r2, [r6, #1]
 800b7f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b7f8:	2a58      	cmp	r2, #88	; 0x58
 800b7fa:	d170      	bne.n	800b8de <_strtod_l+0x12e>
 800b7fc:	9302      	str	r3, [sp, #8]
 800b7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	ab16      	add	r3, sp, #88	; 0x58
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	4a8e      	ldr	r2, [pc, #568]	; (800ba40 <_strtod_l+0x290>)
 800b808:	ab17      	add	r3, sp, #92	; 0x5c
 800b80a:	a915      	add	r1, sp, #84	; 0x54
 800b80c:	4620      	mov	r0, r4
 800b80e:	f002 fb71 	bl	800def4 <__gethex>
 800b812:	f010 070f 	ands.w	r7, r0, #15
 800b816:	4605      	mov	r5, r0
 800b818:	d005      	beq.n	800b826 <_strtod_l+0x76>
 800b81a:	2f06      	cmp	r7, #6
 800b81c:	d12a      	bne.n	800b874 <_strtod_l+0xc4>
 800b81e:	3601      	adds	r6, #1
 800b820:	2300      	movs	r3, #0
 800b822:	9615      	str	r6, [sp, #84]	; 0x54
 800b824:	930a      	str	r3, [sp, #40]	; 0x28
 800b826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f040 857f 	bne.w	800c32c <_strtod_l+0xb7c>
 800b82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b830:	b1db      	cbz	r3, 800b86a <_strtod_l+0xba>
 800b832:	4642      	mov	r2, r8
 800b834:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b838:	ec43 2b10 	vmov	d0, r2, r3
 800b83c:	b01b      	add	sp, #108	; 0x6c
 800b83e:	ecbd 8b02 	vpop	{d8}
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b846:	2920      	cmp	r1, #32
 800b848:	d1cc      	bne.n	800b7e4 <_strtod_l+0x34>
 800b84a:	3201      	adds	r2, #1
 800b84c:	e7bf      	b.n	800b7ce <_strtod_l+0x1e>
 800b84e:	292d      	cmp	r1, #45	; 0x2d
 800b850:	d1c8      	bne.n	800b7e4 <_strtod_l+0x34>
 800b852:	2101      	movs	r1, #1
 800b854:	910a      	str	r1, [sp, #40]	; 0x28
 800b856:	1c51      	adds	r1, r2, #1
 800b858:	9115      	str	r1, [sp, #84]	; 0x54
 800b85a:	7852      	ldrb	r2, [r2, #1]
 800b85c:	2a00      	cmp	r2, #0
 800b85e:	d1c3      	bne.n	800b7e8 <_strtod_l+0x38>
 800b860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b862:	9515      	str	r5, [sp, #84]	; 0x54
 800b864:	2b00      	cmp	r3, #0
 800b866:	f040 855f 	bne.w	800c328 <_strtod_l+0xb78>
 800b86a:	4642      	mov	r2, r8
 800b86c:	464b      	mov	r3, r9
 800b86e:	e7e3      	b.n	800b838 <_strtod_l+0x88>
 800b870:	2100      	movs	r1, #0
 800b872:	e7ef      	b.n	800b854 <_strtod_l+0xa4>
 800b874:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b876:	b13a      	cbz	r2, 800b888 <_strtod_l+0xd8>
 800b878:	2135      	movs	r1, #53	; 0x35
 800b87a:	a818      	add	r0, sp, #96	; 0x60
 800b87c:	f003 fb59 	bl	800ef32 <__copybits>
 800b880:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b882:	4620      	mov	r0, r4
 800b884:	f002 ff2c 	bl	800e6e0 <_Bfree>
 800b888:	3f01      	subs	r7, #1
 800b88a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b88c:	2f04      	cmp	r7, #4
 800b88e:	d806      	bhi.n	800b89e <_strtod_l+0xee>
 800b890:	e8df f007 	tbb	[pc, r7]
 800b894:	201d0314 	.word	0x201d0314
 800b898:	14          	.byte	0x14
 800b899:	00          	.byte	0x00
 800b89a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b89e:	05e9      	lsls	r1, r5, #23
 800b8a0:	bf48      	it	mi
 800b8a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b8a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8aa:	0d1b      	lsrs	r3, r3, #20
 800b8ac:	051b      	lsls	r3, r3, #20
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1b9      	bne.n	800b826 <_strtod_l+0x76>
 800b8b2:	f001 fbad 	bl	800d010 <__errno>
 800b8b6:	2322      	movs	r3, #34	; 0x22
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	e7b4      	b.n	800b826 <_strtod_l+0x76>
 800b8bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b8c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b8cc:	e7e7      	b.n	800b89e <_strtod_l+0xee>
 800b8ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba48 <_strtod_l+0x298>
 800b8d2:	e7e4      	b.n	800b89e <_strtod_l+0xee>
 800b8d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b8d8:	f04f 38ff 	mov.w	r8, #4294967295
 800b8dc:	e7df      	b.n	800b89e <_strtod_l+0xee>
 800b8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8e0:	1c5a      	adds	r2, r3, #1
 800b8e2:	9215      	str	r2, [sp, #84]	; 0x54
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	2b30      	cmp	r3, #48	; 0x30
 800b8e8:	d0f9      	beq.n	800b8de <_strtod_l+0x12e>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d09b      	beq.n	800b826 <_strtod_l+0x76>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f04f 0a00 	mov.w	sl, #0
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8fe:	46d3      	mov	fp, sl
 800b900:	220a      	movs	r2, #10
 800b902:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b904:	7806      	ldrb	r6, [r0, #0]
 800b906:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b90a:	b2d9      	uxtb	r1, r3
 800b90c:	2909      	cmp	r1, #9
 800b90e:	d926      	bls.n	800b95e <_strtod_l+0x1ae>
 800b910:	494c      	ldr	r1, [pc, #304]	; (800ba44 <_strtod_l+0x294>)
 800b912:	2201      	movs	r2, #1
 800b914:	f001 fac9 	bl	800ceaa <strncmp>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d030      	beq.n	800b97e <_strtod_l+0x1ce>
 800b91c:	2000      	movs	r0, #0
 800b91e:	4632      	mov	r2, r6
 800b920:	9005      	str	r0, [sp, #20]
 800b922:	465e      	mov	r6, fp
 800b924:	4603      	mov	r3, r0
 800b926:	2a65      	cmp	r2, #101	; 0x65
 800b928:	d001      	beq.n	800b92e <_strtod_l+0x17e>
 800b92a:	2a45      	cmp	r2, #69	; 0x45
 800b92c:	d113      	bne.n	800b956 <_strtod_l+0x1a6>
 800b92e:	b91e      	cbnz	r6, 800b938 <_strtod_l+0x188>
 800b930:	9a04      	ldr	r2, [sp, #16]
 800b932:	4302      	orrs	r2, r0
 800b934:	d094      	beq.n	800b860 <_strtod_l+0xb0>
 800b936:	2600      	movs	r6, #0
 800b938:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b93a:	1c6a      	adds	r2, r5, #1
 800b93c:	9215      	str	r2, [sp, #84]	; 0x54
 800b93e:	786a      	ldrb	r2, [r5, #1]
 800b940:	2a2b      	cmp	r2, #43	; 0x2b
 800b942:	d074      	beq.n	800ba2e <_strtod_l+0x27e>
 800b944:	2a2d      	cmp	r2, #45	; 0x2d
 800b946:	d078      	beq.n	800ba3a <_strtod_l+0x28a>
 800b948:	f04f 0c00 	mov.w	ip, #0
 800b94c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b950:	2909      	cmp	r1, #9
 800b952:	d97f      	bls.n	800ba54 <_strtod_l+0x2a4>
 800b954:	9515      	str	r5, [sp, #84]	; 0x54
 800b956:	2700      	movs	r7, #0
 800b958:	e09e      	b.n	800ba98 <_strtod_l+0x2e8>
 800b95a:	2300      	movs	r3, #0
 800b95c:	e7c8      	b.n	800b8f0 <_strtod_l+0x140>
 800b95e:	f1bb 0f08 	cmp.w	fp, #8
 800b962:	bfd8      	it	le
 800b964:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b966:	f100 0001 	add.w	r0, r0, #1
 800b96a:	bfda      	itte	le
 800b96c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b970:	9309      	strle	r3, [sp, #36]	; 0x24
 800b972:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b976:	f10b 0b01 	add.w	fp, fp, #1
 800b97a:	9015      	str	r0, [sp, #84]	; 0x54
 800b97c:	e7c1      	b.n	800b902 <_strtod_l+0x152>
 800b97e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	9215      	str	r2, [sp, #84]	; 0x54
 800b984:	785a      	ldrb	r2, [r3, #1]
 800b986:	f1bb 0f00 	cmp.w	fp, #0
 800b98a:	d037      	beq.n	800b9fc <_strtod_l+0x24c>
 800b98c:	9005      	str	r0, [sp, #20]
 800b98e:	465e      	mov	r6, fp
 800b990:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b994:	2b09      	cmp	r3, #9
 800b996:	d912      	bls.n	800b9be <_strtod_l+0x20e>
 800b998:	2301      	movs	r3, #1
 800b99a:	e7c4      	b.n	800b926 <_strtod_l+0x176>
 800b99c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	9215      	str	r2, [sp, #84]	; 0x54
 800b9a2:	785a      	ldrb	r2, [r3, #1]
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	2a30      	cmp	r2, #48	; 0x30
 800b9a8:	d0f8      	beq.n	800b99c <_strtod_l+0x1ec>
 800b9aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b9ae:	2b08      	cmp	r3, #8
 800b9b0:	f200 84c1 	bhi.w	800c336 <_strtod_l+0xb86>
 800b9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9b6:	9005      	str	r0, [sp, #20]
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9bc:	4606      	mov	r6, r0
 800b9be:	3a30      	subs	r2, #48	; 0x30
 800b9c0:	f100 0301 	add.w	r3, r0, #1
 800b9c4:	d014      	beq.n	800b9f0 <_strtod_l+0x240>
 800b9c6:	9905      	ldr	r1, [sp, #20]
 800b9c8:	4419      	add	r1, r3
 800b9ca:	9105      	str	r1, [sp, #20]
 800b9cc:	4633      	mov	r3, r6
 800b9ce:	eb00 0c06 	add.w	ip, r0, r6
 800b9d2:	210a      	movs	r1, #10
 800b9d4:	4563      	cmp	r3, ip
 800b9d6:	d113      	bne.n	800ba00 <_strtod_l+0x250>
 800b9d8:	1833      	adds	r3, r6, r0
 800b9da:	2b08      	cmp	r3, #8
 800b9dc:	f106 0601 	add.w	r6, r6, #1
 800b9e0:	4406      	add	r6, r0
 800b9e2:	dc1a      	bgt.n	800ba1a <_strtod_l+0x26a>
 800b9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9e6:	230a      	movs	r3, #10
 800b9e8:	fb03 2301 	mla	r3, r3, r1, r2
 800b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9f2:	1c51      	adds	r1, r2, #1
 800b9f4:	9115      	str	r1, [sp, #84]	; 0x54
 800b9f6:	7852      	ldrb	r2, [r2, #1]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	e7c9      	b.n	800b990 <_strtod_l+0x1e0>
 800b9fc:	4658      	mov	r0, fp
 800b9fe:	e7d2      	b.n	800b9a6 <_strtod_l+0x1f6>
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	f103 0301 	add.w	r3, r3, #1
 800ba06:	dc03      	bgt.n	800ba10 <_strtod_l+0x260>
 800ba08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba0a:	434f      	muls	r7, r1
 800ba0c:	9709      	str	r7, [sp, #36]	; 0x24
 800ba0e:	e7e1      	b.n	800b9d4 <_strtod_l+0x224>
 800ba10:	2b10      	cmp	r3, #16
 800ba12:	bfd8      	it	le
 800ba14:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ba18:	e7dc      	b.n	800b9d4 <_strtod_l+0x224>
 800ba1a:	2e10      	cmp	r6, #16
 800ba1c:	bfdc      	itt	le
 800ba1e:	230a      	movle	r3, #10
 800ba20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ba24:	e7e3      	b.n	800b9ee <_strtod_l+0x23e>
 800ba26:	2300      	movs	r3, #0
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e780      	b.n	800b930 <_strtod_l+0x180>
 800ba2e:	f04f 0c00 	mov.w	ip, #0
 800ba32:	1caa      	adds	r2, r5, #2
 800ba34:	9215      	str	r2, [sp, #84]	; 0x54
 800ba36:	78aa      	ldrb	r2, [r5, #2]
 800ba38:	e788      	b.n	800b94c <_strtod_l+0x19c>
 800ba3a:	f04f 0c01 	mov.w	ip, #1
 800ba3e:	e7f8      	b.n	800ba32 <_strtod_l+0x282>
 800ba40:	0800fc7c 	.word	0x0800fc7c
 800ba44:	0800fc78 	.word	0x0800fc78
 800ba48:	7ff00000 	.word	0x7ff00000
 800ba4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba4e:	1c51      	adds	r1, r2, #1
 800ba50:	9115      	str	r1, [sp, #84]	; 0x54
 800ba52:	7852      	ldrb	r2, [r2, #1]
 800ba54:	2a30      	cmp	r2, #48	; 0x30
 800ba56:	d0f9      	beq.n	800ba4c <_strtod_l+0x29c>
 800ba58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba5c:	2908      	cmp	r1, #8
 800ba5e:	f63f af7a 	bhi.w	800b956 <_strtod_l+0x1a6>
 800ba62:	3a30      	subs	r2, #48	; 0x30
 800ba64:	9208      	str	r2, [sp, #32]
 800ba66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba68:	920c      	str	r2, [sp, #48]	; 0x30
 800ba6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba6c:	1c57      	adds	r7, r2, #1
 800ba6e:	9715      	str	r7, [sp, #84]	; 0x54
 800ba70:	7852      	ldrb	r2, [r2, #1]
 800ba72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba76:	f1be 0f09 	cmp.w	lr, #9
 800ba7a:	d938      	bls.n	800baee <_strtod_l+0x33e>
 800ba7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba7e:	1a7f      	subs	r7, r7, r1
 800ba80:	2f08      	cmp	r7, #8
 800ba82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba86:	dc03      	bgt.n	800ba90 <_strtod_l+0x2e0>
 800ba88:	9908      	ldr	r1, [sp, #32]
 800ba8a:	428f      	cmp	r7, r1
 800ba8c:	bfa8      	it	ge
 800ba8e:	460f      	movge	r7, r1
 800ba90:	f1bc 0f00 	cmp.w	ip, #0
 800ba94:	d000      	beq.n	800ba98 <_strtod_l+0x2e8>
 800ba96:	427f      	negs	r7, r7
 800ba98:	2e00      	cmp	r6, #0
 800ba9a:	d14f      	bne.n	800bb3c <_strtod_l+0x38c>
 800ba9c:	9904      	ldr	r1, [sp, #16]
 800ba9e:	4301      	orrs	r1, r0
 800baa0:	f47f aec1 	bne.w	800b826 <_strtod_l+0x76>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f47f aedb 	bne.w	800b860 <_strtod_l+0xb0>
 800baaa:	2a69      	cmp	r2, #105	; 0x69
 800baac:	d029      	beq.n	800bb02 <_strtod_l+0x352>
 800baae:	dc26      	bgt.n	800bafe <_strtod_l+0x34e>
 800bab0:	2a49      	cmp	r2, #73	; 0x49
 800bab2:	d026      	beq.n	800bb02 <_strtod_l+0x352>
 800bab4:	2a4e      	cmp	r2, #78	; 0x4e
 800bab6:	f47f aed3 	bne.w	800b860 <_strtod_l+0xb0>
 800baba:	499b      	ldr	r1, [pc, #620]	; (800bd28 <_strtod_l+0x578>)
 800babc:	a815      	add	r0, sp, #84	; 0x54
 800babe:	f002 fc59 	bl	800e374 <__match>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	f43f aecc 	beq.w	800b860 <_strtod_l+0xb0>
 800bac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b28      	cmp	r3, #40	; 0x28
 800bace:	d12f      	bne.n	800bb30 <_strtod_l+0x380>
 800bad0:	4996      	ldr	r1, [pc, #600]	; (800bd2c <_strtod_l+0x57c>)
 800bad2:	aa18      	add	r2, sp, #96	; 0x60
 800bad4:	a815      	add	r0, sp, #84	; 0x54
 800bad6:	f002 fc61 	bl	800e39c <__hexnan>
 800bada:	2805      	cmp	r0, #5
 800badc:	d128      	bne.n	800bb30 <_strtod_l+0x380>
 800bade:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bae0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bae4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bae8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800baec:	e69b      	b.n	800b826 <_strtod_l+0x76>
 800baee:	9f08      	ldr	r7, [sp, #32]
 800baf0:	210a      	movs	r1, #10
 800baf2:	fb01 2107 	mla	r1, r1, r7, r2
 800baf6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bafa:	9208      	str	r2, [sp, #32]
 800bafc:	e7b5      	b.n	800ba6a <_strtod_l+0x2ba>
 800bafe:	2a6e      	cmp	r2, #110	; 0x6e
 800bb00:	e7d9      	b.n	800bab6 <_strtod_l+0x306>
 800bb02:	498b      	ldr	r1, [pc, #556]	; (800bd30 <_strtod_l+0x580>)
 800bb04:	a815      	add	r0, sp, #84	; 0x54
 800bb06:	f002 fc35 	bl	800e374 <__match>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	f43f aea8 	beq.w	800b860 <_strtod_l+0xb0>
 800bb10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb12:	4988      	ldr	r1, [pc, #544]	; (800bd34 <_strtod_l+0x584>)
 800bb14:	3b01      	subs	r3, #1
 800bb16:	a815      	add	r0, sp, #84	; 0x54
 800bb18:	9315      	str	r3, [sp, #84]	; 0x54
 800bb1a:	f002 fc2b 	bl	800e374 <__match>
 800bb1e:	b910      	cbnz	r0, 800bb26 <_strtod_l+0x376>
 800bb20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb22:	3301      	adds	r3, #1
 800bb24:	9315      	str	r3, [sp, #84]	; 0x54
 800bb26:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bd44 <_strtod_l+0x594>
 800bb2a:	f04f 0800 	mov.w	r8, #0
 800bb2e:	e67a      	b.n	800b826 <_strtod_l+0x76>
 800bb30:	4881      	ldr	r0, [pc, #516]	; (800bd38 <_strtod_l+0x588>)
 800bb32:	f001 faa9 	bl	800d088 <nan>
 800bb36:	ec59 8b10 	vmov	r8, r9, d0
 800bb3a:	e674      	b.n	800b826 <_strtod_l+0x76>
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb40:	1afb      	subs	r3, r7, r3
 800bb42:	f1bb 0f00 	cmp.w	fp, #0
 800bb46:	bf08      	it	eq
 800bb48:	46b3      	moveq	fp, r6
 800bb4a:	2e10      	cmp	r6, #16
 800bb4c:	9308      	str	r3, [sp, #32]
 800bb4e:	4635      	mov	r5, r6
 800bb50:	bfa8      	it	ge
 800bb52:	2510      	movge	r5, #16
 800bb54:	f7f4 fcd6 	bl	8000504 <__aeabi_ui2d>
 800bb58:	2e09      	cmp	r6, #9
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4689      	mov	r9, r1
 800bb5e:	dd13      	ble.n	800bb88 <_strtod_l+0x3d8>
 800bb60:	4b76      	ldr	r3, [pc, #472]	; (800bd3c <_strtod_l+0x58c>)
 800bb62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	4680      	mov	r8, r0
 800bb70:	4650      	mov	r0, sl
 800bb72:	4689      	mov	r9, r1
 800bb74:	f7f4 fcc6 	bl	8000504 <__aeabi_ui2d>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	f7f4 fb84 	bl	800028c <__adddf3>
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	2e0f      	cmp	r6, #15
 800bb8a:	dc38      	bgt.n	800bbfe <_strtod_l+0x44e>
 800bb8c:	9b08      	ldr	r3, [sp, #32]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f43f ae49 	beq.w	800b826 <_strtod_l+0x76>
 800bb94:	dd24      	ble.n	800bbe0 <_strtod_l+0x430>
 800bb96:	2b16      	cmp	r3, #22
 800bb98:	dc0b      	bgt.n	800bbb2 <_strtod_l+0x402>
 800bb9a:	4968      	ldr	r1, [pc, #416]	; (800bd3c <_strtod_l+0x58c>)
 800bb9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bba4:	4642      	mov	r2, r8
 800bba6:	464b      	mov	r3, r9
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	e639      	b.n	800b826 <_strtod_l+0x76>
 800bbb2:	9a08      	ldr	r2, [sp, #32]
 800bbb4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	db20      	blt.n	800bbfe <_strtod_l+0x44e>
 800bbbc:	4c5f      	ldr	r4, [pc, #380]	; (800bd3c <_strtod_l+0x58c>)
 800bbbe:	f1c6 060f 	rsb	r6, r6, #15
 800bbc2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbce:	f7f4 fd13 	bl	80005f8 <__aeabi_dmul>
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	1b9e      	subs	r6, r3, r6
 800bbd6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bbda:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bbde:	e7e3      	b.n	800bba8 <_strtod_l+0x3f8>
 800bbe0:	9b08      	ldr	r3, [sp, #32]
 800bbe2:	3316      	adds	r3, #22
 800bbe4:	db0b      	blt.n	800bbfe <_strtod_l+0x44e>
 800bbe6:	9b05      	ldr	r3, [sp, #20]
 800bbe8:	1bdf      	subs	r7, r3, r7
 800bbea:	4b54      	ldr	r3, [pc, #336]	; (800bd3c <_strtod_l+0x58c>)
 800bbec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bbf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbf4:	4640      	mov	r0, r8
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7f4 fe28 	bl	800084c <__aeabi_ddiv>
 800bbfc:	e7d6      	b.n	800bbac <_strtod_l+0x3fc>
 800bbfe:	9b08      	ldr	r3, [sp, #32]
 800bc00:	1b75      	subs	r5, r6, r5
 800bc02:	441d      	add	r5, r3
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	dd70      	ble.n	800bcea <_strtod_l+0x53a>
 800bc08:	f015 030f 	ands.w	r3, r5, #15
 800bc0c:	d00a      	beq.n	800bc24 <_strtod_l+0x474>
 800bc0e:	494b      	ldr	r1, [pc, #300]	; (800bd3c <_strtod_l+0x58c>)
 800bc10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc14:	4642      	mov	r2, r8
 800bc16:	464b      	mov	r3, r9
 800bc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1c:	f7f4 fcec 	bl	80005f8 <__aeabi_dmul>
 800bc20:	4680      	mov	r8, r0
 800bc22:	4689      	mov	r9, r1
 800bc24:	f035 050f 	bics.w	r5, r5, #15
 800bc28:	d04d      	beq.n	800bcc6 <_strtod_l+0x516>
 800bc2a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bc2e:	dd22      	ble.n	800bc76 <_strtod_l+0x4c6>
 800bc30:	2500      	movs	r5, #0
 800bc32:	46ab      	mov	fp, r5
 800bc34:	9509      	str	r5, [sp, #36]	; 0x24
 800bc36:	9505      	str	r5, [sp, #20]
 800bc38:	2322      	movs	r3, #34	; 0x22
 800bc3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bd44 <_strtod_l+0x594>
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	f04f 0800 	mov.w	r8, #0
 800bc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f43f aded 	beq.w	800b826 <_strtod_l+0x76>
 800bc4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f002 fd46 	bl	800e6e0 <_Bfree>
 800bc54:	9905      	ldr	r1, [sp, #20]
 800bc56:	4620      	mov	r0, r4
 800bc58:	f002 fd42 	bl	800e6e0 <_Bfree>
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f002 fd3e 	bl	800e6e0 <_Bfree>
 800bc64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc66:	4620      	mov	r0, r4
 800bc68:	f002 fd3a 	bl	800e6e0 <_Bfree>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f002 fd36 	bl	800e6e0 <_Bfree>
 800bc74:	e5d7      	b.n	800b826 <_strtod_l+0x76>
 800bc76:	4b32      	ldr	r3, [pc, #200]	; (800bd40 <_strtod_l+0x590>)
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	112d      	asrs	r5, r5, #4
 800bc7e:	4640      	mov	r0, r8
 800bc80:	4649      	mov	r1, r9
 800bc82:	469a      	mov	sl, r3
 800bc84:	2d01      	cmp	r5, #1
 800bc86:	dc21      	bgt.n	800bccc <_strtod_l+0x51c>
 800bc88:	b10b      	cbz	r3, 800bc8e <_strtod_l+0x4de>
 800bc8a:	4680      	mov	r8, r0
 800bc8c:	4689      	mov	r9, r1
 800bc8e:	492c      	ldr	r1, [pc, #176]	; (800bd40 <_strtod_l+0x590>)
 800bc90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bc94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bc98:	4642      	mov	r2, r8
 800bc9a:	464b      	mov	r3, r9
 800bc9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	4b27      	ldr	r3, [pc, #156]	; (800bd44 <_strtod_l+0x594>)
 800bca6:	460a      	mov	r2, r1
 800bca8:	400b      	ands	r3, r1
 800bcaa:	4927      	ldr	r1, [pc, #156]	; (800bd48 <_strtod_l+0x598>)
 800bcac:	428b      	cmp	r3, r1
 800bcae:	4680      	mov	r8, r0
 800bcb0:	d8be      	bhi.n	800bc30 <_strtod_l+0x480>
 800bcb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcb6:	428b      	cmp	r3, r1
 800bcb8:	bf86      	itte	hi
 800bcba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bd4c <_strtod_l+0x59c>
 800bcbe:	f04f 38ff 	movhi.w	r8, #4294967295
 800bcc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	e07b      	b.n	800bdc4 <_strtod_l+0x614>
 800bccc:	07ea      	lsls	r2, r5, #31
 800bcce:	d505      	bpl.n	800bcdc <_strtod_l+0x52c>
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fc8f 	bl	80005f8 <__aeabi_dmul>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9a04      	ldr	r2, [sp, #16]
 800bcde:	3208      	adds	r2, #8
 800bce0:	f10a 0a01 	add.w	sl, sl, #1
 800bce4:	106d      	asrs	r5, r5, #1
 800bce6:	9204      	str	r2, [sp, #16]
 800bce8:	e7cc      	b.n	800bc84 <_strtod_l+0x4d4>
 800bcea:	d0ec      	beq.n	800bcc6 <_strtod_l+0x516>
 800bcec:	426d      	negs	r5, r5
 800bcee:	f015 020f 	ands.w	r2, r5, #15
 800bcf2:	d00a      	beq.n	800bd0a <_strtod_l+0x55a>
 800bcf4:	4b11      	ldr	r3, [pc, #68]	; (800bd3c <_strtod_l+0x58c>)
 800bcf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fda3 	bl	800084c <__aeabi_ddiv>
 800bd06:	4680      	mov	r8, r0
 800bd08:	4689      	mov	r9, r1
 800bd0a:	112d      	asrs	r5, r5, #4
 800bd0c:	d0db      	beq.n	800bcc6 <_strtod_l+0x516>
 800bd0e:	2d1f      	cmp	r5, #31
 800bd10:	dd1e      	ble.n	800bd50 <_strtod_l+0x5a0>
 800bd12:	2500      	movs	r5, #0
 800bd14:	46ab      	mov	fp, r5
 800bd16:	9509      	str	r5, [sp, #36]	; 0x24
 800bd18:	9505      	str	r5, [sp, #20]
 800bd1a:	2322      	movs	r3, #34	; 0x22
 800bd1c:	f04f 0800 	mov.w	r8, #0
 800bd20:	f04f 0900 	mov.w	r9, #0
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	e78d      	b.n	800bc44 <_strtod_l+0x494>
 800bd28:	0800fcdd 	.word	0x0800fcdd
 800bd2c:	0800fc90 	.word	0x0800fc90
 800bd30:	0800fcd5 	.word	0x0800fcd5
 800bd34:	0800fd0f 	.word	0x0800fd0f
 800bd38:	080100a1 	.word	0x080100a1
 800bd3c:	0800fe80 	.word	0x0800fe80
 800bd40:	0800fe58 	.word	0x0800fe58
 800bd44:	7ff00000 	.word	0x7ff00000
 800bd48:	7ca00000 	.word	0x7ca00000
 800bd4c:	7fefffff 	.word	0x7fefffff
 800bd50:	f015 0310 	ands.w	r3, r5, #16
 800bd54:	bf18      	it	ne
 800bd56:	236a      	movne	r3, #106	; 0x6a
 800bd58:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c0fc <_strtod_l+0x94c>
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	2300      	movs	r3, #0
 800bd64:	07ea      	lsls	r2, r5, #31
 800bd66:	d504      	bpl.n	800bd72 <_strtod_l+0x5c2>
 800bd68:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd6c:	f7f4 fc44 	bl	80005f8 <__aeabi_dmul>
 800bd70:	2301      	movs	r3, #1
 800bd72:	106d      	asrs	r5, r5, #1
 800bd74:	f10a 0a08 	add.w	sl, sl, #8
 800bd78:	d1f4      	bne.n	800bd64 <_strtod_l+0x5b4>
 800bd7a:	b10b      	cbz	r3, 800bd80 <_strtod_l+0x5d0>
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	9b04      	ldr	r3, [sp, #16]
 800bd82:	b1bb      	cbz	r3, 800bdb4 <_strtod_l+0x604>
 800bd84:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bd88:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	4649      	mov	r1, r9
 800bd90:	dd10      	ble.n	800bdb4 <_strtod_l+0x604>
 800bd92:	2b1f      	cmp	r3, #31
 800bd94:	f340 811e 	ble.w	800bfd4 <_strtod_l+0x824>
 800bd98:	2b34      	cmp	r3, #52	; 0x34
 800bd9a:	bfde      	ittt	le
 800bd9c:	f04f 33ff 	movle.w	r3, #4294967295
 800bda0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bda4:	4093      	lslle	r3, r2
 800bda6:	f04f 0800 	mov.w	r8, #0
 800bdaa:	bfcc      	ite	gt
 800bdac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bdb0:	ea03 0901 	andle.w	r9, r3, r1
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7f4 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d1a6      	bne.n	800bd12 <_strtod_l+0x562>
 800bdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdca:	4633      	mov	r3, r6
 800bdcc:	465a      	mov	r2, fp
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f002 fcee 	bl	800e7b0 <__s2b>
 800bdd4:	9009      	str	r0, [sp, #36]	; 0x24
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f af2a 	beq.w	800bc30 <_strtod_l+0x480>
 800bddc:	9a08      	ldr	r2, [sp, #32]
 800bdde:	9b05      	ldr	r3, [sp, #20]
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	eba3 0307 	sub.w	r3, r3, r7
 800bde6:	bfa8      	it	ge
 800bde8:	2300      	movge	r3, #0
 800bdea:	930c      	str	r3, [sp, #48]	; 0x30
 800bdec:	2500      	movs	r5, #0
 800bdee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdf2:	9312      	str	r3, [sp, #72]	; 0x48
 800bdf4:	46ab      	mov	fp, r5
 800bdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	6859      	ldr	r1, [r3, #4]
 800bdfc:	f002 fc30 	bl	800e660 <_Balloc>
 800be00:	9005      	str	r0, [sp, #20]
 800be02:	2800      	cmp	r0, #0
 800be04:	f43f af18 	beq.w	800bc38 <_strtod_l+0x488>
 800be08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be0a:	691a      	ldr	r2, [r3, #16]
 800be0c:	3202      	adds	r2, #2
 800be0e:	f103 010c 	add.w	r1, r3, #12
 800be12:	0092      	lsls	r2, r2, #2
 800be14:	300c      	adds	r0, #12
 800be16:	f001 f927 	bl	800d068 <memcpy>
 800be1a:	ec49 8b10 	vmov	d0, r8, r9
 800be1e:	aa18      	add	r2, sp, #96	; 0x60
 800be20:	a917      	add	r1, sp, #92	; 0x5c
 800be22:	4620      	mov	r0, r4
 800be24:	f002 fff8 	bl	800ee18 <__d2b>
 800be28:	ec49 8b18 	vmov	d8, r8, r9
 800be2c:	9016      	str	r0, [sp, #88]	; 0x58
 800be2e:	2800      	cmp	r0, #0
 800be30:	f43f af02 	beq.w	800bc38 <_strtod_l+0x488>
 800be34:	2101      	movs	r1, #1
 800be36:	4620      	mov	r0, r4
 800be38:	f002 fd52 	bl	800e8e0 <__i2b>
 800be3c:	4683      	mov	fp, r0
 800be3e:	2800      	cmp	r0, #0
 800be40:	f43f aefa 	beq.w	800bc38 <_strtod_l+0x488>
 800be44:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be48:	2e00      	cmp	r6, #0
 800be4a:	bfab      	itete	ge
 800be4c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800be4e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800be50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800be52:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800be56:	bfac      	ite	ge
 800be58:	eb06 0a03 	addge.w	sl, r6, r3
 800be5c:	1b9f      	sublt	r7, r3, r6
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	1af6      	subs	r6, r6, r3
 800be62:	4416      	add	r6, r2
 800be64:	4ba0      	ldr	r3, [pc, #640]	; (800c0e8 <_strtod_l+0x938>)
 800be66:	3e01      	subs	r6, #1
 800be68:	429e      	cmp	r6, r3
 800be6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be6e:	f280 80c4 	bge.w	800bffa <_strtod_l+0x84a>
 800be72:	1b9b      	subs	r3, r3, r6
 800be74:	2b1f      	cmp	r3, #31
 800be76:	eba2 0203 	sub.w	r2, r2, r3
 800be7a:	f04f 0101 	mov.w	r1, #1
 800be7e:	f300 80b0 	bgt.w	800bfe2 <_strtod_l+0x832>
 800be82:	fa01 f303 	lsl.w	r3, r1, r3
 800be86:	930e      	str	r3, [sp, #56]	; 0x38
 800be88:	2300      	movs	r3, #0
 800be8a:	930d      	str	r3, [sp, #52]	; 0x34
 800be8c:	eb0a 0602 	add.w	r6, sl, r2
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	45b2      	cmp	sl, r6
 800be94:	4417      	add	r7, r2
 800be96:	441f      	add	r7, r3
 800be98:	4653      	mov	r3, sl
 800be9a:	bfa8      	it	ge
 800be9c:	4633      	movge	r3, r6
 800be9e:	42bb      	cmp	r3, r7
 800bea0:	bfa8      	it	ge
 800bea2:	463b      	movge	r3, r7
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	bfc2      	ittt	gt
 800bea8:	1af6      	subgt	r6, r6, r3
 800beaa:	1aff      	subgt	r7, r7, r3
 800beac:	ebaa 0a03 	subgt.w	sl, sl, r3
 800beb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	dd17      	ble.n	800bee6 <_strtod_l+0x736>
 800beb6:	4659      	mov	r1, fp
 800beb8:	461a      	mov	r2, r3
 800beba:	4620      	mov	r0, r4
 800bebc:	f002 fdd0 	bl	800ea60 <__pow5mult>
 800bec0:	4683      	mov	fp, r0
 800bec2:	2800      	cmp	r0, #0
 800bec4:	f43f aeb8 	beq.w	800bc38 <_strtod_l+0x488>
 800bec8:	4601      	mov	r1, r0
 800beca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800becc:	4620      	mov	r0, r4
 800bece:	f002 fd1d 	bl	800e90c <__multiply>
 800bed2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f43f aeaf 	beq.w	800bc38 <_strtod_l+0x488>
 800beda:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bedc:	4620      	mov	r0, r4
 800bede:	f002 fbff 	bl	800e6e0 <_Bfree>
 800bee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bee4:	9316      	str	r3, [sp, #88]	; 0x58
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	f300 808c 	bgt.w	800c004 <_strtod_l+0x854>
 800beec:	9b08      	ldr	r3, [sp, #32]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dd08      	ble.n	800bf04 <_strtod_l+0x754>
 800bef2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bef4:	9905      	ldr	r1, [sp, #20]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f002 fdb2 	bl	800ea60 <__pow5mult>
 800befc:	9005      	str	r0, [sp, #20]
 800befe:	2800      	cmp	r0, #0
 800bf00:	f43f ae9a 	beq.w	800bc38 <_strtod_l+0x488>
 800bf04:	2f00      	cmp	r7, #0
 800bf06:	dd08      	ble.n	800bf1a <_strtod_l+0x76a>
 800bf08:	9905      	ldr	r1, [sp, #20]
 800bf0a:	463a      	mov	r2, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f002 fe01 	bl	800eb14 <__lshift>
 800bf12:	9005      	str	r0, [sp, #20]
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f43f ae8f 	beq.w	800bc38 <_strtod_l+0x488>
 800bf1a:	f1ba 0f00 	cmp.w	sl, #0
 800bf1e:	dd08      	ble.n	800bf32 <_strtod_l+0x782>
 800bf20:	4659      	mov	r1, fp
 800bf22:	4652      	mov	r2, sl
 800bf24:	4620      	mov	r0, r4
 800bf26:	f002 fdf5 	bl	800eb14 <__lshift>
 800bf2a:	4683      	mov	fp, r0
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f43f ae83 	beq.w	800bc38 <_strtod_l+0x488>
 800bf32:	9a05      	ldr	r2, [sp, #20]
 800bf34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf36:	4620      	mov	r0, r4
 800bf38:	f002 fe74 	bl	800ec24 <__mdiff>
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f43f ae7a 	beq.w	800bc38 <_strtod_l+0x488>
 800bf44:	68c3      	ldr	r3, [r0, #12]
 800bf46:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60c3      	str	r3, [r0, #12]
 800bf4c:	4659      	mov	r1, fp
 800bf4e:	f002 fe4d 	bl	800ebec <__mcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	da60      	bge.n	800c018 <_strtod_l+0x868>
 800bf56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf58:	ea53 0308 	orrs.w	r3, r3, r8
 800bf5c:	f040 8084 	bne.w	800c068 <_strtod_l+0x8b8>
 800bf60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d17f      	bne.n	800c068 <_strtod_l+0x8b8>
 800bf68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf6c:	0d1b      	lsrs	r3, r3, #20
 800bf6e:	051b      	lsls	r3, r3, #20
 800bf70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf74:	d978      	bls.n	800c068 <_strtod_l+0x8b8>
 800bf76:	696b      	ldr	r3, [r5, #20]
 800bf78:	b913      	cbnz	r3, 800bf80 <_strtod_l+0x7d0>
 800bf7a:	692b      	ldr	r3, [r5, #16]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	dd73      	ble.n	800c068 <_strtod_l+0x8b8>
 800bf80:	4629      	mov	r1, r5
 800bf82:	2201      	movs	r2, #1
 800bf84:	4620      	mov	r0, r4
 800bf86:	f002 fdc5 	bl	800eb14 <__lshift>
 800bf8a:	4659      	mov	r1, fp
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	f002 fe2d 	bl	800ebec <__mcmp>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	dd68      	ble.n	800c068 <_strtod_l+0x8b8>
 800bf96:	9904      	ldr	r1, [sp, #16]
 800bf98:	4a54      	ldr	r2, [pc, #336]	; (800c0ec <_strtod_l+0x93c>)
 800bf9a:	464b      	mov	r3, r9
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	f000 8084 	beq.w	800c0aa <_strtod_l+0x8fa>
 800bfa2:	ea02 0109 	and.w	r1, r2, r9
 800bfa6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bfaa:	dc7e      	bgt.n	800c0aa <_strtod_l+0x8fa>
 800bfac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bfb0:	f77f aeb3 	ble.w	800bd1a <_strtod_l+0x56a>
 800bfb4:	4b4e      	ldr	r3, [pc, #312]	; (800c0f0 <_strtod_l+0x940>)
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	4649      	mov	r1, r9
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f7f4 fb1c 	bl	80005f8 <__aeabi_dmul>
 800bfc0:	4b4a      	ldr	r3, [pc, #296]	; (800c0ec <_strtod_l+0x93c>)
 800bfc2:	400b      	ands	r3, r1
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4689      	mov	r9, r1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f47f ae3f 	bne.w	800bc4c <_strtod_l+0x49c>
 800bfce:	2322      	movs	r3, #34	; 0x22
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	e63b      	b.n	800bc4c <_strtod_l+0x49c>
 800bfd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	ea03 0808 	and.w	r8, r3, r8
 800bfe0:	e6e8      	b.n	800bdb4 <_strtod_l+0x604>
 800bfe2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bfe6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bfea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bfee:	36e2      	adds	r6, #226	; 0xe2
 800bff0:	fa01 f306 	lsl.w	r3, r1, r6
 800bff4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bff8:	e748      	b.n	800be8c <_strtod_l+0x6dc>
 800bffa:	2100      	movs	r1, #0
 800bffc:	2301      	movs	r3, #1
 800bffe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c002:	e743      	b.n	800be8c <_strtod_l+0x6dc>
 800c004:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c006:	4632      	mov	r2, r6
 800c008:	4620      	mov	r0, r4
 800c00a:	f002 fd83 	bl	800eb14 <__lshift>
 800c00e:	9016      	str	r0, [sp, #88]	; 0x58
 800c010:	2800      	cmp	r0, #0
 800c012:	f47f af6b 	bne.w	800beec <_strtod_l+0x73c>
 800c016:	e60f      	b.n	800bc38 <_strtod_l+0x488>
 800c018:	46ca      	mov	sl, r9
 800c01a:	d171      	bne.n	800c100 <_strtod_l+0x950>
 800c01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c01e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c022:	b352      	cbz	r2, 800c07a <_strtod_l+0x8ca>
 800c024:	4a33      	ldr	r2, [pc, #204]	; (800c0f4 <_strtod_l+0x944>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d12a      	bne.n	800c080 <_strtod_l+0x8d0>
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	4641      	mov	r1, r8
 800c02e:	b1fb      	cbz	r3, 800c070 <_strtod_l+0x8c0>
 800c030:	4b2e      	ldr	r3, [pc, #184]	; (800c0ec <_strtod_l+0x93c>)
 800c032:	ea09 0303 	and.w	r3, r9, r3
 800c036:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c03a:	f04f 32ff 	mov.w	r2, #4294967295
 800c03e:	d81a      	bhi.n	800c076 <_strtod_l+0x8c6>
 800c040:	0d1b      	lsrs	r3, r3, #20
 800c042:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c046:	fa02 f303 	lsl.w	r3, r2, r3
 800c04a:	4299      	cmp	r1, r3
 800c04c:	d118      	bne.n	800c080 <_strtod_l+0x8d0>
 800c04e:	4b2a      	ldr	r3, [pc, #168]	; (800c0f8 <_strtod_l+0x948>)
 800c050:	459a      	cmp	sl, r3
 800c052:	d102      	bne.n	800c05a <_strtod_l+0x8aa>
 800c054:	3101      	adds	r1, #1
 800c056:	f43f adef 	beq.w	800bc38 <_strtod_l+0x488>
 800c05a:	4b24      	ldr	r3, [pc, #144]	; (800c0ec <_strtod_l+0x93c>)
 800c05c:	ea0a 0303 	and.w	r3, sl, r3
 800c060:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c064:	f04f 0800 	mov.w	r8, #0
 800c068:	9b04      	ldr	r3, [sp, #16]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1a2      	bne.n	800bfb4 <_strtod_l+0x804>
 800c06e:	e5ed      	b.n	800bc4c <_strtod_l+0x49c>
 800c070:	f04f 33ff 	mov.w	r3, #4294967295
 800c074:	e7e9      	b.n	800c04a <_strtod_l+0x89a>
 800c076:	4613      	mov	r3, r2
 800c078:	e7e7      	b.n	800c04a <_strtod_l+0x89a>
 800c07a:	ea53 0308 	orrs.w	r3, r3, r8
 800c07e:	d08a      	beq.n	800bf96 <_strtod_l+0x7e6>
 800c080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c082:	b1e3      	cbz	r3, 800c0be <_strtod_l+0x90e>
 800c084:	ea13 0f0a 	tst.w	r3, sl
 800c088:	d0ee      	beq.n	800c068 <_strtod_l+0x8b8>
 800c08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08c:	9a04      	ldr	r2, [sp, #16]
 800c08e:	4640      	mov	r0, r8
 800c090:	4649      	mov	r1, r9
 800c092:	b1c3      	cbz	r3, 800c0c6 <_strtod_l+0x916>
 800c094:	f7ff fb6d 	bl	800b772 <sulp>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	ec51 0b18 	vmov	r0, r1, d8
 800c0a0:	f7f4 f8f4 	bl	800028c <__adddf3>
 800c0a4:	4680      	mov	r8, r0
 800c0a6:	4689      	mov	r9, r1
 800c0a8:	e7de      	b.n	800c068 <_strtod_l+0x8b8>
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c0b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c0b8:	f04f 38ff 	mov.w	r8, #4294967295
 800c0bc:	e7d4      	b.n	800c068 <_strtod_l+0x8b8>
 800c0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0c0:	ea13 0f08 	tst.w	r3, r8
 800c0c4:	e7e0      	b.n	800c088 <_strtod_l+0x8d8>
 800c0c6:	f7ff fb54 	bl	800b772 <sulp>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	ec51 0b18 	vmov	r0, r1, d8
 800c0d2:	f7f4 f8d9 	bl	8000288 <__aeabi_dsub>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4680      	mov	r8, r0
 800c0dc:	4689      	mov	r9, r1
 800c0de:	f7f4 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d0c0      	beq.n	800c068 <_strtod_l+0x8b8>
 800c0e6:	e618      	b.n	800bd1a <_strtod_l+0x56a>
 800c0e8:	fffffc02 	.word	0xfffffc02
 800c0ec:	7ff00000 	.word	0x7ff00000
 800c0f0:	39500000 	.word	0x39500000
 800c0f4:	000fffff 	.word	0x000fffff
 800c0f8:	7fefffff 	.word	0x7fefffff
 800c0fc:	0800fca8 	.word	0x0800fca8
 800c100:	4659      	mov	r1, fp
 800c102:	4628      	mov	r0, r5
 800c104:	f002 fee2 	bl	800eecc <__ratio>
 800c108:	ec57 6b10 	vmov	r6, r7, d0
 800c10c:	ee10 0a10 	vmov	r0, s0
 800c110:	2200      	movs	r2, #0
 800c112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c116:	4639      	mov	r1, r7
 800c118:	f7f4 fcea 	bl	8000af0 <__aeabi_dcmple>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d071      	beq.n	800c204 <_strtod_l+0xa54>
 800c120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c122:	2b00      	cmp	r3, #0
 800c124:	d17c      	bne.n	800c220 <_strtod_l+0xa70>
 800c126:	f1b8 0f00 	cmp.w	r8, #0
 800c12a:	d15a      	bne.n	800c1e2 <_strtod_l+0xa32>
 800c12c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c130:	2b00      	cmp	r3, #0
 800c132:	d15d      	bne.n	800c1f0 <_strtod_l+0xa40>
 800c134:	4b90      	ldr	r3, [pc, #576]	; (800c378 <_strtod_l+0xbc8>)
 800c136:	2200      	movs	r2, #0
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 fcce 	bl	8000adc <__aeabi_dcmplt>
 800c140:	2800      	cmp	r0, #0
 800c142:	d15c      	bne.n	800c1fe <_strtod_l+0xa4e>
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	4b8c      	ldr	r3, [pc, #560]	; (800c37c <_strtod_l+0xbcc>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	f7f4 fa54 	bl	80005f8 <__aeabi_dmul>
 800c150:	4606      	mov	r6, r0
 800c152:	460f      	mov	r7, r1
 800c154:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c158:	9606      	str	r6, [sp, #24]
 800c15a:	9307      	str	r3, [sp, #28]
 800c15c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c160:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c164:	4b86      	ldr	r3, [pc, #536]	; (800c380 <_strtod_l+0xbd0>)
 800c166:	ea0a 0303 	and.w	r3, sl, r3
 800c16a:	930d      	str	r3, [sp, #52]	; 0x34
 800c16c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c16e:	4b85      	ldr	r3, [pc, #532]	; (800c384 <_strtod_l+0xbd4>)
 800c170:	429a      	cmp	r2, r3
 800c172:	f040 8090 	bne.w	800c296 <_strtod_l+0xae6>
 800c176:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c17a:	ec49 8b10 	vmov	d0, r8, r9
 800c17e:	f002 fddb 	bl	800ed38 <__ulp>
 800c182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c186:	ec51 0b10 	vmov	r0, r1, d0
 800c18a:	f7f4 fa35 	bl	80005f8 <__aeabi_dmul>
 800c18e:	4642      	mov	r2, r8
 800c190:	464b      	mov	r3, r9
 800c192:	f7f4 f87b 	bl	800028c <__adddf3>
 800c196:	460b      	mov	r3, r1
 800c198:	4979      	ldr	r1, [pc, #484]	; (800c380 <_strtod_l+0xbd0>)
 800c19a:	4a7b      	ldr	r2, [pc, #492]	; (800c388 <_strtod_l+0xbd8>)
 800c19c:	4019      	ands	r1, r3
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	d944      	bls.n	800c22e <_strtod_l+0xa7e>
 800c1a4:	ee18 2a90 	vmov	r2, s17
 800c1a8:	4b78      	ldr	r3, [pc, #480]	; (800c38c <_strtod_l+0xbdc>)
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d104      	bne.n	800c1b8 <_strtod_l+0xa08>
 800c1ae:	ee18 3a10 	vmov	r3, s16
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	f43f ad40 	beq.w	800bc38 <_strtod_l+0x488>
 800c1b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c38c <_strtod_l+0xbdc>
 800c1bc:	f04f 38ff 	mov.w	r8, #4294967295
 800c1c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f002 fa8c 	bl	800e6e0 <_Bfree>
 800c1c8:	9905      	ldr	r1, [sp, #20]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f002 fa88 	bl	800e6e0 <_Bfree>
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f002 fa84 	bl	800e6e0 <_Bfree>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f002 fa80 	bl	800e6e0 <_Bfree>
 800c1e0:	e609      	b.n	800bdf6 <_strtod_l+0x646>
 800c1e2:	f1b8 0f01 	cmp.w	r8, #1
 800c1e6:	d103      	bne.n	800c1f0 <_strtod_l+0xa40>
 800c1e8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ec:	f43f ad95 	beq.w	800bd1a <_strtod_l+0x56a>
 800c1f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c348 <_strtod_l+0xb98>
 800c1f4:	4f60      	ldr	r7, [pc, #384]	; (800c378 <_strtod_l+0xbc8>)
 800c1f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1fa:	2600      	movs	r6, #0
 800c1fc:	e7ae      	b.n	800c15c <_strtod_l+0x9ac>
 800c1fe:	4f5f      	ldr	r7, [pc, #380]	; (800c37c <_strtod_l+0xbcc>)
 800c200:	2600      	movs	r6, #0
 800c202:	e7a7      	b.n	800c154 <_strtod_l+0x9a4>
 800c204:	4b5d      	ldr	r3, [pc, #372]	; (800c37c <_strtod_l+0xbcc>)
 800c206:	4630      	mov	r0, r6
 800c208:	4639      	mov	r1, r7
 800c20a:	2200      	movs	r2, #0
 800c20c:	f7f4 f9f4 	bl	80005f8 <__aeabi_dmul>
 800c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c212:	4606      	mov	r6, r0
 800c214:	460f      	mov	r7, r1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d09c      	beq.n	800c154 <_strtod_l+0x9a4>
 800c21a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c21e:	e79d      	b.n	800c15c <_strtod_l+0x9ac>
 800c220:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c350 <_strtod_l+0xba0>
 800c224:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c228:	ec57 6b17 	vmov	r6, r7, d7
 800c22c:	e796      	b.n	800c15c <_strtod_l+0x9ac>
 800c22e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	46ca      	mov	sl, r9
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1c2      	bne.n	800c1c0 <_strtod_l+0xa10>
 800c23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c23e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c240:	0d1b      	lsrs	r3, r3, #20
 800c242:	051b      	lsls	r3, r3, #20
 800c244:	429a      	cmp	r2, r3
 800c246:	d1bb      	bne.n	800c1c0 <_strtod_l+0xa10>
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 fd34 	bl	8000cb8 <__aeabi_d2lz>
 800c250:	f7f4 f9a4 	bl	800059c <__aeabi_l2d>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4630      	mov	r0, r6
 800c25a:	4639      	mov	r1, r7
 800c25c:	f7f4 f814 	bl	8000288 <__aeabi_dsub>
 800c260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c262:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c266:	ea43 0308 	orr.w	r3, r3, r8
 800c26a:	4313      	orrs	r3, r2
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	d054      	beq.n	800c31c <_strtod_l+0xb6c>
 800c272:	a339      	add	r3, pc, #228	; (adr r3, 800c358 <_strtod_l+0xba8>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 fc30 	bl	8000adc <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f47f ace5 	bne.w	800bc4c <_strtod_l+0x49c>
 800c282:	a337      	add	r3, pc, #220	; (adr r3, 800c360 <_strtod_l+0xbb0>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	4630      	mov	r0, r6
 800c28a:	4639      	mov	r1, r7
 800c28c:	f7f4 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 800c290:	2800      	cmp	r0, #0
 800c292:	d095      	beq.n	800c1c0 <_strtod_l+0xa10>
 800c294:	e4da      	b.n	800bc4c <_strtod_l+0x49c>
 800c296:	9b04      	ldr	r3, [sp, #16]
 800c298:	b333      	cbz	r3, 800c2e8 <_strtod_l+0xb38>
 800c29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c29c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2a0:	d822      	bhi.n	800c2e8 <_strtod_l+0xb38>
 800c2a2:	a331      	add	r3, pc, #196	; (adr r3, 800c368 <_strtod_l+0xbb8>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 fc20 	bl	8000af0 <__aeabi_dcmple>
 800c2b0:	b1a0      	cbz	r0, 800c2dc <_strtod_l+0xb2c>
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7f4 fc77 	bl	8000ba8 <__aeabi_d2uiz>
 800c2ba:	2801      	cmp	r0, #1
 800c2bc:	bf38      	it	cc
 800c2be:	2001      	movcc	r0, #1
 800c2c0:	f7f4 f920 	bl	8000504 <__aeabi_ui2d>
 800c2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	bb23      	cbnz	r3, 800c316 <_strtod_l+0xb66>
 800c2cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d0:	9010      	str	r0, [sp, #64]	; 0x40
 800c2d2:	9311      	str	r3, [sp, #68]	; 0x44
 800c2d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c2e4:	1a9b      	subs	r3, r3, r2
 800c2e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c2f0:	eef0 0a68 	vmov.f32	s1, s17
 800c2f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c2f8:	f002 fd1e 	bl	800ed38 <__ulp>
 800c2fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c300:	ec53 2b10 	vmov	r2, r3, d0
 800c304:	f7f4 f978 	bl	80005f8 <__aeabi_dmul>
 800c308:	ec53 2b18 	vmov	r2, r3, d8
 800c30c:	f7f3 ffbe 	bl	800028c <__adddf3>
 800c310:	4680      	mov	r8, r0
 800c312:	4689      	mov	r9, r1
 800c314:	e78d      	b.n	800c232 <_strtod_l+0xa82>
 800c316:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c31a:	e7db      	b.n	800c2d4 <_strtod_l+0xb24>
 800c31c:	a314      	add	r3, pc, #80	; (adr r3, 800c370 <_strtod_l+0xbc0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f4 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800c326:	e7b3      	b.n	800c290 <_strtod_l+0xae0>
 800c328:	2300      	movs	r3, #0
 800c32a:	930a      	str	r3, [sp, #40]	; 0x28
 800c32c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c32e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	f7ff ba7c 	b.w	800b82e <_strtod_l+0x7e>
 800c336:	2a65      	cmp	r2, #101	; 0x65
 800c338:	f43f ab75 	beq.w	800ba26 <_strtod_l+0x276>
 800c33c:	2a45      	cmp	r2, #69	; 0x45
 800c33e:	f43f ab72 	beq.w	800ba26 <_strtod_l+0x276>
 800c342:	2301      	movs	r3, #1
 800c344:	f7ff bbaa 	b.w	800ba9c <_strtod_l+0x2ec>
 800c348:	00000000 	.word	0x00000000
 800c34c:	bff00000 	.word	0xbff00000
 800c350:	00000000 	.word	0x00000000
 800c354:	3ff00000 	.word	0x3ff00000
 800c358:	94a03595 	.word	0x94a03595
 800c35c:	3fdfffff 	.word	0x3fdfffff
 800c360:	35afe535 	.word	0x35afe535
 800c364:	3fe00000 	.word	0x3fe00000
 800c368:	ffc00000 	.word	0xffc00000
 800c36c:	41dfffff 	.word	0x41dfffff
 800c370:	94a03595 	.word	0x94a03595
 800c374:	3fcfffff 	.word	0x3fcfffff
 800c378:	3ff00000 	.word	0x3ff00000
 800c37c:	3fe00000 	.word	0x3fe00000
 800c380:	7ff00000 	.word	0x7ff00000
 800c384:	7fe00000 	.word	0x7fe00000
 800c388:	7c9fffff 	.word	0x7c9fffff
 800c38c:	7fefffff 	.word	0x7fefffff

0800c390 <strtod>:
 800c390:	460a      	mov	r2, r1
 800c392:	4601      	mov	r1, r0
 800c394:	4802      	ldr	r0, [pc, #8]	; (800c3a0 <strtod+0x10>)
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <strtod+0x14>)
 800c398:	6800      	ldr	r0, [r0, #0]
 800c39a:	f7ff ba09 	b.w	800b7b0 <_strtod_l>
 800c39e:	bf00      	nop
 800c3a0:	200001d4 	.word	0x200001d4
 800c3a4:	2000001c 	.word	0x2000001c

0800c3a8 <__cvt>:
 800c3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ac:	ec55 4b10 	vmov	r4, r5, d0
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	460e      	mov	r6, r1
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	bfbb      	ittet	lt
 800c3ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c3be:	461d      	movlt	r5, r3
 800c3c0:	2300      	movge	r3, #0
 800c3c2:	232d      	movlt	r3, #45	; 0x2d
 800c3c4:	700b      	strb	r3, [r1, #0]
 800c3c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c3cc:	4691      	mov	r9, r2
 800c3ce:	f023 0820 	bic.w	r8, r3, #32
 800c3d2:	bfbc      	itt	lt
 800c3d4:	4622      	movlt	r2, r4
 800c3d6:	4614      	movlt	r4, r2
 800c3d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3dc:	d005      	beq.n	800c3ea <__cvt+0x42>
 800c3de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c3e2:	d100      	bne.n	800c3e6 <__cvt+0x3e>
 800c3e4:	3601      	adds	r6, #1
 800c3e6:	2102      	movs	r1, #2
 800c3e8:	e000      	b.n	800c3ec <__cvt+0x44>
 800c3ea:	2103      	movs	r1, #3
 800c3ec:	ab03      	add	r3, sp, #12
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	ab02      	add	r3, sp, #8
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	ec45 4b10 	vmov	d0, r4, r5
 800c3f8:	4653      	mov	r3, sl
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	f000 fed4 	bl	800d1a8 <_dtoa_r>
 800c400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c404:	4607      	mov	r7, r0
 800c406:	d102      	bne.n	800c40e <__cvt+0x66>
 800c408:	f019 0f01 	tst.w	r9, #1
 800c40c:	d022      	beq.n	800c454 <__cvt+0xac>
 800c40e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c412:	eb07 0906 	add.w	r9, r7, r6
 800c416:	d110      	bne.n	800c43a <__cvt+0x92>
 800c418:	783b      	ldrb	r3, [r7, #0]
 800c41a:	2b30      	cmp	r3, #48	; 0x30
 800c41c:	d10a      	bne.n	800c434 <__cvt+0x8c>
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	4620      	mov	r0, r4
 800c424:	4629      	mov	r1, r5
 800c426:	f7f4 fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c42a:	b918      	cbnz	r0, 800c434 <__cvt+0x8c>
 800c42c:	f1c6 0601 	rsb	r6, r6, #1
 800c430:	f8ca 6000 	str.w	r6, [sl]
 800c434:	f8da 3000 	ldr.w	r3, [sl]
 800c438:	4499      	add	r9, r3
 800c43a:	2200      	movs	r2, #0
 800c43c:	2300      	movs	r3, #0
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	f7f4 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 800c446:	b108      	cbz	r0, 800c44c <__cvt+0xa4>
 800c448:	f8cd 900c 	str.w	r9, [sp, #12]
 800c44c:	2230      	movs	r2, #48	; 0x30
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	454b      	cmp	r3, r9
 800c452:	d307      	bcc.n	800c464 <__cvt+0xbc>
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c458:	1bdb      	subs	r3, r3, r7
 800c45a:	4638      	mov	r0, r7
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	b004      	add	sp, #16
 800c460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c464:	1c59      	adds	r1, r3, #1
 800c466:	9103      	str	r1, [sp, #12]
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	e7f0      	b.n	800c44e <__cvt+0xa6>

0800c46c <__exponent>:
 800c46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c46e:	4603      	mov	r3, r0
 800c470:	2900      	cmp	r1, #0
 800c472:	bfb8      	it	lt
 800c474:	4249      	neglt	r1, r1
 800c476:	f803 2b02 	strb.w	r2, [r3], #2
 800c47a:	bfb4      	ite	lt
 800c47c:	222d      	movlt	r2, #45	; 0x2d
 800c47e:	222b      	movge	r2, #43	; 0x2b
 800c480:	2909      	cmp	r1, #9
 800c482:	7042      	strb	r2, [r0, #1]
 800c484:	dd2a      	ble.n	800c4dc <__exponent+0x70>
 800c486:	f10d 0207 	add.w	r2, sp, #7
 800c48a:	4617      	mov	r7, r2
 800c48c:	260a      	movs	r6, #10
 800c48e:	4694      	mov	ip, r2
 800c490:	fb91 f5f6 	sdiv	r5, r1, r6
 800c494:	fb06 1415 	mls	r4, r6, r5, r1
 800c498:	3430      	adds	r4, #48	; 0x30
 800c49a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2c63      	cmp	r4, #99	; 0x63
 800c4a2:	f102 32ff 	add.w	r2, r2, #4294967295
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	dcf1      	bgt.n	800c48e <__exponent+0x22>
 800c4aa:	3130      	adds	r1, #48	; 0x30
 800c4ac:	f1ac 0402 	sub.w	r4, ip, #2
 800c4b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c4b4:	1c41      	adds	r1, r0, #1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	42ba      	cmp	r2, r7
 800c4ba:	d30a      	bcc.n	800c4d2 <__exponent+0x66>
 800c4bc:	f10d 0209 	add.w	r2, sp, #9
 800c4c0:	eba2 020c 	sub.w	r2, r2, ip
 800c4c4:	42bc      	cmp	r4, r7
 800c4c6:	bf88      	it	hi
 800c4c8:	2200      	movhi	r2, #0
 800c4ca:	4413      	add	r3, r2
 800c4cc:	1a18      	subs	r0, r3, r0
 800c4ce:	b003      	add	sp, #12
 800c4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c4d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c4da:	e7ed      	b.n	800c4b8 <__exponent+0x4c>
 800c4dc:	2330      	movs	r3, #48	; 0x30
 800c4de:	3130      	adds	r1, #48	; 0x30
 800c4e0:	7083      	strb	r3, [r0, #2]
 800c4e2:	70c1      	strb	r1, [r0, #3]
 800c4e4:	1d03      	adds	r3, r0, #4
 800c4e6:	e7f1      	b.n	800c4cc <__exponent+0x60>

0800c4e8 <_printf_float>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	ed2d 8b02 	vpush	{d8}
 800c4f0:	b08d      	sub	sp, #52	; 0x34
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	461f      	mov	r7, r3
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	f000 fce7 	bl	800ced0 <_localeconv_r>
 800c502:	f8d0 a000 	ldr.w	sl, [r0]
 800c506:	4650      	mov	r0, sl
 800c508:	f7f3 feb2 	bl	8000270 <strlen>
 800c50c:	2300      	movs	r3, #0
 800c50e:	930a      	str	r3, [sp, #40]	; 0x28
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	f8d8 3000 	ldr.w	r3, [r8]
 800c518:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c51c:	3307      	adds	r3, #7
 800c51e:	f023 0307 	bic.w	r3, r3, #7
 800c522:	f103 0208 	add.w	r2, r3, #8
 800c526:	f8c8 2000 	str.w	r2, [r8]
 800c52a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c52e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c532:	9307      	str	r3, [sp, #28]
 800c534:	f8cd 8018 	str.w	r8, [sp, #24]
 800c538:	ee08 0a10 	vmov	s16, r0
 800c53c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c544:	4b9e      	ldr	r3, [pc, #632]	; (800c7c0 <_printf_float+0x2d8>)
 800c546:	f04f 32ff 	mov.w	r2, #4294967295
 800c54a:	f7f4 faef 	bl	8000b2c <__aeabi_dcmpun>
 800c54e:	bb88      	cbnz	r0, 800c5b4 <_printf_float+0xcc>
 800c550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c554:	4b9a      	ldr	r3, [pc, #616]	; (800c7c0 <_printf_float+0x2d8>)
 800c556:	f04f 32ff 	mov.w	r2, #4294967295
 800c55a:	f7f4 fac9 	bl	8000af0 <__aeabi_dcmple>
 800c55e:	bb48      	cbnz	r0, 800c5b4 <_printf_float+0xcc>
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f4 fab8 	bl	8000adc <__aeabi_dcmplt>
 800c56c:	b110      	cbz	r0, 800c574 <_printf_float+0x8c>
 800c56e:	232d      	movs	r3, #45	; 0x2d
 800c570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c574:	4a93      	ldr	r2, [pc, #588]	; (800c7c4 <_printf_float+0x2dc>)
 800c576:	4b94      	ldr	r3, [pc, #592]	; (800c7c8 <_printf_float+0x2e0>)
 800c578:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c57c:	bf94      	ite	ls
 800c57e:	4690      	movls	r8, r2
 800c580:	4698      	movhi	r8, r3
 800c582:	2303      	movs	r3, #3
 800c584:	6123      	str	r3, [r4, #16]
 800c586:	9b05      	ldr	r3, [sp, #20]
 800c588:	f023 0304 	bic.w	r3, r3, #4
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	f04f 0900 	mov.w	r9, #0
 800c592:	9700      	str	r7, [sp, #0]
 800c594:	4633      	mov	r3, r6
 800c596:	aa0b      	add	r2, sp, #44	; 0x2c
 800c598:	4621      	mov	r1, r4
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 f9da 	bl	800c954 <_printf_common>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f040 8090 	bne.w	800c6c6 <_printf_float+0x1de>
 800c5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5aa:	b00d      	add	sp, #52	; 0x34
 800c5ac:	ecbd 8b02 	vpop	{d8}
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	4642      	mov	r2, r8
 800c5b6:	464b      	mov	r3, r9
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	f7f4 fab6 	bl	8000b2c <__aeabi_dcmpun>
 800c5c0:	b140      	cbz	r0, 800c5d4 <_printf_float+0xec>
 800c5c2:	464b      	mov	r3, r9
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfbc      	itt	lt
 800c5c8:	232d      	movlt	r3, #45	; 0x2d
 800c5ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c5ce:	4a7f      	ldr	r2, [pc, #508]	; (800c7cc <_printf_float+0x2e4>)
 800c5d0:	4b7f      	ldr	r3, [pc, #508]	; (800c7d0 <_printf_float+0x2e8>)
 800c5d2:	e7d1      	b.n	800c578 <_printf_float+0x90>
 800c5d4:	6863      	ldr	r3, [r4, #4]
 800c5d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c5da:	9206      	str	r2, [sp, #24]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	d13f      	bne.n	800c660 <_printf_float+0x178>
 800c5e0:	2306      	movs	r3, #6
 800c5e2:	6063      	str	r3, [r4, #4]
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	6861      	ldr	r1, [r4, #4]
 800c5e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9303      	str	r3, [sp, #12]
 800c5f0:	ab0a      	add	r3, sp, #40	; 0x28
 800c5f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c5f6:	ab09      	add	r3, sp, #36	; 0x24
 800c5f8:	ec49 8b10 	vmov	d0, r8, r9
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	6022      	str	r2, [r4, #0]
 800c600:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c604:	4628      	mov	r0, r5
 800c606:	f7ff fecf 	bl	800c3a8 <__cvt>
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c60e:	2b47      	cmp	r3, #71	; 0x47
 800c610:	4680      	mov	r8, r0
 800c612:	d108      	bne.n	800c626 <_printf_float+0x13e>
 800c614:	1cc8      	adds	r0, r1, #3
 800c616:	db02      	blt.n	800c61e <_printf_float+0x136>
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	4299      	cmp	r1, r3
 800c61c:	dd41      	ble.n	800c6a2 <_printf_float+0x1ba>
 800c61e:	f1ab 0302 	sub.w	r3, fp, #2
 800c622:	fa5f fb83 	uxtb.w	fp, r3
 800c626:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c62a:	d820      	bhi.n	800c66e <_printf_float+0x186>
 800c62c:	3901      	subs	r1, #1
 800c62e:	465a      	mov	r2, fp
 800c630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c634:	9109      	str	r1, [sp, #36]	; 0x24
 800c636:	f7ff ff19 	bl	800c46c <__exponent>
 800c63a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c63c:	1813      	adds	r3, r2, r0
 800c63e:	2a01      	cmp	r2, #1
 800c640:	4681      	mov	r9, r0
 800c642:	6123      	str	r3, [r4, #16]
 800c644:	dc02      	bgt.n	800c64c <_printf_float+0x164>
 800c646:	6822      	ldr	r2, [r4, #0]
 800c648:	07d2      	lsls	r2, r2, #31
 800c64a:	d501      	bpl.n	800c650 <_printf_float+0x168>
 800c64c:	3301      	adds	r3, #1
 800c64e:	6123      	str	r3, [r4, #16]
 800c650:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c654:	2b00      	cmp	r3, #0
 800c656:	d09c      	beq.n	800c592 <_printf_float+0xaa>
 800c658:	232d      	movs	r3, #45	; 0x2d
 800c65a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c65e:	e798      	b.n	800c592 <_printf_float+0xaa>
 800c660:	9a06      	ldr	r2, [sp, #24]
 800c662:	2a47      	cmp	r2, #71	; 0x47
 800c664:	d1be      	bne.n	800c5e4 <_printf_float+0xfc>
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1bc      	bne.n	800c5e4 <_printf_float+0xfc>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e7b9      	b.n	800c5e2 <_printf_float+0xfa>
 800c66e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c672:	d118      	bne.n	800c6a6 <_printf_float+0x1be>
 800c674:	2900      	cmp	r1, #0
 800c676:	6863      	ldr	r3, [r4, #4]
 800c678:	dd0b      	ble.n	800c692 <_printf_float+0x1aa>
 800c67a:	6121      	str	r1, [r4, #16]
 800c67c:	b913      	cbnz	r3, 800c684 <_printf_float+0x19c>
 800c67e:	6822      	ldr	r2, [r4, #0]
 800c680:	07d0      	lsls	r0, r2, #31
 800c682:	d502      	bpl.n	800c68a <_printf_float+0x1a2>
 800c684:	3301      	adds	r3, #1
 800c686:	440b      	add	r3, r1
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c68c:	f04f 0900 	mov.w	r9, #0
 800c690:	e7de      	b.n	800c650 <_printf_float+0x168>
 800c692:	b913      	cbnz	r3, 800c69a <_printf_float+0x1b2>
 800c694:	6822      	ldr	r2, [r4, #0]
 800c696:	07d2      	lsls	r2, r2, #31
 800c698:	d501      	bpl.n	800c69e <_printf_float+0x1b6>
 800c69a:	3302      	adds	r3, #2
 800c69c:	e7f4      	b.n	800c688 <_printf_float+0x1a0>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e7f2      	b.n	800c688 <_printf_float+0x1a0>
 800c6a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a8:	4299      	cmp	r1, r3
 800c6aa:	db05      	blt.n	800c6b8 <_printf_float+0x1d0>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	6121      	str	r1, [r4, #16]
 800c6b0:	07d8      	lsls	r0, r3, #31
 800c6b2:	d5ea      	bpl.n	800c68a <_printf_float+0x1a2>
 800c6b4:	1c4b      	adds	r3, r1, #1
 800c6b6:	e7e7      	b.n	800c688 <_printf_float+0x1a0>
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	bfd4      	ite	le
 800c6bc:	f1c1 0202 	rsble	r2, r1, #2
 800c6c0:	2201      	movgt	r2, #1
 800c6c2:	4413      	add	r3, r2
 800c6c4:	e7e0      	b.n	800c688 <_printf_float+0x1a0>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	055a      	lsls	r2, r3, #21
 800c6ca:	d407      	bmi.n	800c6dc <_printf_float+0x1f4>
 800c6cc:	6923      	ldr	r3, [r4, #16]
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b8      	blx	r7
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d12c      	bne.n	800c734 <_printf_float+0x24c>
 800c6da:	e764      	b.n	800c5a6 <_printf_float+0xbe>
 800c6dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6e0:	f240 80e0 	bls.w	800c8a4 <_printf_float+0x3bc>
 800c6e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f7f4 f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d034      	beq.n	800c75e <_printf_float+0x276>
 800c6f4:	4a37      	ldr	r2, [pc, #220]	; (800c7d4 <_printf_float+0x2ec>)
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4631      	mov	r1, r6
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	47b8      	blx	r7
 800c6fe:	3001      	adds	r0, #1
 800c700:	f43f af51 	beq.w	800c5a6 <_printf_float+0xbe>
 800c704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c708:	429a      	cmp	r2, r3
 800c70a:	db02      	blt.n	800c712 <_printf_float+0x22a>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	07d8      	lsls	r0, r3, #31
 800c710:	d510      	bpl.n	800c734 <_printf_float+0x24c>
 800c712:	ee18 3a10 	vmov	r3, s16
 800c716:	4652      	mov	r2, sl
 800c718:	4631      	mov	r1, r6
 800c71a:	4628      	mov	r0, r5
 800c71c:	47b8      	blx	r7
 800c71e:	3001      	adds	r0, #1
 800c720:	f43f af41 	beq.w	800c5a6 <_printf_float+0xbe>
 800c724:	f04f 0800 	mov.w	r8, #0
 800c728:	f104 091a 	add.w	r9, r4, #26
 800c72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c72e:	3b01      	subs	r3, #1
 800c730:	4543      	cmp	r3, r8
 800c732:	dc09      	bgt.n	800c748 <_printf_float+0x260>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	079b      	lsls	r3, r3, #30
 800c738:	f100 8107 	bmi.w	800c94a <_printf_float+0x462>
 800c73c:	68e0      	ldr	r0, [r4, #12]
 800c73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c740:	4298      	cmp	r0, r3
 800c742:	bfb8      	it	lt
 800c744:	4618      	movlt	r0, r3
 800c746:	e730      	b.n	800c5aa <_printf_float+0xc2>
 800c748:	2301      	movs	r3, #1
 800c74a:	464a      	mov	r2, r9
 800c74c:	4631      	mov	r1, r6
 800c74e:	4628      	mov	r0, r5
 800c750:	47b8      	blx	r7
 800c752:	3001      	adds	r0, #1
 800c754:	f43f af27 	beq.w	800c5a6 <_printf_float+0xbe>
 800c758:	f108 0801 	add.w	r8, r8, #1
 800c75c:	e7e6      	b.n	800c72c <_printf_float+0x244>
 800c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc39      	bgt.n	800c7d8 <_printf_float+0x2f0>
 800c764:	4a1b      	ldr	r2, [pc, #108]	; (800c7d4 <_printf_float+0x2ec>)
 800c766:	2301      	movs	r3, #1
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f43f af19 	beq.w	800c5a6 <_printf_float+0xbe>
 800c774:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c778:	4313      	orrs	r3, r2
 800c77a:	d102      	bne.n	800c782 <_printf_float+0x29a>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d5d8      	bpl.n	800c734 <_printf_float+0x24c>
 800c782:	ee18 3a10 	vmov	r3, s16
 800c786:	4652      	mov	r2, sl
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f af09 	beq.w	800c5a6 <_printf_float+0xbe>
 800c794:	f04f 0900 	mov.w	r9, #0
 800c798:	f104 0a1a 	add.w	sl, r4, #26
 800c79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79e:	425b      	negs	r3, r3
 800c7a0:	454b      	cmp	r3, r9
 800c7a2:	dc01      	bgt.n	800c7a8 <_printf_float+0x2c0>
 800c7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a6:	e792      	b.n	800c6ce <_printf_float+0x1e6>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	4652      	mov	r2, sl
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	47b8      	blx	r7
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	f43f aef7 	beq.w	800c5a6 <_printf_float+0xbe>
 800c7b8:	f109 0901 	add.w	r9, r9, #1
 800c7bc:	e7ee      	b.n	800c79c <_printf_float+0x2b4>
 800c7be:	bf00      	nop
 800c7c0:	7fefffff 	.word	0x7fefffff
 800c7c4:	0800fcd0 	.word	0x0800fcd0
 800c7c8:	0800fcd4 	.word	0x0800fcd4
 800c7cc:	0800fcd8 	.word	0x0800fcd8
 800c7d0:	0800fcdc 	.word	0x0800fcdc
 800c7d4:	0800fce0 	.word	0x0800fce0
 800c7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	bfa8      	it	ge
 800c7e0:	461a      	movge	r2, r3
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	4691      	mov	r9, r2
 800c7e6:	dc37      	bgt.n	800c858 <_printf_float+0x370>
 800c7e8:	f04f 0b00 	mov.w	fp, #0
 800c7ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7f0:	f104 021a 	add.w	r2, r4, #26
 800c7f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	eba3 0309 	sub.w	r3, r3, r9
 800c7fc:	455b      	cmp	r3, fp
 800c7fe:	dc33      	bgt.n	800c868 <_printf_float+0x380>
 800c800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c804:	429a      	cmp	r2, r3
 800c806:	db3b      	blt.n	800c880 <_printf_float+0x398>
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	07da      	lsls	r2, r3, #31
 800c80c:	d438      	bmi.n	800c880 <_printf_float+0x398>
 800c80e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c812:	eba2 0903 	sub.w	r9, r2, r3
 800c816:	9b05      	ldr	r3, [sp, #20]
 800c818:	1ad2      	subs	r2, r2, r3
 800c81a:	4591      	cmp	r9, r2
 800c81c:	bfa8      	it	ge
 800c81e:	4691      	movge	r9, r2
 800c820:	f1b9 0f00 	cmp.w	r9, #0
 800c824:	dc35      	bgt.n	800c892 <_printf_float+0x3aa>
 800c826:	f04f 0800 	mov.w	r8, #0
 800c82a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c82e:	f104 0a1a 	add.w	sl, r4, #26
 800c832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	eba3 0309 	sub.w	r3, r3, r9
 800c83c:	4543      	cmp	r3, r8
 800c83e:	f77f af79 	ble.w	800c734 <_printf_float+0x24c>
 800c842:	2301      	movs	r3, #1
 800c844:	4652      	mov	r2, sl
 800c846:	4631      	mov	r1, r6
 800c848:	4628      	mov	r0, r5
 800c84a:	47b8      	blx	r7
 800c84c:	3001      	adds	r0, #1
 800c84e:	f43f aeaa 	beq.w	800c5a6 <_printf_float+0xbe>
 800c852:	f108 0801 	add.w	r8, r8, #1
 800c856:	e7ec      	b.n	800c832 <_printf_float+0x34a>
 800c858:	4613      	mov	r3, r2
 800c85a:	4631      	mov	r1, r6
 800c85c:	4642      	mov	r2, r8
 800c85e:	4628      	mov	r0, r5
 800c860:	47b8      	blx	r7
 800c862:	3001      	adds	r0, #1
 800c864:	d1c0      	bne.n	800c7e8 <_printf_float+0x300>
 800c866:	e69e      	b.n	800c5a6 <_printf_float+0xbe>
 800c868:	2301      	movs	r3, #1
 800c86a:	4631      	mov	r1, r6
 800c86c:	4628      	mov	r0, r5
 800c86e:	9205      	str	r2, [sp, #20]
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	f43f ae97 	beq.w	800c5a6 <_printf_float+0xbe>
 800c878:	9a05      	ldr	r2, [sp, #20]
 800c87a:	f10b 0b01 	add.w	fp, fp, #1
 800c87e:	e7b9      	b.n	800c7f4 <_printf_float+0x30c>
 800c880:	ee18 3a10 	vmov	r3, s16
 800c884:	4652      	mov	r2, sl
 800c886:	4631      	mov	r1, r6
 800c888:	4628      	mov	r0, r5
 800c88a:	47b8      	blx	r7
 800c88c:	3001      	adds	r0, #1
 800c88e:	d1be      	bne.n	800c80e <_printf_float+0x326>
 800c890:	e689      	b.n	800c5a6 <_printf_float+0xbe>
 800c892:	9a05      	ldr	r2, [sp, #20]
 800c894:	464b      	mov	r3, r9
 800c896:	4442      	add	r2, r8
 800c898:	4631      	mov	r1, r6
 800c89a:	4628      	mov	r0, r5
 800c89c:	47b8      	blx	r7
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d1c1      	bne.n	800c826 <_printf_float+0x33e>
 800c8a2:	e680      	b.n	800c5a6 <_printf_float+0xbe>
 800c8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a6:	2a01      	cmp	r2, #1
 800c8a8:	dc01      	bgt.n	800c8ae <_printf_float+0x3c6>
 800c8aa:	07db      	lsls	r3, r3, #31
 800c8ac:	d53a      	bpl.n	800c924 <_printf_float+0x43c>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	47b8      	blx	r7
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	f43f ae74 	beq.w	800c5a6 <_printf_float+0xbe>
 800c8be:	ee18 3a10 	vmov	r3, s16
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b8      	blx	r7
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f43f ae6b 	beq.w	800c5a6 <_printf_float+0xbe>
 800c8d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c8dc:	f7f4 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e0:	b9d8      	cbnz	r0, 800c91a <_printf_float+0x432>
 800c8e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c8e6:	f108 0201 	add.w	r2, r8, #1
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d10e      	bne.n	800c912 <_printf_float+0x42a>
 800c8f4:	e657      	b.n	800c5a6 <_printf_float+0xbe>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4652      	mov	r2, sl
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	47b8      	blx	r7
 800c900:	3001      	adds	r0, #1
 800c902:	f43f ae50 	beq.w	800c5a6 <_printf_float+0xbe>
 800c906:	f108 0801 	add.w	r8, r8, #1
 800c90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90c:	3b01      	subs	r3, #1
 800c90e:	4543      	cmp	r3, r8
 800c910:	dcf1      	bgt.n	800c8f6 <_printf_float+0x40e>
 800c912:	464b      	mov	r3, r9
 800c914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c918:	e6da      	b.n	800c6d0 <_printf_float+0x1e8>
 800c91a:	f04f 0800 	mov.w	r8, #0
 800c91e:	f104 0a1a 	add.w	sl, r4, #26
 800c922:	e7f2      	b.n	800c90a <_printf_float+0x422>
 800c924:	2301      	movs	r3, #1
 800c926:	4642      	mov	r2, r8
 800c928:	e7df      	b.n	800c8ea <_printf_float+0x402>
 800c92a:	2301      	movs	r3, #1
 800c92c:	464a      	mov	r2, r9
 800c92e:	4631      	mov	r1, r6
 800c930:	4628      	mov	r0, r5
 800c932:	47b8      	blx	r7
 800c934:	3001      	adds	r0, #1
 800c936:	f43f ae36 	beq.w	800c5a6 <_printf_float+0xbe>
 800c93a:	f108 0801 	add.w	r8, r8, #1
 800c93e:	68e3      	ldr	r3, [r4, #12]
 800c940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c942:	1a5b      	subs	r3, r3, r1
 800c944:	4543      	cmp	r3, r8
 800c946:	dcf0      	bgt.n	800c92a <_printf_float+0x442>
 800c948:	e6f8      	b.n	800c73c <_printf_float+0x254>
 800c94a:	f04f 0800 	mov.w	r8, #0
 800c94e:	f104 0919 	add.w	r9, r4, #25
 800c952:	e7f4      	b.n	800c93e <_printf_float+0x456>

0800c954 <_printf_common>:
 800c954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	4616      	mov	r6, r2
 800c95a:	4699      	mov	r9, r3
 800c95c:	688a      	ldr	r2, [r1, #8]
 800c95e:	690b      	ldr	r3, [r1, #16]
 800c960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c964:	4293      	cmp	r3, r2
 800c966:	bfb8      	it	lt
 800c968:	4613      	movlt	r3, r2
 800c96a:	6033      	str	r3, [r6, #0]
 800c96c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c970:	4607      	mov	r7, r0
 800c972:	460c      	mov	r4, r1
 800c974:	b10a      	cbz	r2, 800c97a <_printf_common+0x26>
 800c976:	3301      	adds	r3, #1
 800c978:	6033      	str	r3, [r6, #0]
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	0699      	lsls	r1, r3, #26
 800c97e:	bf42      	ittt	mi
 800c980:	6833      	ldrmi	r3, [r6, #0]
 800c982:	3302      	addmi	r3, #2
 800c984:	6033      	strmi	r3, [r6, #0]
 800c986:	6825      	ldr	r5, [r4, #0]
 800c988:	f015 0506 	ands.w	r5, r5, #6
 800c98c:	d106      	bne.n	800c99c <_printf_common+0x48>
 800c98e:	f104 0a19 	add.w	sl, r4, #25
 800c992:	68e3      	ldr	r3, [r4, #12]
 800c994:	6832      	ldr	r2, [r6, #0]
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	42ab      	cmp	r3, r5
 800c99a:	dc26      	bgt.n	800c9ea <_printf_common+0x96>
 800c99c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9a0:	1e13      	subs	r3, r2, #0
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	bf18      	it	ne
 800c9a6:	2301      	movne	r3, #1
 800c9a8:	0692      	lsls	r2, r2, #26
 800c9aa:	d42b      	bmi.n	800ca04 <_printf_common+0xb0>
 800c9ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	47c0      	blx	r8
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	d01e      	beq.n	800c9f8 <_printf_common+0xa4>
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	6922      	ldr	r2, [r4, #16]
 800c9be:	f003 0306 	and.w	r3, r3, #6
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	bf02      	ittt	eq
 800c9c6:	68e5      	ldreq	r5, [r4, #12]
 800c9c8:	6833      	ldreq	r3, [r6, #0]
 800c9ca:	1aed      	subeq	r5, r5, r3
 800c9cc:	68a3      	ldr	r3, [r4, #8]
 800c9ce:	bf0c      	ite	eq
 800c9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9d4:	2500      	movne	r5, #0
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	bfc4      	itt	gt
 800c9da:	1a9b      	subgt	r3, r3, r2
 800c9dc:	18ed      	addgt	r5, r5, r3
 800c9de:	2600      	movs	r6, #0
 800c9e0:	341a      	adds	r4, #26
 800c9e2:	42b5      	cmp	r5, r6
 800c9e4:	d11a      	bne.n	800ca1c <_printf_common+0xc8>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e008      	b.n	800c9fc <_printf_common+0xa8>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	47c0      	blx	r8
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d103      	bne.n	800ca00 <_printf_common+0xac>
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca00:	3501      	adds	r5, #1
 800ca02:	e7c6      	b.n	800c992 <_printf_common+0x3e>
 800ca04:	18e1      	adds	r1, r4, r3
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	2030      	movs	r0, #48	; 0x30
 800ca0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca0e:	4422      	add	r2, r4
 800ca10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca18:	3302      	adds	r3, #2
 800ca1a:	e7c7      	b.n	800c9ac <_printf_common+0x58>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	4622      	mov	r2, r4
 800ca20:	4649      	mov	r1, r9
 800ca22:	4638      	mov	r0, r7
 800ca24:	47c0      	blx	r8
 800ca26:	3001      	adds	r0, #1
 800ca28:	d0e6      	beq.n	800c9f8 <_printf_common+0xa4>
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	e7d9      	b.n	800c9e2 <_printf_common+0x8e>
	...

0800ca30 <_printf_i>:
 800ca30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	7e0f      	ldrb	r7, [r1, #24]
 800ca36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca38:	2f78      	cmp	r7, #120	; 0x78
 800ca3a:	4691      	mov	r9, r2
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	469a      	mov	sl, r3
 800ca42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca46:	d807      	bhi.n	800ca58 <_printf_i+0x28>
 800ca48:	2f62      	cmp	r7, #98	; 0x62
 800ca4a:	d80a      	bhi.n	800ca62 <_printf_i+0x32>
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	f000 80d4 	beq.w	800cbfa <_printf_i+0x1ca>
 800ca52:	2f58      	cmp	r7, #88	; 0x58
 800ca54:	f000 80c0 	beq.w	800cbd8 <_printf_i+0x1a8>
 800ca58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca60:	e03a      	b.n	800cad8 <_printf_i+0xa8>
 800ca62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca66:	2b15      	cmp	r3, #21
 800ca68:	d8f6      	bhi.n	800ca58 <_printf_i+0x28>
 800ca6a:	a101      	add	r1, pc, #4	; (adr r1, 800ca70 <_printf_i+0x40>)
 800ca6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca70:	0800cac9 	.word	0x0800cac9
 800ca74:	0800cadd 	.word	0x0800cadd
 800ca78:	0800ca59 	.word	0x0800ca59
 800ca7c:	0800ca59 	.word	0x0800ca59
 800ca80:	0800ca59 	.word	0x0800ca59
 800ca84:	0800ca59 	.word	0x0800ca59
 800ca88:	0800cadd 	.word	0x0800cadd
 800ca8c:	0800ca59 	.word	0x0800ca59
 800ca90:	0800ca59 	.word	0x0800ca59
 800ca94:	0800ca59 	.word	0x0800ca59
 800ca98:	0800ca59 	.word	0x0800ca59
 800ca9c:	0800cbe1 	.word	0x0800cbe1
 800caa0:	0800cb09 	.word	0x0800cb09
 800caa4:	0800cb9b 	.word	0x0800cb9b
 800caa8:	0800ca59 	.word	0x0800ca59
 800caac:	0800ca59 	.word	0x0800ca59
 800cab0:	0800cc03 	.word	0x0800cc03
 800cab4:	0800ca59 	.word	0x0800ca59
 800cab8:	0800cb09 	.word	0x0800cb09
 800cabc:	0800ca59 	.word	0x0800ca59
 800cac0:	0800ca59 	.word	0x0800ca59
 800cac4:	0800cba3 	.word	0x0800cba3
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	1d1a      	adds	r2, r3, #4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	602a      	str	r2, [r5, #0]
 800cad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cad8:	2301      	movs	r3, #1
 800cada:	e09f      	b.n	800cc1c <_printf_i+0x1ec>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	682b      	ldr	r3, [r5, #0]
 800cae0:	0607      	lsls	r7, r0, #24
 800cae2:	f103 0104 	add.w	r1, r3, #4
 800cae6:	6029      	str	r1, [r5, #0]
 800cae8:	d501      	bpl.n	800caee <_printf_i+0xbe>
 800caea:	681e      	ldr	r6, [r3, #0]
 800caec:	e003      	b.n	800caf6 <_printf_i+0xc6>
 800caee:	0646      	lsls	r6, r0, #25
 800caf0:	d5fb      	bpl.n	800caea <_printf_i+0xba>
 800caf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	da03      	bge.n	800cb02 <_printf_i+0xd2>
 800cafa:	232d      	movs	r3, #45	; 0x2d
 800cafc:	4276      	negs	r6, r6
 800cafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb02:	485a      	ldr	r0, [pc, #360]	; (800cc6c <_printf_i+0x23c>)
 800cb04:	230a      	movs	r3, #10
 800cb06:	e012      	b.n	800cb2e <_printf_i+0xfe>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	6820      	ldr	r0, [r4, #0]
 800cb0c:	1d19      	adds	r1, r3, #4
 800cb0e:	6029      	str	r1, [r5, #0]
 800cb10:	0605      	lsls	r5, r0, #24
 800cb12:	d501      	bpl.n	800cb18 <_printf_i+0xe8>
 800cb14:	681e      	ldr	r6, [r3, #0]
 800cb16:	e002      	b.n	800cb1e <_printf_i+0xee>
 800cb18:	0641      	lsls	r1, r0, #25
 800cb1a:	d5fb      	bpl.n	800cb14 <_printf_i+0xe4>
 800cb1c:	881e      	ldrh	r6, [r3, #0]
 800cb1e:	4853      	ldr	r0, [pc, #332]	; (800cc6c <_printf_i+0x23c>)
 800cb20:	2f6f      	cmp	r7, #111	; 0x6f
 800cb22:	bf0c      	ite	eq
 800cb24:	2308      	moveq	r3, #8
 800cb26:	230a      	movne	r3, #10
 800cb28:	2100      	movs	r1, #0
 800cb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb2e:	6865      	ldr	r5, [r4, #4]
 800cb30:	60a5      	str	r5, [r4, #8]
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	bfa2      	ittt	ge
 800cb36:	6821      	ldrge	r1, [r4, #0]
 800cb38:	f021 0104 	bicge.w	r1, r1, #4
 800cb3c:	6021      	strge	r1, [r4, #0]
 800cb3e:	b90e      	cbnz	r6, 800cb44 <_printf_i+0x114>
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	d04b      	beq.n	800cbdc <_printf_i+0x1ac>
 800cb44:	4615      	mov	r5, r2
 800cb46:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb4a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb4e:	5dc7      	ldrb	r7, [r0, r7]
 800cb50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb54:	4637      	mov	r7, r6
 800cb56:	42bb      	cmp	r3, r7
 800cb58:	460e      	mov	r6, r1
 800cb5a:	d9f4      	bls.n	800cb46 <_printf_i+0x116>
 800cb5c:	2b08      	cmp	r3, #8
 800cb5e:	d10b      	bne.n	800cb78 <_printf_i+0x148>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	07de      	lsls	r6, r3, #31
 800cb64:	d508      	bpl.n	800cb78 <_printf_i+0x148>
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	6861      	ldr	r1, [r4, #4]
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	bfde      	ittt	le
 800cb6e:	2330      	movle	r3, #48	; 0x30
 800cb70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb78:	1b52      	subs	r2, r2, r5
 800cb7a:	6122      	str	r2, [r4, #16]
 800cb7c:	f8cd a000 	str.w	sl, [sp]
 800cb80:	464b      	mov	r3, r9
 800cb82:	aa03      	add	r2, sp, #12
 800cb84:	4621      	mov	r1, r4
 800cb86:	4640      	mov	r0, r8
 800cb88:	f7ff fee4 	bl	800c954 <_printf_common>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d14a      	bne.n	800cc26 <_printf_i+0x1f6>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	b004      	add	sp, #16
 800cb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	f043 0320 	orr.w	r3, r3, #32
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	4833      	ldr	r0, [pc, #204]	; (800cc70 <_printf_i+0x240>)
 800cba4:	2778      	movs	r7, #120	; 0x78
 800cba6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	6829      	ldr	r1, [r5, #0]
 800cbae:	061f      	lsls	r7, r3, #24
 800cbb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbb4:	d402      	bmi.n	800cbbc <_printf_i+0x18c>
 800cbb6:	065f      	lsls	r7, r3, #25
 800cbb8:	bf48      	it	mi
 800cbba:	b2b6      	uxthmi	r6, r6
 800cbbc:	07df      	lsls	r7, r3, #31
 800cbbe:	bf48      	it	mi
 800cbc0:	f043 0320 	orrmi.w	r3, r3, #32
 800cbc4:	6029      	str	r1, [r5, #0]
 800cbc6:	bf48      	it	mi
 800cbc8:	6023      	strmi	r3, [r4, #0]
 800cbca:	b91e      	cbnz	r6, 800cbd4 <_printf_i+0x1a4>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	f023 0320 	bic.w	r3, r3, #32
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	2310      	movs	r3, #16
 800cbd6:	e7a7      	b.n	800cb28 <_printf_i+0xf8>
 800cbd8:	4824      	ldr	r0, [pc, #144]	; (800cc6c <_printf_i+0x23c>)
 800cbda:	e7e4      	b.n	800cba6 <_printf_i+0x176>
 800cbdc:	4615      	mov	r5, r2
 800cbde:	e7bd      	b.n	800cb5c <_printf_i+0x12c>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	6826      	ldr	r6, [r4, #0]
 800cbe4:	6961      	ldr	r1, [r4, #20]
 800cbe6:	1d18      	adds	r0, r3, #4
 800cbe8:	6028      	str	r0, [r5, #0]
 800cbea:	0635      	lsls	r5, r6, #24
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	d501      	bpl.n	800cbf4 <_printf_i+0x1c4>
 800cbf0:	6019      	str	r1, [r3, #0]
 800cbf2:	e002      	b.n	800cbfa <_printf_i+0x1ca>
 800cbf4:	0670      	lsls	r0, r6, #25
 800cbf6:	d5fb      	bpl.n	800cbf0 <_printf_i+0x1c0>
 800cbf8:	8019      	strh	r1, [r3, #0]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	4615      	mov	r5, r2
 800cc00:	e7bc      	b.n	800cb7c <_printf_i+0x14c>
 800cc02:	682b      	ldr	r3, [r5, #0]
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	602a      	str	r2, [r5, #0]
 800cc08:	681d      	ldr	r5, [r3, #0]
 800cc0a:	6862      	ldr	r2, [r4, #4]
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f7f3 fade 	bl	80001d0 <memchr>
 800cc14:	b108      	cbz	r0, 800cc1a <_printf_i+0x1ea>
 800cc16:	1b40      	subs	r0, r0, r5
 800cc18:	6060      	str	r0, [r4, #4]
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	6123      	str	r3, [r4, #16]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc24:	e7aa      	b.n	800cb7c <_printf_i+0x14c>
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	462a      	mov	r2, r5
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	47d0      	blx	sl
 800cc30:	3001      	adds	r0, #1
 800cc32:	d0ad      	beq.n	800cb90 <_printf_i+0x160>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	079b      	lsls	r3, r3, #30
 800cc38:	d413      	bmi.n	800cc62 <_printf_i+0x232>
 800cc3a:	68e0      	ldr	r0, [r4, #12]
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	4298      	cmp	r0, r3
 800cc40:	bfb8      	it	lt
 800cc42:	4618      	movlt	r0, r3
 800cc44:	e7a6      	b.n	800cb94 <_printf_i+0x164>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	47d0      	blx	sl
 800cc50:	3001      	adds	r0, #1
 800cc52:	d09d      	beq.n	800cb90 <_printf_i+0x160>
 800cc54:	3501      	adds	r5, #1
 800cc56:	68e3      	ldr	r3, [r4, #12]
 800cc58:	9903      	ldr	r1, [sp, #12]
 800cc5a:	1a5b      	subs	r3, r3, r1
 800cc5c:	42ab      	cmp	r3, r5
 800cc5e:	dcf2      	bgt.n	800cc46 <_printf_i+0x216>
 800cc60:	e7eb      	b.n	800cc3a <_printf_i+0x20a>
 800cc62:	2500      	movs	r5, #0
 800cc64:	f104 0619 	add.w	r6, r4, #25
 800cc68:	e7f5      	b.n	800cc56 <_printf_i+0x226>
 800cc6a:	bf00      	nop
 800cc6c:	0800fce2 	.word	0x0800fce2
 800cc70:	0800fcf3 	.word	0x0800fcf3

0800cc74 <std>:
 800cc74:	2300      	movs	r3, #0
 800cc76:	b510      	push	{r4, lr}
 800cc78:	4604      	mov	r4, r0
 800cc7a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc82:	6083      	str	r3, [r0, #8]
 800cc84:	8181      	strh	r1, [r0, #12]
 800cc86:	6643      	str	r3, [r0, #100]	; 0x64
 800cc88:	81c2      	strh	r2, [r0, #14]
 800cc8a:	6183      	str	r3, [r0, #24]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	2208      	movs	r2, #8
 800cc90:	305c      	adds	r0, #92	; 0x5c
 800cc92:	f000 f902 	bl	800ce9a <memset>
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <std+0x38>)
 800cc98:	6263      	str	r3, [r4, #36]	; 0x24
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <std+0x3c>)
 800cc9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc9e:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <std+0x40>)
 800cca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <std+0x44>)
 800cca4:	6224      	str	r4, [r4, #32]
 800cca6:	6323      	str	r3, [r4, #48]	; 0x30
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800ce15 	.word	0x0800ce15
 800ccb0:	0800ce37 	.word	0x0800ce37
 800ccb4:	0800ce6f 	.word	0x0800ce6f
 800ccb8:	0800ce93 	.word	0x0800ce93

0800ccbc <stdio_exit_handler>:
 800ccbc:	4a02      	ldr	r2, [pc, #8]	; (800ccc8 <stdio_exit_handler+0xc>)
 800ccbe:	4903      	ldr	r1, [pc, #12]	; (800cccc <stdio_exit_handler+0x10>)
 800ccc0:	4803      	ldr	r0, [pc, #12]	; (800ccd0 <stdio_exit_handler+0x14>)
 800ccc2:	f000 b869 	b.w	800cd98 <_fwalk_sglue>
 800ccc6:	bf00      	nop
 800ccc8:	20000010 	.word	0x20000010
 800cccc:	0800f391 	.word	0x0800f391
 800ccd0:	20000188 	.word	0x20000188

0800ccd4 <cleanup_stdio>:
 800ccd4:	6841      	ldr	r1, [r0, #4]
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <cleanup_stdio+0x34>)
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	d001      	beq.n	800cce4 <cleanup_stdio+0x10>
 800cce0:	f002 fb56 	bl	800f390 <_fflush_r>
 800cce4:	68a1      	ldr	r1, [r4, #8]
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <cleanup_stdio+0x38>)
 800cce8:	4299      	cmp	r1, r3
 800ccea:	d002      	beq.n	800ccf2 <cleanup_stdio+0x1e>
 800ccec:	4620      	mov	r0, r4
 800ccee:	f002 fb4f 	bl	800f390 <_fflush_r>
 800ccf2:	68e1      	ldr	r1, [r4, #12]
 800ccf4:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <cleanup_stdio+0x3c>)
 800ccf6:	4299      	cmp	r1, r3
 800ccf8:	d004      	beq.n	800cd04 <cleanup_stdio+0x30>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd00:	f002 bb46 	b.w	800f390 <_fflush_r>
 800cd04:	bd10      	pop	{r4, pc}
 800cd06:	bf00      	nop
 800cd08:	2000303c 	.word	0x2000303c
 800cd0c:	200030a4 	.word	0x200030a4
 800cd10:	2000310c 	.word	0x2000310c

0800cd14 <global_stdio_init.part.0>:
 800cd14:	b510      	push	{r4, lr}
 800cd16:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <global_stdio_init.part.0+0x30>)
 800cd18:	4c0b      	ldr	r4, [pc, #44]	; (800cd48 <global_stdio_init.part.0+0x34>)
 800cd1a:	4a0c      	ldr	r2, [pc, #48]	; (800cd4c <global_stdio_init.part.0+0x38>)
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	2200      	movs	r2, #0
 800cd22:	2104      	movs	r1, #4
 800cd24:	f7ff ffa6 	bl	800cc74 <std>
 800cd28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	2109      	movs	r1, #9
 800cd30:	f7ff ffa0 	bl	800cc74 <std>
 800cd34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd38:	2202      	movs	r2, #2
 800cd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd3e:	2112      	movs	r1, #18
 800cd40:	f7ff bf98 	b.w	800cc74 <std>
 800cd44:	20003174 	.word	0x20003174
 800cd48:	2000303c 	.word	0x2000303c
 800cd4c:	0800ccbd 	.word	0x0800ccbd

0800cd50 <__sfp_lock_acquire>:
 800cd50:	4801      	ldr	r0, [pc, #4]	; (800cd58 <__sfp_lock_acquire+0x8>)
 800cd52:	f000 b987 	b.w	800d064 <__retarget_lock_acquire_recursive>
 800cd56:	bf00      	nop
 800cd58:	2000317d 	.word	0x2000317d

0800cd5c <__sfp_lock_release>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	; (800cd64 <__sfp_lock_release+0x8>)
 800cd5e:	f000 b982 	b.w	800d066 <__retarget_lock_release_recursive>
 800cd62:	bf00      	nop
 800cd64:	2000317d 	.word	0x2000317d

0800cd68 <__sinit>:
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	f7ff fff0 	bl	800cd50 <__sfp_lock_acquire>
 800cd70:	6a23      	ldr	r3, [r4, #32]
 800cd72:	b11b      	cbz	r3, 800cd7c <__sinit+0x14>
 800cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd78:	f7ff bff0 	b.w	800cd5c <__sfp_lock_release>
 800cd7c:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <__sinit+0x28>)
 800cd7e:	6223      	str	r3, [r4, #32]
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <__sinit+0x2c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1f5      	bne.n	800cd74 <__sinit+0xc>
 800cd88:	f7ff ffc4 	bl	800cd14 <global_stdio_init.part.0>
 800cd8c:	e7f2      	b.n	800cd74 <__sinit+0xc>
 800cd8e:	bf00      	nop
 800cd90:	0800ccd5 	.word	0x0800ccd5
 800cd94:	20003174 	.word	0x20003174

0800cd98 <_fwalk_sglue>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	4607      	mov	r7, r0
 800cd9e:	4688      	mov	r8, r1
 800cda0:	4614      	mov	r4, r2
 800cda2:	2600      	movs	r6, #0
 800cda4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cda8:	f1b9 0901 	subs.w	r9, r9, #1
 800cdac:	d505      	bpl.n	800cdba <_fwalk_sglue+0x22>
 800cdae:	6824      	ldr	r4, [r4, #0]
 800cdb0:	2c00      	cmp	r4, #0
 800cdb2:	d1f7      	bne.n	800cda4 <_fwalk_sglue+0xc>
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d907      	bls.n	800cdd0 <_fwalk_sglue+0x38>
 800cdc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	d003      	beq.n	800cdd0 <_fwalk_sglue+0x38>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4638      	mov	r0, r7
 800cdcc:	47c0      	blx	r8
 800cdce:	4306      	orrs	r6, r0
 800cdd0:	3568      	adds	r5, #104	; 0x68
 800cdd2:	e7e9      	b.n	800cda8 <_fwalk_sglue+0x10>

0800cdd4 <siprintf>:
 800cdd4:	b40e      	push	{r1, r2, r3}
 800cdd6:	b500      	push	{lr}
 800cdd8:	b09c      	sub	sp, #112	; 0x70
 800cdda:	ab1d      	add	r3, sp, #116	; 0x74
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	9006      	str	r0, [sp, #24]
 800cde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cde4:	4809      	ldr	r0, [pc, #36]	; (800ce0c <siprintf+0x38>)
 800cde6:	9107      	str	r1, [sp, #28]
 800cde8:	9104      	str	r1, [sp, #16]
 800cdea:	4909      	ldr	r1, [pc, #36]	; (800ce10 <siprintf+0x3c>)
 800cdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf0:	9105      	str	r1, [sp, #20]
 800cdf2:	6800      	ldr	r0, [r0, #0]
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	a902      	add	r1, sp, #8
 800cdf8:	f002 f946 	bl	800f088 <_svfiprintf_r>
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	b01c      	add	sp, #112	; 0x70
 800ce04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce08:	b003      	add	sp, #12
 800ce0a:	4770      	bx	lr
 800ce0c:	200001d4 	.word	0x200001d4
 800ce10:	ffff0208 	.word	0xffff0208

0800ce14 <__sread>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	460c      	mov	r4, r1
 800ce18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1c:	f000 f8d4 	bl	800cfc8 <_read_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	bfab      	itete	ge
 800ce24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce26:	89a3      	ldrhlt	r3, [r4, #12]
 800ce28:	181b      	addge	r3, r3, r0
 800ce2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce2e:	bfac      	ite	ge
 800ce30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce32:	81a3      	strhlt	r3, [r4, #12]
 800ce34:	bd10      	pop	{r4, pc}

0800ce36 <__swrite>:
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	461f      	mov	r7, r3
 800ce3c:	898b      	ldrh	r3, [r1, #12]
 800ce3e:	05db      	lsls	r3, r3, #23
 800ce40:	4605      	mov	r5, r0
 800ce42:	460c      	mov	r4, r1
 800ce44:	4616      	mov	r6, r2
 800ce46:	d505      	bpl.n	800ce54 <__swrite+0x1e>
 800ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f000 f8a8 	bl	800cfa4 <_lseek_r>
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	4632      	mov	r2, r6
 800ce62:	463b      	mov	r3, r7
 800ce64:	4628      	mov	r0, r5
 800ce66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	f000 b8bf 	b.w	800cfec <_write_r>

0800ce6e <__sseek>:
 800ce6e:	b510      	push	{r4, lr}
 800ce70:	460c      	mov	r4, r1
 800ce72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce76:	f000 f895 	bl	800cfa4 <_lseek_r>
 800ce7a:	1c43      	adds	r3, r0, #1
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	bf15      	itete	ne
 800ce80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce8a:	81a3      	strheq	r3, [r4, #12]
 800ce8c:	bf18      	it	ne
 800ce8e:	81a3      	strhne	r3, [r4, #12]
 800ce90:	bd10      	pop	{r4, pc}

0800ce92 <__sclose>:
 800ce92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce96:	f000 b81f 	b.w	800ced8 <_close_r>

0800ce9a <memset>:
 800ce9a:	4402      	add	r2, r0
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d100      	bne.n	800cea4 <memset+0xa>
 800cea2:	4770      	bx	lr
 800cea4:	f803 1b01 	strb.w	r1, [r3], #1
 800cea8:	e7f9      	b.n	800ce9e <memset+0x4>

0800ceaa <strncmp>:
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	b16a      	cbz	r2, 800ceca <strncmp+0x20>
 800ceae:	3901      	subs	r1, #1
 800ceb0:	1884      	adds	r4, r0, r2
 800ceb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d103      	bne.n	800cec6 <strncmp+0x1c>
 800cebe:	42a0      	cmp	r0, r4
 800cec0:	d001      	beq.n	800cec6 <strncmp+0x1c>
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	d1f5      	bne.n	800ceb2 <strncmp+0x8>
 800cec6:	1ad0      	subs	r0, r2, r3
 800cec8:	bd10      	pop	{r4, pc}
 800ceca:	4610      	mov	r0, r2
 800cecc:	e7fc      	b.n	800cec8 <strncmp+0x1e>
	...

0800ced0 <_localeconv_r>:
 800ced0:	4800      	ldr	r0, [pc, #0]	; (800ced4 <_localeconv_r+0x4>)
 800ced2:	4770      	bx	lr
 800ced4:	2000010c 	.word	0x2000010c

0800ced8 <_close_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4d06      	ldr	r5, [pc, #24]	; (800cef4 <_close_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	f7f5 f9fd 	bl	80022e2 <_close>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_close_r+0x1a>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_close_r+0x1a>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	20003178 	.word	0x20003178

0800cef8 <_reclaim_reent>:
 800cef8:	4b29      	ldr	r3, [pc, #164]	; (800cfa0 <_reclaim_reent+0xa8>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4283      	cmp	r3, r0
 800cefe:	b570      	push	{r4, r5, r6, lr}
 800cf00:	4604      	mov	r4, r0
 800cf02:	d04b      	beq.n	800cf9c <_reclaim_reent+0xa4>
 800cf04:	69c3      	ldr	r3, [r0, #28]
 800cf06:	b143      	cbz	r3, 800cf1a <_reclaim_reent+0x22>
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d144      	bne.n	800cf98 <_reclaim_reent+0xa0>
 800cf0e:	69e3      	ldr	r3, [r4, #28]
 800cf10:	6819      	ldr	r1, [r3, #0]
 800cf12:	b111      	cbz	r1, 800cf1a <_reclaim_reent+0x22>
 800cf14:	4620      	mov	r0, r4
 800cf16:	f000 ff39 	bl	800dd8c <_free_r>
 800cf1a:	6961      	ldr	r1, [r4, #20]
 800cf1c:	b111      	cbz	r1, 800cf24 <_reclaim_reent+0x2c>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 ff34 	bl	800dd8c <_free_r>
 800cf24:	69e1      	ldr	r1, [r4, #28]
 800cf26:	b111      	cbz	r1, 800cf2e <_reclaim_reent+0x36>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 ff2f 	bl	800dd8c <_free_r>
 800cf2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cf30:	b111      	cbz	r1, 800cf38 <_reclaim_reent+0x40>
 800cf32:	4620      	mov	r0, r4
 800cf34:	f000 ff2a 	bl	800dd8c <_free_r>
 800cf38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3a:	b111      	cbz	r1, 800cf42 <_reclaim_reent+0x4a>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 ff25 	bl	800dd8c <_free_r>
 800cf42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf44:	b111      	cbz	r1, 800cf4c <_reclaim_reent+0x54>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 ff20 	bl	800dd8c <_free_r>
 800cf4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf4e:	b111      	cbz	r1, 800cf56 <_reclaim_reent+0x5e>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 ff1b 	bl	800dd8c <_free_r>
 800cf56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cf58:	b111      	cbz	r1, 800cf60 <_reclaim_reent+0x68>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 ff16 	bl	800dd8c <_free_r>
 800cf60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cf62:	b111      	cbz	r1, 800cf6a <_reclaim_reent+0x72>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 ff11 	bl	800dd8c <_free_r>
 800cf6a:	6a23      	ldr	r3, [r4, #32]
 800cf6c:	b1b3      	cbz	r3, 800cf9c <_reclaim_reent+0xa4>
 800cf6e:	4620      	mov	r0, r4
 800cf70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf74:	4718      	bx	r3
 800cf76:	5949      	ldr	r1, [r1, r5]
 800cf78:	b941      	cbnz	r1, 800cf8c <_reclaim_reent+0x94>
 800cf7a:	3504      	adds	r5, #4
 800cf7c:	69e3      	ldr	r3, [r4, #28]
 800cf7e:	2d80      	cmp	r5, #128	; 0x80
 800cf80:	68d9      	ldr	r1, [r3, #12]
 800cf82:	d1f8      	bne.n	800cf76 <_reclaim_reent+0x7e>
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 ff01 	bl	800dd8c <_free_r>
 800cf8a:	e7c0      	b.n	800cf0e <_reclaim_reent+0x16>
 800cf8c:	680e      	ldr	r6, [r1, #0]
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f000 fefc 	bl	800dd8c <_free_r>
 800cf94:	4631      	mov	r1, r6
 800cf96:	e7ef      	b.n	800cf78 <_reclaim_reent+0x80>
 800cf98:	2500      	movs	r5, #0
 800cf9a:	e7ef      	b.n	800cf7c <_reclaim_reent+0x84>
 800cf9c:	bd70      	pop	{r4, r5, r6, pc}
 800cf9e:	bf00      	nop
 800cfa0:	200001d4 	.word	0x200001d4

0800cfa4 <_lseek_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d07      	ldr	r5, [pc, #28]	; (800cfc4 <_lseek_r+0x20>)
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	4608      	mov	r0, r1
 800cfac:	4611      	mov	r1, r2
 800cfae:	2200      	movs	r2, #0
 800cfb0:	602a      	str	r2, [r5, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f7f5 f9bc 	bl	8002330 <_lseek>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_lseek_r+0x1e>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_lseek_r+0x1e>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20003178 	.word	0x20003178

0800cfc8 <_read_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4d07      	ldr	r5, [pc, #28]	; (800cfe8 <_read_r+0x20>)
 800cfcc:	4604      	mov	r4, r0
 800cfce:	4608      	mov	r0, r1
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	602a      	str	r2, [r5, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7f5 f94a 	bl	8002270 <_read>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_read_r+0x1e>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_read_r+0x1e>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20003178 	.word	0x20003178

0800cfec <_write_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	; (800d00c <_write_r+0x20>)
 800cff0:	4604      	mov	r4, r0
 800cff2:	4608      	mov	r0, r1
 800cff4:	4611      	mov	r1, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	602a      	str	r2, [r5, #0]
 800cffa:	461a      	mov	r2, r3
 800cffc:	f7f5 f955 	bl	80022aa <_write>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_write_r+0x1e>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_write_r+0x1e>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20003178 	.word	0x20003178

0800d010 <__errno>:
 800d010:	4b01      	ldr	r3, [pc, #4]	; (800d018 <__errno+0x8>)
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	200001d4 	.word	0x200001d4

0800d01c <__libc_init_array>:
 800d01c:	b570      	push	{r4, r5, r6, lr}
 800d01e:	4d0d      	ldr	r5, [pc, #52]	; (800d054 <__libc_init_array+0x38>)
 800d020:	4c0d      	ldr	r4, [pc, #52]	; (800d058 <__libc_init_array+0x3c>)
 800d022:	1b64      	subs	r4, r4, r5
 800d024:	10a4      	asrs	r4, r4, #2
 800d026:	2600      	movs	r6, #0
 800d028:	42a6      	cmp	r6, r4
 800d02a:	d109      	bne.n	800d040 <__libc_init_array+0x24>
 800d02c:	4d0b      	ldr	r5, [pc, #44]	; (800d05c <__libc_init_array+0x40>)
 800d02e:	4c0c      	ldr	r4, [pc, #48]	; (800d060 <__libc_init_array+0x44>)
 800d030:	f002 fd26 	bl	800fa80 <_init>
 800d034:	1b64      	subs	r4, r4, r5
 800d036:	10a4      	asrs	r4, r4, #2
 800d038:	2600      	movs	r6, #0
 800d03a:	42a6      	cmp	r6, r4
 800d03c:	d105      	bne.n	800d04a <__libc_init_array+0x2e>
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	f855 3b04 	ldr.w	r3, [r5], #4
 800d044:	4798      	blx	r3
 800d046:	3601      	adds	r6, #1
 800d048:	e7ee      	b.n	800d028 <__libc_init_array+0xc>
 800d04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d04e:	4798      	blx	r3
 800d050:	3601      	adds	r6, #1
 800d052:	e7f2      	b.n	800d03a <__libc_init_array+0x1e>
 800d054:	080100ac 	.word	0x080100ac
 800d058:	080100ac 	.word	0x080100ac
 800d05c:	080100ac 	.word	0x080100ac
 800d060:	080100b0 	.word	0x080100b0

0800d064 <__retarget_lock_acquire_recursive>:
 800d064:	4770      	bx	lr

0800d066 <__retarget_lock_release_recursive>:
 800d066:	4770      	bx	lr

0800d068 <memcpy>:
 800d068:	440a      	add	r2, r1
 800d06a:	4291      	cmp	r1, r2
 800d06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d070:	d100      	bne.n	800d074 <memcpy+0xc>
 800d072:	4770      	bx	lr
 800d074:	b510      	push	{r4, lr}
 800d076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d07e:	4291      	cmp	r1, r2
 800d080:	d1f9      	bne.n	800d076 <memcpy+0xe>
 800d082:	bd10      	pop	{r4, pc}
 800d084:	0000      	movs	r0, r0
	...

0800d088 <nan>:
 800d088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d090 <nan+0x8>
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	00000000 	.word	0x00000000
 800d094:	7ff80000 	.word	0x7ff80000

0800d098 <quorem>:
 800d098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	6903      	ldr	r3, [r0, #16]
 800d09e:	690c      	ldr	r4, [r1, #16]
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	db7e      	blt.n	800d1a4 <quorem+0x10c>
 800d0a6:	3c01      	subs	r4, #1
 800d0a8:	f101 0814 	add.w	r8, r1, #20
 800d0ac:	f100 0514 	add.w	r5, r0, #20
 800d0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0ce:	d331      	bcc.n	800d134 <quorem+0x9c>
 800d0d0:	f04f 0e00 	mov.w	lr, #0
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	46ac      	mov	ip, r5
 800d0d8:	46f2      	mov	sl, lr
 800d0da:	f850 2b04 	ldr.w	r2, [r0], #4
 800d0de:	b293      	uxth	r3, r2
 800d0e0:	fb06 e303 	mla	r3, r6, r3, lr
 800d0e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0e8:	0c1a      	lsrs	r2, r3, #16
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800d0f0:	f8dc a000 	ldr.w	sl, [ip]
 800d0f4:	fa13 f38a 	uxtah	r3, r3, sl
 800d0f8:	fb06 220e 	mla	r2, r6, lr, r2
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d104:	b292      	uxth	r2, r2
 800d106:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d10a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d10e:	f8bd 3000 	ldrh.w	r3, [sp]
 800d112:	4581      	cmp	r9, r0
 800d114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d118:	f84c 3b04 	str.w	r3, [ip], #4
 800d11c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d120:	d2db      	bcs.n	800d0da <quorem+0x42>
 800d122:	f855 300b 	ldr.w	r3, [r5, fp]
 800d126:	b92b      	cbnz	r3, 800d134 <quorem+0x9c>
 800d128:	9b01      	ldr	r3, [sp, #4]
 800d12a:	3b04      	subs	r3, #4
 800d12c:	429d      	cmp	r5, r3
 800d12e:	461a      	mov	r2, r3
 800d130:	d32c      	bcc.n	800d18c <quorem+0xf4>
 800d132:	613c      	str	r4, [r7, #16]
 800d134:	4638      	mov	r0, r7
 800d136:	f001 fd59 	bl	800ebec <__mcmp>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	db22      	blt.n	800d184 <quorem+0xec>
 800d13e:	3601      	adds	r6, #1
 800d140:	4629      	mov	r1, r5
 800d142:	2000      	movs	r0, #0
 800d144:	f858 2b04 	ldr.w	r2, [r8], #4
 800d148:	f8d1 c000 	ldr.w	ip, [r1]
 800d14c:	b293      	uxth	r3, r2
 800d14e:	1ac3      	subs	r3, r0, r3
 800d150:	0c12      	lsrs	r2, r2, #16
 800d152:	fa13 f38c 	uxtah	r3, r3, ip
 800d156:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d15a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d15e:	b29b      	uxth	r3, r3
 800d160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d164:	45c1      	cmp	r9, r8
 800d166:	f841 3b04 	str.w	r3, [r1], #4
 800d16a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d16e:	d2e9      	bcs.n	800d144 <quorem+0xac>
 800d170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d178:	b922      	cbnz	r2, 800d184 <quorem+0xec>
 800d17a:	3b04      	subs	r3, #4
 800d17c:	429d      	cmp	r5, r3
 800d17e:	461a      	mov	r2, r3
 800d180:	d30a      	bcc.n	800d198 <quorem+0x100>
 800d182:	613c      	str	r4, [r7, #16]
 800d184:	4630      	mov	r0, r6
 800d186:	b003      	add	sp, #12
 800d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	3b04      	subs	r3, #4
 800d190:	2a00      	cmp	r2, #0
 800d192:	d1ce      	bne.n	800d132 <quorem+0x9a>
 800d194:	3c01      	subs	r4, #1
 800d196:	e7c9      	b.n	800d12c <quorem+0x94>
 800d198:	6812      	ldr	r2, [r2, #0]
 800d19a:	3b04      	subs	r3, #4
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	d1f0      	bne.n	800d182 <quorem+0xea>
 800d1a0:	3c01      	subs	r4, #1
 800d1a2:	e7eb      	b.n	800d17c <quorem+0xe4>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	e7ee      	b.n	800d186 <quorem+0xee>

0800d1a8 <_dtoa_r>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	ed2d 8b04 	vpush	{d8-d9}
 800d1b0:	69c5      	ldr	r5, [r0, #28]
 800d1b2:	b093      	sub	sp, #76	; 0x4c
 800d1b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1b8:	ec57 6b10 	vmov	r6, r7, d0
 800d1bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1c0:	9107      	str	r1, [sp, #28]
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	920a      	str	r2, [sp, #40]	; 0x28
 800d1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d1c8:	b975      	cbnz	r5, 800d1e8 <_dtoa_r+0x40>
 800d1ca:	2010      	movs	r0, #16
 800d1cc:	f001 f982 	bl	800e4d4 <malloc>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	61e0      	str	r0, [r4, #28]
 800d1d4:	b920      	cbnz	r0, 800d1e0 <_dtoa_r+0x38>
 800d1d6:	4bae      	ldr	r3, [pc, #696]	; (800d490 <_dtoa_r+0x2e8>)
 800d1d8:	21ef      	movs	r1, #239	; 0xef
 800d1da:	48ae      	ldr	r0, [pc, #696]	; (800d494 <_dtoa_r+0x2ec>)
 800d1dc:	f002 f92a 	bl	800f434 <__assert_func>
 800d1e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1e4:	6005      	str	r5, [r0, #0]
 800d1e6:	60c5      	str	r5, [r0, #12]
 800d1e8:	69e3      	ldr	r3, [r4, #28]
 800d1ea:	6819      	ldr	r1, [r3, #0]
 800d1ec:	b151      	cbz	r1, 800d204 <_dtoa_r+0x5c>
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	604a      	str	r2, [r1, #4]
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4093      	lsls	r3, r2
 800d1f6:	608b      	str	r3, [r1, #8]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f001 fa71 	bl	800e6e0 <_Bfree>
 800d1fe:	69e3      	ldr	r3, [r4, #28]
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	1e3b      	subs	r3, r7, #0
 800d206:	bfbb      	ittet	lt
 800d208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d20c:	9303      	strlt	r3, [sp, #12]
 800d20e:	2300      	movge	r3, #0
 800d210:	2201      	movlt	r2, #1
 800d212:	bfac      	ite	ge
 800d214:	f8c8 3000 	strge.w	r3, [r8]
 800d218:	f8c8 2000 	strlt.w	r2, [r8]
 800d21c:	4b9e      	ldr	r3, [pc, #632]	; (800d498 <_dtoa_r+0x2f0>)
 800d21e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d222:	ea33 0308 	bics.w	r3, r3, r8
 800d226:	d11b      	bne.n	800d260 <_dtoa_r+0xb8>
 800d228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d22a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d234:	4333      	orrs	r3, r6
 800d236:	f000 8593 	beq.w	800dd60 <_dtoa_r+0xbb8>
 800d23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d23c:	b963      	cbnz	r3, 800d258 <_dtoa_r+0xb0>
 800d23e:	4b97      	ldr	r3, [pc, #604]	; (800d49c <_dtoa_r+0x2f4>)
 800d240:	e027      	b.n	800d292 <_dtoa_r+0xea>
 800d242:	4b97      	ldr	r3, [pc, #604]	; (800d4a0 <_dtoa_r+0x2f8>)
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	3308      	adds	r3, #8
 800d248:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d24a:	6013      	str	r3, [r2, #0]
 800d24c:	9800      	ldr	r0, [sp, #0]
 800d24e:	b013      	add	sp, #76	; 0x4c
 800d250:	ecbd 8b04 	vpop	{d8-d9}
 800d254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d258:	4b90      	ldr	r3, [pc, #576]	; (800d49c <_dtoa_r+0x2f4>)
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	3303      	adds	r3, #3
 800d25e:	e7f3      	b.n	800d248 <_dtoa_r+0xa0>
 800d260:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d264:	2200      	movs	r2, #0
 800d266:	ec51 0b17 	vmov	r0, r1, d7
 800d26a:	eeb0 8a47 	vmov.f32	s16, s14
 800d26e:	eef0 8a67 	vmov.f32	s17, s15
 800d272:	2300      	movs	r3, #0
 800d274:	f7f3 fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 800d278:	4681      	mov	r9, r0
 800d27a:	b160      	cbz	r0, 800d296 <_dtoa_r+0xee>
 800d27c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d27e:	2301      	movs	r3, #1
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8568 	beq.w	800dd5a <_dtoa_r+0xbb2>
 800d28a:	4b86      	ldr	r3, [pc, #536]	; (800d4a4 <_dtoa_r+0x2fc>)
 800d28c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	3b01      	subs	r3, #1
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	e7da      	b.n	800d24c <_dtoa_r+0xa4>
 800d296:	aa10      	add	r2, sp, #64	; 0x40
 800d298:	a911      	add	r1, sp, #68	; 0x44
 800d29a:	4620      	mov	r0, r4
 800d29c:	eeb0 0a48 	vmov.f32	s0, s16
 800d2a0:	eef0 0a68 	vmov.f32	s1, s17
 800d2a4:	f001 fdb8 	bl	800ee18 <__d2b>
 800d2a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d2ac:	4682      	mov	sl, r0
 800d2ae:	2d00      	cmp	r5, #0
 800d2b0:	d07f      	beq.n	800d3b2 <_dtoa_r+0x20a>
 800d2b2:	ee18 3a90 	vmov	r3, s17
 800d2b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d2be:	ec51 0b18 	vmov	r0, r1, d8
 800d2c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	4b75      	ldr	r3, [pc, #468]	; (800d4a8 <_dtoa_r+0x300>)
 800d2d4:	f7f2 ffd8 	bl	8000288 <__aeabi_dsub>
 800d2d8:	a367      	add	r3, pc, #412	; (adr r3, 800d478 <_dtoa_r+0x2d0>)
 800d2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2de:	f7f3 f98b 	bl	80005f8 <__aeabi_dmul>
 800d2e2:	a367      	add	r3, pc, #412	; (adr r3, 800d480 <_dtoa_r+0x2d8>)
 800d2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e8:	f7f2 ffd0 	bl	800028c <__adddf3>
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	460f      	mov	r7, r1
 800d2f2:	f7f3 f917 	bl	8000524 <__aeabi_i2d>
 800d2f6:	a364      	add	r3, pc, #400	; (adr r3, 800d488 <_dtoa_r+0x2e0>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f3 f97c 	bl	80005f8 <__aeabi_dmul>
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	4630      	mov	r0, r6
 800d306:	4639      	mov	r1, r7
 800d308:	f7f2 ffc0 	bl	800028c <__adddf3>
 800d30c:	4606      	mov	r6, r0
 800d30e:	460f      	mov	r7, r1
 800d310:	f7f3 fc22 	bl	8000b58 <__aeabi_d2iz>
 800d314:	2200      	movs	r2, #0
 800d316:	4683      	mov	fp, r0
 800d318:	2300      	movs	r3, #0
 800d31a:	4630      	mov	r0, r6
 800d31c:	4639      	mov	r1, r7
 800d31e:	f7f3 fbdd 	bl	8000adc <__aeabi_dcmplt>
 800d322:	b148      	cbz	r0, 800d338 <_dtoa_r+0x190>
 800d324:	4658      	mov	r0, fp
 800d326:	f7f3 f8fd 	bl	8000524 <__aeabi_i2d>
 800d32a:	4632      	mov	r2, r6
 800d32c:	463b      	mov	r3, r7
 800d32e:	f7f3 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d332:	b908      	cbnz	r0, 800d338 <_dtoa_r+0x190>
 800d334:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d338:	f1bb 0f16 	cmp.w	fp, #22
 800d33c:	d857      	bhi.n	800d3ee <_dtoa_r+0x246>
 800d33e:	4b5b      	ldr	r3, [pc, #364]	; (800d4ac <_dtoa_r+0x304>)
 800d340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	ec51 0b18 	vmov	r0, r1, d8
 800d34c:	f7f3 fbc6 	bl	8000adc <__aeabi_dcmplt>
 800d350:	2800      	cmp	r0, #0
 800d352:	d04e      	beq.n	800d3f2 <_dtoa_r+0x24a>
 800d354:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d358:	2300      	movs	r3, #0
 800d35a:	930c      	str	r3, [sp, #48]	; 0x30
 800d35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d35e:	1b5b      	subs	r3, r3, r5
 800d360:	1e5a      	subs	r2, r3, #1
 800d362:	bf45      	ittet	mi
 800d364:	f1c3 0301 	rsbmi	r3, r3, #1
 800d368:	9305      	strmi	r3, [sp, #20]
 800d36a:	2300      	movpl	r3, #0
 800d36c:	2300      	movmi	r3, #0
 800d36e:	9206      	str	r2, [sp, #24]
 800d370:	bf54      	ite	pl
 800d372:	9305      	strpl	r3, [sp, #20]
 800d374:	9306      	strmi	r3, [sp, #24]
 800d376:	f1bb 0f00 	cmp.w	fp, #0
 800d37a:	db3c      	blt.n	800d3f6 <_dtoa_r+0x24e>
 800d37c:	9b06      	ldr	r3, [sp, #24]
 800d37e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d382:	445b      	add	r3, fp
 800d384:	9306      	str	r3, [sp, #24]
 800d386:	2300      	movs	r3, #0
 800d388:	9308      	str	r3, [sp, #32]
 800d38a:	9b07      	ldr	r3, [sp, #28]
 800d38c:	2b09      	cmp	r3, #9
 800d38e:	d868      	bhi.n	800d462 <_dtoa_r+0x2ba>
 800d390:	2b05      	cmp	r3, #5
 800d392:	bfc4      	itt	gt
 800d394:	3b04      	subgt	r3, #4
 800d396:	9307      	strgt	r3, [sp, #28]
 800d398:	9b07      	ldr	r3, [sp, #28]
 800d39a:	f1a3 0302 	sub.w	r3, r3, #2
 800d39e:	bfcc      	ite	gt
 800d3a0:	2500      	movgt	r5, #0
 800d3a2:	2501      	movle	r5, #1
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	f200 8085 	bhi.w	800d4b4 <_dtoa_r+0x30c>
 800d3aa:	e8df f003 	tbb	[pc, r3]
 800d3ae:	3b2e      	.short	0x3b2e
 800d3b0:	5839      	.short	0x5839
 800d3b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d3b6:	441d      	add	r5, r3
 800d3b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d3bc:	2b20      	cmp	r3, #32
 800d3be:	bfc1      	itttt	gt
 800d3c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d3c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d3c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d3cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d3d0:	bfd6      	itet	le
 800d3d2:	f1c3 0320 	rsble	r3, r3, #32
 800d3d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d3da:	fa06 f003 	lslle.w	r0, r6, r3
 800d3de:	f7f3 f891 	bl	8000504 <__aeabi_ui2d>
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d3e8:	3d01      	subs	r5, #1
 800d3ea:	920e      	str	r2, [sp, #56]	; 0x38
 800d3ec:	e76f      	b.n	800d2ce <_dtoa_r+0x126>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7b3      	b.n	800d35a <_dtoa_r+0x1b2>
 800d3f2:	900c      	str	r0, [sp, #48]	; 0x30
 800d3f4:	e7b2      	b.n	800d35c <_dtoa_r+0x1b4>
 800d3f6:	9b05      	ldr	r3, [sp, #20]
 800d3f8:	eba3 030b 	sub.w	r3, r3, fp
 800d3fc:	9305      	str	r3, [sp, #20]
 800d3fe:	f1cb 0300 	rsb	r3, fp, #0
 800d402:	9308      	str	r3, [sp, #32]
 800d404:	2300      	movs	r3, #0
 800d406:	930b      	str	r3, [sp, #44]	; 0x2c
 800d408:	e7bf      	b.n	800d38a <_dtoa_r+0x1e2>
 800d40a:	2300      	movs	r3, #0
 800d40c:	9309      	str	r3, [sp, #36]	; 0x24
 800d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d410:	2b00      	cmp	r3, #0
 800d412:	dc52      	bgt.n	800d4ba <_dtoa_r+0x312>
 800d414:	2301      	movs	r3, #1
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	461a      	mov	r2, r3
 800d41c:	920a      	str	r2, [sp, #40]	; 0x28
 800d41e:	e00b      	b.n	800d438 <_dtoa_r+0x290>
 800d420:	2301      	movs	r3, #1
 800d422:	e7f3      	b.n	800d40c <_dtoa_r+0x264>
 800d424:	2300      	movs	r3, #0
 800d426:	9309      	str	r3, [sp, #36]	; 0x24
 800d428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d42a:	445b      	add	r3, fp
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	3301      	adds	r3, #1
 800d430:	2b01      	cmp	r3, #1
 800d432:	9304      	str	r3, [sp, #16]
 800d434:	bfb8      	it	lt
 800d436:	2301      	movlt	r3, #1
 800d438:	69e0      	ldr	r0, [r4, #28]
 800d43a:	2100      	movs	r1, #0
 800d43c:	2204      	movs	r2, #4
 800d43e:	f102 0614 	add.w	r6, r2, #20
 800d442:	429e      	cmp	r6, r3
 800d444:	d93d      	bls.n	800d4c2 <_dtoa_r+0x31a>
 800d446:	6041      	str	r1, [r0, #4]
 800d448:	4620      	mov	r0, r4
 800d44a:	f001 f909 	bl	800e660 <_Balloc>
 800d44e:	9000      	str	r0, [sp, #0]
 800d450:	2800      	cmp	r0, #0
 800d452:	d139      	bne.n	800d4c8 <_dtoa_r+0x320>
 800d454:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <_dtoa_r+0x308>)
 800d456:	4602      	mov	r2, r0
 800d458:	f240 11af 	movw	r1, #431	; 0x1af
 800d45c:	e6bd      	b.n	800d1da <_dtoa_r+0x32>
 800d45e:	2301      	movs	r3, #1
 800d460:	e7e1      	b.n	800d426 <_dtoa_r+0x27e>
 800d462:	2501      	movs	r5, #1
 800d464:	2300      	movs	r3, #0
 800d466:	9307      	str	r3, [sp, #28]
 800d468:	9509      	str	r5, [sp, #36]	; 0x24
 800d46a:	f04f 33ff 	mov.w	r3, #4294967295
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	2200      	movs	r2, #0
 800d474:	2312      	movs	r3, #18
 800d476:	e7d1      	b.n	800d41c <_dtoa_r+0x274>
 800d478:	636f4361 	.word	0x636f4361
 800d47c:	3fd287a7 	.word	0x3fd287a7
 800d480:	8b60c8b3 	.word	0x8b60c8b3
 800d484:	3fc68a28 	.word	0x3fc68a28
 800d488:	509f79fb 	.word	0x509f79fb
 800d48c:	3fd34413 	.word	0x3fd34413
 800d490:	0800fd19 	.word	0x0800fd19
 800d494:	0800fd30 	.word	0x0800fd30
 800d498:	7ff00000 	.word	0x7ff00000
 800d49c:	0800fd15 	.word	0x0800fd15
 800d4a0:	0800fd0c 	.word	0x0800fd0c
 800d4a4:	0800fce1 	.word	0x0800fce1
 800d4a8:	3ff80000 	.word	0x3ff80000
 800d4ac:	0800fe80 	.word	0x0800fe80
 800d4b0:	0800fd88 	.word	0x0800fd88
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b8:	e7d7      	b.n	800d46a <_dtoa_r+0x2c2>
 800d4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	9304      	str	r3, [sp, #16]
 800d4c0:	e7ba      	b.n	800d438 <_dtoa_r+0x290>
 800d4c2:	3101      	adds	r1, #1
 800d4c4:	0052      	lsls	r2, r2, #1
 800d4c6:	e7ba      	b.n	800d43e <_dtoa_r+0x296>
 800d4c8:	69e3      	ldr	r3, [r4, #28]
 800d4ca:	9a00      	ldr	r2, [sp, #0]
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	9b04      	ldr	r3, [sp, #16]
 800d4d0:	2b0e      	cmp	r3, #14
 800d4d2:	f200 80a8 	bhi.w	800d626 <_dtoa_r+0x47e>
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	f000 80a5 	beq.w	800d626 <_dtoa_r+0x47e>
 800d4dc:	f1bb 0f00 	cmp.w	fp, #0
 800d4e0:	dd38      	ble.n	800d554 <_dtoa_r+0x3ac>
 800d4e2:	4bc0      	ldr	r3, [pc, #768]	; (800d7e4 <_dtoa_r+0x63c>)
 800d4e4:	f00b 020f 	and.w	r2, fp, #15
 800d4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d4f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d4f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d4f8:	d019      	beq.n	800d52e <_dtoa_r+0x386>
 800d4fa:	4bbb      	ldr	r3, [pc, #748]	; (800d7e8 <_dtoa_r+0x640>)
 800d4fc:	ec51 0b18 	vmov	r0, r1, d8
 800d500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d504:	f7f3 f9a2 	bl	800084c <__aeabi_ddiv>
 800d508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d50c:	f008 080f 	and.w	r8, r8, #15
 800d510:	2503      	movs	r5, #3
 800d512:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d7e8 <_dtoa_r+0x640>
 800d516:	f1b8 0f00 	cmp.w	r8, #0
 800d51a:	d10a      	bne.n	800d532 <_dtoa_r+0x38a>
 800d51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d520:	4632      	mov	r2, r6
 800d522:	463b      	mov	r3, r7
 800d524:	f7f3 f992 	bl	800084c <__aeabi_ddiv>
 800d528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d52c:	e02b      	b.n	800d586 <_dtoa_r+0x3de>
 800d52e:	2502      	movs	r5, #2
 800d530:	e7ef      	b.n	800d512 <_dtoa_r+0x36a>
 800d532:	f018 0f01 	tst.w	r8, #1
 800d536:	d008      	beq.n	800d54a <_dtoa_r+0x3a2>
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d540:	f7f3 f85a 	bl	80005f8 <__aeabi_dmul>
 800d544:	3501      	adds	r5, #1
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d54e:	f109 0908 	add.w	r9, r9, #8
 800d552:	e7e0      	b.n	800d516 <_dtoa_r+0x36e>
 800d554:	f000 809f 	beq.w	800d696 <_dtoa_r+0x4ee>
 800d558:	f1cb 0600 	rsb	r6, fp, #0
 800d55c:	4ba1      	ldr	r3, [pc, #644]	; (800d7e4 <_dtoa_r+0x63c>)
 800d55e:	4fa2      	ldr	r7, [pc, #648]	; (800d7e8 <_dtoa_r+0x640>)
 800d560:	f006 020f 	and.w	r2, r6, #15
 800d564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	ec51 0b18 	vmov	r0, r1, d8
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d578:	1136      	asrs	r6, r6, #4
 800d57a:	2300      	movs	r3, #0
 800d57c:	2502      	movs	r5, #2
 800d57e:	2e00      	cmp	r6, #0
 800d580:	d17e      	bne.n	800d680 <_dtoa_r+0x4d8>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1d0      	bne.n	800d528 <_dtoa_r+0x380>
 800d586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d588:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f000 8084 	beq.w	800d69a <_dtoa_r+0x4f2>
 800d592:	4b96      	ldr	r3, [pc, #600]	; (800d7ec <_dtoa_r+0x644>)
 800d594:	2200      	movs	r2, #0
 800d596:	4640      	mov	r0, r8
 800d598:	4649      	mov	r1, r9
 800d59a:	f7f3 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d07b      	beq.n	800d69a <_dtoa_r+0x4f2>
 800d5a2:	9b04      	ldr	r3, [sp, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d078      	beq.n	800d69a <_dtoa_r+0x4f2>
 800d5a8:	9b01      	ldr	r3, [sp, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	dd39      	ble.n	800d622 <_dtoa_r+0x47a>
 800d5ae:	4b90      	ldr	r3, [pc, #576]	; (800d7f0 <_dtoa_r+0x648>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 f81f 	bl	80005f8 <__aeabi_dmul>
 800d5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5be:	9e01      	ldr	r6, [sp, #4]
 800d5c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f7f2 ffaa 	bl	8000524 <__aeabi_i2d>
 800d5d0:	4642      	mov	r2, r8
 800d5d2:	464b      	mov	r3, r9
 800d5d4:	f7f3 f810 	bl	80005f8 <__aeabi_dmul>
 800d5d8:	4b86      	ldr	r3, [pc, #536]	; (800d7f4 <_dtoa_r+0x64c>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f7f2 fe56 	bl	800028c <__adddf3>
 800d5e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d5e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5e8:	9303      	str	r3, [sp, #12]
 800d5ea:	2e00      	cmp	r6, #0
 800d5ec:	d158      	bne.n	800d6a0 <_dtoa_r+0x4f8>
 800d5ee:	4b82      	ldr	r3, [pc, #520]	; (800d7f8 <_dtoa_r+0x650>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f2 fe47 	bl	8000288 <__aeabi_dsub>
 800d5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5fe:	4680      	mov	r8, r0
 800d600:	4689      	mov	r9, r1
 800d602:	f7f3 fa89 	bl	8000b18 <__aeabi_dcmpgt>
 800d606:	2800      	cmp	r0, #0
 800d608:	f040 8296 	bne.w	800db38 <_dtoa_r+0x990>
 800d60c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d610:	4640      	mov	r0, r8
 800d612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d616:	4649      	mov	r1, r9
 800d618:	f7f3 fa60 	bl	8000adc <__aeabi_dcmplt>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	f040 8289 	bne.w	800db34 <_dtoa_r+0x98c>
 800d622:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f2c0 814e 	blt.w	800d8ca <_dtoa_r+0x722>
 800d62e:	f1bb 0f0e 	cmp.w	fp, #14
 800d632:	f300 814a 	bgt.w	800d8ca <_dtoa_r+0x722>
 800d636:	4b6b      	ldr	r3, [pc, #428]	; (800d7e4 <_dtoa_r+0x63c>)
 800d638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d642:	2b00      	cmp	r3, #0
 800d644:	f280 80dc 	bge.w	800d800 <_dtoa_r+0x658>
 800d648:	9b04      	ldr	r3, [sp, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f300 80d8 	bgt.w	800d800 <_dtoa_r+0x658>
 800d650:	f040 826f 	bne.w	800db32 <_dtoa_r+0x98a>
 800d654:	4b68      	ldr	r3, [pc, #416]	; (800d7f8 <_dtoa_r+0x650>)
 800d656:	2200      	movs	r2, #0
 800d658:	4640      	mov	r0, r8
 800d65a:	4649      	mov	r1, r9
 800d65c:	f7f2 ffcc 	bl	80005f8 <__aeabi_dmul>
 800d660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d664:	f7f3 fa4e 	bl	8000b04 <__aeabi_dcmpge>
 800d668:	9e04      	ldr	r6, [sp, #16]
 800d66a:	4637      	mov	r7, r6
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f040 8245 	bne.w	800dafc <_dtoa_r+0x954>
 800d672:	9d00      	ldr	r5, [sp, #0]
 800d674:	2331      	movs	r3, #49	; 0x31
 800d676:	f805 3b01 	strb.w	r3, [r5], #1
 800d67a:	f10b 0b01 	add.w	fp, fp, #1
 800d67e:	e241      	b.n	800db04 <_dtoa_r+0x95c>
 800d680:	07f2      	lsls	r2, r6, #31
 800d682:	d505      	bpl.n	800d690 <_dtoa_r+0x4e8>
 800d684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d688:	f7f2 ffb6 	bl	80005f8 <__aeabi_dmul>
 800d68c:	3501      	adds	r5, #1
 800d68e:	2301      	movs	r3, #1
 800d690:	1076      	asrs	r6, r6, #1
 800d692:	3708      	adds	r7, #8
 800d694:	e773      	b.n	800d57e <_dtoa_r+0x3d6>
 800d696:	2502      	movs	r5, #2
 800d698:	e775      	b.n	800d586 <_dtoa_r+0x3de>
 800d69a:	9e04      	ldr	r6, [sp, #16]
 800d69c:	465f      	mov	r7, fp
 800d69e:	e792      	b.n	800d5c6 <_dtoa_r+0x41e>
 800d6a0:	9900      	ldr	r1, [sp, #0]
 800d6a2:	4b50      	ldr	r3, [pc, #320]	; (800d7e4 <_dtoa_r+0x63c>)
 800d6a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6a8:	4431      	add	r1, r6
 800d6aa:	9102      	str	r1, [sp, #8]
 800d6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6ae:	eeb0 9a47 	vmov.f32	s18, s14
 800d6b2:	eef0 9a67 	vmov.f32	s19, s15
 800d6b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d6ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6be:	2900      	cmp	r1, #0
 800d6c0:	d044      	beq.n	800d74c <_dtoa_r+0x5a4>
 800d6c2:	494e      	ldr	r1, [pc, #312]	; (800d7fc <_dtoa_r+0x654>)
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	f7f3 f8c1 	bl	800084c <__aeabi_ddiv>
 800d6ca:	ec53 2b19 	vmov	r2, r3, d9
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	9d00      	ldr	r5, [sp, #0]
 800d6d4:	ec41 0b19 	vmov	d9, r0, r1
 800d6d8:	4649      	mov	r1, r9
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f7f3 fa3c 	bl	8000b58 <__aeabi_d2iz>
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	f7f2 ff1f 	bl	8000524 <__aeabi_i2d>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	f7f2 fdcb 	bl	8000288 <__aeabi_dsub>
 800d6f2:	3630      	adds	r6, #48	; 0x30
 800d6f4:	f805 6b01 	strb.w	r6, [r5], #1
 800d6f8:	ec53 2b19 	vmov	r2, r3, d9
 800d6fc:	4680      	mov	r8, r0
 800d6fe:	4689      	mov	r9, r1
 800d700:	f7f3 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800d704:	2800      	cmp	r0, #0
 800d706:	d164      	bne.n	800d7d2 <_dtoa_r+0x62a>
 800d708:	4642      	mov	r2, r8
 800d70a:	464b      	mov	r3, r9
 800d70c:	4937      	ldr	r1, [pc, #220]	; (800d7ec <_dtoa_r+0x644>)
 800d70e:	2000      	movs	r0, #0
 800d710:	f7f2 fdba 	bl	8000288 <__aeabi_dsub>
 800d714:	ec53 2b19 	vmov	r2, r3, d9
 800d718:	f7f3 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	f040 80b6 	bne.w	800d88e <_dtoa_r+0x6e6>
 800d722:	9b02      	ldr	r3, [sp, #8]
 800d724:	429d      	cmp	r5, r3
 800d726:	f43f af7c 	beq.w	800d622 <_dtoa_r+0x47a>
 800d72a:	4b31      	ldr	r3, [pc, #196]	; (800d7f0 <_dtoa_r+0x648>)
 800d72c:	ec51 0b19 	vmov	r0, r1, d9
 800d730:	2200      	movs	r2, #0
 800d732:	f7f2 ff61 	bl	80005f8 <__aeabi_dmul>
 800d736:	4b2e      	ldr	r3, [pc, #184]	; (800d7f0 <_dtoa_r+0x648>)
 800d738:	ec41 0b19 	vmov	d9, r0, r1
 800d73c:	2200      	movs	r2, #0
 800d73e:	4640      	mov	r0, r8
 800d740:	4649      	mov	r1, r9
 800d742:	f7f2 ff59 	bl	80005f8 <__aeabi_dmul>
 800d746:	4680      	mov	r8, r0
 800d748:	4689      	mov	r9, r1
 800d74a:	e7c5      	b.n	800d6d8 <_dtoa_r+0x530>
 800d74c:	ec51 0b17 	vmov	r0, r1, d7
 800d750:	f7f2 ff52 	bl	80005f8 <__aeabi_dmul>
 800d754:	9b02      	ldr	r3, [sp, #8]
 800d756:	9d00      	ldr	r5, [sp, #0]
 800d758:	930f      	str	r3, [sp, #60]	; 0x3c
 800d75a:	ec41 0b19 	vmov	d9, r0, r1
 800d75e:	4649      	mov	r1, r9
 800d760:	4640      	mov	r0, r8
 800d762:	f7f3 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800d766:	4606      	mov	r6, r0
 800d768:	f7f2 fedc 	bl	8000524 <__aeabi_i2d>
 800d76c:	3630      	adds	r6, #48	; 0x30
 800d76e:	4602      	mov	r2, r0
 800d770:	460b      	mov	r3, r1
 800d772:	4640      	mov	r0, r8
 800d774:	4649      	mov	r1, r9
 800d776:	f7f2 fd87 	bl	8000288 <__aeabi_dsub>
 800d77a:	f805 6b01 	strb.w	r6, [r5], #1
 800d77e:	9b02      	ldr	r3, [sp, #8]
 800d780:	429d      	cmp	r5, r3
 800d782:	4680      	mov	r8, r0
 800d784:	4689      	mov	r9, r1
 800d786:	f04f 0200 	mov.w	r2, #0
 800d78a:	d124      	bne.n	800d7d6 <_dtoa_r+0x62e>
 800d78c:	4b1b      	ldr	r3, [pc, #108]	; (800d7fc <_dtoa_r+0x654>)
 800d78e:	ec51 0b19 	vmov	r0, r1, d9
 800d792:	f7f2 fd7b 	bl	800028c <__adddf3>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	4640      	mov	r0, r8
 800d79c:	4649      	mov	r1, r9
 800d79e:	f7f3 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d173      	bne.n	800d88e <_dtoa_r+0x6e6>
 800d7a6:	ec53 2b19 	vmov	r2, r3, d9
 800d7aa:	4914      	ldr	r1, [pc, #80]	; (800d7fc <_dtoa_r+0x654>)
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f7f2 fd6b 	bl	8000288 <__aeabi_dsub>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f3 f98f 	bl	8000adc <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	f43f af2f 	beq.w	800d622 <_dtoa_r+0x47a>
 800d7c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d7c6:	1e6b      	subs	r3, r5, #1
 800d7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7ce:	2b30      	cmp	r3, #48	; 0x30
 800d7d0:	d0f8      	beq.n	800d7c4 <_dtoa_r+0x61c>
 800d7d2:	46bb      	mov	fp, r7
 800d7d4:	e04a      	b.n	800d86c <_dtoa_r+0x6c4>
 800d7d6:	4b06      	ldr	r3, [pc, #24]	; (800d7f0 <_dtoa_r+0x648>)
 800d7d8:	f7f2 ff0e 	bl	80005f8 <__aeabi_dmul>
 800d7dc:	4680      	mov	r8, r0
 800d7de:	4689      	mov	r9, r1
 800d7e0:	e7bd      	b.n	800d75e <_dtoa_r+0x5b6>
 800d7e2:	bf00      	nop
 800d7e4:	0800fe80 	.word	0x0800fe80
 800d7e8:	0800fe58 	.word	0x0800fe58
 800d7ec:	3ff00000 	.word	0x3ff00000
 800d7f0:	40240000 	.word	0x40240000
 800d7f4:	401c0000 	.word	0x401c0000
 800d7f8:	40140000 	.word	0x40140000
 800d7fc:	3fe00000 	.word	0x3fe00000
 800d800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d804:	9d00      	ldr	r5, [sp, #0]
 800d806:	4642      	mov	r2, r8
 800d808:	464b      	mov	r3, r9
 800d80a:	4630      	mov	r0, r6
 800d80c:	4639      	mov	r1, r7
 800d80e:	f7f3 f81d 	bl	800084c <__aeabi_ddiv>
 800d812:	f7f3 f9a1 	bl	8000b58 <__aeabi_d2iz>
 800d816:	9001      	str	r0, [sp, #4]
 800d818:	f7f2 fe84 	bl	8000524 <__aeabi_i2d>
 800d81c:	4642      	mov	r2, r8
 800d81e:	464b      	mov	r3, r9
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4630      	mov	r0, r6
 800d82a:	4639      	mov	r1, r7
 800d82c:	f7f2 fd2c 	bl	8000288 <__aeabi_dsub>
 800d830:	9e01      	ldr	r6, [sp, #4]
 800d832:	9f04      	ldr	r7, [sp, #16]
 800d834:	3630      	adds	r6, #48	; 0x30
 800d836:	f805 6b01 	strb.w	r6, [r5], #1
 800d83a:	9e00      	ldr	r6, [sp, #0]
 800d83c:	1bae      	subs	r6, r5, r6
 800d83e:	42b7      	cmp	r7, r6
 800d840:	4602      	mov	r2, r0
 800d842:	460b      	mov	r3, r1
 800d844:	d134      	bne.n	800d8b0 <_dtoa_r+0x708>
 800d846:	f7f2 fd21 	bl	800028c <__adddf3>
 800d84a:	4642      	mov	r2, r8
 800d84c:	464b      	mov	r3, r9
 800d84e:	4606      	mov	r6, r0
 800d850:	460f      	mov	r7, r1
 800d852:	f7f3 f961 	bl	8000b18 <__aeabi_dcmpgt>
 800d856:	b9c8      	cbnz	r0, 800d88c <_dtoa_r+0x6e4>
 800d858:	4642      	mov	r2, r8
 800d85a:	464b      	mov	r3, r9
 800d85c:	4630      	mov	r0, r6
 800d85e:	4639      	mov	r1, r7
 800d860:	f7f3 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 800d864:	b110      	cbz	r0, 800d86c <_dtoa_r+0x6c4>
 800d866:	9b01      	ldr	r3, [sp, #4]
 800d868:	07db      	lsls	r3, r3, #31
 800d86a:	d40f      	bmi.n	800d88c <_dtoa_r+0x6e4>
 800d86c:	4651      	mov	r1, sl
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 ff36 	bl	800e6e0 <_Bfree>
 800d874:	2300      	movs	r3, #0
 800d876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d878:	702b      	strb	r3, [r5, #0]
 800d87a:	f10b 0301 	add.w	r3, fp, #1
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d882:	2b00      	cmp	r3, #0
 800d884:	f43f ace2 	beq.w	800d24c <_dtoa_r+0xa4>
 800d888:	601d      	str	r5, [r3, #0]
 800d88a:	e4df      	b.n	800d24c <_dtoa_r+0xa4>
 800d88c:	465f      	mov	r7, fp
 800d88e:	462b      	mov	r3, r5
 800d890:	461d      	mov	r5, r3
 800d892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d896:	2a39      	cmp	r2, #57	; 0x39
 800d898:	d106      	bne.n	800d8a8 <_dtoa_r+0x700>
 800d89a:	9a00      	ldr	r2, [sp, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d1f7      	bne.n	800d890 <_dtoa_r+0x6e8>
 800d8a0:	9900      	ldr	r1, [sp, #0]
 800d8a2:	2230      	movs	r2, #48	; 0x30
 800d8a4:	3701      	adds	r7, #1
 800d8a6:	700a      	strb	r2, [r1, #0]
 800d8a8:	781a      	ldrb	r2, [r3, #0]
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	701a      	strb	r2, [r3, #0]
 800d8ae:	e790      	b.n	800d7d2 <_dtoa_r+0x62a>
 800d8b0:	4ba3      	ldr	r3, [pc, #652]	; (800db40 <_dtoa_r+0x998>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	f7f3 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d09e      	beq.n	800d806 <_dtoa_r+0x65e>
 800d8c8:	e7d0      	b.n	800d86c <_dtoa_r+0x6c4>
 800d8ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	f000 80ca 	beq.w	800da66 <_dtoa_r+0x8be>
 800d8d2:	9a07      	ldr	r2, [sp, #28]
 800d8d4:	2a01      	cmp	r2, #1
 800d8d6:	f300 80ad 	bgt.w	800da34 <_dtoa_r+0x88c>
 800d8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8dc:	2a00      	cmp	r2, #0
 800d8de:	f000 80a5 	beq.w	800da2c <_dtoa_r+0x884>
 800d8e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8e6:	9e08      	ldr	r6, [sp, #32]
 800d8e8:	9d05      	ldr	r5, [sp, #20]
 800d8ea:	9a05      	ldr	r2, [sp, #20]
 800d8ec:	441a      	add	r2, r3
 800d8ee:	9205      	str	r2, [sp, #20]
 800d8f0:	9a06      	ldr	r2, [sp, #24]
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	441a      	add	r2, r3
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	9206      	str	r2, [sp, #24]
 800d8fa:	f000 fff1 	bl	800e8e0 <__i2b>
 800d8fe:	4607      	mov	r7, r0
 800d900:	b165      	cbz	r5, 800d91c <_dtoa_r+0x774>
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	dd09      	ble.n	800d91c <_dtoa_r+0x774>
 800d908:	42ab      	cmp	r3, r5
 800d90a:	9a05      	ldr	r2, [sp, #20]
 800d90c:	bfa8      	it	ge
 800d90e:	462b      	movge	r3, r5
 800d910:	1ad2      	subs	r2, r2, r3
 800d912:	9205      	str	r2, [sp, #20]
 800d914:	9a06      	ldr	r2, [sp, #24]
 800d916:	1aed      	subs	r5, r5, r3
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	9306      	str	r3, [sp, #24]
 800d91c:	9b08      	ldr	r3, [sp, #32]
 800d91e:	b1f3      	cbz	r3, 800d95e <_dtoa_r+0x7b6>
 800d920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	f000 80a3 	beq.w	800da6e <_dtoa_r+0x8c6>
 800d928:	2e00      	cmp	r6, #0
 800d92a:	dd10      	ble.n	800d94e <_dtoa_r+0x7a6>
 800d92c:	4639      	mov	r1, r7
 800d92e:	4632      	mov	r2, r6
 800d930:	4620      	mov	r0, r4
 800d932:	f001 f895 	bl	800ea60 <__pow5mult>
 800d936:	4652      	mov	r2, sl
 800d938:	4601      	mov	r1, r0
 800d93a:	4607      	mov	r7, r0
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 ffe5 	bl	800e90c <__multiply>
 800d942:	4651      	mov	r1, sl
 800d944:	4680      	mov	r8, r0
 800d946:	4620      	mov	r0, r4
 800d948:	f000 feca 	bl	800e6e0 <_Bfree>
 800d94c:	46c2      	mov	sl, r8
 800d94e:	9b08      	ldr	r3, [sp, #32]
 800d950:	1b9a      	subs	r2, r3, r6
 800d952:	d004      	beq.n	800d95e <_dtoa_r+0x7b6>
 800d954:	4651      	mov	r1, sl
 800d956:	4620      	mov	r0, r4
 800d958:	f001 f882 	bl	800ea60 <__pow5mult>
 800d95c:	4682      	mov	sl, r0
 800d95e:	2101      	movs	r1, #1
 800d960:	4620      	mov	r0, r4
 800d962:	f000 ffbd 	bl	800e8e0 <__i2b>
 800d966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	4606      	mov	r6, r0
 800d96c:	f340 8081 	ble.w	800da72 <_dtoa_r+0x8ca>
 800d970:	461a      	mov	r2, r3
 800d972:	4601      	mov	r1, r0
 800d974:	4620      	mov	r0, r4
 800d976:	f001 f873 	bl	800ea60 <__pow5mult>
 800d97a:	9b07      	ldr	r3, [sp, #28]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	4606      	mov	r6, r0
 800d980:	dd7a      	ble.n	800da78 <_dtoa_r+0x8d0>
 800d982:	f04f 0800 	mov.w	r8, #0
 800d986:	6933      	ldr	r3, [r6, #16]
 800d988:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d98c:	6918      	ldr	r0, [r3, #16]
 800d98e:	f000 ff59 	bl	800e844 <__hi0bits>
 800d992:	f1c0 0020 	rsb	r0, r0, #32
 800d996:	9b06      	ldr	r3, [sp, #24]
 800d998:	4418      	add	r0, r3
 800d99a:	f010 001f 	ands.w	r0, r0, #31
 800d99e:	f000 8094 	beq.w	800daca <_dtoa_r+0x922>
 800d9a2:	f1c0 0320 	rsb	r3, r0, #32
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	f340 8085 	ble.w	800dab6 <_dtoa_r+0x90e>
 800d9ac:	9b05      	ldr	r3, [sp, #20]
 800d9ae:	f1c0 001c 	rsb	r0, r0, #28
 800d9b2:	4403      	add	r3, r0
 800d9b4:	9305      	str	r3, [sp, #20]
 800d9b6:	9b06      	ldr	r3, [sp, #24]
 800d9b8:	4403      	add	r3, r0
 800d9ba:	4405      	add	r5, r0
 800d9bc:	9306      	str	r3, [sp, #24]
 800d9be:	9b05      	ldr	r3, [sp, #20]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	dd05      	ble.n	800d9d0 <_dtoa_r+0x828>
 800d9c4:	4651      	mov	r1, sl
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f001 f8a3 	bl	800eb14 <__lshift>
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	9b06      	ldr	r3, [sp, #24]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	dd05      	ble.n	800d9e2 <_dtoa_r+0x83a>
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	461a      	mov	r2, r3
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f001 f89a 	bl	800eb14 <__lshift>
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d072      	beq.n	800dace <_dtoa_r+0x926>
 800d9e8:	4631      	mov	r1, r6
 800d9ea:	4650      	mov	r0, sl
 800d9ec:	f001 f8fe 	bl	800ebec <__mcmp>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	da6c      	bge.n	800dace <_dtoa_r+0x926>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4651      	mov	r1, sl
 800d9f8:	220a      	movs	r2, #10
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fe92 	bl	800e724 <__multadd>
 800da00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da06:	4682      	mov	sl, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 81b0 	beq.w	800dd6e <_dtoa_r+0xbc6>
 800da0e:	2300      	movs	r3, #0
 800da10:	4639      	mov	r1, r7
 800da12:	220a      	movs	r2, #10
 800da14:	4620      	mov	r0, r4
 800da16:	f000 fe85 	bl	800e724 <__multadd>
 800da1a:	9b01      	ldr	r3, [sp, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	4607      	mov	r7, r0
 800da20:	f300 8096 	bgt.w	800db50 <_dtoa_r+0x9a8>
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	2b02      	cmp	r3, #2
 800da28:	dc59      	bgt.n	800dade <_dtoa_r+0x936>
 800da2a:	e091      	b.n	800db50 <_dtoa_r+0x9a8>
 800da2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da32:	e758      	b.n	800d8e6 <_dtoa_r+0x73e>
 800da34:	9b04      	ldr	r3, [sp, #16]
 800da36:	1e5e      	subs	r6, r3, #1
 800da38:	9b08      	ldr	r3, [sp, #32]
 800da3a:	42b3      	cmp	r3, r6
 800da3c:	bfbf      	itttt	lt
 800da3e:	9b08      	ldrlt	r3, [sp, #32]
 800da40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800da42:	9608      	strlt	r6, [sp, #32]
 800da44:	1af3      	sublt	r3, r6, r3
 800da46:	bfb4      	ite	lt
 800da48:	18d2      	addlt	r2, r2, r3
 800da4a:	1b9e      	subge	r6, r3, r6
 800da4c:	9b04      	ldr	r3, [sp, #16]
 800da4e:	bfbc      	itt	lt
 800da50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800da52:	2600      	movlt	r6, #0
 800da54:	2b00      	cmp	r3, #0
 800da56:	bfb7      	itett	lt
 800da58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800da5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800da60:	1a9d      	sublt	r5, r3, r2
 800da62:	2300      	movlt	r3, #0
 800da64:	e741      	b.n	800d8ea <_dtoa_r+0x742>
 800da66:	9e08      	ldr	r6, [sp, #32]
 800da68:	9d05      	ldr	r5, [sp, #20]
 800da6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da6c:	e748      	b.n	800d900 <_dtoa_r+0x758>
 800da6e:	9a08      	ldr	r2, [sp, #32]
 800da70:	e770      	b.n	800d954 <_dtoa_r+0x7ac>
 800da72:	9b07      	ldr	r3, [sp, #28]
 800da74:	2b01      	cmp	r3, #1
 800da76:	dc19      	bgt.n	800daac <_dtoa_r+0x904>
 800da78:	9b02      	ldr	r3, [sp, #8]
 800da7a:	b9bb      	cbnz	r3, 800daac <_dtoa_r+0x904>
 800da7c:	9b03      	ldr	r3, [sp, #12]
 800da7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da82:	b99b      	cbnz	r3, 800daac <_dtoa_r+0x904>
 800da84:	9b03      	ldr	r3, [sp, #12]
 800da86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da8a:	0d1b      	lsrs	r3, r3, #20
 800da8c:	051b      	lsls	r3, r3, #20
 800da8e:	b183      	cbz	r3, 800dab2 <_dtoa_r+0x90a>
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	3301      	adds	r3, #1
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	9b06      	ldr	r3, [sp, #24]
 800da98:	3301      	adds	r3, #1
 800da9a:	9306      	str	r3, [sp, #24]
 800da9c:	f04f 0801 	mov.w	r8, #1
 800daa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f47f af6f 	bne.w	800d986 <_dtoa_r+0x7de>
 800daa8:	2001      	movs	r0, #1
 800daaa:	e774      	b.n	800d996 <_dtoa_r+0x7ee>
 800daac:	f04f 0800 	mov.w	r8, #0
 800dab0:	e7f6      	b.n	800daa0 <_dtoa_r+0x8f8>
 800dab2:	4698      	mov	r8, r3
 800dab4:	e7f4      	b.n	800daa0 <_dtoa_r+0x8f8>
 800dab6:	d082      	beq.n	800d9be <_dtoa_r+0x816>
 800dab8:	9a05      	ldr	r2, [sp, #20]
 800daba:	331c      	adds	r3, #28
 800dabc:	441a      	add	r2, r3
 800dabe:	9205      	str	r2, [sp, #20]
 800dac0:	9a06      	ldr	r2, [sp, #24]
 800dac2:	441a      	add	r2, r3
 800dac4:	441d      	add	r5, r3
 800dac6:	9206      	str	r2, [sp, #24]
 800dac8:	e779      	b.n	800d9be <_dtoa_r+0x816>
 800daca:	4603      	mov	r3, r0
 800dacc:	e7f4      	b.n	800dab8 <_dtoa_r+0x910>
 800dace:	9b04      	ldr	r3, [sp, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dc37      	bgt.n	800db44 <_dtoa_r+0x99c>
 800dad4:	9b07      	ldr	r3, [sp, #28]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	dd34      	ble.n	800db44 <_dtoa_r+0x99c>
 800dada:	9b04      	ldr	r3, [sp, #16]
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	b963      	cbnz	r3, 800dafc <_dtoa_r+0x954>
 800dae2:	4631      	mov	r1, r6
 800dae4:	2205      	movs	r2, #5
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fe1c 	bl	800e724 <__multadd>
 800daec:	4601      	mov	r1, r0
 800daee:	4606      	mov	r6, r0
 800daf0:	4650      	mov	r0, sl
 800daf2:	f001 f87b 	bl	800ebec <__mcmp>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f73f adbb 	bgt.w	800d672 <_dtoa_r+0x4ca>
 800dafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dafe:	9d00      	ldr	r5, [sp, #0]
 800db00:	ea6f 0b03 	mvn.w	fp, r3
 800db04:	f04f 0800 	mov.w	r8, #0
 800db08:	4631      	mov	r1, r6
 800db0a:	4620      	mov	r0, r4
 800db0c:	f000 fde8 	bl	800e6e0 <_Bfree>
 800db10:	2f00      	cmp	r7, #0
 800db12:	f43f aeab 	beq.w	800d86c <_dtoa_r+0x6c4>
 800db16:	f1b8 0f00 	cmp.w	r8, #0
 800db1a:	d005      	beq.n	800db28 <_dtoa_r+0x980>
 800db1c:	45b8      	cmp	r8, r7
 800db1e:	d003      	beq.n	800db28 <_dtoa_r+0x980>
 800db20:	4641      	mov	r1, r8
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fddc 	bl	800e6e0 <_Bfree>
 800db28:	4639      	mov	r1, r7
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 fdd8 	bl	800e6e0 <_Bfree>
 800db30:	e69c      	b.n	800d86c <_dtoa_r+0x6c4>
 800db32:	2600      	movs	r6, #0
 800db34:	4637      	mov	r7, r6
 800db36:	e7e1      	b.n	800dafc <_dtoa_r+0x954>
 800db38:	46bb      	mov	fp, r7
 800db3a:	4637      	mov	r7, r6
 800db3c:	e599      	b.n	800d672 <_dtoa_r+0x4ca>
 800db3e:	bf00      	nop
 800db40:	40240000 	.word	0x40240000
 800db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80c8 	beq.w	800dcdc <_dtoa_r+0xb34>
 800db4c:	9b04      	ldr	r3, [sp, #16]
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	2d00      	cmp	r5, #0
 800db52:	dd05      	ble.n	800db60 <_dtoa_r+0x9b8>
 800db54:	4639      	mov	r1, r7
 800db56:	462a      	mov	r2, r5
 800db58:	4620      	mov	r0, r4
 800db5a:	f000 ffdb 	bl	800eb14 <__lshift>
 800db5e:	4607      	mov	r7, r0
 800db60:	f1b8 0f00 	cmp.w	r8, #0
 800db64:	d05b      	beq.n	800dc1e <_dtoa_r+0xa76>
 800db66:	6879      	ldr	r1, [r7, #4]
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 fd79 	bl	800e660 <_Balloc>
 800db6e:	4605      	mov	r5, r0
 800db70:	b928      	cbnz	r0, 800db7e <_dtoa_r+0x9d6>
 800db72:	4b83      	ldr	r3, [pc, #524]	; (800dd80 <_dtoa_r+0xbd8>)
 800db74:	4602      	mov	r2, r0
 800db76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800db7a:	f7ff bb2e 	b.w	800d1da <_dtoa_r+0x32>
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	3202      	adds	r2, #2
 800db82:	0092      	lsls	r2, r2, #2
 800db84:	f107 010c 	add.w	r1, r7, #12
 800db88:	300c      	adds	r0, #12
 800db8a:	f7ff fa6d 	bl	800d068 <memcpy>
 800db8e:	2201      	movs	r2, #1
 800db90:	4629      	mov	r1, r5
 800db92:	4620      	mov	r0, r4
 800db94:	f000 ffbe 	bl	800eb14 <__lshift>
 800db98:	9b00      	ldr	r3, [sp, #0]
 800db9a:	3301      	adds	r3, #1
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba2:	4413      	add	r3, r2
 800dba4:	9308      	str	r3, [sp, #32]
 800dba6:	9b02      	ldr	r3, [sp, #8]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	46b8      	mov	r8, r7
 800dbae:	9306      	str	r3, [sp, #24]
 800dbb0:	4607      	mov	r7, r0
 800dbb2:	9b04      	ldr	r3, [sp, #16]
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	4650      	mov	r0, sl
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	f7ff fa6c 	bl	800d098 <quorem>
 800dbc0:	4641      	mov	r1, r8
 800dbc2:	9002      	str	r0, [sp, #8]
 800dbc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dbc8:	4650      	mov	r0, sl
 800dbca:	f001 f80f 	bl	800ebec <__mcmp>
 800dbce:	463a      	mov	r2, r7
 800dbd0:	9005      	str	r0, [sp, #20]
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f001 f825 	bl	800ec24 <__mdiff>
 800dbda:	68c2      	ldr	r2, [r0, #12]
 800dbdc:	4605      	mov	r5, r0
 800dbde:	bb02      	cbnz	r2, 800dc22 <_dtoa_r+0xa7a>
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	f001 f802 	bl	800ebec <__mcmp>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	4629      	mov	r1, r5
 800dbec:	4620      	mov	r0, r4
 800dbee:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf0:	f000 fd76 	bl	800e6e0 <_Bfree>
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbf8:	9d04      	ldr	r5, [sp, #16]
 800dbfa:	ea43 0102 	orr.w	r1, r3, r2
 800dbfe:	9b06      	ldr	r3, [sp, #24]
 800dc00:	4319      	orrs	r1, r3
 800dc02:	d110      	bne.n	800dc26 <_dtoa_r+0xa7e>
 800dc04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc08:	d029      	beq.n	800dc5e <_dtoa_r+0xab6>
 800dc0a:	9b05      	ldr	r3, [sp, #20]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd02      	ble.n	800dc16 <_dtoa_r+0xa6e>
 800dc10:	9b02      	ldr	r3, [sp, #8]
 800dc12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800dc16:	9b01      	ldr	r3, [sp, #4]
 800dc18:	f883 9000 	strb.w	r9, [r3]
 800dc1c:	e774      	b.n	800db08 <_dtoa_r+0x960>
 800dc1e:	4638      	mov	r0, r7
 800dc20:	e7ba      	b.n	800db98 <_dtoa_r+0x9f0>
 800dc22:	2201      	movs	r2, #1
 800dc24:	e7e1      	b.n	800dbea <_dtoa_r+0xa42>
 800dc26:	9b05      	ldr	r3, [sp, #20]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	db04      	blt.n	800dc36 <_dtoa_r+0xa8e>
 800dc2c:	9907      	ldr	r1, [sp, #28]
 800dc2e:	430b      	orrs	r3, r1
 800dc30:	9906      	ldr	r1, [sp, #24]
 800dc32:	430b      	orrs	r3, r1
 800dc34:	d120      	bne.n	800dc78 <_dtoa_r+0xad0>
 800dc36:	2a00      	cmp	r2, #0
 800dc38:	dded      	ble.n	800dc16 <_dtoa_r+0xa6e>
 800dc3a:	4651      	mov	r1, sl
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 ff68 	bl	800eb14 <__lshift>
 800dc44:	4631      	mov	r1, r6
 800dc46:	4682      	mov	sl, r0
 800dc48:	f000 ffd0 	bl	800ebec <__mcmp>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	dc03      	bgt.n	800dc58 <_dtoa_r+0xab0>
 800dc50:	d1e1      	bne.n	800dc16 <_dtoa_r+0xa6e>
 800dc52:	f019 0f01 	tst.w	r9, #1
 800dc56:	d0de      	beq.n	800dc16 <_dtoa_r+0xa6e>
 800dc58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc5c:	d1d8      	bne.n	800dc10 <_dtoa_r+0xa68>
 800dc5e:	9a01      	ldr	r2, [sp, #4]
 800dc60:	2339      	movs	r3, #57	; 0x39
 800dc62:	7013      	strb	r3, [r2, #0]
 800dc64:	462b      	mov	r3, r5
 800dc66:	461d      	mov	r5, r3
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc6e:	2a39      	cmp	r2, #57	; 0x39
 800dc70:	d06c      	beq.n	800dd4c <_dtoa_r+0xba4>
 800dc72:	3201      	adds	r2, #1
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	e747      	b.n	800db08 <_dtoa_r+0x960>
 800dc78:	2a00      	cmp	r2, #0
 800dc7a:	dd07      	ble.n	800dc8c <_dtoa_r+0xae4>
 800dc7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dc80:	d0ed      	beq.n	800dc5e <_dtoa_r+0xab6>
 800dc82:	9a01      	ldr	r2, [sp, #4]
 800dc84:	f109 0301 	add.w	r3, r9, #1
 800dc88:	7013      	strb	r3, [r2, #0]
 800dc8a:	e73d      	b.n	800db08 <_dtoa_r+0x960>
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	9a08      	ldr	r2, [sp, #32]
 800dc90:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d043      	beq.n	800dd20 <_dtoa_r+0xb78>
 800dc98:	4651      	mov	r1, sl
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f000 fd40 	bl	800e724 <__multadd>
 800dca4:	45b8      	cmp	r8, r7
 800dca6:	4682      	mov	sl, r0
 800dca8:	f04f 0300 	mov.w	r3, #0
 800dcac:	f04f 020a 	mov.w	r2, #10
 800dcb0:	4641      	mov	r1, r8
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	d107      	bne.n	800dcc6 <_dtoa_r+0xb1e>
 800dcb6:	f000 fd35 	bl	800e724 <__multadd>
 800dcba:	4680      	mov	r8, r0
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	e775      	b.n	800dbb2 <_dtoa_r+0xa0a>
 800dcc6:	f000 fd2d 	bl	800e724 <__multadd>
 800dcca:	4639      	mov	r1, r7
 800dccc:	4680      	mov	r8, r0
 800dcce:	2300      	movs	r3, #0
 800dcd0:	220a      	movs	r2, #10
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f000 fd26 	bl	800e724 <__multadd>
 800dcd8:	4607      	mov	r7, r0
 800dcda:	e7f0      	b.n	800dcbe <_dtoa_r+0xb16>
 800dcdc:	9b04      	ldr	r3, [sp, #16]
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	9d00      	ldr	r5, [sp, #0]
 800dce2:	4631      	mov	r1, r6
 800dce4:	4650      	mov	r0, sl
 800dce6:	f7ff f9d7 	bl	800d098 <quorem>
 800dcea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dcee:	9b00      	ldr	r3, [sp, #0]
 800dcf0:	f805 9b01 	strb.w	r9, [r5], #1
 800dcf4:	1aea      	subs	r2, r5, r3
 800dcf6:	9b01      	ldr	r3, [sp, #4]
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	dd07      	ble.n	800dd0c <_dtoa_r+0xb64>
 800dcfc:	4651      	mov	r1, sl
 800dcfe:	2300      	movs	r3, #0
 800dd00:	220a      	movs	r2, #10
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 fd0e 	bl	800e724 <__multadd>
 800dd08:	4682      	mov	sl, r0
 800dd0a:	e7ea      	b.n	800dce2 <_dtoa_r+0xb3a>
 800dd0c:	9b01      	ldr	r3, [sp, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bfc8      	it	gt
 800dd12:	461d      	movgt	r5, r3
 800dd14:	9b00      	ldr	r3, [sp, #0]
 800dd16:	bfd8      	it	le
 800dd18:	2501      	movle	r5, #1
 800dd1a:	441d      	add	r5, r3
 800dd1c:	f04f 0800 	mov.w	r8, #0
 800dd20:	4651      	mov	r1, sl
 800dd22:	2201      	movs	r2, #1
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 fef5 	bl	800eb14 <__lshift>
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	f000 ff5d 	bl	800ebec <__mcmp>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	dc96      	bgt.n	800dc64 <_dtoa_r+0xabc>
 800dd36:	d102      	bne.n	800dd3e <_dtoa_r+0xb96>
 800dd38:	f019 0f01 	tst.w	r9, #1
 800dd3c:	d192      	bne.n	800dc64 <_dtoa_r+0xabc>
 800dd3e:	462b      	mov	r3, r5
 800dd40:	461d      	mov	r5, r3
 800dd42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd46:	2a30      	cmp	r2, #48	; 0x30
 800dd48:	d0fa      	beq.n	800dd40 <_dtoa_r+0xb98>
 800dd4a:	e6dd      	b.n	800db08 <_dtoa_r+0x960>
 800dd4c:	9a00      	ldr	r2, [sp, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d189      	bne.n	800dc66 <_dtoa_r+0xabe>
 800dd52:	f10b 0b01 	add.w	fp, fp, #1
 800dd56:	2331      	movs	r3, #49	; 0x31
 800dd58:	e796      	b.n	800dc88 <_dtoa_r+0xae0>
 800dd5a:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <_dtoa_r+0xbdc>)
 800dd5c:	f7ff ba99 	b.w	800d292 <_dtoa_r+0xea>
 800dd60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f47f aa6d 	bne.w	800d242 <_dtoa_r+0x9a>
 800dd68:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <_dtoa_r+0xbe0>)
 800dd6a:	f7ff ba92 	b.w	800d292 <_dtoa_r+0xea>
 800dd6e:	9b01      	ldr	r3, [sp, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dcb5      	bgt.n	800dce0 <_dtoa_r+0xb38>
 800dd74:	9b07      	ldr	r3, [sp, #28]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	f73f aeb1 	bgt.w	800dade <_dtoa_r+0x936>
 800dd7c:	e7b0      	b.n	800dce0 <_dtoa_r+0xb38>
 800dd7e:	bf00      	nop
 800dd80:	0800fd88 	.word	0x0800fd88
 800dd84:	0800fce0 	.word	0x0800fce0
 800dd88:	0800fd0c 	.word	0x0800fd0c

0800dd8c <_free_r>:
 800dd8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd8e:	2900      	cmp	r1, #0
 800dd90:	d044      	beq.n	800de1c <_free_r+0x90>
 800dd92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd96:	9001      	str	r0, [sp, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f1a1 0404 	sub.w	r4, r1, #4
 800dd9e:	bfb8      	it	lt
 800dda0:	18e4      	addlt	r4, r4, r3
 800dda2:	f000 fc51 	bl	800e648 <__malloc_lock>
 800dda6:	4a1e      	ldr	r2, [pc, #120]	; (800de20 <_free_r+0x94>)
 800dda8:	9801      	ldr	r0, [sp, #4]
 800ddaa:	6813      	ldr	r3, [r2, #0]
 800ddac:	b933      	cbnz	r3, 800ddbc <_free_r+0x30>
 800ddae:	6063      	str	r3, [r4, #4]
 800ddb0:	6014      	str	r4, [r2, #0]
 800ddb2:	b003      	add	sp, #12
 800ddb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddb8:	f000 bc4c 	b.w	800e654 <__malloc_unlock>
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	d908      	bls.n	800ddd2 <_free_r+0x46>
 800ddc0:	6825      	ldr	r5, [r4, #0]
 800ddc2:	1961      	adds	r1, r4, r5
 800ddc4:	428b      	cmp	r3, r1
 800ddc6:	bf01      	itttt	eq
 800ddc8:	6819      	ldreq	r1, [r3, #0]
 800ddca:	685b      	ldreq	r3, [r3, #4]
 800ddcc:	1949      	addeq	r1, r1, r5
 800ddce:	6021      	streq	r1, [r4, #0]
 800ddd0:	e7ed      	b.n	800ddae <_free_r+0x22>
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	b10b      	cbz	r3, 800dddc <_free_r+0x50>
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d9fa      	bls.n	800ddd2 <_free_r+0x46>
 800dddc:	6811      	ldr	r1, [r2, #0]
 800ddde:	1855      	adds	r5, r2, r1
 800dde0:	42a5      	cmp	r5, r4
 800dde2:	d10b      	bne.n	800ddfc <_free_r+0x70>
 800dde4:	6824      	ldr	r4, [r4, #0]
 800dde6:	4421      	add	r1, r4
 800dde8:	1854      	adds	r4, r2, r1
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	6011      	str	r1, [r2, #0]
 800ddee:	d1e0      	bne.n	800ddb2 <_free_r+0x26>
 800ddf0:	681c      	ldr	r4, [r3, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	6053      	str	r3, [r2, #4]
 800ddf6:	440c      	add	r4, r1
 800ddf8:	6014      	str	r4, [r2, #0]
 800ddfa:	e7da      	b.n	800ddb2 <_free_r+0x26>
 800ddfc:	d902      	bls.n	800de04 <_free_r+0x78>
 800ddfe:	230c      	movs	r3, #12
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	e7d6      	b.n	800ddb2 <_free_r+0x26>
 800de04:	6825      	ldr	r5, [r4, #0]
 800de06:	1961      	adds	r1, r4, r5
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf04      	itt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	6063      	str	r3, [r4, #4]
 800de12:	bf04      	itt	eq
 800de14:	1949      	addeq	r1, r1, r5
 800de16:	6021      	streq	r1, [r4, #0]
 800de18:	6054      	str	r4, [r2, #4]
 800de1a:	e7ca      	b.n	800ddb2 <_free_r+0x26>
 800de1c:	b003      	add	sp, #12
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	20003180 	.word	0x20003180

0800de24 <rshift>:
 800de24:	6903      	ldr	r3, [r0, #16]
 800de26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800de2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800de32:	f100 0414 	add.w	r4, r0, #20
 800de36:	dd45      	ble.n	800dec4 <rshift+0xa0>
 800de38:	f011 011f 	ands.w	r1, r1, #31
 800de3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800de40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800de44:	d10c      	bne.n	800de60 <rshift+0x3c>
 800de46:	f100 0710 	add.w	r7, r0, #16
 800de4a:	4629      	mov	r1, r5
 800de4c:	42b1      	cmp	r1, r6
 800de4e:	d334      	bcc.n	800deba <rshift+0x96>
 800de50:	1a9b      	subs	r3, r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	1eea      	subs	r2, r5, #3
 800de56:	4296      	cmp	r6, r2
 800de58:	bf38      	it	cc
 800de5a:	2300      	movcc	r3, #0
 800de5c:	4423      	add	r3, r4
 800de5e:	e015      	b.n	800de8c <rshift+0x68>
 800de60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800de64:	f1c1 0820 	rsb	r8, r1, #32
 800de68:	40cf      	lsrs	r7, r1
 800de6a:	f105 0e04 	add.w	lr, r5, #4
 800de6e:	46a1      	mov	r9, r4
 800de70:	4576      	cmp	r6, lr
 800de72:	46f4      	mov	ip, lr
 800de74:	d815      	bhi.n	800dea2 <rshift+0x7e>
 800de76:	1a9a      	subs	r2, r3, r2
 800de78:	0092      	lsls	r2, r2, #2
 800de7a:	3a04      	subs	r2, #4
 800de7c:	3501      	adds	r5, #1
 800de7e:	42ae      	cmp	r6, r5
 800de80:	bf38      	it	cc
 800de82:	2200      	movcc	r2, #0
 800de84:	18a3      	adds	r3, r4, r2
 800de86:	50a7      	str	r7, [r4, r2]
 800de88:	b107      	cbz	r7, 800de8c <rshift+0x68>
 800de8a:	3304      	adds	r3, #4
 800de8c:	1b1a      	subs	r2, r3, r4
 800de8e:	42a3      	cmp	r3, r4
 800de90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de94:	bf08      	it	eq
 800de96:	2300      	moveq	r3, #0
 800de98:	6102      	str	r2, [r0, #16]
 800de9a:	bf08      	it	eq
 800de9c:	6143      	streq	r3, [r0, #20]
 800de9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dea2:	f8dc c000 	ldr.w	ip, [ip]
 800dea6:	fa0c fc08 	lsl.w	ip, ip, r8
 800deaa:	ea4c 0707 	orr.w	r7, ip, r7
 800deae:	f849 7b04 	str.w	r7, [r9], #4
 800deb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800deb6:	40cf      	lsrs	r7, r1
 800deb8:	e7da      	b.n	800de70 <rshift+0x4c>
 800deba:	f851 cb04 	ldr.w	ip, [r1], #4
 800debe:	f847 cf04 	str.w	ip, [r7, #4]!
 800dec2:	e7c3      	b.n	800de4c <rshift+0x28>
 800dec4:	4623      	mov	r3, r4
 800dec6:	e7e1      	b.n	800de8c <rshift+0x68>

0800dec8 <__hexdig_fun>:
 800dec8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800decc:	2b09      	cmp	r3, #9
 800dece:	d802      	bhi.n	800ded6 <__hexdig_fun+0xe>
 800ded0:	3820      	subs	r0, #32
 800ded2:	b2c0      	uxtb	r0, r0
 800ded4:	4770      	bx	lr
 800ded6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800deda:	2b05      	cmp	r3, #5
 800dedc:	d801      	bhi.n	800dee2 <__hexdig_fun+0x1a>
 800dede:	3847      	subs	r0, #71	; 0x47
 800dee0:	e7f7      	b.n	800ded2 <__hexdig_fun+0xa>
 800dee2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d801      	bhi.n	800deee <__hexdig_fun+0x26>
 800deea:	3827      	subs	r0, #39	; 0x27
 800deec:	e7f1      	b.n	800ded2 <__hexdig_fun+0xa>
 800deee:	2000      	movs	r0, #0
 800def0:	4770      	bx	lr
	...

0800def4 <__gethex>:
 800def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def8:	4617      	mov	r7, r2
 800defa:	680a      	ldr	r2, [r1, #0]
 800defc:	b085      	sub	sp, #20
 800defe:	f102 0b02 	add.w	fp, r2, #2
 800df02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800df06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800df0a:	4681      	mov	r9, r0
 800df0c:	468a      	mov	sl, r1
 800df0e:	9302      	str	r3, [sp, #8]
 800df10:	32fe      	adds	r2, #254	; 0xfe
 800df12:	eb02 030b 	add.w	r3, r2, fp
 800df16:	46d8      	mov	r8, fp
 800df18:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	2830      	cmp	r0, #48	; 0x30
 800df20:	d0f7      	beq.n	800df12 <__gethex+0x1e>
 800df22:	f7ff ffd1 	bl	800dec8 <__hexdig_fun>
 800df26:	4604      	mov	r4, r0
 800df28:	2800      	cmp	r0, #0
 800df2a:	d138      	bne.n	800df9e <__gethex+0xaa>
 800df2c:	49a7      	ldr	r1, [pc, #668]	; (800e1cc <__gethex+0x2d8>)
 800df2e:	2201      	movs	r2, #1
 800df30:	4640      	mov	r0, r8
 800df32:	f7fe ffba 	bl	800ceaa <strncmp>
 800df36:	4606      	mov	r6, r0
 800df38:	2800      	cmp	r0, #0
 800df3a:	d169      	bne.n	800e010 <__gethex+0x11c>
 800df3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800df40:	465d      	mov	r5, fp
 800df42:	f7ff ffc1 	bl	800dec8 <__hexdig_fun>
 800df46:	2800      	cmp	r0, #0
 800df48:	d064      	beq.n	800e014 <__gethex+0x120>
 800df4a:	465a      	mov	r2, fp
 800df4c:	7810      	ldrb	r0, [r2, #0]
 800df4e:	2830      	cmp	r0, #48	; 0x30
 800df50:	4690      	mov	r8, r2
 800df52:	f102 0201 	add.w	r2, r2, #1
 800df56:	d0f9      	beq.n	800df4c <__gethex+0x58>
 800df58:	f7ff ffb6 	bl	800dec8 <__hexdig_fun>
 800df5c:	2301      	movs	r3, #1
 800df5e:	fab0 f480 	clz	r4, r0
 800df62:	0964      	lsrs	r4, r4, #5
 800df64:	465e      	mov	r6, fp
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	4642      	mov	r2, r8
 800df6a:	4615      	mov	r5, r2
 800df6c:	3201      	adds	r2, #1
 800df6e:	7828      	ldrb	r0, [r5, #0]
 800df70:	f7ff ffaa 	bl	800dec8 <__hexdig_fun>
 800df74:	2800      	cmp	r0, #0
 800df76:	d1f8      	bne.n	800df6a <__gethex+0x76>
 800df78:	4994      	ldr	r1, [pc, #592]	; (800e1cc <__gethex+0x2d8>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	4628      	mov	r0, r5
 800df7e:	f7fe ff94 	bl	800ceaa <strncmp>
 800df82:	b978      	cbnz	r0, 800dfa4 <__gethex+0xb0>
 800df84:	b946      	cbnz	r6, 800df98 <__gethex+0xa4>
 800df86:	1c6e      	adds	r6, r5, #1
 800df88:	4632      	mov	r2, r6
 800df8a:	4615      	mov	r5, r2
 800df8c:	3201      	adds	r2, #1
 800df8e:	7828      	ldrb	r0, [r5, #0]
 800df90:	f7ff ff9a 	bl	800dec8 <__hexdig_fun>
 800df94:	2800      	cmp	r0, #0
 800df96:	d1f8      	bne.n	800df8a <__gethex+0x96>
 800df98:	1b73      	subs	r3, r6, r5
 800df9a:	009e      	lsls	r6, r3, #2
 800df9c:	e004      	b.n	800dfa8 <__gethex+0xb4>
 800df9e:	2400      	movs	r4, #0
 800dfa0:	4626      	mov	r6, r4
 800dfa2:	e7e1      	b.n	800df68 <__gethex+0x74>
 800dfa4:	2e00      	cmp	r6, #0
 800dfa6:	d1f7      	bne.n	800df98 <__gethex+0xa4>
 800dfa8:	782b      	ldrb	r3, [r5, #0]
 800dfaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dfae:	2b50      	cmp	r3, #80	; 0x50
 800dfb0:	d13d      	bne.n	800e02e <__gethex+0x13a>
 800dfb2:	786b      	ldrb	r3, [r5, #1]
 800dfb4:	2b2b      	cmp	r3, #43	; 0x2b
 800dfb6:	d02f      	beq.n	800e018 <__gethex+0x124>
 800dfb8:	2b2d      	cmp	r3, #45	; 0x2d
 800dfba:	d031      	beq.n	800e020 <__gethex+0x12c>
 800dfbc:	1c69      	adds	r1, r5, #1
 800dfbe:	f04f 0b00 	mov.w	fp, #0
 800dfc2:	7808      	ldrb	r0, [r1, #0]
 800dfc4:	f7ff ff80 	bl	800dec8 <__hexdig_fun>
 800dfc8:	1e42      	subs	r2, r0, #1
 800dfca:	b2d2      	uxtb	r2, r2
 800dfcc:	2a18      	cmp	r2, #24
 800dfce:	d82e      	bhi.n	800e02e <__gethex+0x13a>
 800dfd0:	f1a0 0210 	sub.w	r2, r0, #16
 800dfd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dfd8:	f7ff ff76 	bl	800dec8 <__hexdig_fun>
 800dfdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dfe0:	fa5f fc8c 	uxtb.w	ip, ip
 800dfe4:	f1bc 0f18 	cmp.w	ip, #24
 800dfe8:	d91d      	bls.n	800e026 <__gethex+0x132>
 800dfea:	f1bb 0f00 	cmp.w	fp, #0
 800dfee:	d000      	beq.n	800dff2 <__gethex+0xfe>
 800dff0:	4252      	negs	r2, r2
 800dff2:	4416      	add	r6, r2
 800dff4:	f8ca 1000 	str.w	r1, [sl]
 800dff8:	b1dc      	cbz	r4, 800e032 <__gethex+0x13e>
 800dffa:	9b01      	ldr	r3, [sp, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	bf14      	ite	ne
 800e000:	f04f 0800 	movne.w	r8, #0
 800e004:	f04f 0806 	moveq.w	r8, #6
 800e008:	4640      	mov	r0, r8
 800e00a:	b005      	add	sp, #20
 800e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e010:	4645      	mov	r5, r8
 800e012:	4626      	mov	r6, r4
 800e014:	2401      	movs	r4, #1
 800e016:	e7c7      	b.n	800dfa8 <__gethex+0xb4>
 800e018:	f04f 0b00 	mov.w	fp, #0
 800e01c:	1ca9      	adds	r1, r5, #2
 800e01e:	e7d0      	b.n	800dfc2 <__gethex+0xce>
 800e020:	f04f 0b01 	mov.w	fp, #1
 800e024:	e7fa      	b.n	800e01c <__gethex+0x128>
 800e026:	230a      	movs	r3, #10
 800e028:	fb03 0002 	mla	r0, r3, r2, r0
 800e02c:	e7d0      	b.n	800dfd0 <__gethex+0xdc>
 800e02e:	4629      	mov	r1, r5
 800e030:	e7e0      	b.n	800dff4 <__gethex+0x100>
 800e032:	eba5 0308 	sub.w	r3, r5, r8
 800e036:	3b01      	subs	r3, #1
 800e038:	4621      	mov	r1, r4
 800e03a:	2b07      	cmp	r3, #7
 800e03c:	dc0a      	bgt.n	800e054 <__gethex+0x160>
 800e03e:	4648      	mov	r0, r9
 800e040:	f000 fb0e 	bl	800e660 <_Balloc>
 800e044:	4604      	mov	r4, r0
 800e046:	b940      	cbnz	r0, 800e05a <__gethex+0x166>
 800e048:	4b61      	ldr	r3, [pc, #388]	; (800e1d0 <__gethex+0x2dc>)
 800e04a:	4602      	mov	r2, r0
 800e04c:	21e4      	movs	r1, #228	; 0xe4
 800e04e:	4861      	ldr	r0, [pc, #388]	; (800e1d4 <__gethex+0x2e0>)
 800e050:	f001 f9f0 	bl	800f434 <__assert_func>
 800e054:	3101      	adds	r1, #1
 800e056:	105b      	asrs	r3, r3, #1
 800e058:	e7ef      	b.n	800e03a <__gethex+0x146>
 800e05a:	f100 0a14 	add.w	sl, r0, #20
 800e05e:	2300      	movs	r3, #0
 800e060:	495a      	ldr	r1, [pc, #360]	; (800e1cc <__gethex+0x2d8>)
 800e062:	f8cd a004 	str.w	sl, [sp, #4]
 800e066:	469b      	mov	fp, r3
 800e068:	45a8      	cmp	r8, r5
 800e06a:	d342      	bcc.n	800e0f2 <__gethex+0x1fe>
 800e06c:	9801      	ldr	r0, [sp, #4]
 800e06e:	f840 bb04 	str.w	fp, [r0], #4
 800e072:	eba0 000a 	sub.w	r0, r0, sl
 800e076:	1080      	asrs	r0, r0, #2
 800e078:	6120      	str	r0, [r4, #16]
 800e07a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e07e:	4658      	mov	r0, fp
 800e080:	f000 fbe0 	bl	800e844 <__hi0bits>
 800e084:	683d      	ldr	r5, [r7, #0]
 800e086:	eba8 0000 	sub.w	r0, r8, r0
 800e08a:	42a8      	cmp	r0, r5
 800e08c:	dd59      	ble.n	800e142 <__gethex+0x24e>
 800e08e:	eba0 0805 	sub.w	r8, r0, r5
 800e092:	4641      	mov	r1, r8
 800e094:	4620      	mov	r0, r4
 800e096:	f000 ff6f 	bl	800ef78 <__any_on>
 800e09a:	4683      	mov	fp, r0
 800e09c:	b1b8      	cbz	r0, 800e0ce <__gethex+0x1da>
 800e09e:	f108 33ff 	add.w	r3, r8, #4294967295
 800e0a2:	1159      	asrs	r1, r3, #5
 800e0a4:	f003 021f 	and.w	r2, r3, #31
 800e0a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e0ac:	f04f 0b01 	mov.w	fp, #1
 800e0b0:	fa0b f202 	lsl.w	r2, fp, r2
 800e0b4:	420a      	tst	r2, r1
 800e0b6:	d00a      	beq.n	800e0ce <__gethex+0x1da>
 800e0b8:	455b      	cmp	r3, fp
 800e0ba:	dd06      	ble.n	800e0ca <__gethex+0x1d6>
 800e0bc:	f1a8 0102 	sub.w	r1, r8, #2
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f000 ff59 	bl	800ef78 <__any_on>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d138      	bne.n	800e13c <__gethex+0x248>
 800e0ca:	f04f 0b02 	mov.w	fp, #2
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f7ff fea7 	bl	800de24 <rshift>
 800e0d6:	4446      	add	r6, r8
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	42b3      	cmp	r3, r6
 800e0dc:	da41      	bge.n	800e162 <__gethex+0x26e>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4648      	mov	r0, r9
 800e0e2:	f000 fafd 	bl	800e6e0 <_Bfree>
 800e0e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e0f0:	e78a      	b.n	800e008 <__gethex+0x114>
 800e0f2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e0f6:	2a2e      	cmp	r2, #46	; 0x2e
 800e0f8:	d014      	beq.n	800e124 <__gethex+0x230>
 800e0fa:	2b20      	cmp	r3, #32
 800e0fc:	d106      	bne.n	800e10c <__gethex+0x218>
 800e0fe:	9b01      	ldr	r3, [sp, #4]
 800e100:	f843 bb04 	str.w	fp, [r3], #4
 800e104:	f04f 0b00 	mov.w	fp, #0
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	465b      	mov	r3, fp
 800e10c:	7828      	ldrb	r0, [r5, #0]
 800e10e:	9303      	str	r3, [sp, #12]
 800e110:	f7ff feda 	bl	800dec8 <__hexdig_fun>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	f000 000f 	and.w	r0, r0, #15
 800e11a:	4098      	lsls	r0, r3
 800e11c:	ea4b 0b00 	orr.w	fp, fp, r0
 800e120:	3304      	adds	r3, #4
 800e122:	e7a1      	b.n	800e068 <__gethex+0x174>
 800e124:	45a8      	cmp	r8, r5
 800e126:	d8e8      	bhi.n	800e0fa <__gethex+0x206>
 800e128:	2201      	movs	r2, #1
 800e12a:	4628      	mov	r0, r5
 800e12c:	9303      	str	r3, [sp, #12]
 800e12e:	f7fe febc 	bl	800ceaa <strncmp>
 800e132:	4926      	ldr	r1, [pc, #152]	; (800e1cc <__gethex+0x2d8>)
 800e134:	9b03      	ldr	r3, [sp, #12]
 800e136:	2800      	cmp	r0, #0
 800e138:	d1df      	bne.n	800e0fa <__gethex+0x206>
 800e13a:	e795      	b.n	800e068 <__gethex+0x174>
 800e13c:	f04f 0b03 	mov.w	fp, #3
 800e140:	e7c5      	b.n	800e0ce <__gethex+0x1da>
 800e142:	da0b      	bge.n	800e15c <__gethex+0x268>
 800e144:	eba5 0800 	sub.w	r8, r5, r0
 800e148:	4621      	mov	r1, r4
 800e14a:	4642      	mov	r2, r8
 800e14c:	4648      	mov	r0, r9
 800e14e:	f000 fce1 	bl	800eb14 <__lshift>
 800e152:	eba6 0608 	sub.w	r6, r6, r8
 800e156:	4604      	mov	r4, r0
 800e158:	f100 0a14 	add.w	sl, r0, #20
 800e15c:	f04f 0b00 	mov.w	fp, #0
 800e160:	e7ba      	b.n	800e0d8 <__gethex+0x1e4>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	42b3      	cmp	r3, r6
 800e166:	dd73      	ble.n	800e250 <__gethex+0x35c>
 800e168:	1b9e      	subs	r6, r3, r6
 800e16a:	42b5      	cmp	r5, r6
 800e16c:	dc34      	bgt.n	800e1d8 <__gethex+0x2e4>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b02      	cmp	r3, #2
 800e172:	d023      	beq.n	800e1bc <__gethex+0x2c8>
 800e174:	2b03      	cmp	r3, #3
 800e176:	d025      	beq.n	800e1c4 <__gethex+0x2d0>
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d115      	bne.n	800e1a8 <__gethex+0x2b4>
 800e17c:	42b5      	cmp	r5, r6
 800e17e:	d113      	bne.n	800e1a8 <__gethex+0x2b4>
 800e180:	2d01      	cmp	r5, #1
 800e182:	d10b      	bne.n	800e19c <__gethex+0x2a8>
 800e184:	9a02      	ldr	r2, [sp, #8]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	2301      	movs	r3, #1
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	f8ca 3000 	str.w	r3, [sl]
 800e192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e194:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e198:	601c      	str	r4, [r3, #0]
 800e19a:	e735      	b.n	800e008 <__gethex+0x114>
 800e19c:	1e69      	subs	r1, r5, #1
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 feea 	bl	800ef78 <__any_on>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d1ed      	bne.n	800e184 <__gethex+0x290>
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4648      	mov	r0, r9
 800e1ac:	f000 fa98 	bl	800e6e0 <_Bfree>
 800e1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e1ba:	e725      	b.n	800e008 <__gethex+0x114>
 800e1bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1f2      	bne.n	800e1a8 <__gethex+0x2b4>
 800e1c2:	e7df      	b.n	800e184 <__gethex+0x290>
 800e1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1dc      	bne.n	800e184 <__gethex+0x290>
 800e1ca:	e7ed      	b.n	800e1a8 <__gethex+0x2b4>
 800e1cc:	0800fc78 	.word	0x0800fc78
 800e1d0:	0800fd88 	.word	0x0800fd88
 800e1d4:	0800fd99 	.word	0x0800fd99
 800e1d8:	f106 38ff 	add.w	r8, r6, #4294967295
 800e1dc:	f1bb 0f00 	cmp.w	fp, #0
 800e1e0:	d133      	bne.n	800e24a <__gethex+0x356>
 800e1e2:	f1b8 0f00 	cmp.w	r8, #0
 800e1e6:	d004      	beq.n	800e1f2 <__gethex+0x2fe>
 800e1e8:	4641      	mov	r1, r8
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 fec4 	bl	800ef78 <__any_on>
 800e1f0:	4683      	mov	fp, r0
 800e1f2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e1fc:	f008 081f 	and.w	r8, r8, #31
 800e200:	fa03 f308 	lsl.w	r3, r3, r8
 800e204:	4213      	tst	r3, r2
 800e206:	4631      	mov	r1, r6
 800e208:	4620      	mov	r0, r4
 800e20a:	bf18      	it	ne
 800e20c:	f04b 0b02 	orrne.w	fp, fp, #2
 800e210:	1bad      	subs	r5, r5, r6
 800e212:	f7ff fe07 	bl	800de24 <rshift>
 800e216:	687e      	ldr	r6, [r7, #4]
 800e218:	f04f 0802 	mov.w	r8, #2
 800e21c:	f1bb 0f00 	cmp.w	fp, #0
 800e220:	d04a      	beq.n	800e2b8 <__gethex+0x3c4>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d016      	beq.n	800e256 <__gethex+0x362>
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d018      	beq.n	800e25e <__gethex+0x36a>
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d109      	bne.n	800e244 <__gethex+0x350>
 800e230:	f01b 0f02 	tst.w	fp, #2
 800e234:	d006      	beq.n	800e244 <__gethex+0x350>
 800e236:	f8da 3000 	ldr.w	r3, [sl]
 800e23a:	ea4b 0b03 	orr.w	fp, fp, r3
 800e23e:	f01b 0f01 	tst.w	fp, #1
 800e242:	d10f      	bne.n	800e264 <__gethex+0x370>
 800e244:	f048 0810 	orr.w	r8, r8, #16
 800e248:	e036      	b.n	800e2b8 <__gethex+0x3c4>
 800e24a:	f04f 0b01 	mov.w	fp, #1
 800e24e:	e7d0      	b.n	800e1f2 <__gethex+0x2fe>
 800e250:	f04f 0801 	mov.w	r8, #1
 800e254:	e7e2      	b.n	800e21c <__gethex+0x328>
 800e256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e258:	f1c3 0301 	rsb	r3, r3, #1
 800e25c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e25e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e260:	2b00      	cmp	r3, #0
 800e262:	d0ef      	beq.n	800e244 <__gethex+0x350>
 800e264:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e268:	f104 0214 	add.w	r2, r4, #20
 800e26c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e276:	2300      	movs	r3, #0
 800e278:	4694      	mov	ip, r2
 800e27a:	f852 1b04 	ldr.w	r1, [r2], #4
 800e27e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e282:	d01e      	beq.n	800e2c2 <__gethex+0x3ce>
 800e284:	3101      	adds	r1, #1
 800e286:	f8cc 1000 	str.w	r1, [ip]
 800e28a:	f1b8 0f02 	cmp.w	r8, #2
 800e28e:	f104 0214 	add.w	r2, r4, #20
 800e292:	d13d      	bne.n	800e310 <__gethex+0x41c>
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	3b01      	subs	r3, #1
 800e298:	42ab      	cmp	r3, r5
 800e29a:	d10b      	bne.n	800e2b4 <__gethex+0x3c0>
 800e29c:	1169      	asrs	r1, r5, #5
 800e29e:	2301      	movs	r3, #1
 800e2a0:	f005 051f 	and.w	r5, r5, #31
 800e2a4:	fa03 f505 	lsl.w	r5, r3, r5
 800e2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2ac:	421d      	tst	r5, r3
 800e2ae:	bf18      	it	ne
 800e2b0:	f04f 0801 	movne.w	r8, #1
 800e2b4:	f048 0820 	orr.w	r8, r8, #32
 800e2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ba:	601c      	str	r4, [r3, #0]
 800e2bc:	9b02      	ldr	r3, [sp, #8]
 800e2be:	601e      	str	r6, [r3, #0]
 800e2c0:	e6a2      	b.n	800e008 <__gethex+0x114>
 800e2c2:	4290      	cmp	r0, r2
 800e2c4:	f842 3c04 	str.w	r3, [r2, #-4]
 800e2c8:	d8d6      	bhi.n	800e278 <__gethex+0x384>
 800e2ca:	68a2      	ldr	r2, [r4, #8]
 800e2cc:	4593      	cmp	fp, r2
 800e2ce:	db17      	blt.n	800e300 <__gethex+0x40c>
 800e2d0:	6861      	ldr	r1, [r4, #4]
 800e2d2:	4648      	mov	r0, r9
 800e2d4:	3101      	adds	r1, #1
 800e2d6:	f000 f9c3 	bl	800e660 <_Balloc>
 800e2da:	4682      	mov	sl, r0
 800e2dc:	b918      	cbnz	r0, 800e2e6 <__gethex+0x3f2>
 800e2de:	4b1b      	ldr	r3, [pc, #108]	; (800e34c <__gethex+0x458>)
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	2184      	movs	r1, #132	; 0x84
 800e2e4:	e6b3      	b.n	800e04e <__gethex+0x15a>
 800e2e6:	6922      	ldr	r2, [r4, #16]
 800e2e8:	3202      	adds	r2, #2
 800e2ea:	f104 010c 	add.w	r1, r4, #12
 800e2ee:	0092      	lsls	r2, r2, #2
 800e2f0:	300c      	adds	r0, #12
 800e2f2:	f7fe feb9 	bl	800d068 <memcpy>
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4648      	mov	r0, r9
 800e2fa:	f000 f9f1 	bl	800e6e0 <_Bfree>
 800e2fe:	4654      	mov	r4, sl
 800e300:	6922      	ldr	r2, [r4, #16]
 800e302:	1c51      	adds	r1, r2, #1
 800e304:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e308:	6121      	str	r1, [r4, #16]
 800e30a:	2101      	movs	r1, #1
 800e30c:	6151      	str	r1, [r2, #20]
 800e30e:	e7bc      	b.n	800e28a <__gethex+0x396>
 800e310:	6921      	ldr	r1, [r4, #16]
 800e312:	4559      	cmp	r1, fp
 800e314:	dd0b      	ble.n	800e32e <__gethex+0x43a>
 800e316:	2101      	movs	r1, #1
 800e318:	4620      	mov	r0, r4
 800e31a:	f7ff fd83 	bl	800de24 <rshift>
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	3601      	adds	r6, #1
 800e322:	42b3      	cmp	r3, r6
 800e324:	f6ff aedb 	blt.w	800e0de <__gethex+0x1ea>
 800e328:	f04f 0801 	mov.w	r8, #1
 800e32c:	e7c2      	b.n	800e2b4 <__gethex+0x3c0>
 800e32e:	f015 051f 	ands.w	r5, r5, #31
 800e332:	d0f9      	beq.n	800e328 <__gethex+0x434>
 800e334:	9b01      	ldr	r3, [sp, #4]
 800e336:	441a      	add	r2, r3
 800e338:	f1c5 0520 	rsb	r5, r5, #32
 800e33c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e340:	f000 fa80 	bl	800e844 <__hi0bits>
 800e344:	42a8      	cmp	r0, r5
 800e346:	dbe6      	blt.n	800e316 <__gethex+0x422>
 800e348:	e7ee      	b.n	800e328 <__gethex+0x434>
 800e34a:	bf00      	nop
 800e34c:	0800fd88 	.word	0x0800fd88

0800e350 <L_shift>:
 800e350:	f1c2 0208 	rsb	r2, r2, #8
 800e354:	0092      	lsls	r2, r2, #2
 800e356:	b570      	push	{r4, r5, r6, lr}
 800e358:	f1c2 0620 	rsb	r6, r2, #32
 800e35c:	6843      	ldr	r3, [r0, #4]
 800e35e:	6804      	ldr	r4, [r0, #0]
 800e360:	fa03 f506 	lsl.w	r5, r3, r6
 800e364:	432c      	orrs	r4, r5
 800e366:	40d3      	lsrs	r3, r2
 800e368:	6004      	str	r4, [r0, #0]
 800e36a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e36e:	4288      	cmp	r0, r1
 800e370:	d3f4      	bcc.n	800e35c <L_shift+0xc>
 800e372:	bd70      	pop	{r4, r5, r6, pc}

0800e374 <__match>:
 800e374:	b530      	push	{r4, r5, lr}
 800e376:	6803      	ldr	r3, [r0, #0]
 800e378:	3301      	adds	r3, #1
 800e37a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e37e:	b914      	cbnz	r4, 800e386 <__match+0x12>
 800e380:	6003      	str	r3, [r0, #0]
 800e382:	2001      	movs	r0, #1
 800e384:	bd30      	pop	{r4, r5, pc}
 800e386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e38a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e38e:	2d19      	cmp	r5, #25
 800e390:	bf98      	it	ls
 800e392:	3220      	addls	r2, #32
 800e394:	42a2      	cmp	r2, r4
 800e396:	d0f0      	beq.n	800e37a <__match+0x6>
 800e398:	2000      	movs	r0, #0
 800e39a:	e7f3      	b.n	800e384 <__match+0x10>

0800e39c <__hexnan>:
 800e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a0:	680b      	ldr	r3, [r1, #0]
 800e3a2:	6801      	ldr	r1, [r0, #0]
 800e3a4:	115e      	asrs	r6, r3, #5
 800e3a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e3aa:	f013 031f 	ands.w	r3, r3, #31
 800e3ae:	b087      	sub	sp, #28
 800e3b0:	bf18      	it	ne
 800e3b2:	3604      	addne	r6, #4
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	1f37      	subs	r7, r6, #4
 800e3b8:	4682      	mov	sl, r0
 800e3ba:	4690      	mov	r8, r2
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	f846 5c04 	str.w	r5, [r6, #-4]
 800e3c2:	46b9      	mov	r9, r7
 800e3c4:	463c      	mov	r4, r7
 800e3c6:	9502      	str	r5, [sp, #8]
 800e3c8:	46ab      	mov	fp, r5
 800e3ca:	784a      	ldrb	r2, [r1, #1]
 800e3cc:	1c4b      	adds	r3, r1, #1
 800e3ce:	9303      	str	r3, [sp, #12]
 800e3d0:	b342      	cbz	r2, 800e424 <__hexnan+0x88>
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	9105      	str	r1, [sp, #20]
 800e3d6:	9204      	str	r2, [sp, #16]
 800e3d8:	f7ff fd76 	bl	800dec8 <__hexdig_fun>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d14f      	bne.n	800e480 <__hexnan+0xe4>
 800e3e0:	9a04      	ldr	r2, [sp, #16]
 800e3e2:	9905      	ldr	r1, [sp, #20]
 800e3e4:	2a20      	cmp	r2, #32
 800e3e6:	d818      	bhi.n	800e41a <__hexnan+0x7e>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	459b      	cmp	fp, r3
 800e3ec:	dd13      	ble.n	800e416 <__hexnan+0x7a>
 800e3ee:	454c      	cmp	r4, r9
 800e3f0:	d206      	bcs.n	800e400 <__hexnan+0x64>
 800e3f2:	2d07      	cmp	r5, #7
 800e3f4:	dc04      	bgt.n	800e400 <__hexnan+0x64>
 800e3f6:	462a      	mov	r2, r5
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7ff ffa8 	bl	800e350 <L_shift>
 800e400:	4544      	cmp	r4, r8
 800e402:	d950      	bls.n	800e4a6 <__hexnan+0x10a>
 800e404:	2300      	movs	r3, #0
 800e406:	f1a4 0904 	sub.w	r9, r4, #4
 800e40a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e40e:	f8cd b008 	str.w	fp, [sp, #8]
 800e412:	464c      	mov	r4, r9
 800e414:	461d      	mov	r5, r3
 800e416:	9903      	ldr	r1, [sp, #12]
 800e418:	e7d7      	b.n	800e3ca <__hexnan+0x2e>
 800e41a:	2a29      	cmp	r2, #41	; 0x29
 800e41c:	d155      	bne.n	800e4ca <__hexnan+0x12e>
 800e41e:	3102      	adds	r1, #2
 800e420:	f8ca 1000 	str.w	r1, [sl]
 800e424:	f1bb 0f00 	cmp.w	fp, #0
 800e428:	d04f      	beq.n	800e4ca <__hexnan+0x12e>
 800e42a:	454c      	cmp	r4, r9
 800e42c:	d206      	bcs.n	800e43c <__hexnan+0xa0>
 800e42e:	2d07      	cmp	r5, #7
 800e430:	dc04      	bgt.n	800e43c <__hexnan+0xa0>
 800e432:	462a      	mov	r2, r5
 800e434:	4649      	mov	r1, r9
 800e436:	4620      	mov	r0, r4
 800e438:	f7ff ff8a 	bl	800e350 <L_shift>
 800e43c:	4544      	cmp	r4, r8
 800e43e:	d934      	bls.n	800e4aa <__hexnan+0x10e>
 800e440:	f1a8 0204 	sub.w	r2, r8, #4
 800e444:	4623      	mov	r3, r4
 800e446:	f853 1b04 	ldr.w	r1, [r3], #4
 800e44a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e44e:	429f      	cmp	r7, r3
 800e450:	d2f9      	bcs.n	800e446 <__hexnan+0xaa>
 800e452:	1b3b      	subs	r3, r7, r4
 800e454:	f023 0303 	bic.w	r3, r3, #3
 800e458:	3304      	adds	r3, #4
 800e45a:	3e03      	subs	r6, #3
 800e45c:	3401      	adds	r4, #1
 800e45e:	42a6      	cmp	r6, r4
 800e460:	bf38      	it	cc
 800e462:	2304      	movcc	r3, #4
 800e464:	4443      	add	r3, r8
 800e466:	2200      	movs	r2, #0
 800e468:	f843 2b04 	str.w	r2, [r3], #4
 800e46c:	429f      	cmp	r7, r3
 800e46e:	d2fb      	bcs.n	800e468 <__hexnan+0xcc>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	b91b      	cbnz	r3, 800e47c <__hexnan+0xe0>
 800e474:	4547      	cmp	r7, r8
 800e476:	d126      	bne.n	800e4c6 <__hexnan+0x12a>
 800e478:	2301      	movs	r3, #1
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	2005      	movs	r0, #5
 800e47e:	e025      	b.n	800e4cc <__hexnan+0x130>
 800e480:	3501      	adds	r5, #1
 800e482:	2d08      	cmp	r5, #8
 800e484:	f10b 0b01 	add.w	fp, fp, #1
 800e488:	dd06      	ble.n	800e498 <__hexnan+0xfc>
 800e48a:	4544      	cmp	r4, r8
 800e48c:	d9c3      	bls.n	800e416 <__hexnan+0x7a>
 800e48e:	2300      	movs	r3, #0
 800e490:	f844 3c04 	str.w	r3, [r4, #-4]
 800e494:	2501      	movs	r5, #1
 800e496:	3c04      	subs	r4, #4
 800e498:	6822      	ldr	r2, [r4, #0]
 800e49a:	f000 000f 	and.w	r0, r0, #15
 800e49e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4a2:	6020      	str	r0, [r4, #0]
 800e4a4:	e7b7      	b.n	800e416 <__hexnan+0x7a>
 800e4a6:	2508      	movs	r5, #8
 800e4a8:	e7b5      	b.n	800e416 <__hexnan+0x7a>
 800e4aa:	9b01      	ldr	r3, [sp, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d0df      	beq.n	800e470 <__hexnan+0xd4>
 800e4b0:	f1c3 0320 	rsb	r3, r3, #32
 800e4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b8:	40da      	lsrs	r2, r3
 800e4ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e4be:	4013      	ands	r3, r2
 800e4c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e4c4:	e7d4      	b.n	800e470 <__hexnan+0xd4>
 800e4c6:	3f04      	subs	r7, #4
 800e4c8:	e7d2      	b.n	800e470 <__hexnan+0xd4>
 800e4ca:	2004      	movs	r0, #4
 800e4cc:	b007      	add	sp, #28
 800e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e4d4 <malloc>:
 800e4d4:	4b02      	ldr	r3, [pc, #8]	; (800e4e0 <malloc+0xc>)
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	f000 b823 	b.w	800e524 <_malloc_r>
 800e4de:	bf00      	nop
 800e4e0:	200001d4 	.word	0x200001d4

0800e4e4 <sbrk_aligned>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	4e0e      	ldr	r6, [pc, #56]	; (800e520 <sbrk_aligned+0x3c>)
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	6831      	ldr	r1, [r6, #0]
 800e4ec:	4605      	mov	r5, r0
 800e4ee:	b911      	cbnz	r1, 800e4f6 <sbrk_aligned+0x12>
 800e4f0:	f000 ff90 	bl	800f414 <_sbrk_r>
 800e4f4:	6030      	str	r0, [r6, #0]
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 ff8b 	bl	800f414 <_sbrk_r>
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	d00a      	beq.n	800e518 <sbrk_aligned+0x34>
 800e502:	1cc4      	adds	r4, r0, #3
 800e504:	f024 0403 	bic.w	r4, r4, #3
 800e508:	42a0      	cmp	r0, r4
 800e50a:	d007      	beq.n	800e51c <sbrk_aligned+0x38>
 800e50c:	1a21      	subs	r1, r4, r0
 800e50e:	4628      	mov	r0, r5
 800e510:	f000 ff80 	bl	800f414 <_sbrk_r>
 800e514:	3001      	adds	r0, #1
 800e516:	d101      	bne.n	800e51c <sbrk_aligned+0x38>
 800e518:	f04f 34ff 	mov.w	r4, #4294967295
 800e51c:	4620      	mov	r0, r4
 800e51e:	bd70      	pop	{r4, r5, r6, pc}
 800e520:	20003184 	.word	0x20003184

0800e524 <_malloc_r>:
 800e524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e528:	1ccd      	adds	r5, r1, #3
 800e52a:	f025 0503 	bic.w	r5, r5, #3
 800e52e:	3508      	adds	r5, #8
 800e530:	2d0c      	cmp	r5, #12
 800e532:	bf38      	it	cc
 800e534:	250c      	movcc	r5, #12
 800e536:	2d00      	cmp	r5, #0
 800e538:	4607      	mov	r7, r0
 800e53a:	db01      	blt.n	800e540 <_malloc_r+0x1c>
 800e53c:	42a9      	cmp	r1, r5
 800e53e:	d905      	bls.n	800e54c <_malloc_r+0x28>
 800e540:	230c      	movs	r3, #12
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	2600      	movs	r6, #0
 800e546:	4630      	mov	r0, r6
 800e548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e54c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e620 <_malloc_r+0xfc>
 800e550:	f000 f87a 	bl	800e648 <__malloc_lock>
 800e554:	f8d8 3000 	ldr.w	r3, [r8]
 800e558:	461c      	mov	r4, r3
 800e55a:	bb5c      	cbnz	r4, 800e5b4 <_malloc_r+0x90>
 800e55c:	4629      	mov	r1, r5
 800e55e:	4638      	mov	r0, r7
 800e560:	f7ff ffc0 	bl	800e4e4 <sbrk_aligned>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	4604      	mov	r4, r0
 800e568:	d155      	bne.n	800e616 <_malloc_r+0xf2>
 800e56a:	f8d8 4000 	ldr.w	r4, [r8]
 800e56e:	4626      	mov	r6, r4
 800e570:	2e00      	cmp	r6, #0
 800e572:	d145      	bne.n	800e600 <_malloc_r+0xdc>
 800e574:	2c00      	cmp	r4, #0
 800e576:	d048      	beq.n	800e60a <_malloc_r+0xe6>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	4631      	mov	r1, r6
 800e57c:	4638      	mov	r0, r7
 800e57e:	eb04 0903 	add.w	r9, r4, r3
 800e582:	f000 ff47 	bl	800f414 <_sbrk_r>
 800e586:	4581      	cmp	r9, r0
 800e588:	d13f      	bne.n	800e60a <_malloc_r+0xe6>
 800e58a:	6821      	ldr	r1, [r4, #0]
 800e58c:	1a6d      	subs	r5, r5, r1
 800e58e:	4629      	mov	r1, r5
 800e590:	4638      	mov	r0, r7
 800e592:	f7ff ffa7 	bl	800e4e4 <sbrk_aligned>
 800e596:	3001      	adds	r0, #1
 800e598:	d037      	beq.n	800e60a <_malloc_r+0xe6>
 800e59a:	6823      	ldr	r3, [r4, #0]
 800e59c:	442b      	add	r3, r5
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d038      	beq.n	800e61a <_malloc_r+0xf6>
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	42a2      	cmp	r2, r4
 800e5ac:	d12b      	bne.n	800e606 <_malloc_r+0xe2>
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	605a      	str	r2, [r3, #4]
 800e5b2:	e00f      	b.n	800e5d4 <_malloc_r+0xb0>
 800e5b4:	6822      	ldr	r2, [r4, #0]
 800e5b6:	1b52      	subs	r2, r2, r5
 800e5b8:	d41f      	bmi.n	800e5fa <_malloc_r+0xd6>
 800e5ba:	2a0b      	cmp	r2, #11
 800e5bc:	d917      	bls.n	800e5ee <_malloc_r+0xca>
 800e5be:	1961      	adds	r1, r4, r5
 800e5c0:	42a3      	cmp	r3, r4
 800e5c2:	6025      	str	r5, [r4, #0]
 800e5c4:	bf18      	it	ne
 800e5c6:	6059      	strne	r1, [r3, #4]
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	bf08      	it	eq
 800e5cc:	f8c8 1000 	streq.w	r1, [r8]
 800e5d0:	5162      	str	r2, [r4, r5]
 800e5d2:	604b      	str	r3, [r1, #4]
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	f104 060b 	add.w	r6, r4, #11
 800e5da:	f000 f83b 	bl	800e654 <__malloc_unlock>
 800e5de:	f026 0607 	bic.w	r6, r6, #7
 800e5e2:	1d23      	adds	r3, r4, #4
 800e5e4:	1af2      	subs	r2, r6, r3
 800e5e6:	d0ae      	beq.n	800e546 <_malloc_r+0x22>
 800e5e8:	1b9b      	subs	r3, r3, r6
 800e5ea:	50a3      	str	r3, [r4, r2]
 800e5ec:	e7ab      	b.n	800e546 <_malloc_r+0x22>
 800e5ee:	42a3      	cmp	r3, r4
 800e5f0:	6862      	ldr	r2, [r4, #4]
 800e5f2:	d1dd      	bne.n	800e5b0 <_malloc_r+0x8c>
 800e5f4:	f8c8 2000 	str.w	r2, [r8]
 800e5f8:	e7ec      	b.n	800e5d4 <_malloc_r+0xb0>
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	6864      	ldr	r4, [r4, #4]
 800e5fe:	e7ac      	b.n	800e55a <_malloc_r+0x36>
 800e600:	4634      	mov	r4, r6
 800e602:	6876      	ldr	r6, [r6, #4]
 800e604:	e7b4      	b.n	800e570 <_malloc_r+0x4c>
 800e606:	4613      	mov	r3, r2
 800e608:	e7cc      	b.n	800e5a4 <_malloc_r+0x80>
 800e60a:	230c      	movs	r3, #12
 800e60c:	603b      	str	r3, [r7, #0]
 800e60e:	4638      	mov	r0, r7
 800e610:	f000 f820 	bl	800e654 <__malloc_unlock>
 800e614:	e797      	b.n	800e546 <_malloc_r+0x22>
 800e616:	6025      	str	r5, [r4, #0]
 800e618:	e7dc      	b.n	800e5d4 <_malloc_r+0xb0>
 800e61a:	605b      	str	r3, [r3, #4]
 800e61c:	deff      	udf	#255	; 0xff
 800e61e:	bf00      	nop
 800e620:	20003180 	.word	0x20003180

0800e624 <__ascii_mbtowc>:
 800e624:	b082      	sub	sp, #8
 800e626:	b901      	cbnz	r1, 800e62a <__ascii_mbtowc+0x6>
 800e628:	a901      	add	r1, sp, #4
 800e62a:	b142      	cbz	r2, 800e63e <__ascii_mbtowc+0x1a>
 800e62c:	b14b      	cbz	r3, 800e642 <__ascii_mbtowc+0x1e>
 800e62e:	7813      	ldrb	r3, [r2, #0]
 800e630:	600b      	str	r3, [r1, #0]
 800e632:	7812      	ldrb	r2, [r2, #0]
 800e634:	1e10      	subs	r0, r2, #0
 800e636:	bf18      	it	ne
 800e638:	2001      	movne	r0, #1
 800e63a:	b002      	add	sp, #8
 800e63c:	4770      	bx	lr
 800e63e:	4610      	mov	r0, r2
 800e640:	e7fb      	b.n	800e63a <__ascii_mbtowc+0x16>
 800e642:	f06f 0001 	mvn.w	r0, #1
 800e646:	e7f8      	b.n	800e63a <__ascii_mbtowc+0x16>

0800e648 <__malloc_lock>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__malloc_lock+0x8>)
 800e64a:	f7fe bd0b 	b.w	800d064 <__retarget_lock_acquire_recursive>
 800e64e:	bf00      	nop
 800e650:	2000317c 	.word	0x2000317c

0800e654 <__malloc_unlock>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__malloc_unlock+0x8>)
 800e656:	f7fe bd06 	b.w	800d066 <__retarget_lock_release_recursive>
 800e65a:	bf00      	nop
 800e65c:	2000317c 	.word	0x2000317c

0800e660 <_Balloc>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	69c6      	ldr	r6, [r0, #28]
 800e664:	4604      	mov	r4, r0
 800e666:	460d      	mov	r5, r1
 800e668:	b976      	cbnz	r6, 800e688 <_Balloc+0x28>
 800e66a:	2010      	movs	r0, #16
 800e66c:	f7ff ff32 	bl	800e4d4 <malloc>
 800e670:	4602      	mov	r2, r0
 800e672:	61e0      	str	r0, [r4, #28]
 800e674:	b920      	cbnz	r0, 800e680 <_Balloc+0x20>
 800e676:	4b18      	ldr	r3, [pc, #96]	; (800e6d8 <_Balloc+0x78>)
 800e678:	4818      	ldr	r0, [pc, #96]	; (800e6dc <_Balloc+0x7c>)
 800e67a:	216b      	movs	r1, #107	; 0x6b
 800e67c:	f000 feda 	bl	800f434 <__assert_func>
 800e680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e684:	6006      	str	r6, [r0, #0]
 800e686:	60c6      	str	r6, [r0, #12]
 800e688:	69e6      	ldr	r6, [r4, #28]
 800e68a:	68f3      	ldr	r3, [r6, #12]
 800e68c:	b183      	cbz	r3, 800e6b0 <_Balloc+0x50>
 800e68e:	69e3      	ldr	r3, [r4, #28]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e696:	b9b8      	cbnz	r0, 800e6c8 <_Balloc+0x68>
 800e698:	2101      	movs	r1, #1
 800e69a:	fa01 f605 	lsl.w	r6, r1, r5
 800e69e:	1d72      	adds	r2, r6, #5
 800e6a0:	0092      	lsls	r2, r2, #2
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 fee4 	bl	800f470 <_calloc_r>
 800e6a8:	b160      	cbz	r0, 800e6c4 <_Balloc+0x64>
 800e6aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6ae:	e00e      	b.n	800e6ce <_Balloc+0x6e>
 800e6b0:	2221      	movs	r2, #33	; 0x21
 800e6b2:	2104      	movs	r1, #4
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f000 fedb 	bl	800f470 <_calloc_r>
 800e6ba:	69e3      	ldr	r3, [r4, #28]
 800e6bc:	60f0      	str	r0, [r6, #12]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1e4      	bne.n	800e68e <_Balloc+0x2e>
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	bd70      	pop	{r4, r5, r6, pc}
 800e6c8:	6802      	ldr	r2, [r0, #0]
 800e6ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6d4:	e7f7      	b.n	800e6c6 <_Balloc+0x66>
 800e6d6:	bf00      	nop
 800e6d8:	0800fd19 	.word	0x0800fd19
 800e6dc:	0800fdf9 	.word	0x0800fdf9

0800e6e0 <_Bfree>:
 800e6e0:	b570      	push	{r4, r5, r6, lr}
 800e6e2:	69c6      	ldr	r6, [r0, #28]
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	b976      	cbnz	r6, 800e708 <_Bfree+0x28>
 800e6ea:	2010      	movs	r0, #16
 800e6ec:	f7ff fef2 	bl	800e4d4 <malloc>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	61e8      	str	r0, [r5, #28]
 800e6f4:	b920      	cbnz	r0, 800e700 <_Bfree+0x20>
 800e6f6:	4b09      	ldr	r3, [pc, #36]	; (800e71c <_Bfree+0x3c>)
 800e6f8:	4809      	ldr	r0, [pc, #36]	; (800e720 <_Bfree+0x40>)
 800e6fa:	218f      	movs	r1, #143	; 0x8f
 800e6fc:	f000 fe9a 	bl	800f434 <__assert_func>
 800e700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e704:	6006      	str	r6, [r0, #0]
 800e706:	60c6      	str	r6, [r0, #12]
 800e708:	b13c      	cbz	r4, 800e71a <_Bfree+0x3a>
 800e70a:	69eb      	ldr	r3, [r5, #28]
 800e70c:	6862      	ldr	r2, [r4, #4]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e714:	6021      	str	r1, [r4, #0]
 800e716:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	0800fd19 	.word	0x0800fd19
 800e720:	0800fdf9 	.word	0x0800fdf9

0800e724 <__multadd>:
 800e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e728:	690d      	ldr	r5, [r1, #16]
 800e72a:	4607      	mov	r7, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	461e      	mov	r6, r3
 800e730:	f101 0c14 	add.w	ip, r1, #20
 800e734:	2000      	movs	r0, #0
 800e736:	f8dc 3000 	ldr.w	r3, [ip]
 800e73a:	b299      	uxth	r1, r3
 800e73c:	fb02 6101 	mla	r1, r2, r1, r6
 800e740:	0c1e      	lsrs	r6, r3, #16
 800e742:	0c0b      	lsrs	r3, r1, #16
 800e744:	fb02 3306 	mla	r3, r2, r6, r3
 800e748:	b289      	uxth	r1, r1
 800e74a:	3001      	adds	r0, #1
 800e74c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e750:	4285      	cmp	r5, r0
 800e752:	f84c 1b04 	str.w	r1, [ip], #4
 800e756:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e75a:	dcec      	bgt.n	800e736 <__multadd+0x12>
 800e75c:	b30e      	cbz	r6, 800e7a2 <__multadd+0x7e>
 800e75e:	68a3      	ldr	r3, [r4, #8]
 800e760:	42ab      	cmp	r3, r5
 800e762:	dc19      	bgt.n	800e798 <__multadd+0x74>
 800e764:	6861      	ldr	r1, [r4, #4]
 800e766:	4638      	mov	r0, r7
 800e768:	3101      	adds	r1, #1
 800e76a:	f7ff ff79 	bl	800e660 <_Balloc>
 800e76e:	4680      	mov	r8, r0
 800e770:	b928      	cbnz	r0, 800e77e <__multadd+0x5a>
 800e772:	4602      	mov	r2, r0
 800e774:	4b0c      	ldr	r3, [pc, #48]	; (800e7a8 <__multadd+0x84>)
 800e776:	480d      	ldr	r0, [pc, #52]	; (800e7ac <__multadd+0x88>)
 800e778:	21ba      	movs	r1, #186	; 0xba
 800e77a:	f000 fe5b 	bl	800f434 <__assert_func>
 800e77e:	6922      	ldr	r2, [r4, #16]
 800e780:	3202      	adds	r2, #2
 800e782:	f104 010c 	add.w	r1, r4, #12
 800e786:	0092      	lsls	r2, r2, #2
 800e788:	300c      	adds	r0, #12
 800e78a:	f7fe fc6d 	bl	800d068 <memcpy>
 800e78e:	4621      	mov	r1, r4
 800e790:	4638      	mov	r0, r7
 800e792:	f7ff ffa5 	bl	800e6e0 <_Bfree>
 800e796:	4644      	mov	r4, r8
 800e798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e79c:	3501      	adds	r5, #1
 800e79e:	615e      	str	r6, [r3, #20]
 800e7a0:	6125      	str	r5, [r4, #16]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	0800fd88 	.word	0x0800fd88
 800e7ac:	0800fdf9 	.word	0x0800fdf9

0800e7b0 <__s2b>:
 800e7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	4615      	mov	r5, r2
 800e7b8:	461f      	mov	r7, r3
 800e7ba:	2209      	movs	r2, #9
 800e7bc:	3308      	adds	r3, #8
 800e7be:	4606      	mov	r6, r0
 800e7c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	db09      	blt.n	800e7e0 <__s2b+0x30>
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f7ff ff47 	bl	800e660 <_Balloc>
 800e7d2:	b940      	cbnz	r0, 800e7e6 <__s2b+0x36>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	4b19      	ldr	r3, [pc, #100]	; (800e83c <__s2b+0x8c>)
 800e7d8:	4819      	ldr	r0, [pc, #100]	; (800e840 <__s2b+0x90>)
 800e7da:	21d3      	movs	r1, #211	; 0xd3
 800e7dc:	f000 fe2a 	bl	800f434 <__assert_func>
 800e7e0:	0052      	lsls	r2, r2, #1
 800e7e2:	3101      	adds	r1, #1
 800e7e4:	e7f0      	b.n	800e7c8 <__s2b+0x18>
 800e7e6:	9b08      	ldr	r3, [sp, #32]
 800e7e8:	6143      	str	r3, [r0, #20]
 800e7ea:	2d09      	cmp	r5, #9
 800e7ec:	f04f 0301 	mov.w	r3, #1
 800e7f0:	6103      	str	r3, [r0, #16]
 800e7f2:	dd16      	ble.n	800e822 <__s2b+0x72>
 800e7f4:	f104 0909 	add.w	r9, r4, #9
 800e7f8:	46c8      	mov	r8, r9
 800e7fa:	442c      	add	r4, r5
 800e7fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e800:	4601      	mov	r1, r0
 800e802:	3b30      	subs	r3, #48	; 0x30
 800e804:	220a      	movs	r2, #10
 800e806:	4630      	mov	r0, r6
 800e808:	f7ff ff8c 	bl	800e724 <__multadd>
 800e80c:	45a0      	cmp	r8, r4
 800e80e:	d1f5      	bne.n	800e7fc <__s2b+0x4c>
 800e810:	f1a5 0408 	sub.w	r4, r5, #8
 800e814:	444c      	add	r4, r9
 800e816:	1b2d      	subs	r5, r5, r4
 800e818:	1963      	adds	r3, r4, r5
 800e81a:	42bb      	cmp	r3, r7
 800e81c:	db04      	blt.n	800e828 <__s2b+0x78>
 800e81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e822:	340a      	adds	r4, #10
 800e824:	2509      	movs	r5, #9
 800e826:	e7f6      	b.n	800e816 <__s2b+0x66>
 800e828:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e82c:	4601      	mov	r1, r0
 800e82e:	3b30      	subs	r3, #48	; 0x30
 800e830:	220a      	movs	r2, #10
 800e832:	4630      	mov	r0, r6
 800e834:	f7ff ff76 	bl	800e724 <__multadd>
 800e838:	e7ee      	b.n	800e818 <__s2b+0x68>
 800e83a:	bf00      	nop
 800e83c:	0800fd88 	.word	0x0800fd88
 800e840:	0800fdf9 	.word	0x0800fdf9

0800e844 <__hi0bits>:
 800e844:	0c03      	lsrs	r3, r0, #16
 800e846:	041b      	lsls	r3, r3, #16
 800e848:	b9d3      	cbnz	r3, 800e880 <__hi0bits+0x3c>
 800e84a:	0400      	lsls	r0, r0, #16
 800e84c:	2310      	movs	r3, #16
 800e84e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e852:	bf04      	itt	eq
 800e854:	0200      	lsleq	r0, r0, #8
 800e856:	3308      	addeq	r3, #8
 800e858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e85c:	bf04      	itt	eq
 800e85e:	0100      	lsleq	r0, r0, #4
 800e860:	3304      	addeq	r3, #4
 800e862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e866:	bf04      	itt	eq
 800e868:	0080      	lsleq	r0, r0, #2
 800e86a:	3302      	addeq	r3, #2
 800e86c:	2800      	cmp	r0, #0
 800e86e:	db05      	blt.n	800e87c <__hi0bits+0x38>
 800e870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e874:	f103 0301 	add.w	r3, r3, #1
 800e878:	bf08      	it	eq
 800e87a:	2320      	moveq	r3, #32
 800e87c:	4618      	mov	r0, r3
 800e87e:	4770      	bx	lr
 800e880:	2300      	movs	r3, #0
 800e882:	e7e4      	b.n	800e84e <__hi0bits+0xa>

0800e884 <__lo0bits>:
 800e884:	6803      	ldr	r3, [r0, #0]
 800e886:	f013 0207 	ands.w	r2, r3, #7
 800e88a:	d00c      	beq.n	800e8a6 <__lo0bits+0x22>
 800e88c:	07d9      	lsls	r1, r3, #31
 800e88e:	d422      	bmi.n	800e8d6 <__lo0bits+0x52>
 800e890:	079a      	lsls	r2, r3, #30
 800e892:	bf49      	itett	mi
 800e894:	085b      	lsrmi	r3, r3, #1
 800e896:	089b      	lsrpl	r3, r3, #2
 800e898:	6003      	strmi	r3, [r0, #0]
 800e89a:	2201      	movmi	r2, #1
 800e89c:	bf5c      	itt	pl
 800e89e:	6003      	strpl	r3, [r0, #0]
 800e8a0:	2202      	movpl	r2, #2
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	4770      	bx	lr
 800e8a6:	b299      	uxth	r1, r3
 800e8a8:	b909      	cbnz	r1, 800e8ae <__lo0bits+0x2a>
 800e8aa:	0c1b      	lsrs	r3, r3, #16
 800e8ac:	2210      	movs	r2, #16
 800e8ae:	b2d9      	uxtb	r1, r3
 800e8b0:	b909      	cbnz	r1, 800e8b6 <__lo0bits+0x32>
 800e8b2:	3208      	adds	r2, #8
 800e8b4:	0a1b      	lsrs	r3, r3, #8
 800e8b6:	0719      	lsls	r1, r3, #28
 800e8b8:	bf04      	itt	eq
 800e8ba:	091b      	lsreq	r3, r3, #4
 800e8bc:	3204      	addeq	r2, #4
 800e8be:	0799      	lsls	r1, r3, #30
 800e8c0:	bf04      	itt	eq
 800e8c2:	089b      	lsreq	r3, r3, #2
 800e8c4:	3202      	addeq	r2, #2
 800e8c6:	07d9      	lsls	r1, r3, #31
 800e8c8:	d403      	bmi.n	800e8d2 <__lo0bits+0x4e>
 800e8ca:	085b      	lsrs	r3, r3, #1
 800e8cc:	f102 0201 	add.w	r2, r2, #1
 800e8d0:	d003      	beq.n	800e8da <__lo0bits+0x56>
 800e8d2:	6003      	str	r3, [r0, #0]
 800e8d4:	e7e5      	b.n	800e8a2 <__lo0bits+0x1e>
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	e7e3      	b.n	800e8a2 <__lo0bits+0x1e>
 800e8da:	2220      	movs	r2, #32
 800e8dc:	e7e1      	b.n	800e8a2 <__lo0bits+0x1e>
	...

0800e8e0 <__i2b>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	f7ff febb 	bl	800e660 <_Balloc>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	b928      	cbnz	r0, 800e8fa <__i2b+0x1a>
 800e8ee:	4b05      	ldr	r3, [pc, #20]	; (800e904 <__i2b+0x24>)
 800e8f0:	4805      	ldr	r0, [pc, #20]	; (800e908 <__i2b+0x28>)
 800e8f2:	f240 1145 	movw	r1, #325	; 0x145
 800e8f6:	f000 fd9d 	bl	800f434 <__assert_func>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	6144      	str	r4, [r0, #20]
 800e8fe:	6103      	str	r3, [r0, #16]
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop
 800e904:	0800fd88 	.word	0x0800fd88
 800e908:	0800fdf9 	.word	0x0800fdf9

0800e90c <__multiply>:
 800e90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e910:	4691      	mov	r9, r2
 800e912:	690a      	ldr	r2, [r1, #16]
 800e914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e918:	429a      	cmp	r2, r3
 800e91a:	bfb8      	it	lt
 800e91c:	460b      	movlt	r3, r1
 800e91e:	460c      	mov	r4, r1
 800e920:	bfbc      	itt	lt
 800e922:	464c      	movlt	r4, r9
 800e924:	4699      	movlt	r9, r3
 800e926:	6927      	ldr	r7, [r4, #16]
 800e928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e92c:	68a3      	ldr	r3, [r4, #8]
 800e92e:	6861      	ldr	r1, [r4, #4]
 800e930:	eb07 060a 	add.w	r6, r7, sl
 800e934:	42b3      	cmp	r3, r6
 800e936:	b085      	sub	sp, #20
 800e938:	bfb8      	it	lt
 800e93a:	3101      	addlt	r1, #1
 800e93c:	f7ff fe90 	bl	800e660 <_Balloc>
 800e940:	b930      	cbnz	r0, 800e950 <__multiply+0x44>
 800e942:	4602      	mov	r2, r0
 800e944:	4b44      	ldr	r3, [pc, #272]	; (800ea58 <__multiply+0x14c>)
 800e946:	4845      	ldr	r0, [pc, #276]	; (800ea5c <__multiply+0x150>)
 800e948:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e94c:	f000 fd72 	bl	800f434 <__assert_func>
 800e950:	f100 0514 	add.w	r5, r0, #20
 800e954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e958:	462b      	mov	r3, r5
 800e95a:	2200      	movs	r2, #0
 800e95c:	4543      	cmp	r3, r8
 800e95e:	d321      	bcc.n	800e9a4 <__multiply+0x98>
 800e960:	f104 0314 	add.w	r3, r4, #20
 800e964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e968:	f109 0314 	add.w	r3, r9, #20
 800e96c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e970:	9202      	str	r2, [sp, #8]
 800e972:	1b3a      	subs	r2, r7, r4
 800e974:	3a15      	subs	r2, #21
 800e976:	f022 0203 	bic.w	r2, r2, #3
 800e97a:	3204      	adds	r2, #4
 800e97c:	f104 0115 	add.w	r1, r4, #21
 800e980:	428f      	cmp	r7, r1
 800e982:	bf38      	it	cc
 800e984:	2204      	movcc	r2, #4
 800e986:	9201      	str	r2, [sp, #4]
 800e988:	9a02      	ldr	r2, [sp, #8]
 800e98a:	9303      	str	r3, [sp, #12]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d80c      	bhi.n	800e9aa <__multiply+0x9e>
 800e990:	2e00      	cmp	r6, #0
 800e992:	dd03      	ble.n	800e99c <__multiply+0x90>
 800e994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d05b      	beq.n	800ea54 <__multiply+0x148>
 800e99c:	6106      	str	r6, [r0, #16]
 800e99e:	b005      	add	sp, #20
 800e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	f843 2b04 	str.w	r2, [r3], #4
 800e9a8:	e7d8      	b.n	800e95c <__multiply+0x50>
 800e9aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800e9ae:	f1ba 0f00 	cmp.w	sl, #0
 800e9b2:	d024      	beq.n	800e9fe <__multiply+0xf2>
 800e9b4:	f104 0e14 	add.w	lr, r4, #20
 800e9b8:	46a9      	mov	r9, r5
 800e9ba:	f04f 0c00 	mov.w	ip, #0
 800e9be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e9c2:	f8d9 1000 	ldr.w	r1, [r9]
 800e9c6:	fa1f fb82 	uxth.w	fp, r2
 800e9ca:	b289      	uxth	r1, r1
 800e9cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e9d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e9d4:	f8d9 2000 	ldr.w	r2, [r9]
 800e9d8:	4461      	add	r1, ip
 800e9da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9de:	fb0a c20b 	mla	r2, sl, fp, ip
 800e9e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e9e6:	b289      	uxth	r1, r1
 800e9e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e9ec:	4577      	cmp	r7, lr
 800e9ee:	f849 1b04 	str.w	r1, [r9], #4
 800e9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9f6:	d8e2      	bhi.n	800e9be <__multiply+0xb2>
 800e9f8:	9a01      	ldr	r2, [sp, #4]
 800e9fa:	f845 c002 	str.w	ip, [r5, r2]
 800e9fe:	9a03      	ldr	r2, [sp, #12]
 800ea00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea04:	3304      	adds	r3, #4
 800ea06:	f1b9 0f00 	cmp.w	r9, #0
 800ea0a:	d021      	beq.n	800ea50 <__multiply+0x144>
 800ea0c:	6829      	ldr	r1, [r5, #0]
 800ea0e:	f104 0c14 	add.w	ip, r4, #20
 800ea12:	46ae      	mov	lr, r5
 800ea14:	f04f 0a00 	mov.w	sl, #0
 800ea18:	f8bc b000 	ldrh.w	fp, [ip]
 800ea1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ea20:	fb09 220b 	mla	r2, r9, fp, r2
 800ea24:	4452      	add	r2, sl
 800ea26:	b289      	uxth	r1, r1
 800ea28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ea30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ea34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea38:	f8be 1000 	ldrh.w	r1, [lr]
 800ea3c:	fb09 110a 	mla	r1, r9, sl, r1
 800ea40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ea44:	4567      	cmp	r7, ip
 800ea46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea4a:	d8e5      	bhi.n	800ea18 <__multiply+0x10c>
 800ea4c:	9a01      	ldr	r2, [sp, #4]
 800ea4e:	50a9      	str	r1, [r5, r2]
 800ea50:	3504      	adds	r5, #4
 800ea52:	e799      	b.n	800e988 <__multiply+0x7c>
 800ea54:	3e01      	subs	r6, #1
 800ea56:	e79b      	b.n	800e990 <__multiply+0x84>
 800ea58:	0800fd88 	.word	0x0800fd88
 800ea5c:	0800fdf9 	.word	0x0800fdf9

0800ea60 <__pow5mult>:
 800ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea64:	4615      	mov	r5, r2
 800ea66:	f012 0203 	ands.w	r2, r2, #3
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	460f      	mov	r7, r1
 800ea6e:	d007      	beq.n	800ea80 <__pow5mult+0x20>
 800ea70:	4c25      	ldr	r4, [pc, #148]	; (800eb08 <__pow5mult+0xa8>)
 800ea72:	3a01      	subs	r2, #1
 800ea74:	2300      	movs	r3, #0
 800ea76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea7a:	f7ff fe53 	bl	800e724 <__multadd>
 800ea7e:	4607      	mov	r7, r0
 800ea80:	10ad      	asrs	r5, r5, #2
 800ea82:	d03d      	beq.n	800eb00 <__pow5mult+0xa0>
 800ea84:	69f4      	ldr	r4, [r6, #28]
 800ea86:	b97c      	cbnz	r4, 800eaa8 <__pow5mult+0x48>
 800ea88:	2010      	movs	r0, #16
 800ea8a:	f7ff fd23 	bl	800e4d4 <malloc>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	61f0      	str	r0, [r6, #28]
 800ea92:	b928      	cbnz	r0, 800eaa0 <__pow5mult+0x40>
 800ea94:	4b1d      	ldr	r3, [pc, #116]	; (800eb0c <__pow5mult+0xac>)
 800ea96:	481e      	ldr	r0, [pc, #120]	; (800eb10 <__pow5mult+0xb0>)
 800ea98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ea9c:	f000 fcca 	bl	800f434 <__assert_func>
 800eaa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eaa4:	6004      	str	r4, [r0, #0]
 800eaa6:	60c4      	str	r4, [r0, #12]
 800eaa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eaac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eab0:	b94c      	cbnz	r4, 800eac6 <__pow5mult+0x66>
 800eab2:	f240 2171 	movw	r1, #625	; 0x271
 800eab6:	4630      	mov	r0, r6
 800eab8:	f7ff ff12 	bl	800e8e0 <__i2b>
 800eabc:	2300      	movs	r3, #0
 800eabe:	f8c8 0008 	str.w	r0, [r8, #8]
 800eac2:	4604      	mov	r4, r0
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	f04f 0900 	mov.w	r9, #0
 800eaca:	07eb      	lsls	r3, r5, #31
 800eacc:	d50a      	bpl.n	800eae4 <__pow5mult+0x84>
 800eace:	4639      	mov	r1, r7
 800ead0:	4622      	mov	r2, r4
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7ff ff1a 	bl	800e90c <__multiply>
 800ead8:	4639      	mov	r1, r7
 800eada:	4680      	mov	r8, r0
 800eadc:	4630      	mov	r0, r6
 800eade:	f7ff fdff 	bl	800e6e0 <_Bfree>
 800eae2:	4647      	mov	r7, r8
 800eae4:	106d      	asrs	r5, r5, #1
 800eae6:	d00b      	beq.n	800eb00 <__pow5mult+0xa0>
 800eae8:	6820      	ldr	r0, [r4, #0]
 800eaea:	b938      	cbnz	r0, 800eafc <__pow5mult+0x9c>
 800eaec:	4622      	mov	r2, r4
 800eaee:	4621      	mov	r1, r4
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7ff ff0b 	bl	800e90c <__multiply>
 800eaf6:	6020      	str	r0, [r4, #0]
 800eaf8:	f8c0 9000 	str.w	r9, [r0]
 800eafc:	4604      	mov	r4, r0
 800eafe:	e7e4      	b.n	800eaca <__pow5mult+0x6a>
 800eb00:	4638      	mov	r0, r7
 800eb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb06:	bf00      	nop
 800eb08:	0800ff48 	.word	0x0800ff48
 800eb0c:	0800fd19 	.word	0x0800fd19
 800eb10:	0800fdf9 	.word	0x0800fdf9

0800eb14 <__lshift>:
 800eb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb18:	460c      	mov	r4, r1
 800eb1a:	6849      	ldr	r1, [r1, #4]
 800eb1c:	6923      	ldr	r3, [r4, #16]
 800eb1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb22:	68a3      	ldr	r3, [r4, #8]
 800eb24:	4607      	mov	r7, r0
 800eb26:	4691      	mov	r9, r2
 800eb28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb2c:	f108 0601 	add.w	r6, r8, #1
 800eb30:	42b3      	cmp	r3, r6
 800eb32:	db0b      	blt.n	800eb4c <__lshift+0x38>
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff fd93 	bl	800e660 <_Balloc>
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	b948      	cbnz	r0, 800eb52 <__lshift+0x3e>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	4b28      	ldr	r3, [pc, #160]	; (800ebe4 <__lshift+0xd0>)
 800eb42:	4829      	ldr	r0, [pc, #164]	; (800ebe8 <__lshift+0xd4>)
 800eb44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eb48:	f000 fc74 	bl	800f434 <__assert_func>
 800eb4c:	3101      	adds	r1, #1
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	e7ee      	b.n	800eb30 <__lshift+0x1c>
 800eb52:	2300      	movs	r3, #0
 800eb54:	f100 0114 	add.w	r1, r0, #20
 800eb58:	f100 0210 	add.w	r2, r0, #16
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	4553      	cmp	r3, sl
 800eb60:	db33      	blt.n	800ebca <__lshift+0xb6>
 800eb62:	6920      	ldr	r0, [r4, #16]
 800eb64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb68:	f104 0314 	add.w	r3, r4, #20
 800eb6c:	f019 091f 	ands.w	r9, r9, #31
 800eb70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb78:	d02b      	beq.n	800ebd2 <__lshift+0xbe>
 800eb7a:	f1c9 0e20 	rsb	lr, r9, #32
 800eb7e:	468a      	mov	sl, r1
 800eb80:	2200      	movs	r2, #0
 800eb82:	6818      	ldr	r0, [r3, #0]
 800eb84:	fa00 f009 	lsl.w	r0, r0, r9
 800eb88:	4310      	orrs	r0, r2
 800eb8a:	f84a 0b04 	str.w	r0, [sl], #4
 800eb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb92:	459c      	cmp	ip, r3
 800eb94:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb98:	d8f3      	bhi.n	800eb82 <__lshift+0x6e>
 800eb9a:	ebac 0304 	sub.w	r3, ip, r4
 800eb9e:	3b15      	subs	r3, #21
 800eba0:	f023 0303 	bic.w	r3, r3, #3
 800eba4:	3304      	adds	r3, #4
 800eba6:	f104 0015 	add.w	r0, r4, #21
 800ebaa:	4584      	cmp	ip, r0
 800ebac:	bf38      	it	cc
 800ebae:	2304      	movcc	r3, #4
 800ebb0:	50ca      	str	r2, [r1, r3]
 800ebb2:	b10a      	cbz	r2, 800ebb8 <__lshift+0xa4>
 800ebb4:	f108 0602 	add.w	r6, r8, #2
 800ebb8:	3e01      	subs	r6, #1
 800ebba:	4638      	mov	r0, r7
 800ebbc:	612e      	str	r6, [r5, #16]
 800ebbe:	4621      	mov	r1, r4
 800ebc0:	f7ff fd8e 	bl	800e6e0 <_Bfree>
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebca:	f842 0f04 	str.w	r0, [r2, #4]!
 800ebce:	3301      	adds	r3, #1
 800ebd0:	e7c5      	b.n	800eb5e <__lshift+0x4a>
 800ebd2:	3904      	subs	r1, #4
 800ebd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebdc:	459c      	cmp	ip, r3
 800ebde:	d8f9      	bhi.n	800ebd4 <__lshift+0xc0>
 800ebe0:	e7ea      	b.n	800ebb8 <__lshift+0xa4>
 800ebe2:	bf00      	nop
 800ebe4:	0800fd88 	.word	0x0800fd88
 800ebe8:	0800fdf9 	.word	0x0800fdf9

0800ebec <__mcmp>:
 800ebec:	b530      	push	{r4, r5, lr}
 800ebee:	6902      	ldr	r2, [r0, #16]
 800ebf0:	690c      	ldr	r4, [r1, #16]
 800ebf2:	1b12      	subs	r2, r2, r4
 800ebf4:	d10e      	bne.n	800ec14 <__mcmp+0x28>
 800ebf6:	f100 0314 	add.w	r3, r0, #20
 800ebfa:	3114      	adds	r1, #20
 800ebfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec0c:	42a5      	cmp	r5, r4
 800ec0e:	d003      	beq.n	800ec18 <__mcmp+0x2c>
 800ec10:	d305      	bcc.n	800ec1e <__mcmp+0x32>
 800ec12:	2201      	movs	r2, #1
 800ec14:	4610      	mov	r0, r2
 800ec16:	bd30      	pop	{r4, r5, pc}
 800ec18:	4283      	cmp	r3, r0
 800ec1a:	d3f3      	bcc.n	800ec04 <__mcmp+0x18>
 800ec1c:	e7fa      	b.n	800ec14 <__mcmp+0x28>
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	e7f7      	b.n	800ec14 <__mcmp+0x28>

0800ec24 <__mdiff>:
 800ec24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	460c      	mov	r4, r1
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4620      	mov	r0, r4
 800ec30:	4690      	mov	r8, r2
 800ec32:	f7ff ffdb 	bl	800ebec <__mcmp>
 800ec36:	1e05      	subs	r5, r0, #0
 800ec38:	d110      	bne.n	800ec5c <__mdiff+0x38>
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f7ff fd0f 	bl	800e660 <_Balloc>
 800ec42:	b930      	cbnz	r0, 800ec52 <__mdiff+0x2e>
 800ec44:	4b3a      	ldr	r3, [pc, #232]	; (800ed30 <__mdiff+0x10c>)
 800ec46:	4602      	mov	r2, r0
 800ec48:	f240 2137 	movw	r1, #567	; 0x237
 800ec4c:	4839      	ldr	r0, [pc, #228]	; (800ed34 <__mdiff+0x110>)
 800ec4e:	f000 fbf1 	bl	800f434 <__assert_func>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5c:	bfa4      	itt	ge
 800ec5e:	4643      	movge	r3, r8
 800ec60:	46a0      	movge	r8, r4
 800ec62:	4630      	mov	r0, r6
 800ec64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec68:	bfa6      	itte	ge
 800ec6a:	461c      	movge	r4, r3
 800ec6c:	2500      	movge	r5, #0
 800ec6e:	2501      	movlt	r5, #1
 800ec70:	f7ff fcf6 	bl	800e660 <_Balloc>
 800ec74:	b920      	cbnz	r0, 800ec80 <__mdiff+0x5c>
 800ec76:	4b2e      	ldr	r3, [pc, #184]	; (800ed30 <__mdiff+0x10c>)
 800ec78:	4602      	mov	r2, r0
 800ec7a:	f240 2145 	movw	r1, #581	; 0x245
 800ec7e:	e7e5      	b.n	800ec4c <__mdiff+0x28>
 800ec80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ec84:	6926      	ldr	r6, [r4, #16]
 800ec86:	60c5      	str	r5, [r0, #12]
 800ec88:	f104 0914 	add.w	r9, r4, #20
 800ec8c:	f108 0514 	add.w	r5, r8, #20
 800ec90:	f100 0e14 	add.w	lr, r0, #20
 800ec94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ec98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ec9c:	f108 0210 	add.w	r2, r8, #16
 800eca0:	46f2      	mov	sl, lr
 800eca2:	2100      	movs	r1, #0
 800eca4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ecac:	fa11 f88b 	uxtah	r8, r1, fp
 800ecb0:	b299      	uxth	r1, r3
 800ecb2:	0c1b      	lsrs	r3, r3, #16
 800ecb4:	eba8 0801 	sub.w	r8, r8, r1
 800ecb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ecbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ecc0:	fa1f f888 	uxth.w	r8, r8
 800ecc4:	1419      	asrs	r1, r3, #16
 800ecc6:	454e      	cmp	r6, r9
 800ecc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eccc:	f84a 3b04 	str.w	r3, [sl], #4
 800ecd0:	d8e8      	bhi.n	800eca4 <__mdiff+0x80>
 800ecd2:	1b33      	subs	r3, r6, r4
 800ecd4:	3b15      	subs	r3, #21
 800ecd6:	f023 0303 	bic.w	r3, r3, #3
 800ecda:	3304      	adds	r3, #4
 800ecdc:	3415      	adds	r4, #21
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	bf38      	it	cc
 800ece2:	2304      	movcc	r3, #4
 800ece4:	441d      	add	r5, r3
 800ece6:	4473      	add	r3, lr
 800ece8:	469e      	mov	lr, r3
 800ecea:	462e      	mov	r6, r5
 800ecec:	4566      	cmp	r6, ip
 800ecee:	d30e      	bcc.n	800ed0e <__mdiff+0xea>
 800ecf0:	f10c 0203 	add.w	r2, ip, #3
 800ecf4:	1b52      	subs	r2, r2, r5
 800ecf6:	f022 0203 	bic.w	r2, r2, #3
 800ecfa:	3d03      	subs	r5, #3
 800ecfc:	45ac      	cmp	ip, r5
 800ecfe:	bf38      	it	cc
 800ed00:	2200      	movcc	r2, #0
 800ed02:	4413      	add	r3, r2
 800ed04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ed08:	b17a      	cbz	r2, 800ed2a <__mdiff+0x106>
 800ed0a:	6107      	str	r7, [r0, #16]
 800ed0c:	e7a4      	b.n	800ec58 <__mdiff+0x34>
 800ed0e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ed12:	fa11 f288 	uxtah	r2, r1, r8
 800ed16:	1414      	asrs	r4, r2, #16
 800ed18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ed1c:	b292      	uxth	r2, r2
 800ed1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ed22:	f84e 2b04 	str.w	r2, [lr], #4
 800ed26:	1421      	asrs	r1, r4, #16
 800ed28:	e7e0      	b.n	800ecec <__mdiff+0xc8>
 800ed2a:	3f01      	subs	r7, #1
 800ed2c:	e7ea      	b.n	800ed04 <__mdiff+0xe0>
 800ed2e:	bf00      	nop
 800ed30:	0800fd88 	.word	0x0800fd88
 800ed34:	0800fdf9 	.word	0x0800fdf9

0800ed38 <__ulp>:
 800ed38:	b082      	sub	sp, #8
 800ed3a:	ed8d 0b00 	vstr	d0, [sp]
 800ed3e:	9a01      	ldr	r2, [sp, #4]
 800ed40:	4b0f      	ldr	r3, [pc, #60]	; (800ed80 <__ulp+0x48>)
 800ed42:	4013      	ands	r3, r2
 800ed44:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dc08      	bgt.n	800ed5e <__ulp+0x26>
 800ed4c:	425b      	negs	r3, r3
 800ed4e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ed52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ed56:	da04      	bge.n	800ed62 <__ulp+0x2a>
 800ed58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed5c:	4113      	asrs	r3, r2
 800ed5e:	2200      	movs	r2, #0
 800ed60:	e008      	b.n	800ed74 <__ulp+0x3c>
 800ed62:	f1a2 0314 	sub.w	r3, r2, #20
 800ed66:	2b1e      	cmp	r3, #30
 800ed68:	bfda      	itte	le
 800ed6a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ed6e:	40da      	lsrle	r2, r3
 800ed70:	2201      	movgt	r2, #1
 800ed72:	2300      	movs	r3, #0
 800ed74:	4619      	mov	r1, r3
 800ed76:	4610      	mov	r0, r2
 800ed78:	ec41 0b10 	vmov	d0, r0, r1
 800ed7c:	b002      	add	sp, #8
 800ed7e:	4770      	bx	lr
 800ed80:	7ff00000 	.word	0x7ff00000

0800ed84 <__b2d>:
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	6906      	ldr	r6, [r0, #16]
 800ed8a:	f100 0814 	add.w	r8, r0, #20
 800ed8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ed92:	1f37      	subs	r7, r6, #4
 800ed94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7ff fd53 	bl	800e844 <__hi0bits>
 800ed9e:	f1c0 0320 	rsb	r3, r0, #32
 800eda2:	280a      	cmp	r0, #10
 800eda4:	600b      	str	r3, [r1, #0]
 800eda6:	491b      	ldr	r1, [pc, #108]	; (800ee14 <__b2d+0x90>)
 800eda8:	dc15      	bgt.n	800edd6 <__b2d+0x52>
 800edaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800edae:	fa22 f30c 	lsr.w	r3, r2, ip
 800edb2:	45b8      	cmp	r8, r7
 800edb4:	ea43 0501 	orr.w	r5, r3, r1
 800edb8:	bf34      	ite	cc
 800edba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800edbe:	2300      	movcs	r3, #0
 800edc0:	3015      	adds	r0, #21
 800edc2:	fa02 f000 	lsl.w	r0, r2, r0
 800edc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800edca:	4303      	orrs	r3, r0
 800edcc:	461c      	mov	r4, r3
 800edce:	ec45 4b10 	vmov	d0, r4, r5
 800edd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd6:	45b8      	cmp	r8, r7
 800edd8:	bf3a      	itte	cc
 800edda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800edde:	f1a6 0708 	subcc.w	r7, r6, #8
 800ede2:	2300      	movcs	r3, #0
 800ede4:	380b      	subs	r0, #11
 800ede6:	d012      	beq.n	800ee0e <__b2d+0x8a>
 800ede8:	f1c0 0120 	rsb	r1, r0, #32
 800edec:	fa23 f401 	lsr.w	r4, r3, r1
 800edf0:	4082      	lsls	r2, r0
 800edf2:	4322      	orrs	r2, r4
 800edf4:	4547      	cmp	r7, r8
 800edf6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800edfa:	bf8c      	ite	hi
 800edfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ee00:	2200      	movls	r2, #0
 800ee02:	4083      	lsls	r3, r0
 800ee04:	40ca      	lsrs	r2, r1
 800ee06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	e7de      	b.n	800edcc <__b2d+0x48>
 800ee0e:	ea42 0501 	orr.w	r5, r2, r1
 800ee12:	e7db      	b.n	800edcc <__b2d+0x48>
 800ee14:	3ff00000 	.word	0x3ff00000

0800ee18 <__d2b>:
 800ee18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	460f      	mov	r7, r1
 800ee1e:	2101      	movs	r1, #1
 800ee20:	ec59 8b10 	vmov	r8, r9, d0
 800ee24:	4616      	mov	r6, r2
 800ee26:	f7ff fc1b 	bl	800e660 <_Balloc>
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	b930      	cbnz	r0, 800ee3c <__d2b+0x24>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <__d2b+0xac>)
 800ee32:	4825      	ldr	r0, [pc, #148]	; (800eec8 <__d2b+0xb0>)
 800ee34:	f240 310f 	movw	r1, #783	; 0x30f
 800ee38:	f000 fafc 	bl	800f434 <__assert_func>
 800ee3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee44:	bb2d      	cbnz	r5, 800ee92 <__d2b+0x7a>
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	f1b8 0300 	subs.w	r3, r8, #0
 800ee4c:	d026      	beq.n	800ee9c <__d2b+0x84>
 800ee4e:	4668      	mov	r0, sp
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	f7ff fd17 	bl	800e884 <__lo0bits>
 800ee56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee5a:	b1e8      	cbz	r0, 800ee98 <__d2b+0x80>
 800ee5c:	f1c0 0320 	rsb	r3, r0, #32
 800ee60:	fa02 f303 	lsl.w	r3, r2, r3
 800ee64:	430b      	orrs	r3, r1
 800ee66:	40c2      	lsrs	r2, r0
 800ee68:	6163      	str	r3, [r4, #20]
 800ee6a:	9201      	str	r2, [sp, #4]
 800ee6c:	9b01      	ldr	r3, [sp, #4]
 800ee6e:	61a3      	str	r3, [r4, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	bf14      	ite	ne
 800ee74:	2202      	movne	r2, #2
 800ee76:	2201      	moveq	r2, #1
 800ee78:	6122      	str	r2, [r4, #16]
 800ee7a:	b1bd      	cbz	r5, 800eeac <__d2b+0x94>
 800ee7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee80:	4405      	add	r5, r0
 800ee82:	603d      	str	r5, [r7, #0]
 800ee84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee88:	6030      	str	r0, [r6, #0]
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	b003      	add	sp, #12
 800ee8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee96:	e7d6      	b.n	800ee46 <__d2b+0x2e>
 800ee98:	6161      	str	r1, [r4, #20]
 800ee9a:	e7e7      	b.n	800ee6c <__d2b+0x54>
 800ee9c:	a801      	add	r0, sp, #4
 800ee9e:	f7ff fcf1 	bl	800e884 <__lo0bits>
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	6163      	str	r3, [r4, #20]
 800eea6:	3020      	adds	r0, #32
 800eea8:	2201      	movs	r2, #1
 800eeaa:	e7e5      	b.n	800ee78 <__d2b+0x60>
 800eeac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eeb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eeb4:	6038      	str	r0, [r7, #0]
 800eeb6:	6918      	ldr	r0, [r3, #16]
 800eeb8:	f7ff fcc4 	bl	800e844 <__hi0bits>
 800eebc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eec0:	e7e2      	b.n	800ee88 <__d2b+0x70>
 800eec2:	bf00      	nop
 800eec4:	0800fd88 	.word	0x0800fd88
 800eec8:	0800fdf9 	.word	0x0800fdf9

0800eecc <__ratio>:
 800eecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	4688      	mov	r8, r1
 800eed2:	4669      	mov	r1, sp
 800eed4:	4681      	mov	r9, r0
 800eed6:	f7ff ff55 	bl	800ed84 <__b2d>
 800eeda:	a901      	add	r1, sp, #4
 800eedc:	4640      	mov	r0, r8
 800eede:	ec55 4b10 	vmov	r4, r5, d0
 800eee2:	f7ff ff4f 	bl	800ed84 <__b2d>
 800eee6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eeea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eeee:	eba3 0c02 	sub.w	ip, r3, r2
 800eef2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eefc:	ec51 0b10 	vmov	r0, r1, d0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfd6      	itet	le
 800ef04:	460a      	movle	r2, r1
 800ef06:	462a      	movgt	r2, r5
 800ef08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef0c:	468b      	mov	fp, r1
 800ef0e:	462f      	mov	r7, r5
 800ef10:	bfd4      	ite	le
 800ef12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ef16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	ee10 2a10 	vmov	r2, s0
 800ef20:	465b      	mov	r3, fp
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fc92 	bl	800084c <__aeabi_ddiv>
 800ef28:	ec41 0b10 	vmov	d0, r0, r1
 800ef2c:	b003      	add	sp, #12
 800ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef32 <__copybits>:
 800ef32:	3901      	subs	r1, #1
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	1149      	asrs	r1, r1, #5
 800ef38:	6914      	ldr	r4, [r2, #16]
 800ef3a:	3101      	adds	r1, #1
 800ef3c:	f102 0314 	add.w	r3, r2, #20
 800ef40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef48:	1f05      	subs	r5, r0, #4
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	d30c      	bcc.n	800ef68 <__copybits+0x36>
 800ef4e:	1aa3      	subs	r3, r4, r2
 800ef50:	3b11      	subs	r3, #17
 800ef52:	f023 0303 	bic.w	r3, r3, #3
 800ef56:	3211      	adds	r2, #17
 800ef58:	42a2      	cmp	r2, r4
 800ef5a:	bf88      	it	hi
 800ef5c:	2300      	movhi	r3, #0
 800ef5e:	4418      	add	r0, r3
 800ef60:	2300      	movs	r3, #0
 800ef62:	4288      	cmp	r0, r1
 800ef64:	d305      	bcc.n	800ef72 <__copybits+0x40>
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	f853 6b04 	ldr.w	r6, [r3], #4
 800ef6c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ef70:	e7eb      	b.n	800ef4a <__copybits+0x18>
 800ef72:	f840 3b04 	str.w	r3, [r0], #4
 800ef76:	e7f4      	b.n	800ef62 <__copybits+0x30>

0800ef78 <__any_on>:
 800ef78:	f100 0214 	add.w	r2, r0, #20
 800ef7c:	6900      	ldr	r0, [r0, #16]
 800ef7e:	114b      	asrs	r3, r1, #5
 800ef80:	4298      	cmp	r0, r3
 800ef82:	b510      	push	{r4, lr}
 800ef84:	db11      	blt.n	800efaa <__any_on+0x32>
 800ef86:	dd0a      	ble.n	800ef9e <__any_on+0x26>
 800ef88:	f011 011f 	ands.w	r1, r1, #31
 800ef8c:	d007      	beq.n	800ef9e <__any_on+0x26>
 800ef8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ef92:	fa24 f001 	lsr.w	r0, r4, r1
 800ef96:	fa00 f101 	lsl.w	r1, r0, r1
 800ef9a:	428c      	cmp	r4, r1
 800ef9c:	d10b      	bne.n	800efb6 <__any_on+0x3e>
 800ef9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d803      	bhi.n	800efae <__any_on+0x36>
 800efa6:	2000      	movs	r0, #0
 800efa8:	bd10      	pop	{r4, pc}
 800efaa:	4603      	mov	r3, r0
 800efac:	e7f7      	b.n	800ef9e <__any_on+0x26>
 800efae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efb2:	2900      	cmp	r1, #0
 800efb4:	d0f5      	beq.n	800efa2 <__any_on+0x2a>
 800efb6:	2001      	movs	r0, #1
 800efb8:	e7f6      	b.n	800efa8 <__any_on+0x30>

0800efba <__ascii_wctomb>:
 800efba:	b149      	cbz	r1, 800efd0 <__ascii_wctomb+0x16>
 800efbc:	2aff      	cmp	r2, #255	; 0xff
 800efbe:	bf85      	ittet	hi
 800efc0:	238a      	movhi	r3, #138	; 0x8a
 800efc2:	6003      	strhi	r3, [r0, #0]
 800efc4:	700a      	strbls	r2, [r1, #0]
 800efc6:	f04f 30ff 	movhi.w	r0, #4294967295
 800efca:	bf98      	it	ls
 800efcc:	2001      	movls	r0, #1
 800efce:	4770      	bx	lr
 800efd0:	4608      	mov	r0, r1
 800efd2:	4770      	bx	lr

0800efd4 <__ssputs_r>:
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	688e      	ldr	r6, [r1, #8]
 800efda:	461f      	mov	r7, r3
 800efdc:	42be      	cmp	r6, r7
 800efde:	680b      	ldr	r3, [r1, #0]
 800efe0:	4682      	mov	sl, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	4690      	mov	r8, r2
 800efe6:	d82c      	bhi.n	800f042 <__ssputs_r+0x6e>
 800efe8:	898a      	ldrh	r2, [r1, #12]
 800efea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efee:	d026      	beq.n	800f03e <__ssputs_r+0x6a>
 800eff0:	6965      	ldr	r5, [r4, #20]
 800eff2:	6909      	ldr	r1, [r1, #16]
 800eff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eff8:	eba3 0901 	sub.w	r9, r3, r1
 800effc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f000:	1c7b      	adds	r3, r7, #1
 800f002:	444b      	add	r3, r9
 800f004:	106d      	asrs	r5, r5, #1
 800f006:	429d      	cmp	r5, r3
 800f008:	bf38      	it	cc
 800f00a:	461d      	movcc	r5, r3
 800f00c:	0553      	lsls	r3, r2, #21
 800f00e:	d527      	bpl.n	800f060 <__ssputs_r+0x8c>
 800f010:	4629      	mov	r1, r5
 800f012:	f7ff fa87 	bl	800e524 <_malloc_r>
 800f016:	4606      	mov	r6, r0
 800f018:	b360      	cbz	r0, 800f074 <__ssputs_r+0xa0>
 800f01a:	6921      	ldr	r1, [r4, #16]
 800f01c:	464a      	mov	r2, r9
 800f01e:	f7fe f823 	bl	800d068 <memcpy>
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	6126      	str	r6, [r4, #16]
 800f030:	6165      	str	r5, [r4, #20]
 800f032:	444e      	add	r6, r9
 800f034:	eba5 0509 	sub.w	r5, r5, r9
 800f038:	6026      	str	r6, [r4, #0]
 800f03a:	60a5      	str	r5, [r4, #8]
 800f03c:	463e      	mov	r6, r7
 800f03e:	42be      	cmp	r6, r7
 800f040:	d900      	bls.n	800f044 <__ssputs_r+0x70>
 800f042:	463e      	mov	r6, r7
 800f044:	6820      	ldr	r0, [r4, #0]
 800f046:	4632      	mov	r2, r6
 800f048:	4641      	mov	r1, r8
 800f04a:	f000 f9c9 	bl	800f3e0 <memmove>
 800f04e:	68a3      	ldr	r3, [r4, #8]
 800f050:	1b9b      	subs	r3, r3, r6
 800f052:	60a3      	str	r3, [r4, #8]
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	4433      	add	r3, r6
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2000      	movs	r0, #0
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	462a      	mov	r2, r5
 800f062:	f000 fa1b 	bl	800f49c <_realloc_r>
 800f066:	4606      	mov	r6, r0
 800f068:	2800      	cmp	r0, #0
 800f06a:	d1e0      	bne.n	800f02e <__ssputs_r+0x5a>
 800f06c:	6921      	ldr	r1, [r4, #16]
 800f06e:	4650      	mov	r0, sl
 800f070:	f7fe fe8c 	bl	800dd8c <_free_r>
 800f074:	230c      	movs	r3, #12
 800f076:	f8ca 3000 	str.w	r3, [sl]
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f080:	81a3      	strh	r3, [r4, #12]
 800f082:	f04f 30ff 	mov.w	r0, #4294967295
 800f086:	e7e9      	b.n	800f05c <__ssputs_r+0x88>

0800f088 <_svfiprintf_r>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	4698      	mov	r8, r3
 800f08e:	898b      	ldrh	r3, [r1, #12]
 800f090:	061b      	lsls	r3, r3, #24
 800f092:	b09d      	sub	sp, #116	; 0x74
 800f094:	4607      	mov	r7, r0
 800f096:	460d      	mov	r5, r1
 800f098:	4614      	mov	r4, r2
 800f09a:	d50e      	bpl.n	800f0ba <_svfiprintf_r+0x32>
 800f09c:	690b      	ldr	r3, [r1, #16]
 800f09e:	b963      	cbnz	r3, 800f0ba <_svfiprintf_r+0x32>
 800f0a0:	2140      	movs	r1, #64	; 0x40
 800f0a2:	f7ff fa3f 	bl	800e524 <_malloc_r>
 800f0a6:	6028      	str	r0, [r5, #0]
 800f0a8:	6128      	str	r0, [r5, #16]
 800f0aa:	b920      	cbnz	r0, 800f0b6 <_svfiprintf_r+0x2e>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e0d0      	b.n	800f258 <_svfiprintf_r+0x1d0>
 800f0b6:	2340      	movs	r3, #64	; 0x40
 800f0b8:	616b      	str	r3, [r5, #20]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0be:	2320      	movs	r3, #32
 800f0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0c8:	2330      	movs	r3, #48	; 0x30
 800f0ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f270 <_svfiprintf_r+0x1e8>
 800f0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0d2:	f04f 0901 	mov.w	r9, #1
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	469a      	mov	sl, r3
 800f0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0de:	b10a      	cbz	r2, 800f0e4 <_svfiprintf_r+0x5c>
 800f0e0:	2a25      	cmp	r2, #37	; 0x25
 800f0e2:	d1f9      	bne.n	800f0d8 <_svfiprintf_r+0x50>
 800f0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e8:	d00b      	beq.n	800f102 <_svfiprintf_r+0x7a>
 800f0ea:	465b      	mov	r3, fp
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7ff ff6f 	bl	800efd4 <__ssputs_r>
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f000 80a9 	beq.w	800f24e <_svfiprintf_r+0x1c6>
 800f0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0fe:	445a      	add	r2, fp
 800f100:	9209      	str	r2, [sp, #36]	; 0x24
 800f102:	f89a 3000 	ldrb.w	r3, [sl]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f000 80a1 	beq.w	800f24e <_svfiprintf_r+0x1c6>
 800f10c:	2300      	movs	r3, #0
 800f10e:	f04f 32ff 	mov.w	r2, #4294967295
 800f112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f116:	f10a 0a01 	add.w	sl, sl, #1
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	9307      	str	r3, [sp, #28]
 800f11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f122:	931a      	str	r3, [sp, #104]	; 0x68
 800f124:	4654      	mov	r4, sl
 800f126:	2205      	movs	r2, #5
 800f128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12c:	4850      	ldr	r0, [pc, #320]	; (800f270 <_svfiprintf_r+0x1e8>)
 800f12e:	f7f1 f84f 	bl	80001d0 <memchr>
 800f132:	9a04      	ldr	r2, [sp, #16]
 800f134:	b9d8      	cbnz	r0, 800f16e <_svfiprintf_r+0xe6>
 800f136:	06d0      	lsls	r0, r2, #27
 800f138:	bf44      	itt	mi
 800f13a:	2320      	movmi	r3, #32
 800f13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f140:	0711      	lsls	r1, r2, #28
 800f142:	bf44      	itt	mi
 800f144:	232b      	movmi	r3, #43	; 0x2b
 800f146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f14a:	f89a 3000 	ldrb.w	r3, [sl]
 800f14e:	2b2a      	cmp	r3, #42	; 0x2a
 800f150:	d015      	beq.n	800f17e <_svfiprintf_r+0xf6>
 800f152:	9a07      	ldr	r2, [sp, #28]
 800f154:	4654      	mov	r4, sl
 800f156:	2000      	movs	r0, #0
 800f158:	f04f 0c0a 	mov.w	ip, #10
 800f15c:	4621      	mov	r1, r4
 800f15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f162:	3b30      	subs	r3, #48	; 0x30
 800f164:	2b09      	cmp	r3, #9
 800f166:	d94d      	bls.n	800f204 <_svfiprintf_r+0x17c>
 800f168:	b1b0      	cbz	r0, 800f198 <_svfiprintf_r+0x110>
 800f16a:	9207      	str	r2, [sp, #28]
 800f16c:	e014      	b.n	800f198 <_svfiprintf_r+0x110>
 800f16e:	eba0 0308 	sub.w	r3, r0, r8
 800f172:	fa09 f303 	lsl.w	r3, r9, r3
 800f176:	4313      	orrs	r3, r2
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	46a2      	mov	sl, r4
 800f17c:	e7d2      	b.n	800f124 <_svfiprintf_r+0x9c>
 800f17e:	9b03      	ldr	r3, [sp, #12]
 800f180:	1d19      	adds	r1, r3, #4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	9103      	str	r1, [sp, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	bfbb      	ittet	lt
 800f18a:	425b      	neglt	r3, r3
 800f18c:	f042 0202 	orrlt.w	r2, r2, #2
 800f190:	9307      	strge	r3, [sp, #28]
 800f192:	9307      	strlt	r3, [sp, #28]
 800f194:	bfb8      	it	lt
 800f196:	9204      	strlt	r2, [sp, #16]
 800f198:	7823      	ldrb	r3, [r4, #0]
 800f19a:	2b2e      	cmp	r3, #46	; 0x2e
 800f19c:	d10c      	bne.n	800f1b8 <_svfiprintf_r+0x130>
 800f19e:	7863      	ldrb	r3, [r4, #1]
 800f1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a2:	d134      	bne.n	800f20e <_svfiprintf_r+0x186>
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9203      	str	r2, [sp, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	bfb8      	it	lt
 800f1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1b4:	3402      	adds	r4, #2
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f280 <_svfiprintf_r+0x1f8>
 800f1bc:	7821      	ldrb	r1, [r4, #0]
 800f1be:	2203      	movs	r2, #3
 800f1c0:	4650      	mov	r0, sl
 800f1c2:	f7f1 f805 	bl	80001d0 <memchr>
 800f1c6:	b138      	cbz	r0, 800f1d8 <_svfiprintf_r+0x150>
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	eba0 000a 	sub.w	r0, r0, sl
 800f1ce:	2240      	movs	r2, #64	; 0x40
 800f1d0:	4082      	lsls	r2, r0
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	3401      	adds	r4, #1
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1dc:	4825      	ldr	r0, [pc, #148]	; (800f274 <_svfiprintf_r+0x1ec>)
 800f1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1e2:	2206      	movs	r2, #6
 800f1e4:	f7f0 fff4 	bl	80001d0 <memchr>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d038      	beq.n	800f25e <_svfiprintf_r+0x1d6>
 800f1ec:	4b22      	ldr	r3, [pc, #136]	; (800f278 <_svfiprintf_r+0x1f0>)
 800f1ee:	bb1b      	cbnz	r3, 800f238 <_svfiprintf_r+0x1b0>
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	3307      	adds	r3, #7
 800f1f4:	f023 0307 	bic.w	r3, r3, #7
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	9303      	str	r3, [sp, #12]
 800f1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fe:	4433      	add	r3, r6
 800f200:	9309      	str	r3, [sp, #36]	; 0x24
 800f202:	e768      	b.n	800f0d6 <_svfiprintf_r+0x4e>
 800f204:	fb0c 3202 	mla	r2, ip, r2, r3
 800f208:	460c      	mov	r4, r1
 800f20a:	2001      	movs	r0, #1
 800f20c:	e7a6      	b.n	800f15c <_svfiprintf_r+0xd4>
 800f20e:	2300      	movs	r3, #0
 800f210:	3401      	adds	r4, #1
 800f212:	9305      	str	r3, [sp, #20]
 800f214:	4619      	mov	r1, r3
 800f216:	f04f 0c0a 	mov.w	ip, #10
 800f21a:	4620      	mov	r0, r4
 800f21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f220:	3a30      	subs	r2, #48	; 0x30
 800f222:	2a09      	cmp	r2, #9
 800f224:	d903      	bls.n	800f22e <_svfiprintf_r+0x1a6>
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0c6      	beq.n	800f1b8 <_svfiprintf_r+0x130>
 800f22a:	9105      	str	r1, [sp, #20]
 800f22c:	e7c4      	b.n	800f1b8 <_svfiprintf_r+0x130>
 800f22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f232:	4604      	mov	r4, r0
 800f234:	2301      	movs	r3, #1
 800f236:	e7f0      	b.n	800f21a <_svfiprintf_r+0x192>
 800f238:	ab03      	add	r3, sp, #12
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	462a      	mov	r2, r5
 800f23e:	4b0f      	ldr	r3, [pc, #60]	; (800f27c <_svfiprintf_r+0x1f4>)
 800f240:	a904      	add	r1, sp, #16
 800f242:	4638      	mov	r0, r7
 800f244:	f7fd f950 	bl	800c4e8 <_printf_float>
 800f248:	1c42      	adds	r2, r0, #1
 800f24a:	4606      	mov	r6, r0
 800f24c:	d1d6      	bne.n	800f1fc <_svfiprintf_r+0x174>
 800f24e:	89ab      	ldrh	r3, [r5, #12]
 800f250:	065b      	lsls	r3, r3, #25
 800f252:	f53f af2d 	bmi.w	800f0b0 <_svfiprintf_r+0x28>
 800f256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f258:	b01d      	add	sp, #116	; 0x74
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	ab03      	add	r3, sp, #12
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	462a      	mov	r2, r5
 800f264:	4b05      	ldr	r3, [pc, #20]	; (800f27c <_svfiprintf_r+0x1f4>)
 800f266:	a904      	add	r1, sp, #16
 800f268:	4638      	mov	r0, r7
 800f26a:	f7fd fbe1 	bl	800ca30 <_printf_i>
 800f26e:	e7eb      	b.n	800f248 <_svfiprintf_r+0x1c0>
 800f270:	08010055 	.word	0x08010055
 800f274:	0801005f 	.word	0x0801005f
 800f278:	0800c4e9 	.word	0x0800c4e9
 800f27c:	0800efd5 	.word	0x0800efd5
 800f280:	0801005b 	.word	0x0801005b

0800f284 <__sflush_r>:
 800f284:	898a      	ldrh	r2, [r1, #12]
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	4605      	mov	r5, r0
 800f28c:	0710      	lsls	r0, r2, #28
 800f28e:	460c      	mov	r4, r1
 800f290:	d458      	bmi.n	800f344 <__sflush_r+0xc0>
 800f292:	684b      	ldr	r3, [r1, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc05      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	dc02      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d0f9      	beq.n	800f29e <__sflush_r+0x1a>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2b0:	682f      	ldr	r7, [r5, #0]
 800f2b2:	6a21      	ldr	r1, [r4, #32]
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	d032      	beq.n	800f31e <__sflush_r+0x9a>
 800f2b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	075a      	lsls	r2, r3, #29
 800f2be:	d505      	bpl.n	800f2cc <__sflush_r+0x48>
 800f2c0:	6863      	ldr	r3, [r4, #4]
 800f2c2:	1ac0      	subs	r0, r0, r3
 800f2c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2c6:	b10b      	cbz	r3, 800f2cc <__sflush_r+0x48>
 800f2c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2ca:	1ac0      	subs	r0, r0, r3
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2d2:	6a21      	ldr	r1, [r4, #32]
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	47b0      	blx	r6
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	89a3      	ldrh	r3, [r4, #12]
 800f2dc:	d106      	bne.n	800f2ec <__sflush_r+0x68>
 800f2de:	6829      	ldr	r1, [r5, #0]
 800f2e0:	291d      	cmp	r1, #29
 800f2e2:	d82b      	bhi.n	800f33c <__sflush_r+0xb8>
 800f2e4:	4a29      	ldr	r2, [pc, #164]	; (800f38c <__sflush_r+0x108>)
 800f2e6:	410a      	asrs	r2, r1
 800f2e8:	07d6      	lsls	r6, r2, #31
 800f2ea:	d427      	bmi.n	800f33c <__sflush_r+0xb8>
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	6062      	str	r2, [r4, #4]
 800f2f0:	04d9      	lsls	r1, r3, #19
 800f2f2:	6922      	ldr	r2, [r4, #16]
 800f2f4:	6022      	str	r2, [r4, #0]
 800f2f6:	d504      	bpl.n	800f302 <__sflush_r+0x7e>
 800f2f8:	1c42      	adds	r2, r0, #1
 800f2fa:	d101      	bne.n	800f300 <__sflush_r+0x7c>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b903      	cbnz	r3, 800f302 <__sflush_r+0x7e>
 800f300:	6560      	str	r0, [r4, #84]	; 0x54
 800f302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f304:	602f      	str	r7, [r5, #0]
 800f306:	2900      	cmp	r1, #0
 800f308:	d0c9      	beq.n	800f29e <__sflush_r+0x1a>
 800f30a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f30e:	4299      	cmp	r1, r3
 800f310:	d002      	beq.n	800f318 <__sflush_r+0x94>
 800f312:	4628      	mov	r0, r5
 800f314:	f7fe fd3a 	bl	800dd8c <_free_r>
 800f318:	2000      	movs	r0, #0
 800f31a:	6360      	str	r0, [r4, #52]	; 0x34
 800f31c:	e7c0      	b.n	800f2a0 <__sflush_r+0x1c>
 800f31e:	2301      	movs	r3, #1
 800f320:	4628      	mov	r0, r5
 800f322:	47b0      	blx	r6
 800f324:	1c41      	adds	r1, r0, #1
 800f326:	d1c8      	bne.n	800f2ba <__sflush_r+0x36>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0c5      	beq.n	800f2ba <__sflush_r+0x36>
 800f32e:	2b1d      	cmp	r3, #29
 800f330:	d001      	beq.n	800f336 <__sflush_r+0xb2>
 800f332:	2b16      	cmp	r3, #22
 800f334:	d101      	bne.n	800f33a <__sflush_r+0xb6>
 800f336:	602f      	str	r7, [r5, #0]
 800f338:	e7b1      	b.n	800f29e <__sflush_r+0x1a>
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	e7ad      	b.n	800f2a0 <__sflush_r+0x1c>
 800f344:	690f      	ldr	r7, [r1, #16]
 800f346:	2f00      	cmp	r7, #0
 800f348:	d0a9      	beq.n	800f29e <__sflush_r+0x1a>
 800f34a:	0793      	lsls	r3, r2, #30
 800f34c:	680e      	ldr	r6, [r1, #0]
 800f34e:	bf08      	it	eq
 800f350:	694b      	ldreq	r3, [r1, #20]
 800f352:	600f      	str	r7, [r1, #0]
 800f354:	bf18      	it	ne
 800f356:	2300      	movne	r3, #0
 800f358:	eba6 0807 	sub.w	r8, r6, r7
 800f35c:	608b      	str	r3, [r1, #8]
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	dd9c      	ble.n	800f29e <__sflush_r+0x1a>
 800f364:	6a21      	ldr	r1, [r4, #32]
 800f366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f368:	4643      	mov	r3, r8
 800f36a:	463a      	mov	r2, r7
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b0      	blx	r6
 800f370:	2800      	cmp	r0, #0
 800f372:	dc06      	bgt.n	800f382 <__sflush_r+0xfe>
 800f374:	89a3      	ldrh	r3, [r4, #12]
 800f376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f37a:	81a3      	strh	r3, [r4, #12]
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	e78e      	b.n	800f2a0 <__sflush_r+0x1c>
 800f382:	4407      	add	r7, r0
 800f384:	eba8 0800 	sub.w	r8, r8, r0
 800f388:	e7e9      	b.n	800f35e <__sflush_r+0xda>
 800f38a:	bf00      	nop
 800f38c:	dfbffffe 	.word	0xdfbffffe

0800f390 <_fflush_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	690b      	ldr	r3, [r1, #16]
 800f394:	4605      	mov	r5, r0
 800f396:	460c      	mov	r4, r1
 800f398:	b913      	cbnz	r3, 800f3a0 <_fflush_r+0x10>
 800f39a:	2500      	movs	r5, #0
 800f39c:	4628      	mov	r0, r5
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	b118      	cbz	r0, 800f3aa <_fflush_r+0x1a>
 800f3a2:	6a03      	ldr	r3, [r0, #32]
 800f3a4:	b90b      	cbnz	r3, 800f3aa <_fflush_r+0x1a>
 800f3a6:	f7fd fcdf 	bl	800cd68 <__sinit>
 800f3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d0f3      	beq.n	800f39a <_fflush_r+0xa>
 800f3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3b4:	07d0      	lsls	r0, r2, #31
 800f3b6:	d404      	bmi.n	800f3c2 <_fflush_r+0x32>
 800f3b8:	0599      	lsls	r1, r3, #22
 800f3ba:	d402      	bmi.n	800f3c2 <_fflush_r+0x32>
 800f3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3be:	f7fd fe51 	bl	800d064 <__retarget_lock_acquire_recursive>
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f7ff ff5d 	bl	800f284 <__sflush_r>
 800f3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3cc:	07da      	lsls	r2, r3, #31
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	d4e4      	bmi.n	800f39c <_fflush_r+0xc>
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	059b      	lsls	r3, r3, #22
 800f3d6:	d4e1      	bmi.n	800f39c <_fflush_r+0xc>
 800f3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3da:	f7fd fe44 	bl	800d066 <__retarget_lock_release_recursive>
 800f3de:	e7dd      	b.n	800f39c <_fflush_r+0xc>

0800f3e0 <memmove>:
 800f3e0:	4288      	cmp	r0, r1
 800f3e2:	b510      	push	{r4, lr}
 800f3e4:	eb01 0402 	add.w	r4, r1, r2
 800f3e8:	d902      	bls.n	800f3f0 <memmove+0x10>
 800f3ea:	4284      	cmp	r4, r0
 800f3ec:	4623      	mov	r3, r4
 800f3ee:	d807      	bhi.n	800f400 <memmove+0x20>
 800f3f0:	1e43      	subs	r3, r0, #1
 800f3f2:	42a1      	cmp	r1, r4
 800f3f4:	d008      	beq.n	800f408 <memmove+0x28>
 800f3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3fe:	e7f8      	b.n	800f3f2 <memmove+0x12>
 800f400:	4402      	add	r2, r0
 800f402:	4601      	mov	r1, r0
 800f404:	428a      	cmp	r2, r1
 800f406:	d100      	bne.n	800f40a <memmove+0x2a>
 800f408:	bd10      	pop	{r4, pc}
 800f40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f412:	e7f7      	b.n	800f404 <memmove+0x24>

0800f414 <_sbrk_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d06      	ldr	r5, [pc, #24]	; (800f430 <_sbrk_r+0x1c>)
 800f418:	2300      	movs	r3, #0
 800f41a:	4604      	mov	r4, r0
 800f41c:	4608      	mov	r0, r1
 800f41e:	602b      	str	r3, [r5, #0]
 800f420:	f7f2 ff94 	bl	800234c <_sbrk>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	d102      	bne.n	800f42e <_sbrk_r+0x1a>
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	b103      	cbz	r3, 800f42e <_sbrk_r+0x1a>
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	bd38      	pop	{r3, r4, r5, pc}
 800f430:	20003178 	.word	0x20003178

0800f434 <__assert_func>:
 800f434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f436:	4614      	mov	r4, r2
 800f438:	461a      	mov	r2, r3
 800f43a:	4b09      	ldr	r3, [pc, #36]	; (800f460 <__assert_func+0x2c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4605      	mov	r5, r0
 800f440:	68d8      	ldr	r0, [r3, #12]
 800f442:	b14c      	cbz	r4, 800f458 <__assert_func+0x24>
 800f444:	4b07      	ldr	r3, [pc, #28]	; (800f464 <__assert_func+0x30>)
 800f446:	9100      	str	r1, [sp, #0]
 800f448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f44c:	4906      	ldr	r1, [pc, #24]	; (800f468 <__assert_func+0x34>)
 800f44e:	462b      	mov	r3, r5
 800f450:	f000 f854 	bl	800f4fc <fiprintf>
 800f454:	f000 f864 	bl	800f520 <abort>
 800f458:	4b04      	ldr	r3, [pc, #16]	; (800f46c <__assert_func+0x38>)
 800f45a:	461c      	mov	r4, r3
 800f45c:	e7f3      	b.n	800f446 <__assert_func+0x12>
 800f45e:	bf00      	nop
 800f460:	200001d4 	.word	0x200001d4
 800f464:	08010066 	.word	0x08010066
 800f468:	08010073 	.word	0x08010073
 800f46c:	080100a1 	.word	0x080100a1

0800f470 <_calloc_r>:
 800f470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f472:	fba1 2402 	umull	r2, r4, r1, r2
 800f476:	b94c      	cbnz	r4, 800f48c <_calloc_r+0x1c>
 800f478:	4611      	mov	r1, r2
 800f47a:	9201      	str	r2, [sp, #4]
 800f47c:	f7ff f852 	bl	800e524 <_malloc_r>
 800f480:	9a01      	ldr	r2, [sp, #4]
 800f482:	4605      	mov	r5, r0
 800f484:	b930      	cbnz	r0, 800f494 <_calloc_r+0x24>
 800f486:	4628      	mov	r0, r5
 800f488:	b003      	add	sp, #12
 800f48a:	bd30      	pop	{r4, r5, pc}
 800f48c:	220c      	movs	r2, #12
 800f48e:	6002      	str	r2, [r0, #0]
 800f490:	2500      	movs	r5, #0
 800f492:	e7f8      	b.n	800f486 <_calloc_r+0x16>
 800f494:	4621      	mov	r1, r4
 800f496:	f7fd fd00 	bl	800ce9a <memset>
 800f49a:	e7f4      	b.n	800f486 <_calloc_r+0x16>

0800f49c <_realloc_r>:
 800f49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a0:	4680      	mov	r8, r0
 800f4a2:	4614      	mov	r4, r2
 800f4a4:	460e      	mov	r6, r1
 800f4a6:	b921      	cbnz	r1, 800f4b2 <_realloc_r+0x16>
 800f4a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	f7ff b839 	b.w	800e524 <_malloc_r>
 800f4b2:	b92a      	cbnz	r2, 800f4c0 <_realloc_r+0x24>
 800f4b4:	f7fe fc6a 	bl	800dd8c <_free_r>
 800f4b8:	4625      	mov	r5, r4
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c0:	f000 f835 	bl	800f52e <_malloc_usable_size_r>
 800f4c4:	4284      	cmp	r4, r0
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	d802      	bhi.n	800f4d0 <_realloc_r+0x34>
 800f4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4ce:	d812      	bhi.n	800f4f6 <_realloc_r+0x5a>
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	f7ff f826 	bl	800e524 <_malloc_r>
 800f4d8:	4605      	mov	r5, r0
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d0ed      	beq.n	800f4ba <_realloc_r+0x1e>
 800f4de:	42bc      	cmp	r4, r7
 800f4e0:	4622      	mov	r2, r4
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	bf28      	it	cs
 800f4e6:	463a      	movcs	r2, r7
 800f4e8:	f7fd fdbe 	bl	800d068 <memcpy>
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	f7fe fc4c 	bl	800dd8c <_free_r>
 800f4f4:	e7e1      	b.n	800f4ba <_realloc_r+0x1e>
 800f4f6:	4635      	mov	r5, r6
 800f4f8:	e7df      	b.n	800f4ba <_realloc_r+0x1e>
	...

0800f4fc <fiprintf>:
 800f4fc:	b40e      	push	{r1, r2, r3}
 800f4fe:	b503      	push	{r0, r1, lr}
 800f500:	4601      	mov	r1, r0
 800f502:	ab03      	add	r3, sp, #12
 800f504:	4805      	ldr	r0, [pc, #20]	; (800f51c <fiprintf+0x20>)
 800f506:	f853 2b04 	ldr.w	r2, [r3], #4
 800f50a:	6800      	ldr	r0, [r0, #0]
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	f000 f83f 	bl	800f590 <_vfiprintf_r>
 800f512:	b002      	add	sp, #8
 800f514:	f85d eb04 	ldr.w	lr, [sp], #4
 800f518:	b003      	add	sp, #12
 800f51a:	4770      	bx	lr
 800f51c:	200001d4 	.word	0x200001d4

0800f520 <abort>:
 800f520:	b508      	push	{r3, lr}
 800f522:	2006      	movs	r0, #6
 800f524:	f000 fa0c 	bl	800f940 <raise>
 800f528:	2001      	movs	r0, #1
 800f52a:	f7f2 fe97 	bl	800225c <_exit>

0800f52e <_malloc_usable_size_r>:
 800f52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f532:	1f18      	subs	r0, r3, #4
 800f534:	2b00      	cmp	r3, #0
 800f536:	bfbc      	itt	lt
 800f538:	580b      	ldrlt	r3, [r1, r0]
 800f53a:	18c0      	addlt	r0, r0, r3
 800f53c:	4770      	bx	lr

0800f53e <__sfputc_r>:
 800f53e:	6893      	ldr	r3, [r2, #8]
 800f540:	3b01      	subs	r3, #1
 800f542:	2b00      	cmp	r3, #0
 800f544:	b410      	push	{r4}
 800f546:	6093      	str	r3, [r2, #8]
 800f548:	da08      	bge.n	800f55c <__sfputc_r+0x1e>
 800f54a:	6994      	ldr	r4, [r2, #24]
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	db01      	blt.n	800f554 <__sfputc_r+0x16>
 800f550:	290a      	cmp	r1, #10
 800f552:	d103      	bne.n	800f55c <__sfputc_r+0x1e>
 800f554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f558:	f000 b934 	b.w	800f7c4 <__swbuf_r>
 800f55c:	6813      	ldr	r3, [r2, #0]
 800f55e:	1c58      	adds	r0, r3, #1
 800f560:	6010      	str	r0, [r2, #0]
 800f562:	7019      	strb	r1, [r3, #0]
 800f564:	4608      	mov	r0, r1
 800f566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <__sfputs_r>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	4606      	mov	r6, r0
 800f570:	460f      	mov	r7, r1
 800f572:	4614      	mov	r4, r2
 800f574:	18d5      	adds	r5, r2, r3
 800f576:	42ac      	cmp	r4, r5
 800f578:	d101      	bne.n	800f57e <__sfputs_r+0x12>
 800f57a:	2000      	movs	r0, #0
 800f57c:	e007      	b.n	800f58e <__sfputs_r+0x22>
 800f57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f582:	463a      	mov	r2, r7
 800f584:	4630      	mov	r0, r6
 800f586:	f7ff ffda 	bl	800f53e <__sfputc_r>
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	d1f3      	bne.n	800f576 <__sfputs_r+0xa>
 800f58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f590 <_vfiprintf_r>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	460d      	mov	r5, r1
 800f596:	b09d      	sub	sp, #116	; 0x74
 800f598:	4614      	mov	r4, r2
 800f59a:	4698      	mov	r8, r3
 800f59c:	4606      	mov	r6, r0
 800f59e:	b118      	cbz	r0, 800f5a8 <_vfiprintf_r+0x18>
 800f5a0:	6a03      	ldr	r3, [r0, #32]
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x18>
 800f5a4:	f7fd fbe0 	bl	800cd68 <__sinit>
 800f5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5aa:	07d9      	lsls	r1, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	059a      	lsls	r2, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5b6:	f7fd fd55 	bl	800d064 <__retarget_lock_acquire_recursive>
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	071b      	lsls	r3, r3, #28
 800f5be:	d501      	bpl.n	800f5c4 <_vfiprintf_r+0x34>
 800f5c0:	692b      	ldr	r3, [r5, #16]
 800f5c2:	b99b      	cbnz	r3, 800f5ec <_vfiprintf_r+0x5c>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f000 f93a 	bl	800f840 <__swsetup_r>
 800f5cc:	b170      	cbz	r0, 800f5ec <_vfiprintf_r+0x5c>
 800f5ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5d0:	07dc      	lsls	r4, r3, #31
 800f5d2:	d504      	bpl.n	800f5de <_vfiprintf_r+0x4e>
 800f5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d8:	b01d      	add	sp, #116	; 0x74
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d4f7      	bmi.n	800f5d4 <_vfiprintf_r+0x44>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5e6:	f7fd fd3e 	bl	800d066 <__retarget_lock_release_recursive>
 800f5ea:	e7f3      	b.n	800f5d4 <_vfiprintf_r+0x44>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5fa:	2330      	movs	r3, #48	; 0x30
 800f5fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f7b0 <_vfiprintf_r+0x220>
 800f600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	4623      	mov	r3, r4
 800f60a:	469a      	mov	sl, r3
 800f60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f610:	b10a      	cbz	r2, 800f616 <_vfiprintf_r+0x86>
 800f612:	2a25      	cmp	r2, #37	; 0x25
 800f614:	d1f9      	bne.n	800f60a <_vfiprintf_r+0x7a>
 800f616:	ebba 0b04 	subs.w	fp, sl, r4
 800f61a:	d00b      	beq.n	800f634 <_vfiprintf_r+0xa4>
 800f61c:	465b      	mov	r3, fp
 800f61e:	4622      	mov	r2, r4
 800f620:	4629      	mov	r1, r5
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ffa2 	bl	800f56c <__sfputs_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	f000 80a9 	beq.w	800f780 <_vfiprintf_r+0x1f0>
 800f62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f630:	445a      	add	r2, fp
 800f632:	9209      	str	r2, [sp, #36]	; 0x24
 800f634:	f89a 3000 	ldrb.w	r3, [sl]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 80a1 	beq.w	800f780 <_vfiprintf_r+0x1f0>
 800f63e:	2300      	movs	r3, #0
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f654:	931a      	str	r3, [sp, #104]	; 0x68
 800f656:	4654      	mov	r4, sl
 800f658:	2205      	movs	r2, #5
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4854      	ldr	r0, [pc, #336]	; (800f7b0 <_vfiprintf_r+0x220>)
 800f660:	f7f0 fdb6 	bl	80001d0 <memchr>
 800f664:	9a04      	ldr	r2, [sp, #16]
 800f666:	b9d8      	cbnz	r0, 800f6a0 <_vfiprintf_r+0x110>
 800f668:	06d1      	lsls	r1, r2, #27
 800f66a:	bf44      	itt	mi
 800f66c:	2320      	movmi	r3, #32
 800f66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f672:	0713      	lsls	r3, r2, #28
 800f674:	bf44      	itt	mi
 800f676:	232b      	movmi	r3, #43	; 0x2b
 800f678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b2a      	cmp	r3, #42	; 0x2a
 800f682:	d015      	beq.n	800f6b0 <_vfiprintf_r+0x120>
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4654      	mov	r4, sl
 800f688:	2000      	movs	r0, #0
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4621      	mov	r1, r4
 800f690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f694:	3b30      	subs	r3, #48	; 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d94d      	bls.n	800f736 <_vfiprintf_r+0x1a6>
 800f69a:	b1b0      	cbz	r0, 800f6ca <_vfiprintf_r+0x13a>
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	e014      	b.n	800f6ca <_vfiprintf_r+0x13a>
 800f6a0:	eba0 0308 	sub.w	r3, r0, r8
 800f6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	e7d2      	b.n	800f656 <_vfiprintf_r+0xc6>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d19      	adds	r1, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfbb      	ittet	lt
 800f6bc:	425b      	neglt	r3, r3
 800f6be:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c2:	9307      	strge	r3, [sp, #28]
 800f6c4:	9307      	strlt	r3, [sp, #28]
 800f6c6:	bfb8      	it	lt
 800f6c8:	9204      	strlt	r2, [sp, #16]
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ce:	d10c      	bne.n	800f6ea <_vfiprintf_r+0x15a>
 800f6d0:	7863      	ldrb	r3, [r4, #1]
 800f6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f6d4:	d134      	bne.n	800f740 <_vfiprintf_r+0x1b0>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d1a      	adds	r2, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	bfb8      	it	lt
 800f6e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6e6:	3402      	adds	r4, #2
 800f6e8:	9305      	str	r3, [sp, #20]
 800f6ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f7c0 <_vfiprintf_r+0x230>
 800f6ee:	7821      	ldrb	r1, [r4, #0]
 800f6f0:	2203      	movs	r2, #3
 800f6f2:	4650      	mov	r0, sl
 800f6f4:	f7f0 fd6c 	bl	80001d0 <memchr>
 800f6f8:	b138      	cbz	r0, 800f70a <_vfiprintf_r+0x17a>
 800f6fa:	9b04      	ldr	r3, [sp, #16]
 800f6fc:	eba0 000a 	sub.w	r0, r0, sl
 800f700:	2240      	movs	r2, #64	; 0x40
 800f702:	4082      	lsls	r2, r0
 800f704:	4313      	orrs	r3, r2
 800f706:	3401      	adds	r4, #1
 800f708:	9304      	str	r3, [sp, #16]
 800f70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70e:	4829      	ldr	r0, [pc, #164]	; (800f7b4 <_vfiprintf_r+0x224>)
 800f710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f714:	2206      	movs	r2, #6
 800f716:	f7f0 fd5b 	bl	80001d0 <memchr>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d03f      	beq.n	800f79e <_vfiprintf_r+0x20e>
 800f71e:	4b26      	ldr	r3, [pc, #152]	; (800f7b8 <_vfiprintf_r+0x228>)
 800f720:	bb1b      	cbnz	r3, 800f76a <_vfiprintf_r+0x1da>
 800f722:	9b03      	ldr	r3, [sp, #12]
 800f724:	3307      	adds	r3, #7
 800f726:	f023 0307 	bic.w	r3, r3, #7
 800f72a:	3308      	adds	r3, #8
 800f72c:	9303      	str	r3, [sp, #12]
 800f72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f730:	443b      	add	r3, r7
 800f732:	9309      	str	r3, [sp, #36]	; 0x24
 800f734:	e768      	b.n	800f608 <_vfiprintf_r+0x78>
 800f736:	fb0c 3202 	mla	r2, ip, r2, r3
 800f73a:	460c      	mov	r4, r1
 800f73c:	2001      	movs	r0, #1
 800f73e:	e7a6      	b.n	800f68e <_vfiprintf_r+0xfe>
 800f740:	2300      	movs	r3, #0
 800f742:	3401      	adds	r4, #1
 800f744:	9305      	str	r3, [sp, #20]
 800f746:	4619      	mov	r1, r3
 800f748:	f04f 0c0a 	mov.w	ip, #10
 800f74c:	4620      	mov	r0, r4
 800f74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f752:	3a30      	subs	r2, #48	; 0x30
 800f754:	2a09      	cmp	r2, #9
 800f756:	d903      	bls.n	800f760 <_vfiprintf_r+0x1d0>
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d0c6      	beq.n	800f6ea <_vfiprintf_r+0x15a>
 800f75c:	9105      	str	r1, [sp, #20]
 800f75e:	e7c4      	b.n	800f6ea <_vfiprintf_r+0x15a>
 800f760:	fb0c 2101 	mla	r1, ip, r1, r2
 800f764:	4604      	mov	r4, r0
 800f766:	2301      	movs	r3, #1
 800f768:	e7f0      	b.n	800f74c <_vfiprintf_r+0x1bc>
 800f76a:	ab03      	add	r3, sp, #12
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	462a      	mov	r2, r5
 800f770:	4b12      	ldr	r3, [pc, #72]	; (800f7bc <_vfiprintf_r+0x22c>)
 800f772:	a904      	add	r1, sp, #16
 800f774:	4630      	mov	r0, r6
 800f776:	f7fc feb7 	bl	800c4e8 <_printf_float>
 800f77a:	4607      	mov	r7, r0
 800f77c:	1c78      	adds	r0, r7, #1
 800f77e:	d1d6      	bne.n	800f72e <_vfiprintf_r+0x19e>
 800f780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f782:	07d9      	lsls	r1, r3, #31
 800f784:	d405      	bmi.n	800f792 <_vfiprintf_r+0x202>
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	059a      	lsls	r2, r3, #22
 800f78a:	d402      	bmi.n	800f792 <_vfiprintf_r+0x202>
 800f78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f78e:	f7fd fc6a 	bl	800d066 <__retarget_lock_release_recursive>
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	065b      	lsls	r3, r3, #25
 800f796:	f53f af1d 	bmi.w	800f5d4 <_vfiprintf_r+0x44>
 800f79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f79c:	e71c      	b.n	800f5d8 <_vfiprintf_r+0x48>
 800f79e:	ab03      	add	r3, sp, #12
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	462a      	mov	r2, r5
 800f7a4:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <_vfiprintf_r+0x22c>)
 800f7a6:	a904      	add	r1, sp, #16
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	f7fd f941 	bl	800ca30 <_printf_i>
 800f7ae:	e7e4      	b.n	800f77a <_vfiprintf_r+0x1ea>
 800f7b0:	08010055 	.word	0x08010055
 800f7b4:	0801005f 	.word	0x0801005f
 800f7b8:	0800c4e9 	.word	0x0800c4e9
 800f7bc:	0800f56d 	.word	0x0800f56d
 800f7c0:	0801005b 	.word	0x0801005b

0800f7c4 <__swbuf_r>:
 800f7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c6:	460e      	mov	r6, r1
 800f7c8:	4614      	mov	r4, r2
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	b118      	cbz	r0, 800f7d6 <__swbuf_r+0x12>
 800f7ce:	6a03      	ldr	r3, [r0, #32]
 800f7d0:	b90b      	cbnz	r3, 800f7d6 <__swbuf_r+0x12>
 800f7d2:	f7fd fac9 	bl	800cd68 <__sinit>
 800f7d6:	69a3      	ldr	r3, [r4, #24]
 800f7d8:	60a3      	str	r3, [r4, #8]
 800f7da:	89a3      	ldrh	r3, [r4, #12]
 800f7dc:	071a      	lsls	r2, r3, #28
 800f7de:	d525      	bpl.n	800f82c <__swbuf_r+0x68>
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	b31b      	cbz	r3, 800f82c <__swbuf_r+0x68>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	6922      	ldr	r2, [r4, #16]
 800f7e8:	1a98      	subs	r0, r3, r2
 800f7ea:	6963      	ldr	r3, [r4, #20]
 800f7ec:	b2f6      	uxtb	r6, r6
 800f7ee:	4283      	cmp	r3, r0
 800f7f0:	4637      	mov	r7, r6
 800f7f2:	dc04      	bgt.n	800f7fe <__swbuf_r+0x3a>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f7ff fdca 	bl	800f390 <_fflush_r>
 800f7fc:	b9e0      	cbnz	r0, 800f838 <__swbuf_r+0x74>
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	3b01      	subs	r3, #1
 800f802:	60a3      	str	r3, [r4, #8]
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	6022      	str	r2, [r4, #0]
 800f80a:	701e      	strb	r6, [r3, #0]
 800f80c:	6962      	ldr	r2, [r4, #20]
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	429a      	cmp	r2, r3
 800f812:	d004      	beq.n	800f81e <__swbuf_r+0x5a>
 800f814:	89a3      	ldrh	r3, [r4, #12]
 800f816:	07db      	lsls	r3, r3, #31
 800f818:	d506      	bpl.n	800f828 <__swbuf_r+0x64>
 800f81a:	2e0a      	cmp	r6, #10
 800f81c:	d104      	bne.n	800f828 <__swbuf_r+0x64>
 800f81e:	4621      	mov	r1, r4
 800f820:	4628      	mov	r0, r5
 800f822:	f7ff fdb5 	bl	800f390 <_fflush_r>
 800f826:	b938      	cbnz	r0, 800f838 <__swbuf_r+0x74>
 800f828:	4638      	mov	r0, r7
 800f82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82c:	4621      	mov	r1, r4
 800f82e:	4628      	mov	r0, r5
 800f830:	f000 f806 	bl	800f840 <__swsetup_r>
 800f834:	2800      	cmp	r0, #0
 800f836:	d0d5      	beq.n	800f7e4 <__swbuf_r+0x20>
 800f838:	f04f 37ff 	mov.w	r7, #4294967295
 800f83c:	e7f4      	b.n	800f828 <__swbuf_r+0x64>
	...

0800f840 <__swsetup_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4b2a      	ldr	r3, [pc, #168]	; (800f8ec <__swsetup_r+0xac>)
 800f844:	4605      	mov	r5, r0
 800f846:	6818      	ldr	r0, [r3, #0]
 800f848:	460c      	mov	r4, r1
 800f84a:	b118      	cbz	r0, 800f854 <__swsetup_r+0x14>
 800f84c:	6a03      	ldr	r3, [r0, #32]
 800f84e:	b90b      	cbnz	r3, 800f854 <__swsetup_r+0x14>
 800f850:	f7fd fa8a 	bl	800cd68 <__sinit>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f85a:	0718      	lsls	r0, r3, #28
 800f85c:	d422      	bmi.n	800f8a4 <__swsetup_r+0x64>
 800f85e:	06d9      	lsls	r1, r3, #27
 800f860:	d407      	bmi.n	800f872 <__swsetup_r+0x32>
 800f862:	2309      	movs	r3, #9
 800f864:	602b      	str	r3, [r5, #0]
 800f866:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	e034      	b.n	800f8dc <__swsetup_r+0x9c>
 800f872:	0758      	lsls	r0, r3, #29
 800f874:	d512      	bpl.n	800f89c <__swsetup_r+0x5c>
 800f876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f878:	b141      	cbz	r1, 800f88c <__swsetup_r+0x4c>
 800f87a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f87e:	4299      	cmp	r1, r3
 800f880:	d002      	beq.n	800f888 <__swsetup_r+0x48>
 800f882:	4628      	mov	r0, r5
 800f884:	f7fe fa82 	bl	800dd8c <_free_r>
 800f888:	2300      	movs	r3, #0
 800f88a:	6363      	str	r3, [r4, #52]	; 0x34
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	2300      	movs	r3, #0
 800f896:	6063      	str	r3, [r4, #4]
 800f898:	6923      	ldr	r3, [r4, #16]
 800f89a:	6023      	str	r3, [r4, #0]
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	f043 0308 	orr.w	r3, r3, #8
 800f8a2:	81a3      	strh	r3, [r4, #12]
 800f8a4:	6923      	ldr	r3, [r4, #16]
 800f8a6:	b94b      	cbnz	r3, 800f8bc <__swsetup_r+0x7c>
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8b2:	d003      	beq.n	800f8bc <__swsetup_r+0x7c>
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f000 f884 	bl	800f9c4 <__smakebuf_r>
 800f8bc:	89a0      	ldrh	r0, [r4, #12]
 800f8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8c2:	f010 0301 	ands.w	r3, r0, #1
 800f8c6:	d00a      	beq.n	800f8de <__swsetup_r+0x9e>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60a3      	str	r3, [r4, #8]
 800f8cc:	6963      	ldr	r3, [r4, #20]
 800f8ce:	425b      	negs	r3, r3
 800f8d0:	61a3      	str	r3, [r4, #24]
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	b943      	cbnz	r3, 800f8e8 <__swsetup_r+0xa8>
 800f8d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8da:	d1c4      	bne.n	800f866 <__swsetup_r+0x26>
 800f8dc:	bd38      	pop	{r3, r4, r5, pc}
 800f8de:	0781      	lsls	r1, r0, #30
 800f8e0:	bf58      	it	pl
 800f8e2:	6963      	ldrpl	r3, [r4, #20]
 800f8e4:	60a3      	str	r3, [r4, #8]
 800f8e6:	e7f4      	b.n	800f8d2 <__swsetup_r+0x92>
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	e7f7      	b.n	800f8dc <__swsetup_r+0x9c>
 800f8ec:	200001d4 	.word	0x200001d4

0800f8f0 <_raise_r>:
 800f8f0:	291f      	cmp	r1, #31
 800f8f2:	b538      	push	{r3, r4, r5, lr}
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	460d      	mov	r5, r1
 800f8f8:	d904      	bls.n	800f904 <_raise_r+0x14>
 800f8fa:	2316      	movs	r3, #22
 800f8fc:	6003      	str	r3, [r0, #0]
 800f8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f906:	b112      	cbz	r2, 800f90e <_raise_r+0x1e>
 800f908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f90c:	b94b      	cbnz	r3, 800f922 <_raise_r+0x32>
 800f90e:	4620      	mov	r0, r4
 800f910:	f000 f830 	bl	800f974 <_getpid_r>
 800f914:	462a      	mov	r2, r5
 800f916:	4601      	mov	r1, r0
 800f918:	4620      	mov	r0, r4
 800f91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91e:	f000 b817 	b.w	800f950 <_kill_r>
 800f922:	2b01      	cmp	r3, #1
 800f924:	d00a      	beq.n	800f93c <_raise_r+0x4c>
 800f926:	1c59      	adds	r1, r3, #1
 800f928:	d103      	bne.n	800f932 <_raise_r+0x42>
 800f92a:	2316      	movs	r3, #22
 800f92c:	6003      	str	r3, [r0, #0]
 800f92e:	2001      	movs	r0, #1
 800f930:	e7e7      	b.n	800f902 <_raise_r+0x12>
 800f932:	2400      	movs	r4, #0
 800f934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f938:	4628      	mov	r0, r5
 800f93a:	4798      	blx	r3
 800f93c:	2000      	movs	r0, #0
 800f93e:	e7e0      	b.n	800f902 <_raise_r+0x12>

0800f940 <raise>:
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <raise+0xc>)
 800f942:	4601      	mov	r1, r0
 800f944:	6818      	ldr	r0, [r3, #0]
 800f946:	f7ff bfd3 	b.w	800f8f0 <_raise_r>
 800f94a:	bf00      	nop
 800f94c:	200001d4 	.word	0x200001d4

0800f950 <_kill_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d07      	ldr	r5, [pc, #28]	; (800f970 <_kill_r+0x20>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	4611      	mov	r1, r2
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	f7f2 fc6d 	bl	800223c <_kill>
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	d102      	bne.n	800f96c <_kill_r+0x1c>
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	b103      	cbz	r3, 800f96c <_kill_r+0x1c>
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	bd38      	pop	{r3, r4, r5, pc}
 800f96e:	bf00      	nop
 800f970:	20003178 	.word	0x20003178

0800f974 <_getpid_r>:
 800f974:	f7f2 bc5a 	b.w	800222c <_getpid>

0800f978 <__swhatbuf_r>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	460c      	mov	r4, r1
 800f97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f980:	2900      	cmp	r1, #0
 800f982:	b096      	sub	sp, #88	; 0x58
 800f984:	4615      	mov	r5, r2
 800f986:	461e      	mov	r6, r3
 800f988:	da0d      	bge.n	800f9a6 <__swhatbuf_r+0x2e>
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f990:	f04f 0100 	mov.w	r1, #0
 800f994:	bf0c      	ite	eq
 800f996:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f99a:	2340      	movne	r3, #64	; 0x40
 800f99c:	2000      	movs	r0, #0
 800f99e:	6031      	str	r1, [r6, #0]
 800f9a0:	602b      	str	r3, [r5, #0]
 800f9a2:	b016      	add	sp, #88	; 0x58
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}
 800f9a6:	466a      	mov	r2, sp
 800f9a8:	f000 f848 	bl	800fa3c <_fstat_r>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	dbec      	blt.n	800f98a <__swhatbuf_r+0x12>
 800f9b0:	9901      	ldr	r1, [sp, #4]
 800f9b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f9b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f9ba:	4259      	negs	r1, r3
 800f9bc:	4159      	adcs	r1, r3
 800f9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c2:	e7eb      	b.n	800f99c <__swhatbuf_r+0x24>

0800f9c4 <__smakebuf_r>:
 800f9c4:	898b      	ldrh	r3, [r1, #12]
 800f9c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9c8:	079d      	lsls	r5, r3, #30
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	d507      	bpl.n	800f9e0 <__smakebuf_r+0x1c>
 800f9d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	6123      	str	r3, [r4, #16]
 800f9d8:	2301      	movs	r3, #1
 800f9da:	6163      	str	r3, [r4, #20]
 800f9dc:	b002      	add	sp, #8
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	ab01      	add	r3, sp, #4
 800f9e2:	466a      	mov	r2, sp
 800f9e4:	f7ff ffc8 	bl	800f978 <__swhatbuf_r>
 800f9e8:	9900      	ldr	r1, [sp, #0]
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7fe fd99 	bl	800e524 <_malloc_r>
 800f9f2:	b948      	cbnz	r0, 800fa08 <__smakebuf_r+0x44>
 800f9f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f8:	059a      	lsls	r2, r3, #22
 800f9fa:	d4ef      	bmi.n	800f9dc <__smakebuf_r+0x18>
 800f9fc:	f023 0303 	bic.w	r3, r3, #3
 800fa00:	f043 0302 	orr.w	r3, r3, #2
 800fa04:	81a3      	strh	r3, [r4, #12]
 800fa06:	e7e3      	b.n	800f9d0 <__smakebuf_r+0xc>
 800fa08:	89a3      	ldrh	r3, [r4, #12]
 800fa0a:	6020      	str	r0, [r4, #0]
 800fa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	9b00      	ldr	r3, [sp, #0]
 800fa14:	6163      	str	r3, [r4, #20]
 800fa16:	9b01      	ldr	r3, [sp, #4]
 800fa18:	6120      	str	r0, [r4, #16]
 800fa1a:	b15b      	cbz	r3, 800fa34 <__smakebuf_r+0x70>
 800fa1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa20:	4630      	mov	r0, r6
 800fa22:	f000 f81d 	bl	800fa60 <_isatty_r>
 800fa26:	b128      	cbz	r0, 800fa34 <__smakebuf_r+0x70>
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	f023 0303 	bic.w	r3, r3, #3
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	81a3      	strh	r3, [r4, #12]
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	431d      	orrs	r5, r3
 800fa38:	81a5      	strh	r5, [r4, #12]
 800fa3a:	e7cf      	b.n	800f9dc <__smakebuf_r+0x18>

0800fa3c <_fstat_r>:
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4d07      	ldr	r5, [pc, #28]	; (800fa5c <_fstat_r+0x20>)
 800fa40:	2300      	movs	r3, #0
 800fa42:	4604      	mov	r4, r0
 800fa44:	4608      	mov	r0, r1
 800fa46:	4611      	mov	r1, r2
 800fa48:	602b      	str	r3, [r5, #0]
 800fa4a:	f7f2 fc56 	bl	80022fa <_fstat>
 800fa4e:	1c43      	adds	r3, r0, #1
 800fa50:	d102      	bne.n	800fa58 <_fstat_r+0x1c>
 800fa52:	682b      	ldr	r3, [r5, #0]
 800fa54:	b103      	cbz	r3, 800fa58 <_fstat_r+0x1c>
 800fa56:	6023      	str	r3, [r4, #0]
 800fa58:	bd38      	pop	{r3, r4, r5, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20003178 	.word	0x20003178

0800fa60 <_isatty_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d06      	ldr	r5, [pc, #24]	; (800fa7c <_isatty_r+0x1c>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	602b      	str	r3, [r5, #0]
 800fa6c:	f7f2 fc55 	bl	800231a <_isatty>
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d102      	bne.n	800fa7a <_isatty_r+0x1a>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	b103      	cbz	r3, 800fa7a <_isatty_r+0x1a>
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	bd38      	pop	{r3, r4, r5, pc}
 800fa7c:	20003178 	.word	0x20003178

0800fa80 <_init>:
 800fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa82:	bf00      	nop
 800fa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa86:	bc08      	pop	{r3}
 800fa88:	469e      	mov	lr, r3
 800fa8a:	4770      	bx	lr

0800fa8c <_fini>:
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8e:	bf00      	nop
 800fa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa92:	bc08      	pop	{r3}
 800fa94:	469e      	mov	lr, r3
 800fa96:	4770      	bx	lr
