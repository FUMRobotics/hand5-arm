
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ecf0  0800ecf0  0001ecf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1b4  0800f1b4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1b4  0800f1b4  0001f1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1bc  0800f1bc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1bc  0800f1bc  0001f1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1c0  0800f1c0  0001f1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800f1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  200001d8  0800f398  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800f398  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8da  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ee6  00000000  00000000  0003cb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00040a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001243  00000000  00000000  000421a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb95  00000000  00000000  000433e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e518  00000000  00000000  0006ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b29c  00000000  00000000  0008d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007758  00000000  00000000  0019872c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0019fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecd8 	.word	0x0800ecd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ecd8 	.word	0x0800ecd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a6 	b.w	8000f4c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9e08      	ldr	r6, [sp, #32]
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	460f      	mov	r7, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4694      	mov	ip, r2
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0xe2>
 8000c9a:	fab2 f382 	clz	r3, r2
 8000c9e:	b143      	cbz	r3, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	f1c3 0220 	rsb	r2, r3, #32
 8000ca8:	409f      	lsls	r7, r3
 8000caa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb6:	fa1f f58c 	uxth.w	r5, ip
 8000cba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cbe:	0c22      	lsrs	r2, r4, #16
 8000cc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc8:	fb01 f005 	mul.w	r0, r1, r5
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d90a      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd8:	f080 811c 	bcs.w	8000f14 <__udivmoddi4+0x290>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f240 8119 	bls.w	8000f14 <__udivmoddi4+0x290>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	4462      	add	r2, ip
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	b2a4      	uxth	r4, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf6:	fb00 f505 	mul.w	r5, r0, r5
 8000cfa:	42a5      	cmp	r5, r4
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x90>
 8000cfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000d02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x294>
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x294>
 8000d10:	4464      	add	r4, ip
 8000d12:	3802      	subs	r0, #2
 8000d14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11e      	cbz	r6, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40dc      	lsrs	r4, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	e9c6 4300 	strd	r4, r3, [r6]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0xbc>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f000 80ed 	beq.w	8000f0e <__udivmoddi4+0x28a>
 8000d34:	2100      	movs	r1, #0
 8000d36:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	fab3 f183 	clz	r1, r3
 8000d44:	2900      	cmp	r1, #0
 8000d46:	d149      	bne.n	8000ddc <__udivmoddi4+0x158>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0xce>
 8000d4c:	4282      	cmp	r2, r0
 8000d4e:	f200 80f8 	bhi.w	8000f42 <__udivmoddi4+0x2be>
 8000d52:	1a84      	subs	r4, r0, r2
 8000d54:	eb65 0203 	sbc.w	r2, r5, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4617      	mov	r7, r2
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d0e2      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	e9c6 4700 	strd	r4, r7, [r6]
 8000d64:	e7df      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d66:	b902      	cbnz	r2, 8000d6a <__udivmoddi4+0xe6>
 8000d68:	deff      	udf	#255	; 0xff
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8090 	bne.w	8000e94 <__udivmoddi4+0x210>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d84:	fb07 2015 	mls	r0, r7, r5, r2
 8000d88:	0c22      	lsrs	r2, r4, #16
 8000d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d8e:	fb0e f005 	mul.w	r0, lr, r5
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x124>
 8000d96:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x122>
 8000da0:	4290      	cmp	r0, r2
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2b8>
 8000da6:	4645      	mov	r5, r8
 8000da8:	1a12      	subs	r2, r2, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db0:	fb07 2210 	mls	r2, r7, r0, r2
 8000db4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x14e>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x14c>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2c2>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dda:	e79f      	b.n	8000d1c <__udivmoddi4+0x98>
 8000ddc:	f1c1 0720 	rsb	r7, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa05 f401 	lsl.w	r4, r5, r1
 8000dee:	fa20 f307 	lsr.w	r3, r0, r7
 8000df2:	40fd      	lsrs	r5, r7
 8000df4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fb09 5518 	mls	r5, r9, r8, r5
 8000e06:	0c1c      	lsrs	r4, r3, #16
 8000e08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b0>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2b4>
 8000e28:	42a5      	cmp	r5, r4
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2b4>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4464      	add	r4, ip
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	b29d      	uxth	r5, r3
 8000e38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1da>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2ac>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2ac>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fba3 9502 	umull	r9, r5, r3, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46ae      	mov	lr, r5
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x29c>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x298>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x208>
 8000e76:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40ca      	lsrs	r2, r1
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	4317      	orrs	r7, r2
 8000e88:	e9c6 7400 	strd	r7, r4, [r6]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e94:	f1c3 0120 	rsb	r1, r3, #32
 8000e98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea4:	409d      	lsls	r5, r3
 8000ea6:	432a      	orrs	r2, r5
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb8:	0c11      	lsrs	r1, r2, #16
 8000eba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ebe:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec2:	428d      	cmp	r5, r1
 8000ec4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x258>
 8000eca:	eb1c 0101 	adds.w	r1, ip, r1
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed4:	428d      	cmp	r5, r1
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1b49      	subs	r1, r1, r5
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef0:	4291      	cmp	r1, r2
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x282>
 8000ef4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000f02:	3d02      	subs	r5, #2
 8000f04:	4462      	add	r2, ip
 8000f06:	1a52      	subs	r2, r2, r1
 8000f08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0xfc>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000f14:	4639      	mov	r1, r7
 8000f16:	e6e6      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000f18:	4610      	mov	r0, r2
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x90>
 8000f1c:	4548      	cmp	r0, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f0>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f0>
 8000f2c:	4645      	mov	r5, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f30:	462b      	mov	r3, r5
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1da>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x258>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b0>
 8000f3c:	3d02      	subs	r5, #2
 8000f3e:	4462      	add	r2, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x124>
 8000f42:	4608      	mov	r0, r1
 8000f44:	e70a      	b.n	8000d5c <__udivmoddi4+0xd8>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x14e>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	//remove noise in receive packet
	uint16_t counter=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	80fb      	strh	r3, [r7, #6]
	for(counter=uartCounter;counter>0;counter--)
 8000f5a:	4b90      	ldr	r3, [pc, #576]	; (800119c <ProcessUartData+0x24c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
 8000f60:	e034      	b.n	8000fcc <ProcessUartData+0x7c>
	{
		if ((uartRecieveBuffer[counter] == '{'&&uartRecieveBuffer[counter+2] == 'P'&& uartRecieveBuffer[counter+3] == ':')&&(uartRecieveBuffer[counter+1] == 'P'||uartRecieveBuffer[counter+1] == 'S')) {
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4a8e      	ldr	r2, [pc, #568]	; (80011a0 <ProcessUartData+0x250>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	2b7b      	cmp	r3, #123	; 0x7b
 8000f6a:	d12c      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4a8b      	ldr	r2, [pc, #556]	; (80011a0 <ProcessUartData+0x250>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	2b50      	cmp	r3, #80	; 0x50
 8000f76:	d126      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	3303      	adds	r3, #3
 8000f7c:	4a88      	ldr	r2, [pc, #544]	; (80011a0 <ProcessUartData+0x250>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	2b3a      	cmp	r3, #58	; 0x3a
 8000f82:	d120      	bne.n	8000fc6 <ProcessUartData+0x76>
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a85      	ldr	r2, [pc, #532]	; (80011a0 <ProcessUartData+0x250>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	2b50      	cmp	r3, #80	; 0x50
 8000f8e:	d005      	beq.n	8000f9c <ProcessUartData+0x4c>
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a82      	ldr	r2, [pc, #520]	; (80011a0 <ProcessUartData+0x250>)
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	2b53      	cmp	r3, #83	; 0x53
 8000f9a:	d114      	bne.n	8000fc6 <ProcessUartData+0x76>
			for(uint16_t i=0 ; i<uartCounter ; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	80bb      	strh	r3, [r7, #4]
 8000fa0:	e00a      	b.n	8000fb8 <ProcessUartData+0x68>
			{
				uartRecieveBuffer[i]=uartRecieveBuffer[counter+i];
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	497d      	ldr	r1, [pc, #500]	; (80011a0 <ProcessUartData+0x250>)
 8000fac:	5c89      	ldrb	r1, [r1, r2]
 8000fae:	4a7c      	ldr	r2, [pc, #496]	; (80011a0 <ProcessUartData+0x250>)
 8000fb0:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i=0 ; i<uartCounter ; i++)
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	80bb      	strh	r3, [r7, #4]
 8000fb8:	4b78      	ldr	r3, [pc, #480]	; (800119c <ProcessUartData+0x24c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	88ba      	ldrh	r2, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3ee      	bcc.n	8000fa2 <ProcessUartData+0x52>
			}
			break;
 8000fc4:	e005      	b.n	8000fd2 <ProcessUartData+0x82>
	for(counter=uartCounter;counter>0;counter--)
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1c7      	bne.n	8000f62 <ProcessUartData+0x12>
		}
	}
	if(strstr(uartRecieveBuffer,"{SP:"))
 8000fd2:	4974      	ldr	r1, [pc, #464]	; (80011a4 <ProcessUartData+0x254>)
 8000fd4:	4872      	ldr	r0, [pc, #456]	; (80011a0 <ProcessUartData+0x250>)
 8000fd6:	f00b f8e6 	bl	800c1a6 <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <ProcessUartData+0x98>
	{
		control_mode=speed_mode;
 8000fe0:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <ProcessUartData+0x258>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e009      	b.n	8000ffc <ProcessUartData+0xac>
	}
	else if(strstr(uartRecieveBuffer,"{PP:"))
 8000fe8:	4970      	ldr	r1, [pc, #448]	; (80011ac <ProcessUartData+0x25c>)
 8000fea:	486d      	ldr	r0, [pc, #436]	; (80011a0 <ProcessUartData+0x250>)
 8000fec:	f00b f8db 	bl	800c1a6 <strstr>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <ProcessUartData+0xac>
	{
		control_mode=position_mode;
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <ProcessUartData+0x258>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
	}
	//parse receive data
	char* result;
	result= memchr(uartRecieveBuffer, ':', strlen(uartRecieveBuffer));
 8000ffc:	4868      	ldr	r0, [pc, #416]	; (80011a0 <ProcessUartData+0x250>)
 8000ffe:	f7ff f937 	bl	8000270 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	213a      	movs	r1, #58	; 0x3a
 8001008:	4865      	ldr	r0, [pc, #404]	; (80011a0 <ProcessUartData+0x250>)
 800100a:	f7ff f8e1 	bl	80001d0 <memchr>
 800100e:	6038      	str	r0, [r7, #0]
	Fingers_Status.Pinky.SetPoint = atof(result+1);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fd17 	bl	800aa48 <atof>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <ProcessUartData+0x260>)
 8001024:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260
	if(Fingers_Status.Pinky.SetPoint>100)
 8001028:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <ProcessUartData+0x260>)
 800102a:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <ProcessUartData+0x264>)
 8001034:	f7ff fd70 	bl	8000b18 <__aeabi_dcmpgt>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <ProcessUartData+0xfa>
		Fingers_Status.Pinky.SetPoint=100;
 800103e:	495c      	ldr	r1, [pc, #368]	; (80011b0 <ProcessUartData+0x260>)
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <ProcessUartData+0x264>)
 8001046:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 800104a:	4855      	ldr	r0, [pc, #340]	; (80011a0 <ProcessUartData+0x250>)
 800104c:	f7ff f910 	bl	8000270 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	2152      	movs	r1, #82	; 0x52
 8001056:	4852      	ldr	r0, [pc, #328]	; (80011a0 <ProcessUartData+0x250>)
 8001058:	f7ff f8ba 	bl	80001d0 <memchr>
 800105c:	6038      	str	r0, [r7, #0]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3302      	adds	r3, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f009 fcf0 	bl	800aa48 <atof>
 8001068:	eeb0 7a40 	vmov.f32	s14, s0
 800106c:	eef0 7a60 	vmov.f32	s15, s1
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <ProcessUartData+0x260>)
 8001072:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8
	if(Fingers_Status.Ring.SetPoint>100)
 8001076:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <ProcessUartData+0x260>)
 8001078:	e9d3 0172 	ldrd	r0, r1, [r3, #456]	; 0x1c8
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <ProcessUartData+0x264>)
 8001082:	f7ff fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <ProcessUartData+0x148>
		Fingers_Status.Ring.SetPoint=100;
 800108c:	4948      	ldr	r1, [pc, #288]	; (80011b0 <ProcessUartData+0x260>)
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <ProcessUartData+0x264>)
 8001094:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <ProcessUartData+0x250>)
 800109a:	f7ff f8e9 	bl	8000270 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	214d      	movs	r1, #77	; 0x4d
 80010a4:	483e      	ldr	r0, [pc, #248]	; (80011a0 <ProcessUartData+0x250>)
 80010a6:	f7ff f893 	bl	80001d0 <memchr>
 80010aa:	6038      	str	r0, [r7, #0]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fcc9 	bl	800aa48 <atof>
 80010b6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ba:	eef0 7a60 	vmov.f32	s15, s1
 80010be:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <ProcessUartData+0x260>)
 80010c0:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130
	if(Fingers_Status.Middle.SetPoint>100)
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <ProcessUartData+0x260>)
 80010c6:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <ProcessUartData+0x264>)
 80010d0:	f7ff fd22 	bl	8000b18 <__aeabi_dcmpgt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <ProcessUartData+0x196>
		Fingers_Status.Middle.SetPoint=100;
 80010da:	4935      	ldr	r1, [pc, #212]	; (80011b0 <ProcessUartData+0x260>)
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <ProcessUartData+0x264>)
 80010e2:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 80010e6:	482e      	ldr	r0, [pc, #184]	; (80011a0 <ProcessUartData+0x250>)
 80010e8:	f7ff f8c2 	bl	8000270 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	2149      	movs	r1, #73	; 0x49
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <ProcessUartData+0x250>)
 80010f4:	f7ff f86c 	bl	80001d0 <memchr>
 80010f8:	6038      	str	r0, [r7, #0]
	Fingers_Status.Index.SetPoint= atof(result+2);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3302      	adds	r3, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fca2 	bl	800aa48 <atof>
 8001104:	eeb0 7a40 	vmov.f32	s14, s0
 8001108:	eef0 7a60 	vmov.f32	s15, s1
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <ProcessUartData+0x260>)
 800110e:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	if(Fingers_Status.Index.SetPoint>100)
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <ProcessUartData+0x260>)
 8001114:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <ProcessUartData+0x264>)
 800111e:	f7ff fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <ProcessUartData+0x1e4>
		Fingers_Status.Index.SetPoint=100;
 8001128:	4921      	ldr	r1, [pc, #132]	; (80011b0 <ProcessUartData+0x260>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <ProcessUartData+0x264>)
 8001130:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <ProcessUartData+0x250>)
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	2154      	movs	r1, #84	; 0x54
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <ProcessUartData+0x250>)
 8001142:	f7ff f845 	bl	80001d0 <memchr>
 8001146:	6038      	str	r0, [r7, #0]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3302      	adds	r3, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f009 fc7b 	bl	800aa48 <atof>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	eef0 7a60 	vmov.f32	s15, s1
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <ProcessUartData+0x260>)
 800115c:	ed83 7b00 	vstr	d7, [r3]
	if(Fingers_Status.Thumb.SetPoint>100)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <ProcessUartData+0x260>)
 8001162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <ProcessUartData+0x264>)
 800116c:	f7ff fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <ProcessUartData+0x232>
		Fingers_Status.Thumb.SetPoint=100;
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <ProcessUartData+0x260>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <ProcessUartData+0x264>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]
	send_data_UART=1;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <ProcessUartData+0x268>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <ProcessUartData+0x26c>)
 800118e:	f005 fc2d 	bl	80069ec <HAL_GPIO_TogglePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001f4 	.word	0x200001f4
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	0800ecf0 	.word	0x0800ecf0
 80011a8:	20000327 	.word	0x20000327
 80011ac:	0800ecf8 	.word	0x0800ecf8
 80011b0:	200006f0 	.word	0x200006f0
 80011b4:	40590000 	.word	0x40590000
 80011b8:	20000326 	.word	0x20000326
 80011bc:	48000800 	.word	0x48000800

080011c0 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_UART_RxCpltCallback+0x80>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d132      	bne.n	8001238 <HAL_UART_RxCpltCallback+0x78>
		uartRecieveBuffer[uartCounter]=RXuart;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_RxCpltCallback+0x88>)
 80011da:	7819      	ldrb	r1, [r3, #0]
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011de:	5499      	strb	r1, [r3, r2]
		if(uartCounter>1)
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d91c      	bls.n	8001222 <HAL_UART_RxCpltCallback+0x62>
		{
			if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d115      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	2b0d      	cmp	r3, #13
 8001202:	d10e      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b02      	subs	r3, #2
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_RxCpltCallback+0x8c>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	2b7d      	cmp	r3, #125	; 0x7d
 8001210:	d107      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x62>
				ProcessUartData();
 8001212:	f7ff fe9d 	bl	8000f50 <ProcessUartData>
				ManualControl=1;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_UART_RxCpltCallback+0x90>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
				uartCounter=-1;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	701a      	strb	r2, [r3, #0]

//				for(uint16_t cleanCounter=0;cleanCounter<500;cleanCounter++)
//					uartRecieveBuffer[cleanCounter]=0;
			}
		}
		uartCounter++;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_UART_RxCpltCallback+0x84>)
 800122c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 800122e:	2201      	movs	r2, #1
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <HAL_UART_RxCpltCallback+0x88>)
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 8001234:	f008 f922 	bl	800947c <HAL_UART_Receive_IT>
	}
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40004c00 	.word	0x40004c00
 8001244:	200001f4 	.word	0x200001f4
 8001248:	20000324 	.word	0x20000324
 800124c:	200001f8 	.word	0x200001f8
 8001250:	200009e8 	.word	0x200009e8
 8001254:	20000664 	.word	0x20000664

08001258 <HAL_UART_TxCpltCallback>:
/*
 * Function2--------------------------
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_UART_TxCpltCallback+0x24>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d102      	bne.n	8001270 <HAL_UART_TxCpltCallback+0x18>
	{
		TX_State=idel;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_UART_TxCpltCallback+0x28>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
	}
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40013800 	.word	0x40013800
 8001280:	20000325 	.word	0x20000325

08001284 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <MX_ADC1_Init+0x158>)
 80012aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80012ac:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012c8:	2204      	movs	r2, #4
 80012ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012da:	2205      	movs	r2, #5
 80012dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e6:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <MX_ADC1_Init+0x154>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001308:	4833      	ldr	r0, [pc, #204]	; (80013d8 <MX_ADC1_Init+0x154>)
 800130a:	f003 fd05 	bl	8004d18 <HAL_ADC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001314:	f001 fa4c 	bl	80027b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001324:	f004 fc54 	bl	8005bd0 <HAL_ADCEx_MultiModeConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800132e:	f001 fa3f 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_ADC1_Init+0x15c>)
 8001334:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001336:	2306      	movs	r3, #6
 8001338:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800133a:	2307      	movs	r3, #7
 800133c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800133e:	237f      	movs	r3, #127	; 0x7f
 8001340:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001342:	2304      	movs	r3, #4
 8001344:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001350:	f003 ff0c 	bl	800516c <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800135a:	f001 fa29 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_ADC1_Init+0x160>)
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001362:	230c      	movs	r3, #12
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <MX_ADC1_Init+0x154>)
 800136c:	f003 fefe 	bl	800516c <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001376:	f001 fa1b 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_ADC1_Init+0x164>)
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800137e:	2312      	movs	r3, #18
 8001380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_ADC1_Init+0x154>)
 8001388:	f003 fef0 	bl	800516c <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001392:	f001 fa0d 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_ADC1_Init+0x168>)
 8001398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800139a:	2318      	movs	r3, #24
 800139c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_ADC1_Init+0x154>)
 80013a4:	f003 fee2 	bl	800516c <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80013ae:	f001 f9ff 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC1_Init+0x16c>)
 80013b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_ADC1_Init+0x154>)
 80013c2:	f003 fed3 	bl	800516c <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80013cc:	f001 f9f0 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000328 	.word	0x20000328
 80013dc:	50040000 	.word	0x50040000
 80013e0:	2a000400 	.word	0x2a000400
 80013e4:	25b00200 	.word	0x25b00200
 80013e8:	1d500080 	.word	0x1d500080
 80013ec:	0c900008 	.word	0x0c900008
 80013f0:	10c00010 	.word	0x10c00010

080013f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <MX_ADC2_Init+0x14c>)
 800140c:	4a4d      	ldr	r2, [pc, #308]	; (8001544 <MX_ADC2_Init+0x150>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001416:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <MX_ADC2_Init+0x14c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001426:	2201      	movs	r2, #1
 8001428:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <MX_ADC2_Init+0x14c>)
 800142c:	2204      	movs	r2, #4
 800142e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001432:	2200      	movs	r2, #0
 8001434:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001438:	2201      	movs	r2, #1
 800143a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 6;
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <MX_ADC2_Init+0x14c>)
 800143e:	2206      	movs	r2, #6
 8001440:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_ADC2_Init+0x14c>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <MX_ADC2_Init+0x14c>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800146c:	4834      	ldr	r0, [pc, #208]	; (8001540 <MX_ADC2_Init+0x14c>)
 800146e:	f003 fc53 	bl	8004d18 <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001478:	f001 f99a 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147c:	4b32      	ldr	r3, [pc, #200]	; (8001548 <MX_ADC2_Init+0x154>)
 800147e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2306      	movs	r3, #6
 8001482:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001484:	2307      	movs	r3, #7
 8001486:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001488:	237f      	movs	r3, #127	; 0x7f
 800148a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148c:	2304      	movs	r3, #4
 800148e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <MX_ADC2_Init+0x14c>)
 800149a:	f003 fe67 	bl	800516c <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80014a4:	f001 f984 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_ADC2_Init+0x158>)
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ac:	230c      	movs	r3, #12
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014b6:	f003 fe59 	bl	800516c <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80014c0:	f001 f976 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_ADC2_Init+0x15c>)
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014c8:	2312      	movs	r3, #18
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	4619      	mov	r1, r3
 80014d0:	481b      	ldr	r0, [pc, #108]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014d2:	f003 fe4b 	bl	800516c <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC2_Init+0xec>
  {
    Error_Handler();
 80014dc:	f001 f968 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_ADC2_Init+0x160>)
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014e4:	2318      	movs	r3, #24
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_ADC2_Init+0x14c>)
 80014ee:	f003 fe3d 	bl	800516c <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC2_Init+0x108>
  {
    Error_Handler();
 80014f8:	f001 f95a 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_ADC2_Init+0x164>)
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_ADC2_Init+0x14c>)
 800150c:	f003 fe2e 	bl	800516c <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8001516:	f001 f94b 	bl	80027b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_ADC2_Init+0x168>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800151e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_ADC2_Init+0x14c>)
 800152a:	f003 fe1f 	bl	800516c <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC2_Init+0x144>
  {
    Error_Handler();
 8001534:	f001 f93c 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000038c 	.word	0x2000038c
 8001544:	50040100 	.word	0x50040100
 8001548:	04300002 	.word	0x04300002
 800154c:	08600004 	.word	0x08600004
 8001550:	19200040 	.word	0x19200040
 8001554:	21800100 	.word	0x21800100
 8001558:	2e300800 	.word	0x2e300800
 800155c:	32601000 	.word	0x32601000

08001560 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a61      	ldr	r2, [pc, #388]	; (8001704 <HAL_ADC_MspInit+0x1a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d146      	bne.n	8001610 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800158a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10b      	bne.n	80015ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001594:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800159a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b4e      	ldr	r3, [pc, #312]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 80015dc:	230c      	movs	r3, #12
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015e0:	230b      	movs	r3, #11
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4848      	ldr	r0, [pc, #288]	; (8001710 <HAL_ADC_MspInit+0x1b0>)
 80015f0:	f005 f822 	bl	8006638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 80015f4:	2334      	movs	r3, #52	; 0x34
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f8:	230b      	movs	r3, #11
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f005 f815 	bl	8006638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800160e:	e075      	b.n	80016fc <HAL_ADC_MspInit+0x19c>
  else if(adcHandle->Instance==ADC2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_ADC_MspInit+0x1b4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d170      	bne.n	80016fc <HAL_ADC_MspInit+0x19c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001622:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_ADC_MspInit+0x1a8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a36      	ldr	r2, [pc, #216]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_ADC_MspInit+0x1ac>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 8001674:	2303      	movs	r3, #3
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001678:	230b      	movs	r3, #11
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <HAL_ADC_MspInit+0x1b0>)
 8001688:	f004 ffd6 	bl	8006638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 800168c:	23ca      	movs	r3, #202	; 0xca
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001690:	230b      	movs	r3, #11
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f004 ffc9 	bl	8006638 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_ADC_MspInit+0x1bc>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016d6:	2220      	movs	r2, #32
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016e2:	f004 fd33 	bl	800614c <HAL_DMA_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_ADC_MspInit+0x190>
      Error_Handler();
 80016ec:	f001 f860 	bl	80027b0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_ADC_MspInit+0x1b8>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	50040000 	.word	0x50040000
 8001708:	20000438 	.word	0x20000438
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800
 8001714:	50040100 	.word	0x50040100
 8001718:	200003f0 	.word	0x200003f0
 800171c:	4002001c 	.word	0x4002001c

08001720 <ADC_ReadCurrent_Pinky>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Pinky()
{
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	af00      	add	r7, sp, #0
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.01*ADCData[Pinky]))/1.01;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 8001726:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fefa 	bl	8000524 <__aeabi_i2d>
 8001730:	4604      	mov	r4, r0
 8001732:	460d      	mov	r5, r1
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <ADC_ReadCurrent_Pinky+0xa4>)
 8001736:	891b      	ldrh	r3, [r3, #8]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fef2 	bl	8000524 <__aeabi_i2d>
 8001740:	a31b      	add	r3, pc, #108	; (adr r3, 80017b0 <ADC_ReadCurrent_Pinky+0x90>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff57 	bl	80005f8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fd9b 	bl	800028c <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	a316      	add	r3, pc, #88	; (adr r3, 80017b8 <ADC_ReadCurrent_Pinky+0x98>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f872 	bl	800084c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 800177a:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	if(Fingers_Status.Pinky.Current>Max_Current_Close_Pinky || Fingers_Status.Pinky.Current<Min_Current_Open_Pinky)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 8001780:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8001784:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001788:	d805      	bhi.n	8001796 <ADC_ReadCurrent_Pinky+0x76>
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 800178c:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8001790:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001794:	d204      	bcs.n	80017a0 <ADC_ReadCurrent_Pinky+0x80>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 800179e:	e004      	b.n	80017aa <ADC_ReadCurrent_Pinky+0x8a>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <ADC_ReadCurrent_Pinky+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	47ae147b 	.word	0x47ae147b
 80017b4:	3f847ae1 	.word	0x3f847ae1
 80017b8:	c28f5c29 	.word	0xc28f5c29
 80017bc:	3ff028f5 	.word	0x3ff028f5
 80017c0:	200006f0 	.word	0x200006f0
 80017c4:	200009ec 	.word	0x200009ec

080017c8 <ADC_ReadCurrent_Ring>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Ring()
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.01*ADCData[Ring]))/1.01;
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 80017ce:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <ADC_ReadCurrent_Ring+0xac>)
 80017de:	88db      	ldrh	r3, [r3, #6]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe9e 	bl	8000524 <__aeabi_i2d>
 80017e8:	a31d      	add	r3, pc, #116	; (adr r3, 8001860 <ADC_ReadCurrent_Ring+0x98>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd47 	bl	800028c <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a318      	add	r3, pc, #96	; (adr r3, 8001868 <ADC_ReadCurrent_Ring+0xa0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2uiz>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 8001822:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
	if(Fingers_Status.Ring.Current>Max_Current_Close_Ring || Fingers_Status.Ring.Current<Min_Current_Open_Ring)
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 8001828:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 800182c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001830:	4293      	cmp	r3, r2
 8001832:	d806      	bhi.n	8001842 <ADC_ReadCurrent_Ring+0x7a>
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 8001836:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 800183a:	f240 620d 	movw	r2, #1549	; 0x60d
 800183e:	4293      	cmp	r3, r2
 8001840:	d804      	bhi.n	800184c <ADC_ReadCurrent_Ring+0x84>
		Fingers_Status.Ring.Stuck_Finger=1;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 8001844:	2201      	movs	r2, #1
 8001846:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 800184a:	e004      	b.n	8001856 <ADC_ReadCurrent_Ring+0x8e>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <ADC_ReadCurrent_Ring+0xa8>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	bdb0      	pop	{r4, r5, r7, pc}
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	47ae147b 	.word	0x47ae147b
 8001864:	3f847ae1 	.word	0x3f847ae1
 8001868:	c28f5c29 	.word	0xc28f5c29
 800186c:	3ff028f5 	.word	0x3ff028f5
 8001870:	200006f0 	.word	0x200006f0
 8001874:	200009ec 	.word	0x200009ec

08001878 <ADC_ReadCurrent_Middle>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Middle()
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	af00      	add	r7, sp, #0
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.01*ADCData[Middle]))/1.01;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 800187e:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe4e 	bl	8000524 <__aeabi_i2d>
 8001888:	4604      	mov	r4, r0
 800188a:	460d      	mov	r5, r1
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <ADC_ReadCurrent_Middle+0xa4>)
 800188e:	889b      	ldrh	r3, [r3, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe46 	bl	8000524 <__aeabi_i2d>
 8001898:	a31b      	add	r3, pc, #108	; (adr r3, 8001908 <ADC_ReadCurrent_Middle+0x90>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe feab 	bl	80005f8 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4620      	mov	r0, r4
 80018a8:	4629      	mov	r1, r5
 80018aa:	f7fe fcef 	bl	800028c <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	a316      	add	r3, pc, #88	; (adr r3, 8001910 <ADC_ReadCurrent_Middle+0x98>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe ffc6 	bl	800084c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f96e 	bl	8000ba8 <__aeabi_d2uiz>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 80018d2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	if(Fingers_Status.Middle.Current>Max_Current_Close_Middle || Fingers_Status.Middle.Current<Min_Current_Open_Middle)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 80018d8:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80018dc:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d805      	bhi.n	80018f0 <ADC_ReadCurrent_Middle+0x78>
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 80018e6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80018ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80018ee:	d204      	bcs.n	80018fa <ADC_ReadCurrent_Middle+0x82>
		Fingers_Status.Middle.Stuck_Finger=1;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 80018f8:	e004      	b.n	8001904 <ADC_ReadCurrent_Middle+0x8c>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <ADC_ReadCurrent_Middle+0xa0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	47ae147b 	.word	0x47ae147b
 800190c:	3f847ae1 	.word	0x3f847ae1
 8001910:	c28f5c29 	.word	0xc28f5c29
 8001914:	3ff028f5 	.word	0x3ff028f5
 8001918:	200006f0 	.word	0x200006f0
 800191c:	200009ec 	.word	0x200009ec

08001920 <ADC_ReadCurrent_Index>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Index()
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	af00      	add	r7, sp, #0
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.01*ADCData[Index]))/1.01;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 8001926:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdfa 	bl	8000524 <__aeabi_i2d>
 8001930:	4604      	mov	r4, r0
 8001932:	460d      	mov	r5, r1
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <ADC_ReadCurrent_Index+0xac>)
 8001936:	885b      	ldrh	r3, [r3, #2]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdf2 	bl	8000524 <__aeabi_i2d>
 8001940:	a31d      	add	r3, pc, #116	; (adr r3, 80019b8 <ADC_ReadCurrent_Index+0x98>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fe57 	bl	80005f8 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fc9b 	bl	800028c <__adddf3>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	a318      	add	r3, pc, #96	; (adr r3, 80019c0 <ADC_ReadCurrent_Index+0xa0>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe ff72 	bl	800084c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f91a 	bl	8000ba8 <__aeabi_d2uiz>
 8001974:	4603      	mov	r3, r0
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 800197a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	if(Fingers_Status.Index.Current>Max_Current_Close_Index || Fingers_Status.Index.Current<Min_Current_Open_Index)
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 8001980:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8001984:	f240 729e 	movw	r2, #1950	; 0x79e
 8001988:	4293      	cmp	r3, r2
 800198a:	d806      	bhi.n	800199a <ADC_ReadCurrent_Index+0x7a>
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 800198e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8001992:	f240 52db 	movw	r2, #1499	; 0x5db
 8001996:	4293      	cmp	r3, r2
 8001998:	d804      	bhi.n	80019a4 <ADC_ReadCurrent_Index+0x84>
		Fingers_Status.Index.Stuck_Finger=1;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 800199c:	2201      	movs	r2, #1
 800199e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80019a2:	e004      	b.n	80019ae <ADC_ReadCurrent_Index+0x8e>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <ADC_ReadCurrent_Index+0xa8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	47ae147b 	.word	0x47ae147b
 80019bc:	3f847ae1 	.word	0x3f847ae1
 80019c0:	c28f5c29 	.word	0xc28f5c29
 80019c4:	3ff028f5 	.word	0x3ff028f5
 80019c8:	200006f0 	.word	0x200006f0
 80019cc:	200009ec 	.word	0x200009ec

080019d0 <ADC_ReadCurrent_Thumb>:
	    Error_Handler();
	  }
	  __enable_irq();
}
void ADC_ReadCurrent_Thumb()
{
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.01*ADCData[Thumb]))/1.01;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 80019d6:	8c1b      	ldrh	r3, [r3, #32]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fda3 	bl	8000524 <__aeabi_i2d>
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <ADC_ReadCurrent_Thumb+0x9c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd9b 	bl	8000524 <__aeabi_i2d>
 80019ee:	a31a      	add	r3, pc, #104	; (adr r3, 8001a58 <ADC_ReadCurrent_Thumb+0x88>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc44 	bl	800028c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	a314      	add	r3, pc, #80	; (adr r3, 8001a60 <ADC_ReadCurrent_Thumb+0x90>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe ff1b 	bl	800084c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8c3 	bl	8000ba8 <__aeabi_d2uiz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 8001a28:	841a      	strh	r2, [r3, #32]
	if(Fingers_Status.Thumb.Current>Max_Current_Close_Thumb || Fingers_Status.Thumb.Current<Min_Current_Open_Thumb)
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 8001a2c:	8c1b      	ldrh	r3, [r3, #32]
 8001a2e:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001a32:	d804      	bhi.n	8001a3e <ADC_ReadCurrent_Thumb+0x6e>
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 8001a36:	8c1b      	ldrh	r3, [r3, #32]
 8001a38:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001a3c:	d203      	bcs.n	8001a46 <ADC_ReadCurrent_Thumb+0x76>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	75da      	strb	r2, [r3, #23]
 8001a44:	e003      	b.n	8001a4e <ADC_ReadCurrent_Thumb+0x7e>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <ADC_ReadCurrent_Thumb+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	75da      	strb	r2, [r3, #23]
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	47ae147b 	.word	0x47ae147b
 8001a5c:	3f847ae1 	.word	0x3f847ae1
 8001a60:	c28f5c29 	.word	0xc28f5c29
 8001a64:	3ff028f5 	.word	0x3ff028f5
 8001a68:	200006f0 	.word	0x200006f0
 8001a6c:	200009ec 	.word	0x200009ec

08001a70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <MX_CAN1_Init+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ac0:	f004 f936 	bl	8005d30 <HAL_CAN_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001aca:	f000 fe71 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000043c 	.word	0x2000043c
 8001ad8:	40006400 	.word	0x40006400

08001adc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_CAN_MspInit+0x80>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d129      	bne.n	8001b52 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_CAN_MspInit+0x84>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b40:	2309      	movs	r3, #9
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f004 fd73 	bl	8006638 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40006400 	.word	0x40006400
 8001b60:	40021000 	.word	0x40021000

08001b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6493      	str	r3, [r2, #72]	; 0x48
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_DMA_Init+0x38>)
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200c      	movs	r0, #12
 8001b88:	f004 faa9 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	f004 fac2 	bl	8006116 <HAL_NVIC_EnableIRQ>

}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c1c:	4838      	ldr	r0, [pc, #224]	; (8001d00 <MX_GPIO_Init+0x160>)
 8001c1e:	f004 fecd 	bl	80069bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001c22:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4831      	ldr	r0, [pc, #196]	; (8001d00 <MX_GPIO_Init+0x160>)
 8001c3c:	f004 fcfc 	bl	8006638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001c40:	2330      	movs	r3, #48	; 0x30
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c44:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	482a      	ldr	r0, [pc, #168]	; (8001d00 <MX_GPIO_Init+0x160>)
 8001c56:	f004 fcef 	bl	8006638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001c5a:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001c5e:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c60:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4824      	ldr	r0, [pc, #144]	; (8001d04 <MX_GPIO_Init+0x164>)
 8001c72:	f004 fce1 	bl	8006638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f004 fcd2 	bl	8006638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f004 fa20 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c9e:	2006      	movs	r0, #6
 8001ca0:	f004 fa39 	bl	8006116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2007      	movs	r0, #7
 8001caa:	f004 fa18 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cae:	2007      	movs	r0, #7
 8001cb0:	f004 fa31 	bl	8006116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2008      	movs	r0, #8
 8001cba:	f004 fa10 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	f004 fa29 	bl	8006116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f004 fa08 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f004 fa21 	bl	8006116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2017      	movs	r0, #23
 8001cda:	f004 fa00 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cde:	2017      	movs	r0, #23
 8001ce0:	f004 fa19 	bl	8006116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2028      	movs	r0, #40	; 0x28
 8001cea:	f004 f9f8 	bl	80060de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cee:	2028      	movs	r0, #40	; 0x28
 8001cf0:	f004 fa11 	bl	8006116 <HAL_NVIC_EnableIRQ>

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000800 	.word	0x48000800
 8001d04:	48000400 	.word	0x48000400

08001d08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d18:	f000 811b 	beq.w	8001f52 <HAL_GPIO_EXTI_Callback+0x24a>
 8001d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d20:	f300 8282 	bgt.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d28:	f000 80d9 	beq.w	8001ede <HAL_GPIO_EXTI_Callback+0x1d6>
 8001d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d30:	f300 827a 	bgt.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d38:	d05d      	beq.n	8001df6 <HAL_GPIO_EXTI_Callback+0xee>
 8001d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3e:	f300 8273 	bgt.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d46:	f000 8090 	beq.w	8001e6a <HAL_GPIO_EXTI_Callback+0x162>
 8001d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4e:	f300 826b 	bgt.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	dc4a      	bgt.n	8001dec <HAL_GPIO_EXTI_Callback+0xe4>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f340 8266 	ble.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	2b1f      	cmp	r3, #31
 8001d60:	f200 8262 	bhi.w	8002228 <HAL_GPIO_EXTI_Callback+0x520>
 8001d64:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_GPIO_EXTI_Callback+0x64>)
 8001d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6a:	bf00      	nop
 8001d6c:	080020b5 	.word	0x080020b5
 8001d70:	08002129 	.word	0x08002129
 8001d74:	08002229 	.word	0x08002229
 8001d78:	0800219d 	.word	0x0800219d
 8001d7c:	08002229 	.word	0x08002229
 8001d80:	08002229 	.word	0x08002229
 8001d84:	08002229 	.word	0x08002229
 8001d88:	08002229 	.word	0x08002229
 8001d8c:	08002229 	.word	0x08002229
 8001d90:	08002229 	.word	0x08002229
 8001d94:	08002229 	.word	0x08002229
 8001d98:	08002229 	.word	0x08002229
 8001d9c:	08002229 	.word	0x08002229
 8001da0:	08002229 	.word	0x08002229
 8001da4:	08002229 	.word	0x08002229
 8001da8:	0800203b 	.word	0x0800203b
 8001dac:	08002229 	.word	0x08002229
 8001db0:	08002229 	.word	0x08002229
 8001db4:	08002229 	.word	0x08002229
 8001db8:	08002229 	.word	0x08002229
 8001dbc:	08002229 	.word	0x08002229
 8001dc0:	08002229 	.word	0x08002229
 8001dc4:	08002229 	.word	0x08002229
 8001dc8:	08002229 	.word	0x08002229
 8001dcc:	08002229 	.word	0x08002229
 8001dd0:	08002229 	.word	0x08002229
 8001dd4:	08002229 	.word	0x08002229
 8001dd8:	08002229 	.word	0x08002229
 8001ddc:	08002229 	.word	0x08002229
 8001de0:	08002229 	.word	0x08002229
 8001de4:	08002229 	.word	0x08002229
 8001de8:	08001fc7 	.word	0x08001fc7
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	f000 81f7 	beq.w	80021e2 <HAL_GPIO_EXTI_Callback+0x4da>
				default:
					break;
			}
			break;
		default:
			break;
 8001df4:	e218      	b.n	8002228 <HAL_GPIO_EXTI_Callback+0x520>
			switch (Fingers_Status.Pinky.Direction_Encoder) {
 8001df6:	4bad      	ldr	r3, [pc, #692]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001df8:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d002      	beq.n	8001e06 <HAL_GPIO_EXTI_Callback+0xfe>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d015      	beq.n	8001e30 <HAL_GPIO_EXTI_Callback+0x128>
					break;
 8001e04:	e030      	b.n	8001e68 <HAL_GPIO_EXTI_Callback+0x160>
					Fingers_Status.Pinky.Encoder++;
 8001e06:	4ba9      	ldr	r3, [pc, #676]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e08:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4ba6      	ldr	r3, [pc, #664]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e12:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001e16:	4ba5      	ldr	r3, [pc, #660]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e18:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e1c:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d91e      	bls.n	8001e62 <HAL_GPIO_EXTI_Callback+0x15a>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001e24:	4ba1      	ldr	r3, [pc, #644]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e26:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e2a:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001e2e:	e018      	b.n	8001e62 <HAL_GPIO_EXTI_Callback+0x15a>
					Fingers_Status.Pinky.Encoder--;
 8001e30:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e32:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b9c      	ldr	r3, [pc, #624]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e3c:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<200)
 8001e40:	4b9a      	ldr	r3, [pc, #616]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e42:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e46:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d804      	bhi.n	8001e58 <HAL_GPIO_EXTI_Callback+0x150>
 8001e4e:	4b97      	ldr	r3, [pc, #604]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e50:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e54:	2bc7      	cmp	r3, #199	; 0xc7
 8001e56:	d806      	bhi.n	8001e66 <HAL_GPIO_EXTI_Callback+0x15e>
						Fingers_Status.Pinky.Encoder=0;
 8001e58:	4b94      	ldr	r3, [pc, #592]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_EXTI_Callback+0x15e>
					break;
 8001e62:	bf00      	nop
 8001e64:	e1e1      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001e66:	bf00      	nop
			break;
 8001e68:	e1df      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Pinky.Direction_Encoder) {
 8001e6a:	4b90      	ldr	r3, [pc, #576]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e6c:	f893 3273 	ldrb.w	r3, [r3, #627]	; 0x273
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d002      	beq.n	8001e7a <HAL_GPIO_EXTI_Callback+0x172>
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d015      	beq.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x19c>
					break;
 8001e78:	e030      	b.n	8001edc <HAL_GPIO_EXTI_Callback+0x1d4>
					Fingers_Status.Pinky.Encoder++;
 8001e7a:	4b8c      	ldr	r3, [pc, #560]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e7c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e80:	3301      	adds	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b89      	ldr	r3, [pc, #548]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e86:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>Max_Encoder_Pinky)
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e8c:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001e90:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d91e      	bls.n	8001ed6 <HAL_GPIO_EXTI_Callback+0x1ce>
						Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8001e98:	4b84      	ldr	r3, [pc, #528]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001e9a:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8001e9e:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001ea2:	e018      	b.n	8001ed6 <HAL_GPIO_EXTI_Callback+0x1ce>
					Fingers_Status.Pinky.Encoder--;
 8001ea4:	4b81      	ldr	r3, [pc, #516]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ea6:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001eb0:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					if(Fingers_Status.Pinky.Encoder>65400 || Fingers_Status.Pinky.Encoder<200)
 8001eb4:	4b7d      	ldr	r3, [pc, #500]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001eb6:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001eba:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d804      	bhi.n	8001ecc <HAL_GPIO_EXTI_Callback+0x1c4>
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ec4:	f8b3 3270 	ldrh.w	r3, [r3, #624]	; 0x270
 8001ec8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eca:	d806      	bhi.n	8001eda <HAL_GPIO_EXTI_Callback+0x1d2>
						Fingers_Status.Pinky.Encoder=0;
 8001ecc:	4b77      	ldr	r3, [pc, #476]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
					break;
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_EXTI_Callback+0x1d2>
					break;
 8001ed6:	bf00      	nop
 8001ed8:	e1a7      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001eda:	bf00      	nop
			break;
 8001edc:	e1a5      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Ring.Direction_Encoder) {
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ee0:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_EXTI_Callback+0x1e6>
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d015      	beq.n	8001f18 <HAL_GPIO_EXTI_Callback+0x210>
					break;
 8001eec:	e030      	b.n	8001f50 <HAL_GPIO_EXTI_Callback+0x248>
					Fingers_Status.Ring.Encoder++;
 8001eee:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ef0:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001efa:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001efe:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f00:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f04:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d91e      	bls.n	8001f4a <HAL_GPIO_EXTI_Callback+0x242>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001f0c:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f0e:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f12:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f16:	e018      	b.n	8001f4a <HAL_GPIO_EXTI_Callback+0x242>
					Fingers_Status.Ring.Encoder--;
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f1a:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f24:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<200)
 8001f28:	4b60      	ldr	r3, [pc, #384]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f2a:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f2e:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d804      	bhi.n	8001f40 <HAL_GPIO_EXTI_Callback+0x238>
 8001f36:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f38:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f3c:	2bc7      	cmp	r3, #199	; 0xc7
 8001f3e:	d806      	bhi.n	8001f4e <HAL_GPIO_EXTI_Callback+0x246>
						Fingers_Status.Ring.Encoder=0;
 8001f40:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_EXTI_Callback+0x246>
					break;
 8001f4a:	bf00      	nop
 8001f4c:	e16d      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001f4e:	bf00      	nop
			break;
 8001f50:	e16b      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Ring.Direction_Encoder) {
 8001f52:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f54:	f893 31db 	ldrb.w	r3, [r3, #475]	; 0x1db
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_EXTI_Callback+0x25a>
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d015      	beq.n	8001f8c <HAL_GPIO_EXTI_Callback+0x284>
					break;
 8001f60:	e030      	b.n	8001fc4 <HAL_GPIO_EXTI_Callback+0x2bc>
					Fingers_Status.Ring.Encoder++;
 8001f62:	4b52      	ldr	r3, [pc, #328]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f64:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f6e:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>Max_Encoder_Ring)
 8001f72:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f74:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f78:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d91e      	bls.n	8001fbe <HAL_GPIO_EXTI_Callback+0x2b6>
						Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f82:	f645 7250 	movw	r2, #24400	; 0x5f50
 8001f86:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001f8a:	e018      	b.n	8001fbe <HAL_GPIO_EXTI_Callback+0x2b6>
					Fingers_Status.Ring.Encoder--;
 8001f8c:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f8e:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f98:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					if(Fingers_Status.Ring.Encoder>65400 || Fingers_Status.Ring.Encoder<200)
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001f9e:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001fa2:	f64f 7278 	movw	r2, #65400	; 0xff78
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_GPIO_EXTI_Callback+0x2ac>
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fac:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 8001fb0:	2bc7      	cmp	r3, #199	; 0xc7
 8001fb2:	d806      	bhi.n	8001fc2 <HAL_GPIO_EXTI_Callback+0x2ba>
						Fingers_Status.Ring.Encoder=0;
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
					break;
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_EXTI_Callback+0x2ba>
					break;
 8001fbe:	bf00      	nop
 8001fc0:	e133      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8001fc2:	bf00      	nop
			break;
 8001fc4:	e131      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Middle.Direction_Encoder) {
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fc8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d002      	beq.n	8001fd6 <HAL_GPIO_EXTI_Callback+0x2ce>
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d015      	beq.n	8002000 <HAL_GPIO_EXTI_Callback+0x2f8>
					break;
 8001fd4:	e030      	b.n	8002038 <HAL_GPIO_EXTI_Callback+0x330>
					Fingers_Status.Middle.Encoder++;
 8001fd6:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fd8:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fe2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 8001fe6:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001fe8:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8001fec:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d91e      	bls.n	8002032 <HAL_GPIO_EXTI_Callback+0x32a>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8001ff6:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8001ffa:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 8001ffe:	e018      	b.n	8002032 <HAL_GPIO_EXTI_Callback+0x32a>
					Fingers_Status.Middle.Encoder--;
 8002000:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002002:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800200c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<200)
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002012:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002016:	f64f 7278 	movw	r2, #65400	; 0xff78
 800201a:	4293      	cmp	r3, r2
 800201c:	d804      	bhi.n	8002028 <HAL_GPIO_EXTI_Callback+0x320>
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002020:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002024:	2bc7      	cmp	r3, #199	; 0xc7
 8002026:	d806      	bhi.n	8002036 <HAL_GPIO_EXTI_Callback+0x32e>
					Fingers_Status.Middle.Encoder=0;
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800202a:	2200      	movs	r2, #0
 800202c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 8002030:	e001      	b.n	8002036 <HAL_GPIO_EXTI_Callback+0x32e>
					break;
 8002032:	bf00      	nop
 8002034:	e0f9      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8002036:	bf00      	nop
			break;
 8002038:	e0f7      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Middle.Direction_Encoder) {
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800203c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <HAL_GPIO_EXTI_Callback+0x342>
 8002044:	2b02      	cmp	r3, #2
 8002046:	d015      	beq.n	8002074 <HAL_GPIO_EXTI_Callback+0x36c>
					break;
 8002048:	e033      	b.n	80020b2 <HAL_GPIO_EXTI_Callback+0x3aa>
					Fingers_Status.Middle.Encoder++;
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800204c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002050:	3301      	adds	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002056:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>Max_Encoder_Middle)
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800205c:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002060:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8002064:	4293      	cmp	r3, r2
 8002066:	d91e      	bls.n	80020a6 <HAL_GPIO_EXTI_Callback+0x39e>
						Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800206a:	f246 42c8 	movw	r2, #25800	; 0x64c8
 800206e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 8002072:	e018      	b.n	80020a6 <HAL_GPIO_EXTI_Callback+0x39e>
					Fingers_Status.Middle.Encoder--;
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002076:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002080:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					if(Fingers_Status.Middle.Encoder>65400 || Fingers_Status.Middle.Encoder<200)
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002086:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800208a:	f64f 7278 	movw	r2, #65400	; 0xff78
 800208e:	4293      	cmp	r3, r2
 8002090:	d804      	bhi.n	800209c <HAL_GPIO_EXTI_Callback+0x394>
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 8002094:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8002098:	2bc7      	cmp	r3, #199	; 0xc7
 800209a:	d809      	bhi.n	80020b0 <HAL_GPIO_EXTI_Callback+0x3a8>
					Fingers_Status.Middle.Encoder=0;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GPIO_EXTI_Callback+0x3a4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
					break;
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_EXTI_Callback+0x3a8>
					break;
 80020a6:	bf00      	nop
 80020a8:	e0bf      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
 80020aa:	bf00      	nop
 80020ac:	200006f0 	.word	0x200006f0
					break;
 80020b0:	bf00      	nop
			break;
 80020b2:	e0ba      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Index.Direction_Encoder) {
 80020b4:	4b60      	ldr	r3, [pc, #384]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020b6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d002      	beq.n	80020c4 <HAL_GPIO_EXTI_Callback+0x3bc>
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d015      	beq.n	80020ee <HAL_GPIO_EXTI_Callback+0x3e6>
					break;
 80020c2:	e030      	b.n	8002126 <HAL_GPIO_EXTI_Callback+0x41e>
					Fingers_Status.Index.Encoder++;
 80020c4:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020c6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020ca:	3301      	adds	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b5a      	ldr	r3, [pc, #360]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020d0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 80020d4:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020da:	f246 7284 	movw	r2, #26500	; 0x6784
 80020de:	4293      	cmp	r3, r2
 80020e0:	d91e      	bls.n	8002120 <HAL_GPIO_EXTI_Callback+0x418>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 80020e2:	4b55      	ldr	r3, [pc, #340]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020e4:	f246 7284 	movw	r2, #26500	; 0x6784
 80020e8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 80020ec:	e018      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x418>
					Fingers_Status.Index.Encoder--;
 80020ee:	4b52      	ldr	r3, [pc, #328]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020f0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80020fa:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<200)
 80020fe:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002100:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002104:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002108:	4293      	cmp	r3, r2
 800210a:	d804      	bhi.n	8002116 <HAL_GPIO_EXTI_Callback+0x40e>
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800210e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002112:	2bc7      	cmp	r3, #199	; 0xc7
 8002114:	d806      	bhi.n	8002124 <HAL_GPIO_EXTI_Callback+0x41c>
					Fingers_Status.Index.Encoder=0;
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002118:	2200      	movs	r2, #0
 800211a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 800211e:	e001      	b.n	8002124 <HAL_GPIO_EXTI_Callback+0x41c>
					break;
 8002120:	bf00      	nop
 8002122:	e082      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8002124:	bf00      	nop
			break;
 8002126:	e080      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Index.Direction_Encoder) {
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800212a:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800212e:	2b01      	cmp	r3, #1
 8002130:	d002      	beq.n	8002138 <HAL_GPIO_EXTI_Callback+0x430>
 8002132:	2b02      	cmp	r3, #2
 8002134:	d015      	beq.n	8002162 <HAL_GPIO_EXTI_Callback+0x45a>
					break;
 8002136:	e030      	b.n	800219a <HAL_GPIO_EXTI_Callback+0x492>
					Fingers_Status.Index.Encoder++;
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800213a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800213e:	3301      	adds	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002144:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>Max_Encoder_Index)
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800214a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800214e:	f246 7284 	movw	r2, #26500	; 0x6784
 8002152:	4293      	cmp	r3, r2
 8002154:	d91e      	bls.n	8002194 <HAL_GPIO_EXTI_Callback+0x48c>
						Fingers_Status.Index.Encoder=Max_Encoder_Index;
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002158:	f246 7284 	movw	r2, #26500	; 0x6784
 800215c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 8002160:	e018      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x48c>
					Fingers_Status.Index.Encoder--;
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002164:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800216e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if(Fingers_Status.Index.Encoder>65400 || Fingers_Status.Index.Encoder<200)
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002174:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002178:	f64f 7278 	movw	r2, #65400	; 0xff78
 800217c:	4293      	cmp	r3, r2
 800217e:	d804      	bhi.n	800218a <HAL_GPIO_EXTI_Callback+0x482>
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002182:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002186:	2bc7      	cmp	r3, #199	; 0xc7
 8002188:	d806      	bhi.n	8002198 <HAL_GPIO_EXTI_Callback+0x490>
					Fingers_Status.Index.Encoder=0;
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800218c:	2200      	movs	r2, #0
 800218e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					break;
 8002192:	e001      	b.n	8002198 <HAL_GPIO_EXTI_Callback+0x490>
					break;
 8002194:	bf00      	nop
 8002196:	e048      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
					break;
 8002198:	bf00      	nop
			break;
 800219a:	e046      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Thumb.Direction_Encoder) {
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800219e:	7cdb      	ldrb	r3, [r3, #19]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <HAL_GPIO_EXTI_Callback+0x4a2>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_EXTI_Callback+0x4b0>
					break;
 80021a8:	e01a      	b.n	80021e0 <HAL_GPIO_EXTI_Callback+0x4d8>
					Fingers_Status.Thumb.Encoder++;
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021ac:	8a1b      	ldrh	r3, [r3, #16]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021b4:	821a      	strh	r2, [r3, #16]
					break;
 80021b6:	e013      	b.n	80021e0 <HAL_GPIO_EXTI_Callback+0x4d8>
					Fingers_Status.Thumb.Encoder--;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021ba:	8a1b      	ldrh	r3, [r3, #16]
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021c2:	821a      	strh	r2, [r3, #16]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<200)
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021c6:	8a1b      	ldrh	r3, [r3, #16]
 80021c8:	f64f 7278 	movw	r2, #65400	; 0xff78
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d803      	bhi.n	80021d8 <HAL_GPIO_EXTI_Callback+0x4d0>
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021d2:	8a1b      	ldrh	r3, [r3, #16]
 80021d4:	2bc7      	cmp	r3, #199	; 0xc7
 80021d6:	d802      	bhi.n	80021de <HAL_GPIO_EXTI_Callback+0x4d6>
					Fingers_Status.Thumb.Encoder=0;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021da:	2200      	movs	r2, #0
 80021dc:	821a      	strh	r2, [r3, #16]
					break;
 80021de:	bf00      	nop
			break;
 80021e0:	e023      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			switch (Fingers_Status.Thumb.Direction_Encoder) {
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021e4:	7cdb      	ldrb	r3, [r3, #19]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_GPIO_EXTI_Callback+0x4e8>
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_EXTI_Callback+0x4f6>
					break;
 80021ee:	e01a      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x51e>
					Fingers_Status.Thumb.Encoder++;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021f2:	8a1b      	ldrh	r3, [r3, #16]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 80021fa:	821a      	strh	r2, [r3, #16]
					break;
 80021fc:	e013      	b.n	8002226 <HAL_GPIO_EXTI_Callback+0x51e>
					Fingers_Status.Thumb.Encoder--;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002200:	8a1b      	ldrh	r3, [r3, #16]
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002208:	821a      	strh	r2, [r3, #16]
					if(Fingers_Status.Thumb.Encoder>65400 || Fingers_Status.Thumb.Encoder<200)
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 800220c:	8a1b      	ldrh	r3, [r3, #16]
 800220e:	f64f 7278 	movw	r2, #65400	; 0xff78
 8002212:	4293      	cmp	r3, r2
 8002214:	d803      	bhi.n	800221e <HAL_GPIO_EXTI_Callback+0x516>
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002218:	8a1b      	ldrh	r3, [r3, #16]
 800221a:	2bc7      	cmp	r3, #199	; 0xc7
 800221c:	d802      	bhi.n	8002224 <HAL_GPIO_EXTI_Callback+0x51c>
					Fingers_Status.Thumb.Encoder=0;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_GPIO_EXTI_Callback+0x530>)
 8002220:	2200      	movs	r2, #0
 8002222:	821a      	strh	r2, [r3, #16]
					break;
 8002224:	bf00      	nop
			break;
 8002226:	e000      	b.n	800222a <HAL_GPIO_EXTI_Callback+0x522>
			break;
 8002228:	bf00      	nop
	}
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200006f0 	.word	0x200006f0

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002244:	f002 faf9 	bl	800483a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002248:	f000 fa2e 	bl	80026a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800224c:	f000 fa7b 	bl	8002746 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002250:	f7ff fca6 	bl	8001ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002254:	f7ff fc86 	bl	8001b64 <MX_DMA_Init>
  MX_ADC1_Init();
 8002258:	f7ff f814 	bl	8001284 <MX_ADC1_Init>
  MX_ADC2_Init();
 800225c:	f7ff f8ca 	bl	80013f4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8002260:	f7ff fc06 	bl	8001a70 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002264:	f000 fc80 	bl	8002b68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002268:	f000 fd18 	bl	8002c9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800226c:	f000 fd7a 	bl	8002d64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002270:	f000 fddc 	bl	8002e2c <MX_TIM4_Init>
  MX_TIM8_Init();
 8002274:	f000 fe76 	bl	8002f64 <MX_TIM8_Init>
  MX_UART4_Init();
 8002278:	f001 f86c 	bl	8003354 <MX_UART4_Init>
  MX_TIM7_Init();
 800227c:	f000 fe3a 	bl	8002ef4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	init_motor_controller();
 8002280:	f001 ff56 	bl	8004130 <init_motor_controller>
	//start fingers calibration
	Fingers_Calibration();
 8002284:	f002 f88e 	bl	80043a4 <Fingers_Calibration>
	//feedback for end of calibration
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800228e:	48a4      	ldr	r0, [pc, #656]	; (8002520 <main+0x2e4>)
 8002290:	f004 fb94 	bl	80069bc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		//------------------------------| Thumb finger |----------------------------------------
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8002294:	49a3      	ldr	r1, [pc, #652]	; (8002524 <main+0x2e8>)
 8002296:	2000      	movs	r0, #0
 8002298:	f001 fd5c 	bl	8003d54 <SetMotor>
		Control_Motor(Thumb, &Fingers_Status.Thumb);
 800229c:	49a1      	ldr	r1, [pc, #644]	; (8002524 <main+0x2e8>)
 800229e:	2000      	movs	r0, #0
 80022a0:	f002 f9de 	bl	8004660 <Control_Motor>
		ADC_ReadCurrent_Thumb();
 80022a4:	f7ff fb94 	bl	80019d0 <ADC_ReadCurrent_Thumb>
		if(Fingers_Status.Thumb.Direction_motor==Stop)
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <main+0x2e8>)
 80022aa:	7c9b      	ldrb	r3, [r3, #18]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <main+0x7c>
			Read_Encoder(Thumb, &Fingers_Status.Thumb);
 80022b0:	499c      	ldr	r1, [pc, #624]	; (8002524 <main+0x2e8>)
 80022b2:	2000      	movs	r0, #0
 80022b4:	f001 fc28 	bl	8003b08 <Read_Encoder>
		//------------------------------| Index finger |----------------------------------------
		ADC_ReadCurrent_Index();
 80022b8:	f7ff fb32 	bl	8001920 <ADC_ReadCurrent_Index>
		Control_Motor(Index,&Fingers_Status.Index);
 80022bc:	499a      	ldr	r1, [pc, #616]	; (8002528 <main+0x2ec>)
 80022be:	2001      	movs	r0, #1
 80022c0:	f002 f9ce 	bl	8004660 <Control_Motor>
		SetMotor(Index, &Fingers_Status.Index);
 80022c4:	4998      	ldr	r1, [pc, #608]	; (8002528 <main+0x2ec>)
 80022c6:	2001      	movs	r0, #1
 80022c8:	f001 fd44 	bl	8003d54 <SetMotor>
		if(Fingers_Status.Index.Direction_motor==Stop)
 80022cc:	4b95      	ldr	r3, [pc, #596]	; (8002524 <main+0x2e8>)
 80022ce:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <main+0xa2>
			Read_Encoder(Index, &Fingers_Status.Index);
 80022d6:	4994      	ldr	r1, [pc, #592]	; (8002528 <main+0x2ec>)
 80022d8:	2001      	movs	r0, #1
 80022da:	f001 fc15 	bl	8003b08 <Read_Encoder>
		//------------------------------| Middle finger |----------------------------------------
		ADC_ReadCurrent_Middle();
 80022de:	f7ff facb 	bl	8001878 <ADC_ReadCurrent_Middle>
		Control_Motor(Middle,&Fingers_Status.Middle);
 80022e2:	4992      	ldr	r1, [pc, #584]	; (800252c <main+0x2f0>)
 80022e4:	2002      	movs	r0, #2
 80022e6:	f002 f9bb 	bl	8004660 <Control_Motor>
		SetMotor(Middle, &Fingers_Status.Middle);
 80022ea:	4990      	ldr	r1, [pc, #576]	; (800252c <main+0x2f0>)
 80022ec:	2002      	movs	r0, #2
 80022ee:	f001 fd31 	bl	8003d54 <SetMotor>
		if(Fingers_Status.Middle.Direction_motor==Stop)
 80022f2:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <main+0x2e8>)
 80022f4:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <main+0xc8>
			Read_Encoder(Middle, &Fingers_Status.Middle);
 80022fc:	498b      	ldr	r1, [pc, #556]	; (800252c <main+0x2f0>)
 80022fe:	2002      	movs	r0, #2
 8002300:	f001 fc02 	bl	8003b08 <Read_Encoder>
		//------------------------------| Ring finger |----------------------------------------
		SetMotor(Ring, &Fingers_Status.Ring);
 8002304:	498a      	ldr	r1, [pc, #552]	; (8002530 <main+0x2f4>)
 8002306:	2003      	movs	r0, #3
 8002308:	f001 fd24 	bl	8003d54 <SetMotor>
		Control_Motor(Ring,&Fingers_Status.Ring);
 800230c:	4988      	ldr	r1, [pc, #544]	; (8002530 <main+0x2f4>)
 800230e:	2003      	movs	r0, #3
 8002310:	f002 f9a6 	bl	8004660 <Control_Motor>
		ADC_ReadCurrent_Ring();
 8002314:	f7ff fa58 	bl	80017c8 <ADC_ReadCurrent_Ring>
		if(Fingers_Status.Ring.Direction_motor==Stop)
 8002318:	4b82      	ldr	r3, [pc, #520]	; (8002524 <main+0x2e8>)
 800231a:	f893 31da 	ldrb.w	r3, [r3, #474]	; 0x1da
 800231e:	2b00      	cmp	r3, #0
 8002320:	d103      	bne.n	800232a <main+0xee>
			Read_Encoder(Ring, &Fingers_Status.Ring);
 8002322:	4983      	ldr	r1, [pc, #524]	; (8002530 <main+0x2f4>)
 8002324:	2003      	movs	r0, #3
 8002326:	f001 fbef 	bl	8003b08 <Read_Encoder>
		//------------------------------| Pinky finger |----------------------------------------
		SetMotor(Pinky, &Fingers_Status.Pinky);
 800232a:	4982      	ldr	r1, [pc, #520]	; (8002534 <main+0x2f8>)
 800232c:	2004      	movs	r0, #4
 800232e:	f001 fd11 	bl	8003d54 <SetMotor>
		Control_Motor(Pinky,&Fingers_Status.Pinky);
 8002332:	4980      	ldr	r1, [pc, #512]	; (8002534 <main+0x2f8>)
 8002334:	2004      	movs	r0, #4
 8002336:	f002 f993 	bl	8004660 <Control_Motor>
		ADC_ReadCurrent_Pinky();
 800233a:	f7ff f9f1 	bl	8001720 <ADC_ReadCurrent_Pinky>
		if(Fingers_Status.Pinky.Direction_motor==Stop)
 800233e:	4b79      	ldr	r3, [pc, #484]	; (8002524 <main+0x2e8>)
 8002340:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <main+0x114>
			Read_Encoder(Pinky, &Fingers_Status.Pinky);
 8002348:	497a      	ldr	r1, [pc, #488]	; (8002534 <main+0x2f8>)
 800234a:	2004      	movs	r0, #4
 800234c:	f001 fbdc 	bl	8003b08 <Read_Encoder>
		//------------------------------| Communication |----------------------------------------
		if(send_data_UART)
 8002350:	4b79      	ldr	r3, [pc, #484]	; (8002538 <main+0x2fc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d09d      	beq.n	8002294 <main+0x58>
		{
			send_data_UART=0;
 8002358:	4b77      	ldr	r3, [pc, #476]	; (8002538 <main+0x2fc>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
			uint16_t current_map[5];
			//map current pinky
			if(Fingers_Status.Pinky.Current<1772)
 800235e:	4b71      	ldr	r3, [pc, #452]	; (8002524 <main+0x2e8>)
 8002360:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8002364:	f240 62eb 	movw	r2, #1771	; 0x6eb
 8002368:	4293      	cmp	r3, r2
 800236a:	d815      	bhi.n	8002398 <main+0x15c>
				current_map[Pinky]=((1772-Fingers_Status.Pinky.Current)/(1772-1288))*1000;
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <main+0x2e8>)
 800236e:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 8002372:	f5c3 63dd 	rsb	r3, r3, #1768	; 0x6e8
 8002376:	3304      	adds	r3, #4
 8002378:	4a70      	ldr	r2, [pc, #448]	; (800253c <main+0x300>)
 800237a:	fb82 1203 	smull	r1, r2, r2, r3
 800237e:	10d2      	asrs	r2, r2, #3
 8002380:	17db      	asrs	r3, r3, #31
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	0152      	lsls	r2, r2, #5
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	b29b      	uxth	r3, r3
 8002394:	81bb      	strh	r3, [r7, #12]
 8002396:	e013      	b.n	80023c0 <main+0x184>
			else
				current_map[Pinky]=((Fingers_Status.Pinky.Current-1772)/(2298-1772))*1000;
 8002398:	4b62      	ldr	r3, [pc, #392]	; (8002524 <main+0x2e8>)
 800239a:	f8b3 3280 	ldrh.w	r3, [r3, #640]	; 0x280
 800239e:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 80023a2:	4a67      	ldr	r2, [pc, #412]	; (8002540 <main+0x304>)
 80023a4:	fb82 1203 	smull	r1, r2, r2, r3
 80023a8:	1212      	asrs	r2, r2, #8
 80023aa:	17db      	asrs	r3, r3, #31
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	0152      	lsls	r2, r2, #5
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	81bb      	strh	r3, [r7, #12]
			//map current ring
			if(Fingers_Status.Ring.Current<1781)
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <main+0x2e8>)
 80023c2:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80023c6:	f240 62f4 	movw	r2, #1780	; 0x6f4
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d815      	bhi.n	80023fa <main+0x1be>
				current_map[Ring]=((1781-Fingers_Status.Ring.Current)/(1781-1264))*1000;
 80023ce:	4b55      	ldr	r3, [pc, #340]	; (8002524 <main+0x2e8>)
 80023d0:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 80023d4:	f5c3 63de 	rsb	r3, r3, #1776	; 0x6f0
 80023d8:	3305      	adds	r3, #5
 80023da:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <main+0x308>)
 80023dc:	fb82 1203 	smull	r1, r2, r2, r3
 80023e0:	1192      	asrs	r2, r2, #6
 80023e2:	17db      	asrs	r3, r3, #31
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	0152      	lsls	r2, r2, #5
 80023ec:	1ad2      	subs	r2, r2, r3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	e014      	b.n	8002424 <main+0x1e8>
			else
				current_map[Ring]=((Fingers_Status.Ring.Current-1781)/(2243-1781))*1000;
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <main+0x2e8>)
 80023fc:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8002400:	f2a3 63f5 	subw	r3, r3, #1781	; 0x6f5
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <main+0x30c>)
 8002406:	fb82 1203 	smull	r1, r2, r2, r3
 800240a:	441a      	add	r2, r3
 800240c:	1212      	asrs	r2, r2, #8
 800240e:	17db      	asrs	r3, r3, #31
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	0152      	lsls	r2, r2, #5
 8002418:	1ad2      	subs	r2, r2, r3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	b29b      	uxth	r3, r3
 8002422:	817b      	strh	r3, [r7, #10]
			//map current middle
			if(Fingers_Status.Middle.Current<1750)
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <main+0x2e8>)
 8002426:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800242a:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800242e:	4293      	cmp	r3, r2
 8002430:	d815      	bhi.n	800245e <main+0x222>
				current_map[Middle]=((1750-Fingers_Status.Middle.Current)/(1750-1290))*1000;
 8002432:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <main+0x2e8>)
 8002434:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002438:	f5c3 63da 	rsb	r3, r3, #1744	; 0x6d0
 800243c:	3306      	adds	r3, #6
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <main+0x310>)
 8002440:	fb82 1203 	smull	r1, r2, r2, r3
 8002444:	11d2      	asrs	r2, r2, #7
 8002446:	17db      	asrs	r3, r3, #31
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	0152      	lsls	r2, r2, #5
 8002450:	1ad2      	subs	r2, r2, r3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	b29b      	uxth	r3, r3
 800245a:	813b      	strh	r3, [r7, #8]
 800245c:	e013      	b.n	8002486 <main+0x24a>
			else
				current_map[Middle]=((Fingers_Status.Middle.Current-1750)/(2291-1750))*1000;
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <main+0x2e8>)
 8002460:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8002464:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8002468:	4a39      	ldr	r2, [pc, #228]	; (8002550 <main+0x314>)
 800246a:	fb82 1203 	smull	r1, r2, r2, r3
 800246e:	11d2      	asrs	r2, r2, #7
 8002470:	17db      	asrs	r3, r3, #31
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	0152      	lsls	r2, r2, #5
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	b29b      	uxth	r3, r3
 8002484:	813b      	strh	r3, [r7, #8]
			//map current index
			if(Fingers_Status.Index.Current<1688)
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <main+0x2e8>)
 8002488:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800248c:	f5b3 6fd3 	cmp.w	r3, #1688	; 0x698
 8002490:	d215      	bcs.n	80024be <main+0x282>
				current_map[Index]=((1688-Fingers_Status.Index.Current)/(1688-1226))*1000;
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <main+0x2e8>)
 8002494:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002498:	f5c3 63d3 	rsb	r3, r3, #1688	; 0x698
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <main+0x30c>)
 800249e:	fb82 1203 	smull	r1, r2, r2, r3
 80024a2:	441a      	add	r2, r3
 80024a4:	1212      	asrs	r2, r2, #8
 80024a6:	17db      	asrs	r3, r3, #31
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	0152      	lsls	r2, r2, #5
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	e013      	b.n	80024e6 <main+0x2aa>
			else
				current_map[Index]=((Fingers_Status.Index.Current-1688)/(2239-1688))*1000;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <main+0x2e8>)
 80024c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80024c4:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <main+0x318>)
 80024ca:	fb82 1203 	smull	r1, r2, r2, r3
 80024ce:	11d2      	asrs	r2, r2, #7
 80024d0:	17db      	asrs	r3, r3, #31
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	0152      	lsls	r2, r2, #5
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	80fb      	strh	r3, [r7, #6]
			//map current thumb
			if(Fingers_Status.Thumb.Current<1701)
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <main+0x2e8>)
 80024e8:	8c1b      	ldrh	r3, [r3, #32]
 80024ea:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d834      	bhi.n	800255c <main+0x320>
				current_map[Thumb]=((1701-Fingers_Status.Thumb.Current)/(1701-1233))*1000;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <main+0x2e8>)
 80024f4:	8c1b      	ldrh	r3, [r3, #32]
 80024f6:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
 80024fa:	3305      	adds	r3, #5
 80024fc:	4a16      	ldr	r2, [pc, #88]	; (8002558 <main+0x31c>)
 80024fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002502:	441a      	add	r2, r3
 8002504:	1212      	asrs	r2, r2, #8
 8002506:	17db      	asrs	r3, r3, #31
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	0152      	lsls	r2, r2, #5
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	b29b      	uxth	r3, r3
 800251a:	80bb      	strh	r3, [r7, #4]
 800251c:	e031      	b.n	8002582 <main+0x346>
 800251e:	bf00      	nop
 8002520:	48000800 	.word	0x48000800
 8002524:	200006f0 	.word	0x200006f0
 8002528:	20000788 	.word	0x20000788
 800252c:	20000820 	.word	0x20000820
 8002530:	200008b8 	.word	0x200008b8
 8002534:	20000950 	.word	0x20000950
 8002538:	20000326 	.word	0x20000326
 800253c:	043b3d5b 	.word	0x043b3d5b
 8002540:	7c97d911 	.word	0x7c97d911
 8002544:	1fb0c611 	.word	0x1fb0c611
 8002548:	8dda5203 	.word	0x8dda5203
 800254c:	473c1ab7 	.word	0x473c1ab7
 8002550:	3c91beb3 	.word	0x3c91beb3
 8002554:	3b78557d 	.word	0x3b78557d
 8002558:	8c08c08d 	.word	0x8c08c08d
			else
				current_map[Thumb]=((Fingers_Status.Thumb.Current-1701)/(2279-1701))*1000;
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <main+0x450>)
 800255e:	8c1b      	ldrh	r3, [r3, #32]
 8002560:	f2a3 63a5 	subw	r3, r3, #1701	; 0x6a5
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <main+0x454>)
 8002566:	fb82 1203 	smull	r1, r2, r2, r3
 800256a:	1212      	asrs	r2, r2, #8
 800256c:	17db      	asrs	r3, r3, #31
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	0152      	lsls	r2, r2, #5
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	b29b      	uxth	r3, r3
 8002580:	80bb      	strh	r3, [r7, #4]
			sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",current_map[Pinky],current_map[Ring],current_map[Middle],current_map[Index],current_map[Thumb]);
 8002582:	89bb      	ldrh	r3, [r7, #12]
 8002584:	4618      	mov	r0, r3
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	461c      	mov	r4, r3
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	88b9      	ldrh	r1, [r7, #4]
 8002590:	9102      	str	r1, [sp, #8]
 8002592:	9201      	str	r2, [sp, #4]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4623      	mov	r3, r4
 8002598:	4602      	mov	r2, r0
 800259a:	493e      	ldr	r1, [pc, #248]	; (8002694 <main+0x458>)
 800259c:	483e      	ldr	r0, [pc, #248]	; (8002698 <main+0x45c>)
 800259e:	f009 fd85 	bl	800c0ac <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 80025a2:	483d      	ldr	r0, [pc, #244]	; (8002698 <main+0x45c>)
 80025a4:	f7fd fe64 	bl	8000270 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	2305      	movs	r3, #5
 80025ae:	493a      	ldr	r1, [pc, #232]	; (8002698 <main+0x45c>)
 80025b0:	483a      	ldr	r0, [pc, #232]	; (800269c <main+0x460>)
 80025b2:	f006 fed9 	bl	8009368 <HAL_UART_Transmit>
			HAL_Delay(1);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f002 f9b4 	bl	8004924 <HAL_Delay>
			sprintf(uartTX,"{PP:%dPR:%dPM:%dPI:%dPT:%d}\n",((uint16_t)(Fingers_Status.Pinky.position*100)),((uint16_t)(Fingers_Status.Ring.position*100)),((uint16_t)(Fingers_Status.Middle.position*100)),((uint16_t)(Fingers_Status.Index.position*100)),((uint16_t)(Fingers_Status.Thumb.position*100)));
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <main+0x450>)
 80025be:	e9d3 019a 	ldrd	r0, r1, [r3, #616]	; 0x268
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <main+0x464>)
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461e      	mov	r6, r3
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <main+0x450>)
 80025e0:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <main+0x464>)
 80025ea:	f7fe f805 	bl	80005f8 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fad7 	bl	8000ba8 <__aeabi_d2uiz>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4698      	mov	r8, r3
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <main+0x450>)
 8002602:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <main+0x464>)
 800260c:	f7fd fff4 	bl	80005f8 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fac6 	bl	8000ba8 <__aeabi_d2uiz>
 800261c:	4603      	mov	r3, r0
 800261e:	b29b      	uxth	r3, r3
 8002620:	461c      	mov	r4, r3
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <main+0x450>)
 8002624:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <main+0x464>)
 800262e:	f7fd ffe3 	bl	80005f8 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe fab5 	bl	8000ba8 <__aeabi_d2uiz>
 800263e:	4603      	mov	r3, r0
 8002640:	b29b      	uxth	r3, r3
 8002642:	461d      	mov	r5, r3
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <main+0x450>)
 8002646:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <main+0x464>)
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe faa4 	bl	8000ba8 <__aeabi_d2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	b29b      	uxth	r3, r3
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	9501      	str	r5, [sp, #4]
 8002668:	9400      	str	r4, [sp, #0]
 800266a:	4643      	mov	r3, r8
 800266c:	4632      	mov	r2, r6
 800266e:	490d      	ldr	r1, [pc, #52]	; (80026a4 <main+0x468>)
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <main+0x45c>)
 8002672:	f009 fd1b 	bl	800c0ac <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8002676:	4808      	ldr	r0, [pc, #32]	; (8002698 <main+0x45c>)
 8002678:	f7fd fdfa 	bl	8000270 <strlen>
 800267c:	4603      	mov	r3, r0
 800267e:	b29a      	uxth	r2, r3
 8002680:	2305      	movs	r3, #5
 8002682:	4905      	ldr	r1, [pc, #20]	; (8002698 <main+0x45c>)
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <main+0x460>)
 8002686:	f006 fe6f 	bl	8009368 <HAL_UART_Transmit>
		SetMotor(Thumb, &Fingers_Status.Thumb);
 800268a:	e603      	b.n	8002294 <main+0x58>
 800268c:	200006f0 	.word	0x200006f0
 8002690:	71625345 	.word	0x71625345
 8002694:	0800ed00 	.word	0x0800ed00
 8002698:	20000464 	.word	0x20000464
 800269c:	20000664 	.word	0x20000664
 80026a0:	40590000 	.word	0x40590000
 80026a4:	0800ed20 	.word	0x0800ed20

080026a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b096      	sub	sp, #88	; 0x58
 80026ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	2244      	movs	r2, #68	; 0x44
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f009 fd5b 	bl	800c172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026ce:	f004 f9cd 	bl	8006a6c <HAL_PWREx_ControlVoltageScaling>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026d8:	f000 f86a 	bl	80027b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e6:	2302      	movs	r3, #2
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ea:	2303      	movs	r3, #3
 80026ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80026f2:	2314      	movs	r3, #20
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026f6:	2307      	movs	r3, #7
 80026f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026fa:	2302      	movs	r3, #2
 80026fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026fe:	2302      	movs	r3, #2
 8002700:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fa06 	bl	8006b18 <HAL_RCC_OscConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002712:	f000 f84d 	bl	80027b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002716:	230f      	movs	r3, #15
 8002718:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271a:	2303      	movs	r3, #3
 800271c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	2104      	movs	r1, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fdce 	bl	80072d0 <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800273a:	f000 f839 	bl	80027b0 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	3758      	adds	r7, #88	; 0x58
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b0a2      	sub	sp, #136	; 0x88
 800274a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800274c:	463b      	mov	r3, r7
 800274e:	2288      	movs	r2, #136	; 0x88
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f009 fd0d 	bl	800c172 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800275c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800275e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002762:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002764:	2303      	movs	r3, #3
 8002766:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002768:	2301      	movs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800276c:	2308      	movs	r3, #8
 800276e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002770:	2307      	movs	r3, #7
 8002772:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002774:	2302      	movs	r3, #2
 8002776:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002778:	2308      	movs	r3, #8
 800277a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800277c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002780:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002782:	463b      	mov	r3, r7
 8002784:	4618      	mov	r0, r3
 8002786:	f004 ffc7 	bl	8007718 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002790:	f000 f80e 	bl	80027b0 <Error_Handler>
  }
}
 8002794:	bf00      	nop
 8002796:	3788      	adds	r7, #136	; 0x88
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM7)
	{
	}
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80027b8:	e7fe      	b.n	80027b8 <Error_Handler+0x8>
	...

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_MspInit+0x44>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_MspInit+0x44>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6613      	str	r3, [r2, #96]	; 0x60
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_MspInit+0x44>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x44>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_MspInit+0x44>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_MspInit+0x44>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80027f2:	2004      	movs	r0, #4
 80027f4:	f003 fc68 	bl	80060c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <NMI_Handler+0x4>
	...

0800280c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002816:	4802      	ldr	r0, [pc, #8]	; (8002820 <HardFault_Handler+0x14>)
 8002818:	f004 f8d0 	bl	80069bc <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <HardFault_Handler+0x10>
 800281e:	bf00      	nop
 8002820:	48000800 	.word	0x48000800

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f002 f83e 	bl	80048e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  calibration_counter++;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <SysTick_Handler+0x8c>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	3301      	adds	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <SysTick_Handler+0x8c>)
 8002874:	801a      	strh	r2, [r3, #0]
  Fingers_Status.Index.Current_Counter++;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <SysTick_Handler+0x90>)
 8002878:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800287c:	b29b      	uxth	r3, r3
 800287e:	3301      	adds	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <SysTick_Handler+0x90>)
 8002884:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  Fingers_Status.Middle.Current_Counter++;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <SysTick_Handler+0x90>)
 800288a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800288e:	b29b      	uxth	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <SysTick_Handler+0x90>)
 8002896:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  Fingers_Status.Pinky.Current_Counter++;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <SysTick_Handler+0x90>)
 800289c:	f8b3 3284 	ldrh.w	r3, [r3, #644]	; 0x284
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <SysTick_Handler+0x90>)
 80028a8:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
  Fingers_Status.Ring.Current_Counter++;
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <SysTick_Handler+0x90>)
 80028ae:	f8b3 31ec 	ldrh.w	r3, [r3, #492]	; 0x1ec
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <SysTick_Handler+0x90>)
 80028ba:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
  Fingers_Status.Thumb.Current_Counter++;
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <SysTick_Handler+0x90>)
 80028c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <SysTick_Handler+0x90>)
 80028ca:	849a      	strh	r2, [r3, #36]	; 0x24

  if(control_mode==position_mode)
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <SysTick_Handler+0x94>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <SysTick_Handler+0x88>
  {
	  //PID_Compute(&Fingers_Status.Thumb.PID_Struct);
//	  PID_Compute(&Fingers_Status.Index.PID_Struct);
	  PID_Compute(&Fingers_Status.Middle.PID_Struct);
 80028d6:	4808      	ldr	r0, [pc, #32]	; (80028f8 <SysTick_Handler+0x98>)
 80028d8:	f000 fe5a 	bl	8003590 <PID_Compute>
	  PID_Compute(&Fingers_Status.Ring.PID_Struct);
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <SysTick_Handler+0x9c>)
 80028de:	f000 fe57 	bl	8003590 <PID_Compute>
	  PID_Compute(&Fingers_Status.Pinky.PID_Struct);
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <SysTick_Handler+0xa0>)
 80028e4:	f000 fe54 	bl	8003590 <PID_Compute>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200009f8 	.word	0x200009f8
 80028f0:	200006f0 	.word	0x200006f0
 80028f4:	20000327 	.word	0x20000327
 80028f8:	20000848 	.word	0x20000848
 80028fc:	200008e0 	.word	0x200008e0
 8002900:	20000978 	.word	0x20000978

08002904 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder1_Pin);
 8002908:	2001      	movs	r0, #1
 800290a:	f004 f889 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}

08002912 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor4_Encoder2_Pin);
 8002916:	2002      	movs	r0, #2
 8002918:	f004 f882 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder1_Pin);
 8002924:	2004      	movs	r0, #4
 8002926:	f004 f87b 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}

0800292e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder2_Pin);
 8002932:	2010      	movs	r0, #16
 8002934:	f004 f874 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA1_Channel2_IRQHandler+0x10>)
 8002942:	f003 fd9a 	bl	800647a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200003f0 	.word	0x200003f0

08002950 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Encoder1_Pin);
 8002954:	2020      	movs	r0, #32
 8002956:	f004 f863 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor5_Encoder2_Pin);
 8002962:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002966:	f004 f85b 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder2_Pin);
 800296a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800296e:	f004 f857 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor1_Encoder1_Pin);
 8002972:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002976:	f004 f853 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder1_Pin);
 800297a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800297e:	f004 f84f 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Motor2_Encoder2_Pin);
 8002982:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002986:	f004 f84b 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <UART4_IRQHandler+0x10>)
 8002996:	f006 fdbd 	bl	8009514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000664 	.word	0x20000664

080029a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <TIM7_IRQHandler+0x10>)
 80029aa:	f005 fd97 	bl	80084dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200005cc 	.word	0x200005cc

080029b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	return 1;
 80029bc:	2301      	movs	r3, #1
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_kill>:

int _kill(int pid, int sig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029d2:	f009 fc49 	bl	800c268 <__errno>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2216      	movs	r2, #22
 80029da:	601a      	str	r2, [r3, #0]
	return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_exit>:

void _exit (int status)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe7 	bl	80029c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029fa:	e7fe      	b.n	80029fa <_exit+0x12>

080029fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
	}

return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
	}
	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f009 fbae 	bl	800c268 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20018000 	.word	0x20018000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20000498 	.word	0x20000498
 8002b40:	20000b50 	.word	0x20000b50

08002b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b096      	sub	sp, #88	; 0x58
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	222c      	movs	r2, #44	; 0x2c
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f009 faec 	bl	800c172 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002b9c:	4a3e      	ldr	r2, [pc, #248]	; (8002c98 <MX_TIM1_Init+0x130>)
 8002b9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8002ba0:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002ba2:	2218      	movs	r2, #24
 8002ba4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002bae:	2263      	movs	r2, #99	; 0x63
 8002bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc4:	4833      	ldr	r0, [pc, #204]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002bc6:	f005 fb2b 	bl	8008220 <HAL_TIM_PWM_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002bd0:	f7ff fdee 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be4:	4619      	mov	r1, r3
 8002be6:	482b      	ldr	r0, [pc, #172]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002be8:	f006 fa4c 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002bf2:	f7ff fddd 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf6:	2360      	movs	r3, #96	; 0x60
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c06:	2304      	movs	r3, #4
 8002c08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c16:	2200      	movs	r2, #0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	481e      	ldr	r0, [pc, #120]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002c1c:	f005 fd60 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002c26:	f7ff fdc3 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4818      	ldr	r0, [pc, #96]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002c34:	f005 fd54 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002c3e:	f7ff fdb7 	bl	80027b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002c78:	f006 fa8c 	bl	8009194 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002c82:	f7ff fd95 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c86:	4803      	ldr	r0, [pc, #12]	; (8002c94 <MX_TIM1_Init+0x12c>)
 8002c88:	f000 fa9a 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002c8c:	bf00      	nop
 8002c8e:	3758      	adds	r7, #88	; 0x58
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000049c 	.word	0x2000049c
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cae:	463b      	mov	r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002cca:	2218      	movs	r2, #24
 8002ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002cd6:	2263      	movs	r2, #99	; 0x63
 8002cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ce6:	481e      	ldr	r0, [pc, #120]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002ce8:	f005 fa9a 	bl	8008220 <HAL_TIM_PWM_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002cf2:	f7ff fd5d 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	4816      	ldr	r0, [pc, #88]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002d06:	f006 f9bd 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002d10:	f7ff fd4e 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d14:	2360      	movs	r3, #96	; 0x60
 8002d16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d20:	2304      	movs	r3, #4
 8002d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	2208      	movs	r2, #8
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002d2c:	f005 fcd8 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002d36:	f7ff fd3b 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	220c      	movs	r2, #12
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4807      	ldr	r0, [pc, #28]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002d42:	f005 fccd 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d4c:	f7ff fd30 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d50:	4803      	ldr	r0, [pc, #12]	; (8002d60 <MX_TIM2_Init+0xc4>)
 8002d52:	f000 fa35 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200004e8 	.word	0x200004e8

08002d64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d76:	463b      	mov	r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002d8a:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <MX_TIM3_Init+0xc4>)
 8002d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002d90:	2218      	movs	r2, #24
 8002d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002d9c:	2263      	movs	r2, #99	; 0x63
 8002d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dac:	481d      	ldr	r0, [pc, #116]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002dae:	f005 fa37 	bl	8008220 <HAL_TIM_PWM_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002db8:	f7ff fcfa 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4816      	ldr	r0, [pc, #88]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002dcc:	f006 f95a 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002dd6:	f7ff fceb 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dda:	2360      	movs	r3, #96	; 0x60
 8002ddc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002de6:	2304      	movs	r3, #4
 8002de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	4619      	mov	r1, r3
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002df2:	f005 fc75 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002dfc:	f7ff fcd8 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e00:	463b      	mov	r3, r7
 8002e02:	2204      	movs	r2, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4807      	ldr	r0, [pc, #28]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002e08:	f005 fc6a 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e12:	f7ff fccd 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e16:	4803      	ldr	r0, [pc, #12]	; (8002e24 <MX_TIM3_Init+0xc0>)
 8002e18:	f000 f9d2 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002e1c:	bf00      	nop
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000534 	.word	0x20000534
 8002e28:	40000400 	.word	0x40000400

08002e2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
 8002e4c:	615a      	str	r2, [r3, #20]
 8002e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e52:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <MX_TIM4_Init+0xc4>)
 8002e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002e56:	4b25      	ldr	r3, [pc, #148]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e58:	2218      	movs	r2, #24
 8002e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b23      	ldr	r3, [pc, #140]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e64:	2263      	movs	r2, #99	; 0x63
 8002e66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e74:	481d      	ldr	r0, [pc, #116]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e76:	f005 f9d3 	bl	8008220 <HAL_TIM_PWM_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002e80:	f7ff fc96 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	4816      	ldr	r0, [pc, #88]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002e94:	f006 f8f6 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002e9e:	f7ff fc87 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea2:	2360      	movs	r3, #96	; 0x60
 8002ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002eba:	f005 fc11 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002ec4:	f7ff fc74 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4807      	ldr	r0, [pc, #28]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002ed0:	f005 fc06 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002eda:	f7ff fc69 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ede:	4803      	ldr	r0, [pc, #12]	; (8002eec <MX_TIM4_Init+0xc0>)
 8002ee0:	f000 f96e 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000580 	.word	0x20000580
 8002ef0:	40000800 	.word	0x40000800

08002ef4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <MX_TIM7_Init+0x6c>)
 8002f08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 800-1;
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f0c:	f240 321f 	movw	r2, #799	; 0x31f
 8002f10:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f26:	480d      	ldr	r0, [pc, #52]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f28:	f005 f8b2 	bl	8008090 <HAL_TIM_Base_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002f32:	f7ff fc3d 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4806      	ldr	r0, [pc, #24]	; (8002f5c <MX_TIM7_Init+0x68>)
 8002f44:	f006 f89e 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002f4e:	f7ff fc2f 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200005cc 	.word	0x200005cc
 8002f60:	40001400 	.word	0x40001400

08002f64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b096      	sub	sp, #88	; 0x58
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	611a      	str	r2, [r3, #16]
 8002f86:	615a      	str	r2, [r3, #20]
 8002f88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	222c      	movs	r2, #44	; 0x2c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f009 f8ee 	bl	800c172 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002f98:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <MX_TIM8_Init+0x130>)
 8002f9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002faa:	2263      	movs	r2, #99	; 0x63
 8002fac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002fc0:	4833      	ldr	r0, [pc, #204]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fc2:	f005 f92d 	bl	8008220 <HAL_TIM_PWM_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002fcc:	f7ff fbf0 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	482b      	ldr	r0, [pc, #172]	; (8003090 <MX_TIM8_Init+0x12c>)
 8002fe4:	f006 f84e 	bl	8009084 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002fee:	f7ff fbdf 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	2360      	movs	r3, #96	; 0x60
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ffe:	2300      	movs	r3, #0
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003002:	2304      	movs	r3, #4
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003012:	2200      	movs	r2, #0
 8003014:	4619      	mov	r1, r3
 8003016:	481e      	ldr	r0, [pc, #120]	; (8003090 <MX_TIM8_Init+0x12c>)
 8003018:	f005 fb62 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003022:	f7ff fbc5 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800302a:	2204      	movs	r2, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4818      	ldr	r0, [pc, #96]	; (8003090 <MX_TIM8_Init+0x12c>)
 8003030:	f005 fb56 	bl	80086e0 <HAL_TIM_PWM_ConfigChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800303a:	f7ff fbb9 	bl	80027b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4807      	ldr	r0, [pc, #28]	; (8003090 <MX_TIM8_Init+0x12c>)
 8003074:	f006 f88e 	bl	8009194 <HAL_TIMEx_ConfigBreakDeadTime>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800307e:	f7ff fb97 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003082:	4803      	ldr	r0, [pc, #12]	; (8003090 <MX_TIM8_Init+0x12c>)
 8003084:	f000 f89c 	bl	80031c0 <HAL_TIM_MspPostInit>

}
 8003088:	bf00      	nop
 800308a:	3758      	adds	r7, #88	; 0x58
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000618 	.word	0x20000618
 8003094:	40013400 	.word	0x40013400

08003098 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2e      	ldr	r2, [pc, #184]	; (8003160 <HAL_TIM_PWM_MspInit+0xc8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	4a2d      	ldr	r2, [pc, #180]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b4:	6613      	str	r3, [r2, #96]	; 0x60
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80030c2:	e046      	b.n	8003152 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	69bb      	ldr	r3, [r7, #24]
}
 80030e6:	e034      	b.n	8003152 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_TIM_PWM_MspInit+0xd0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
}
 800310a:	e022      	b.n	8003152 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_TIM_PWM_MspInit+0xd4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
}
 800312e:	e010      	b.n	8003152 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_TIM_PWM_MspInit+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10b      	bne.n	8003152 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 800313c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 8003140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003144:	6613      	str	r3, [r2, #96]	; 0x60
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_TIM_PWM_MspInit+0xcc>)
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40013400 	.word	0x40013400

08003174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_TIM_Base_MspInit+0x44>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d113      	bne.n	80031ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_TIM_Base_MspInit+0x48>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_TIM_Base_MspInit+0x48>)
 800318c:	f043 0320 	orr.w	r3, r3, #32
 8003190:	6593      	str	r3, [r2, #88]	; 0x58
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_TIM_Base_MspInit+0x48>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2101      	movs	r1, #1
 80031a2:	2037      	movs	r0, #55	; 0x37
 80031a4:	f002 ff9b 	bl	80060de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031a8:	2037      	movs	r0, #55	; 0x37
 80031aa:	f002 ffb4 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40001400 	.word	0x40001400
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a56      	ldr	r2, [pc, #344]	; (8003338 <HAL_TIM_MspPostInit+0x178>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d11e      	bne.n	8003220 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4a55      	ldr	r2, [pc, #340]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ee:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 80031fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800320c:	2301      	movs	r3, #1
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321a:	f003 fa0d 	bl	8006638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800321e:	e087      	b.n	8003330 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d11d      	bne.n	8003266 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	4a43      	ldr	r2, [pc, #268]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 8003242:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003254:	2301      	movs	r3, #1
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	4838      	ldr	r0, [pc, #224]	; (8003340 <HAL_TIM_MspPostInit+0x180>)
 8003260:	f003 f9ea 	bl	8006638 <HAL_GPIO_Init>
}
 8003264:	e064      	b.n	8003330 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a36      	ldr	r2, [pc, #216]	; (8003344 <HAL_TIM_MspPostInit+0x184>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11c      	bne.n	80032aa <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a31      	ldr	r2, [pc, #196]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 8003288:	2330      	movs	r3, #48	; 0x30
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003298:	2302      	movs	r3, #2
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4827      	ldr	r0, [pc, #156]	; (8003340 <HAL_TIM_MspPostInit+0x180>)
 80032a4:	f003 f9c8 	bl	8006638 <HAL_GPIO_Init>
}
 80032a8:	e042      	b.n	8003330 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_TIM_MspPostInit+0x188>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d11c      	bne.n	80032ee <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80032ba:	f043 0302 	orr.w	r3, r3, #2
 80032be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 80032cc:	23c0      	movs	r3, #192	; 0xc0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032dc:	2302      	movs	r3, #2
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	4816      	ldr	r0, [pc, #88]	; (8003340 <HAL_TIM_MspPostInit+0x180>)
 80032e8:	f003 f9a6 	bl	8006638 <HAL_GPIO_Init>
}
 80032ec:	e020      	b.n	8003330 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIM_MspPostInit+0x18c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_TIM_MspPostInit+0x17c>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8003310:	23c0      	movs	r3, #192	; 0xc0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003320:	2303      	movs	r3, #3
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	4809      	ldr	r0, [pc, #36]	; (8003350 <HAL_TIM_MspPostInit+0x190>)
 800332c:	f003 f984 	bl	8006638 <HAL_GPIO_Init>
}
 8003330:	bf00      	nop
 8003332:	3730      	adds	r7, #48	; 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40021000 	.word	0x40021000
 8003340:	48000400 	.word	0x48000400
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40013400 	.word	0x40013400
 8003350:	48000800 	.word	0x48000800

08003354 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <MX_UART4_Init+0x58>)
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <MX_UART4_Init+0x5c>)
 800335c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <MX_UART4_Init+0x58>)
 8003360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003364:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <MX_UART4_Init+0x58>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <MX_UART4_Init+0x58>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <MX_UART4_Init+0x58>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_UART4_Init+0x58>)
 800337a:	220c      	movs	r2, #12
 800337c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <MX_UART4_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <MX_UART4_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <MX_UART4_Init+0x58>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_UART4_Init+0x58>)
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003396:	4805      	ldr	r0, [pc, #20]	; (80033ac <MX_UART4_Init+0x58>)
 8003398:	f005 ff98 	bl	80092cc <HAL_UART_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80033a2:	f7ff fa05 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000664 	.word	0x20000664
 80033b0:	40004c00 	.word	0x40004c00

080033b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b0ac      	sub	sp, #176	; 0xb0
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2288      	movs	r2, #136	; 0x88
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f008 fecc 	bl	800c172 <memset>
  if(uartHandle->Instance==UART4)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a25      	ldr	r2, [pc, #148]	; (8003474 <HAL_UART_MspInit+0xc0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d143      	bne.n	800346c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80033e4:	2308      	movs	r3, #8
 80033e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80033e8:	2300      	movs	r3, #0
 80033ea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f991 	bl	8007718 <HAL_RCCEx_PeriphCLKConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033fc:	f7ff f9d8 	bl	80027b0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_UART_MspInit+0xc4>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_UART_MspInit+0xc4>)
 8003406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_UART_MspInit+0xc4>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_UART_MspInit+0xc4>)
 800341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_UART_MspInit+0xc4>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_UART_MspInit+0xc4>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003430:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343e:	2301      	movs	r3, #1
 8003440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800344a:	2308      	movs	r3, #8
 800344c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003454:	4619      	mov	r1, r3
 8003456:	4809      	ldr	r0, [pc, #36]	; (800347c <HAL_UART_MspInit+0xc8>)
 8003458:	f003 f8ee 	bl	8006638 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2034      	movs	r0, #52	; 0x34
 8003462:	f002 fe3c 	bl	80060de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003466:	2034      	movs	r0, #52	; 0x34
 8003468:	f002 fe55 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800346c:	bf00      	nop
 800346e:	37b0      	adds	r7, #176	; 0xb0
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40004c00 	.word	0x40004c00
 8003478:	40021000 	.word	0x40021000
 800347c:	48000800 	.word	0x48000800

08003480 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80034b0:	f7fd fb32 	bl	8000b18 <__aeabi_dcmpgt>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80034c6:	e011      	b.n	80034ec <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80034d4:	f7fd fb02 	bl	8000adc <__aeabi_dcmplt>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d100      	bne.n	80034e0 <PID_Init+0x60>
}
 80034de:	e005      	b.n	80034ec <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24
 8003500:	6239      	str	r1, [r7, #32]
 8003502:	61fa      	str	r2, [r7, #28]
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	ed87 0b04 	vstr	d0, [r7, #16]
 800350a:	ed87 1b02 	vstr	d1, [r7, #8]
 800350e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2200      	movs	r2, #0
 8003528:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800352a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003580 <PID+0x88>
 800352e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003588 <PID+0x90>
 8003532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003534:	f000 f956 	bl	80037e4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	2264      	movs	r2, #100	; 0x64
 800353c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800353e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003542:	4619      	mov	r1, r3
 8003544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003546:	f000 fa63 	bl	8003a10 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800354a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800354e:	4619      	mov	r1, r3
 8003550:	ed97 2b00 	vldr	d2, [r7]
 8003554:	ed97 1b02 	vldr	d1, [r7, #8]
 8003558:	ed97 0b04 	vldr	d0, [r7, #16]
 800355c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800355e:	f000 f9af 	bl	80038c0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003562:	f001 f9d3 	bl	800490c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	605a      	str	r2, [r3, #4]

}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	f3af 8000 	nop.w
 8003580:	00000000 	.word	0x00000000
 8003584:	406fe000 	.word	0x406fe000
	...

08003590 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b08c      	sub	sp, #48	; 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	785b      	ldrb	r3, [r3, #1]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <PID_Compute+0x14>
	{
		return _FALSE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e0f5      	b.n	8003790 <PID_Compute+0x200>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80035a4:	f001 f9b2 	bl	800490c <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	f0c0 80e7 	bcc.w	800378e <PID_Compute+0x1fe>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	f7fc fe56 	bl	8000288 <__aeabi_dsub>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80035ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ee:	f7fc fe4b 	bl	8000288 <__aeabi_dsub>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800360a:	f7fc fff5 	bl	80005f8 <__aeabi_dmul>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4620      	mov	r0, r4
 8003614:	4629      	mov	r1, r5
 8003616:	f7fc fe39 	bl	800028c <__adddf3>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d114      	bne.n	8003656 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800363c:	f7fc ffdc 	bl	80005f8 <__aeabi_dmul>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc fe1e 	bl	8000288 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003662:	f7fd fa59 	bl	8000b18 <__aeabi_dcmpgt>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003678:	e010      	b.n	800369c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003686:	f7fd fa29 	bl	8000adc <__aeabi_dcmplt>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80036aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ae:	f7fc ffa3 	bl	80005f8 <__aeabi_dmul>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80036ba:	e005      	b.n	80036c8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80036d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d8:	f7fc ff8e 	bl	80005f8 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc fdd0 	bl	8000288 <__aeabi_dsub>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036f0:	f7fc fdcc 	bl	800028c <__adddf3>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003702:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003706:	f7fd fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003716:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800371a:	e00e      	b.n	800373a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003722:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003726:	f7fd f9d9 	bl	8000adc <__aeabi_dcmplt>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003736:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		if(error<0.1&&error>-0.1)
 800373a:	a317      	add	r3, pc, #92	; (adr r3, 8003798 <PID_Compute+0x208>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003744:	f7fd f9ca 	bl	8000adc <__aeabi_dcmplt>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00f      	beq.n	800376e <PID_Compute+0x1de>
 800374e:	a314      	add	r3, pc, #80	; (adr r3, 80037a0 <PID_Compute+0x210>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003758:	f7fd f9de 	bl	8000b18 <__aeabi_dcmpgt>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <PID_Compute+0x1de>
		{
			output=0;
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		*uPID->MyOutput = output;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003776:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003780:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <PID_Compute+0x200>

	}
	else
	{
		return _FALSE;
 800378e:	2300      	movs	r3, #0
	}

}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bdb0      	pop	{r4, r5, r7, pc}
 8003798:	9999999a 	.word	0x9999999a
 800379c:	3fb99999 	.word	0x3fb99999
 80037a0:	9999999a 	.word	0x9999999a
 80037a4:	bfb99999 	.word	0xbfb99999

080037a8 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <PID_SetMode+0x2e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fe55 	bl	8003480 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	705a      	strb	r2, [r3, #1]

}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6178      	str	r0, [r7, #20]
 80037ec:	ed87 0b02 	vstr	d0, [r7, #8]
 80037f0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80037f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fc:	f7fd f982 	bl	8000b04 <__aeabi_dcmpge>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d158      	bne.n	80038b8 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8003806:	6979      	ldr	r1, [r7, #20]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003810:	6979      	ldr	r1, [r7, #20]
 8003812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003816:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	785b      	ldrb	r3, [r3, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04b      	beq.n	80038ba <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003830:	f7fd f972 	bl	8000b18 <__aeabi_dcmpgt>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003844:	e9c1 2300 	strd	r2, r3, [r1]
 8003848:	e012      	b.n	8003870 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003858:	f7fd f940 	bl	8000adc <__aeabi_dcmplt>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800386c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800387c:	f7fd f94c 	bl	8000b18 <__aeabi_dcmpgt>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800388c:	6979      	ldr	r1, [r7, #20]
 800388e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003892:	e012      	b.n	80038ba <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80038a0:	f7fd f91c 	bl	8000adc <__aeabi_dcmplt>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80038b6:	e000      	b.n	80038ba <PID_SetOutputLimits+0xd6>
		return;
 80038b8:	bf00      	nop
		}
		else { }

	}

}
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	61f8      	str	r0, [r7, #28]
 80038c8:	ed87 0b04 	vstr	d0, [r7, #16]
 80038cc:	ed87 1b02 	vstr	d1, [r7, #8]
 80038d0:	ed87 2b00 	vstr	d2, [r7]
 80038d4:	460b      	mov	r3, r1
 80038d6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038e4:	f7fd f8fa 	bl	8000adc <__aeabi_dcmplt>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8089 	bne.w	8003a02 <PID_SetTunings2+0x142>
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038fc:	f7fd f8ee 	bl	8000adc <__aeabi_dcmplt>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d17d      	bne.n	8003a02 <PID_SetTunings2+0x142>
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003912:	f7fd f8e3 	bl	8000adc <__aeabi_dcmplt>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d172      	bne.n	8003a02 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	7efa      	ldrb	r2, [r7, #27]
 8003920:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003922:	7efb      	ldrb	r3, [r7, #27]
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003934:	69f9      	ldr	r1, [r7, #28]
 8003936:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800393a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800393e:	69f9      	ldr	r1, [r7, #28]
 8003940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003944:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003948:	69f9      	ldr	r1, [r7, #28]
 800394a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800394e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fdd4 	bl	8000504 <__aeabi_ui2d>
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <PID_SetTunings2+0x14c>)
 8003962:	f7fc ff73 	bl	800084c <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003974:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003978:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003980:	f7fc fe3a 	bl	80005f8 <__aeabi_dmul>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800398e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003996:	f7fc ff59 	bl	800084c <__aeabi_ddiv>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	78db      	ldrb	r3, [r3, #3]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d12b      	bne.n	8003a04 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	f7fc fc65 	bl	8000288 <__aeabi_dsub>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	69f9      	ldr	r1, [r7, #28]
 80039c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	f7fc fc57 	bl	8000288 <__aeabi_dsub>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80039ea:	f04f 0000 	mov.w	r0, #0
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	f7fc fc49 	bl	8000288 <__aeabi_dsub>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	69f9      	ldr	r1, [r7, #28]
 80039fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003a00:	e000      	b.n	8003a04 <PID_SetTunings2+0x144>
		return;
 8003a02:	bf00      	nop

	}

}
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	408f4000 	.word	0x408f4000

08003a10 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02e      	beq.n	8003a82 <PID_SetControllerDirection+0x72>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	78db      	ldrb	r3, [r3, #3]
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d029      	beq.n	8003a82 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f7fc fc24 	bl	8000288 <__aeabi_dsub>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	f7fc fc16 	bl	8000288 <__aeabi_dsub>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a6c:	f04f 0000 	mov.w	r0, #0
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	f7fc fc08 	bl	8000288 <__aeabi_dsub>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	70da      	strb	r2, [r3, #3]

}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dd2e      	ble.n	8003afe <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f7fc fd3f 	bl	8000524 <__aeabi_i2d>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd28 	bl	8000504 <__aeabi_ui2d>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7fc fec6 	bl	800084c <__aeabi_ddiv>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad2:	f7fc fd91 	bl	80005f8 <__aeabi_dmul>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aea:	f7fc feaf 	bl	800084c <__aeabi_ddiv>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]

	}

}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b08 <Read_Encoder>:
//-------------- function -------------------
/*
 * Read Encoder Signals
 */
void Read_Encoder (Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
	//	_Bool Signal_A;
	//	_Bool Signal_B;
	switch (FingerName) {
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	f200 809b 	bhi.w	8003c52 <Read_Encoder+0x14a>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <Read_Encoder+0x1c>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b73 	.word	0x08003b73
 8003b2c:	08003ba9 	.word	0x08003ba9
 8003b30:	08003bdf 	.word	0x08003bdf
 8003b34:	08003c19 	.word	0x08003c19
	case Thumb:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor5_Encoder1_GPIO_Port,Motor5_Encoder1_Pin);
 8003b38:	2104      	movs	r1, #4
 8003b3a:	4884      	ldr	r0, [pc, #528]	; (8003d4c <Read_Encoder+0x244>)
 8003b3c:	f002 ff26 	bl	800698c <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	2300      	moveq	r3, #0
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor5_Encoder2_GPIO_Port,Motor5_Encoder2_Pin);
 8003b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5a:	f002 ff17 	bl	800698c <HAL_GPIO_ReadPin>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		break;
 8003b70:	e070      	b.n	8003c54 <Read_Encoder+0x14c>
	case Index:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor4_Encoder1_GPIO_Port,Motor4_Encoder1_Pin);
 8003b72:	2101      	movs	r1, #1
 8003b74:	4875      	ldr	r0, [pc, #468]	; (8003d4c <Read_Encoder+0x244>)
 8003b76:	f002 ff09 	bl	800698c <HAL_GPIO_ReadPin>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor4_Encoder2_GPIO_Port,Motor4_Encoder2_Pin);
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	486f      	ldr	r0, [pc, #444]	; (8003d4c <Read_Encoder+0x244>)
 8003b90:	f002 fefc 	bl	800698c <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003ba6:	e055      	b.n	8003c54 <Read_Encoder+0x14c>
	case Middle:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor3_Encoder1_GPIO_Port,Motor3_Encoder1_Pin);
 8003ba8:	2120      	movs	r1, #32
 8003baa:	4869      	ldr	r0, [pc, #420]	; (8003d50 <Read_Encoder+0x248>)
 8003bac:	f002 feee 	bl	800698c <HAL_GPIO_ReadPin>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor3_Encoder2_GPIO_Port,Motor3_Encoder2_Pin);
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	4862      	ldr	r0, [pc, #392]	; (8003d50 <Read_Encoder+0x248>)
 8003bc6:	f002 fee1 	bl	800698c <HAL_GPIO_ReadPin>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003bdc:	e03a      	b.n	8003c54 <Read_Encoder+0x14c>
	case Ring:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor2_Encoder1_GPIO_Port,Motor2_Encoder1_Pin);
 8003bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003be2:	485a      	ldr	r0, [pc, #360]	; (8003d4c <Read_Encoder+0x244>)
 8003be4:	f002 fed2 	bl	800698c <HAL_GPIO_ReadPin>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor2_Encoder2_GPIO_Port,Motor2_Encoder2_Pin);
 8003bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfe:	4853      	ldr	r0, [pc, #332]	; (8003d4c <Read_Encoder+0x244>)
 8003c00:	f002 fec4 	bl	800698c <HAL_GPIO_ReadPin>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003c16:	e01d      	b.n	8003c54 <Read_Encoder+0x14c>
	case Pinky:
		FingerStruct->SignalA=HAL_GPIO_ReadPin(Motor1_Encoder1_GPIO_Port,Motor1_Encoder1_Pin);
 8003c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1c:	484b      	ldr	r0, [pc, #300]	; (8003d4c <Read_Encoder+0x244>)
 8003c1e:	f002 feb5 	bl	800698c <HAL_GPIO_ReadPin>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		FingerStruct->SignalB=HAL_GPIO_ReadPin(Motor1_Encoder2_GPIO_Port,Motor1_Encoder2_Pin);
 8003c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c38:	4844      	ldr	r0, [pc, #272]	; (8003d4c <Read_Encoder+0x244>)
 8003c3a:	f002 fea7 	bl	800698c <HAL_GPIO_ReadPin>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		break;
 8003c50:	e000      	b.n	8003c54 <Read_Encoder+0x14c>
	default:
		break;
 8003c52:	bf00      	nop
	}
	if(FingerStruct->SignalA && FingerStruct->SignalB)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <Read_Encoder+0x16c>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <Read_Encoder+0x16c>
		FingerStruct->current_Encoder_State=Ahigh_Bhigh;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	755a      	strb	r2, [r3, #21]
 8003c72:	e028      	b.n	8003cc6 <Read_Encoder+0x1be>
	else if (FingerStruct->SignalA && !FingerStruct->SignalB)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <Read_Encoder+0x192>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f083 0301 	eor.w	r3, r3, #1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <Read_Encoder+0x192>
		FingerStruct->current_Encoder_State=Ahigh_Blow;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	755a      	strb	r2, [r3, #21]
 8003c98:	e015      	b.n	8003cc6 <Read_Encoder+0x1be>
	else if (!FingerStruct->SignalA && FingerStruct->SignalB)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <Read_Encoder+0x1b8>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <Read_Encoder+0x1b8>
		FingerStruct->current_Encoder_State=Alow_Bhigh;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	755a      	strb	r2, [r3, #21]
 8003cbe:	e002      	b.n	8003cc6 <Read_Encoder+0x1be>
	else
		FingerStruct->current_Encoder_State=Alow_Blow;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	755a      	strb	r2, [r3, #21]
	if(FingerStruct->current_Encoder_State != FingerStruct->Pre_Encoder_State)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	7d5a      	ldrb	r2, [r3, #21]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	7d9b      	ldrb	r3, [r3, #22]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d038      	beq.n	8003d44 <Read_Encoder+0x23c>
	{
		//if(FingerStruct->Direction==Open)
		//	FingerStruct->Encoder++;
		//else if(FingerStruct->Direction==Close)
		//	FingerStruct->Encoder--;
		if(FingerStruct->Pre_Encoder_State==Ahigh_Blow && FingerStruct->current_Encoder_State==Alow_Blow)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	7d9b      	ldrb	r3, [r3, #22]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d10a      	bne.n	8003cf0 <Read_Encoder+0x1e8>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7d5b      	ldrb	r3, [r3, #21]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <Read_Encoder+0x1e8>
			FingerStruct->Encoder++;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	8a1b      	ldrh	r3, [r3, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	821a      	strh	r2, [r3, #16]
 8003cee:	e01c      	b.n	8003d2a <Read_Encoder+0x222>
		else if(FingerStruct->Pre_Encoder_State==Alow_Blow && FingerStruct->current_Encoder_State==Ahigh_Blow)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	7d9b      	ldrb	r3, [r3, #22]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10a      	bne.n	8003d0e <Read_Encoder+0x206>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	7d5b      	ldrb	r3, [r3, #21]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d106      	bne.n	8003d0e <Read_Encoder+0x206>
			FingerStruct->Encoder--;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	8a1b      	ldrh	r3, [r3, #16]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	821a      	strh	r2, [r3, #16]
 8003d0c:	e00d      	b.n	8003d2a <Read_Encoder+0x222>
		else
			FingerStruct->Encoder+=(FingerStruct->Pre_Encoder_State-FingerStruct->current_Encoder_State);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	8a1a      	ldrh	r2, [r3, #16]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	7d9b      	ldrb	r3, [r3, #22]
 8003d16:	b299      	uxth	r1, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	7d5b      	ldrb	r3, [r3, #21]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	1acb      	subs	r3, r1, r3
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	821a      	strh	r2, [r3, #16]
		FingerStruct->Pre_Encoder_State=FingerStruct->current_Encoder_State;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	7d5a      	ldrb	r2, [r3, #21]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	759a      	strb	r2, [r3, #22]
		if(FingerStruct->Encoder>65000)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	8a1b      	ldrh	r3, [r3, #16]
 8003d36:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d902      	bls.n	8003d44 <Read_Encoder+0x23c>
			FingerStruct->Encoder=0;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	821a      	strh	r2, [r3, #16]
	}
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	48000400 	.word	0x48000400
 8003d50:	48000800 	.word	0x48000800

08003d54 <SetMotor>:
/*
 * set PWM and direction for each finger
 */
void SetMotor(Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct) {
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
	//	Read_Encoder(FingerStruct, name);
	if(control_mode==speed_mode)
 8003d60:	4ba2      	ldr	r3, [pc, #648]	; (8003fec <SetMotor+0x298>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13a      	bne.n	8003de0 <SetMotor+0x8c>
	{
		if(FingerStruct->SetPoint>0)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f7fc fece 	bl	8000b18 <__aeabi_dcmpgt>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <SetMotor+0x48>
		{
			FingerStruct->speed=FingerStruct->SetPoint;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			FingerStruct->Direction_motor=Open;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	749a      	strb	r2, [r3, #18]
			FingerStruct->Direction_Encoder=Open;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2201      	movs	r2, #1
 8003d98:	74da      	strb	r2, [r3, #19]
 8003d9a:	e021      	b.n	8003de0 <SetMotor+0x8c>
		}else if(FingerStruct->SetPoint<0)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	f7fc fe97 	bl	8000adc <__aeabi_dcmplt>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00f      	beq.n	8003dd4 <SetMotor+0x80>
		{
			FingerStruct->speed=FingerStruct->SetPoint*(-1);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	4614      	mov	r4, r2
 8003dbc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	e9c3 4506 	strd	r4, r5, [r3, #24]
			FingerStruct->Direction_motor=Close;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	749a      	strb	r2, [r3, #18]
			FingerStruct->Direction_Encoder=Close;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	74da      	strb	r2, [r3, #19]
 8003dd2:	e005      	b.n	8003de0 <SetMotor+0x8c>
		}else
		{
			FingerStruct->Direction_motor=Stop;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	749a      	strb	r2, [r3, #18]
			FingerStruct->Direction_Encoder=Stop;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	74da      	strb	r2, [r3, #19]
		}
	}
	switch (FingerName) {
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	f200 8193 	bhi.w	800410e <SetMotor+0x3ba>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <SetMotor+0x9c>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e99 	.word	0x08003e99
 8003df8:	08003f2d 	.word	0x08003f2d
 8003dfc:	08003fc1 	.word	0x08003fc1
 8003e00:	0800407b 	.word	0x0800407b
	case Thumb :
		if ( FingerStruct->Direction_motor== Open) {
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	7c9b      	ldrb	r3, [r3, #18]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d110      	bne.n	8003e2e <SetMotor+0xda>
			htim3.Instance->CCR1 = (uint8_t) FingerStruct->speed;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	f7fc fec7 	bl	8000ba8 <__aeabi_d2uiz>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <SetMotor+0x29c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8003e24:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <SetMotor+0x29c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2c:	e01c      	b.n	8003e68 <SetMotor+0x114>
		} else if (FingerStruct->Direction_motor == Close) {
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	7c9b      	ldrb	r3, [r3, #18]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d110      	bne.n	8003e58 <SetMotor+0x104>
			htim3.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7fc feb2 	bl	8000ba8 <__aeabi_d2uiz>
 8003e44:	4603      	mov	r3, r0
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <SetMotor+0x29c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 8003e4e:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <SetMotor+0x29c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34
 8003e56:	e007      	b.n	8003e68 <SetMotor+0x114>
		} else {
			htim3.Instance->CCR1 =100;
 8003e58:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <SetMotor+0x29c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2264      	movs	r2, #100	; 0x64
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =100;
 8003e60:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <SetMotor+0x29c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2264      	movs	r2, #100	; 0x64
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	8a1b      	ldrh	r3, [r3, #16]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e74:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ff4 <SetMotor+0x2a0>
 8003e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e7c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ff8 <SetMotor+0x2a4>
 8003e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e84:	ee17 0a90 	vmov	r0, s15
 8003e88:	f7fc fb5e 	bl	8000548 <__aeabi_f2d>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003e96:	e13b      	b.n	8004110 <SetMotor+0x3bc>
	case Index :
		if ( FingerStruct->Direction_motor== Close) {
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7c9b      	ldrb	r3, [r3, #18]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d110      	bne.n	8003ec2 <SetMotor+0x16e>
			htim4.Instance->CCR1 =(uint8_t)  FingerStruct->speed;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7fc fe7d 	bl	8000ba8 <__aeabi_d2uiz>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <SetMotor+0x2a8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8003eb8:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <SetMotor+0x2a8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec0:	e01c      	b.n	8003efc <SetMotor+0x1a8>
		} else if (FingerStruct->Direction_motor == Open) {
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7c9b      	ldrb	r3, [r3, #18]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d110      	bne.n	8003eec <SetMotor+0x198>
			htim4.Instance->CCR2 = (uint8_t) FingerStruct->speed;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fe68 	bl	8000ba8 <__aeabi_d2uiz>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <SetMotor+0x2a8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <SetMotor+0x2a8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eea:	e007      	b.n	8003efc <SetMotor+0x1a8>
		} else {
			htim4.Instance->CCR1 =100;
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <SetMotor+0x2a8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2264      	movs	r2, #100	; 0x64
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =100;
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <SetMotor+0x2a8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2264      	movs	r2, #100	; 0x64
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	8a1b      	ldrh	r3, [r3, #16]
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f08:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004000 <SetMotor+0x2ac>
 8003f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f10:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003ff8 <SetMotor+0x2a4>
 8003f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f18:	ee17 0a90 	vmov	r0, s15
 8003f1c:	f7fc fb14 	bl	8000548 <__aeabi_f2d>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003f2a:	e0f1      	b.n	8004110 <SetMotor+0x3bc>
	case Middle :
		if ( FingerStruct->Direction_motor== Close) {
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	7c9b      	ldrb	r3, [r3, #18]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d110      	bne.n	8003f56 <SetMotor+0x202>
			htim2.Instance->CCR4 =(uint8_t)  FingerStruct->speed;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fc fe33 	bl	8000ba8 <__aeabi_d2uiz>
 8003f42:	4603      	mov	r3, r0
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <SetMotor+0x2b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 8003f4c:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <SetMotor+0x2b0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f54:	e01c      	b.n	8003f90 <SetMotor+0x23c>
		} else if (FingerStruct->Direction_motor == Open) {
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	7c9b      	ldrb	r3, [r3, #18]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d110      	bne.n	8003f80 <SetMotor+0x22c>
			htim2.Instance->CCR3 = (uint8_t) FingerStruct->speed;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	f7fc fe1e 	bl	8000ba8 <__aeabi_d2uiz>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <SetMotor+0x2b0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <SetMotor+0x2b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f7e:	e007      	b.n	8003f90 <SetMotor+0x23c>
		} else {
			htim2.Instance->CCR3 =100;
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <SetMotor+0x2b0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2264      	movs	r2, #100	; 0x64
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =100;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <SetMotor+0x2b0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2264      	movs	r2, #100	; 0x64
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	8a1b      	ldrh	r3, [r3, #16]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f9c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004008 <SetMotor+0x2b4>
 8003fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fa4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ff8 <SetMotor+0x2a4>
 8003fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fac:	ee17 0a90 	vmov	r0, s15
 8003fb0:	f7fc faca 	bl	8000548 <__aeabi_f2d>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8003fbe:	e0a7      	b.n	8004110 <SetMotor+0x3bc>
	case Ring :
		if ( FingerStruct->Direction_motor== Close) {
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	7c9b      	ldrb	r3, [r3, #18]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d123      	bne.n	8004010 <SetMotor+0x2bc>
			htim8.Instance->CCR1 = (uint8_t) FingerStruct->speed;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fde9 	bl	8000ba8 <__aeabi_d2uiz>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <SetMotor+0x2b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <SetMotor+0x2b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8003fe8:	e02f      	b.n	800404a <SetMotor+0x2f6>
 8003fea:	bf00      	nop
 8003fec:	20000327 	.word	0x20000327
 8003ff0:	20000534 	.word	0x20000534
 8003ff4:	45913800 	.word	0x45913800
 8003ff8:	42c80000 	.word	0x42c80000
 8003ffc:	20000580 	.word	0x20000580
 8004000:	46cf0800 	.word	0x46cf0800
 8004004:	200004e8 	.word	0x200004e8
 8004008:	46c99000 	.word	0x46c99000
 800400c:	20000618 	.word	0x20000618
		} else if (FingerStruct->Direction_motor == Open) {
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	7c9b      	ldrb	r3, [r3, #18]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d110      	bne.n	800403a <SetMotor+0x2e6>
			htim8.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fdc1 	bl	8000ba8 <__aeabi_d2uiz>
 8004026:	4603      	mov	r3, r0
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <SetMotor+0x3c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <SetMotor+0x3c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2200      	movs	r2, #0
 8004036:	635a      	str	r2, [r3, #52]	; 0x34
 8004038:	e007      	b.n	800404a <SetMotor+0x2f6>
		} else {
			htim8.Instance->CCR1 =100;
 800403a:	4b37      	ldr	r3, [pc, #220]	; (8004118 <SetMotor+0x3c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2264      	movs	r2, #100	; 0x64
 8004040:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =100;
 8004042:	4b35      	ldr	r3, [pc, #212]	; (8004118 <SetMotor+0x3c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2264      	movs	r2, #100	; 0x64
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	8a1b      	ldrh	r3, [r3, #16]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004056:	eddf 6a31 	vldr	s13, [pc, #196]	; 800411c <SetMotor+0x3c8>
 800405a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800405e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004120 <SetMotor+0x3cc>
 8004062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004066:	ee17 0a90 	vmov	r0, s15
 800406a:	f7fc fa6d 	bl	8000548 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 8004078:	e04a      	b.n	8004110 <SetMotor+0x3bc>
	case Pinky :
		if ( FingerStruct->Direction_motor== Close) {
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	7c9b      	ldrb	r3, [r3, #18]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d110      	bne.n	80040a4 <SetMotor+0x350>
			htim1.Instance->CCR1 =(uint8_t)  FingerStruct->speed;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	f7fc fd8c 	bl	8000ba8 <__aeabi_d2uiz>
 8004090:	4603      	mov	r3, r0
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <SetMotor+0x3d0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <SetMotor+0x3d0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
 80040a2:	e01c      	b.n	80040de <SetMotor+0x38a>
		} else if (FingerStruct->Direction_motor == Open) {
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	7c9b      	ldrb	r3, [r3, #18]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d110      	bne.n	80040ce <SetMotor+0x37a>
			htim1.Instance->CCR2 =(uint8_t)  FingerStruct->speed;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	f7fc fd77 	bl	8000ba8 <__aeabi_d2uiz>
 80040ba:	4603      	mov	r3, r0
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <SetMotor+0x3d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <SetMotor+0x3d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
 80040cc:	e007      	b.n	80040de <SetMotor+0x38a>
		} else {
			htim1.Instance->CCR1 =100;
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <SetMotor+0x3d0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2264      	movs	r2, #100	; 0x64
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =100;
 80040d6:	4b13      	ldr	r3, [pc, #76]	; (8004124 <SetMotor+0x3d0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2264      	movs	r2, #100	; 0x64
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	8a1b      	ldrh	r3, [r3, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ea:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004128 <SetMotor+0x3d4>
 80040ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004120 <SetMotor+0x3cc>
 80040f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040fa:	ee17 0a90 	vmov	r0, s15
 80040fe:	f7fc fa23 	bl	8000548 <__aeabi_f2d>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	e9c1 2302 	strd	r2, r3, [r1, #8]
		break;
 800410c:	e000      	b.n	8004110 <SetMotor+0x3bc>

	default:

		break;
 800410e:	bf00      	nop
	}
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bdb0      	pop	{r4, r5, r7, pc}
 8004118:	20000618 	.word	0x20000618
 800411c:	46bea000 	.word	0x46bea000
 8004120:	42c80000 	.word	0x42c80000
 8004124:	2000049c 	.word	0x2000049c
 8004128:	46cbe800 	.word	0x46cbe800
 800412c:	00000000 	.word	0x00000000

08004130 <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af02      	add	r7, sp, #8
	//-----------|start read data from ADC|---------------
	HAL_ADC_Start_DMA(&hadc2,(uint32_t *) ADCData, 6);
 8004136:	2206      	movs	r2, #6
 8004138:	4979      	ldr	r1, [pc, #484]	; (8004320 <init_motor_controller+0x1f0>)
 800413a:	487a      	ldr	r0, [pc, #488]	; (8004324 <init_motor_controller+0x1f4>)
 800413c:	f000 ff3c 	bl	8004fb8 <HAL_ADC_Start_DMA>
	//---------------|start PWM Timers|-------------------
	//motor5->thumb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004140:	2100      	movs	r1, #0
 8004142:	4879      	ldr	r0, [pc, #484]	; (8004328 <init_motor_controller+0x1f8>)
 8004144:	f004 f8c4 	bl	80082d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004148:	2104      	movs	r1, #4
 800414a:	4877      	ldr	r0, [pc, #476]	; (8004328 <init_motor_controller+0x1f8>)
 800414c:	f004 f8c0 	bl	80082d0 <HAL_TIM_PWM_Start>
	//motor4->index
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004150:	2100      	movs	r1, #0
 8004152:	4876      	ldr	r0, [pc, #472]	; (800432c <init_motor_controller+0x1fc>)
 8004154:	f004 f8bc 	bl	80082d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004158:	2104      	movs	r1, #4
 800415a:	4874      	ldr	r0, [pc, #464]	; (800432c <init_motor_controller+0x1fc>)
 800415c:	f004 f8b8 	bl	80082d0 <HAL_TIM_PWM_Start>
	//motor3->middle
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004160:	2108      	movs	r1, #8
 8004162:	4873      	ldr	r0, [pc, #460]	; (8004330 <init_motor_controller+0x200>)
 8004164:	f004 f8b4 	bl	80082d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004168:	210c      	movs	r1, #12
 800416a:	4871      	ldr	r0, [pc, #452]	; (8004330 <init_motor_controller+0x200>)
 800416c:	f004 f8b0 	bl	80082d0 <HAL_TIM_PWM_Start>
	//motor2->ring
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004170:	2100      	movs	r1, #0
 8004172:	4870      	ldr	r0, [pc, #448]	; (8004334 <init_motor_controller+0x204>)
 8004174:	f004 f8ac 	bl	80082d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8004178:	2104      	movs	r1, #4
 800417a:	486e      	ldr	r0, [pc, #440]	; (8004334 <init_motor_controller+0x204>)
 800417c:	f004 f8a8 	bl	80082d0 <HAL_TIM_PWM_Start>
	//motor1->pinky
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004180:	2100      	movs	r1, #0
 8004182:	486d      	ldr	r0, [pc, #436]	; (8004338 <init_motor_controller+0x208>)
 8004184:	f004 f8a4 	bl	80082d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004188:	2104      	movs	r1, #4
 800418a:	486b      	ldr	r0, [pc, #428]	; (8004338 <init_motor_controller+0x208>)
 800418c:	f004 f8a0 	bl	80082d0 <HAL_TIM_PWM_Start>
	//---------------|initialization|----------------------
	HAL_ADC_MspInit(&hadc1);
 8004190:	486a      	ldr	r0, [pc, #424]	; (800433c <init_motor_controller+0x20c>)
 8004192:	f7fd f9e5 	bl	8001560 <HAL_ADC_MspInit>
	HAL_ADC_MspInit(&hadc2);
 8004196:	4863      	ldr	r0, [pc, #396]	; (8004324 <init_motor_controller+0x1f4>)
 8004198:	f7fd f9e2 	bl	8001560 <HAL_ADC_MspInit>
	HAL_UART_MspInit(&huart4);
 800419c:	4868      	ldr	r0, [pc, #416]	; (8004340 <init_motor_controller+0x210>)
 800419e:	f7ff f909 	bl	80033b4 <HAL_UART_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 80041a2:	2201      	movs	r2, #1
 80041a4:	4967      	ldr	r1, [pc, #412]	; (8004344 <init_motor_controller+0x214>)
 80041a6:	4866      	ldr	r0, [pc, #408]	; (8004340 <init_motor_controller+0x210>)
 80041a8:	f005 f968 	bl	800947c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80041ac:	4866      	ldr	r0, [pc, #408]	; (8004348 <init_motor_controller+0x218>)
 80041ae:	f003 ffc7 	bl	8008140 <HAL_TIM_Base_Start_IT>
	TX_State=idel;
 80041b2:	4b66      	ldr	r3, [pc, #408]	; (800434c <init_motor_controller+0x21c>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
	control_mode=position_mode;
 80041b8:	4b65      	ldr	r3, [pc, #404]	; (8004350 <init_motor_controller+0x220>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
	//-------------|Configure PID settings|----------------
	//********THUMB
	PID(&Fingers_Status.Thumb.PID_Struct, &Fingers_Status.Thumb.position, &Fingers_Status.Thumb.speed, &Fingers_Status.Thumb.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 80041be:	2300      	movs	r3, #0
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	2301      	movs	r3, #1
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	ed9f 2b4e 	vldr	d2, [pc, #312]	; 8004300 <init_motor_controller+0x1d0>
 80041ca:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8004308 <init_motor_controller+0x1d8>
 80041ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004310 <init_motor_controller+0x1e0>
 80041d2:	4b60      	ldr	r3, [pc, #384]	; (8004354 <init_motor_controller+0x224>)
 80041d4:	4a60      	ldr	r2, [pc, #384]	; (8004358 <init_motor_controller+0x228>)
 80041d6:	4961      	ldr	r1, [pc, #388]	; (800435c <init_motor_controller+0x22c>)
 80041d8:	4861      	ldr	r0, [pc, #388]	; (8004360 <init_motor_controller+0x230>)
 80041da:	f7ff f98d 	bl	80034f8 <PID>
	PID_SetMode(&Fingers_Status.Thumb.PID_Struct, _PID_MODE_AUTOMATIC);
 80041de:	2101      	movs	r1, #1
 80041e0:	485f      	ldr	r0, [pc, #380]	; (8004360 <init_motor_controller+0x230>)
 80041e2:	f7ff fae1 	bl	80037a8 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Thumb.PID_Struct, 1);
 80041e6:	2101      	movs	r1, #1
 80041e8:	485d      	ldr	r0, [pc, #372]	; (8004360 <init_motor_controller+0x230>)
 80041ea:	f7ff fc51 	bl	8003a90 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Thumb.PID_Struct, 0, 100);
 80041ee:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8004318 <init_motor_controller+0x1e8>
 80041f2:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004300 <init_motor_controller+0x1d0>
 80041f6:	485a      	ldr	r0, [pc, #360]	; (8004360 <init_motor_controller+0x230>)
 80041f8:	f7ff faf4 	bl	80037e4 <PID_SetOutputLimits>
	//********INDEX
	PID(&Fingers_Status.Index.PID_Struct, &Fingers_Status.Index.position, &Fingers_Status.Index.speed, &Fingers_Status.Index.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 80041fc:	2300      	movs	r3, #0
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	2301      	movs	r3, #1
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 8004300 <init_motor_controller+0x1d0>
 8004208:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8004308 <init_motor_controller+0x1d8>
 800420c:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8004310 <init_motor_controller+0x1e0>
 8004210:	4b54      	ldr	r3, [pc, #336]	; (8004364 <init_motor_controller+0x234>)
 8004212:	4a55      	ldr	r2, [pc, #340]	; (8004368 <init_motor_controller+0x238>)
 8004214:	4955      	ldr	r1, [pc, #340]	; (800436c <init_motor_controller+0x23c>)
 8004216:	4856      	ldr	r0, [pc, #344]	; (8004370 <init_motor_controller+0x240>)
 8004218:	f7ff f96e 	bl	80034f8 <PID>
	PID_SetMode(&Fingers_Status.Index.PID_Struct, _PID_MODE_AUTOMATIC);
 800421c:	2101      	movs	r1, #1
 800421e:	4854      	ldr	r0, [pc, #336]	; (8004370 <init_motor_controller+0x240>)
 8004220:	f7ff fac2 	bl	80037a8 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Index.PID_Struct, 1);
 8004224:	2101      	movs	r1, #1
 8004226:	4852      	ldr	r0, [pc, #328]	; (8004370 <init_motor_controller+0x240>)
 8004228:	f7ff fc32 	bl	8003a90 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Index.PID_Struct, 0, 100);
 800422c:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8004318 <init_motor_controller+0x1e8>
 8004230:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8004300 <init_motor_controller+0x1d0>
 8004234:	484e      	ldr	r0, [pc, #312]	; (8004370 <init_motor_controller+0x240>)
 8004236:	f7ff fad5 	bl	80037e4 <PID_SetOutputLimits>
	//********MIDDLE
	PID(&Fingers_Status.Middle.PID_Struct, &Fingers_Status.Middle.position, &Fingers_Status.Middle.speed, &Fingers_Status.Middle.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 800423a:	2300      	movs	r3, #0
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	2301      	movs	r3, #1
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	ed9f 2b2f 	vldr	d2, [pc, #188]	; 8004300 <init_motor_controller+0x1d0>
 8004246:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8004308 <init_motor_controller+0x1d8>
 800424a:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8004310 <init_motor_controller+0x1e0>
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <init_motor_controller+0x244>)
 8004250:	4a49      	ldr	r2, [pc, #292]	; (8004378 <init_motor_controller+0x248>)
 8004252:	494a      	ldr	r1, [pc, #296]	; (800437c <init_motor_controller+0x24c>)
 8004254:	484a      	ldr	r0, [pc, #296]	; (8004380 <init_motor_controller+0x250>)
 8004256:	f7ff f94f 	bl	80034f8 <PID>
	PID_SetMode(&Fingers_Status.Middle.PID_Struct, _PID_MODE_AUTOMATIC);
 800425a:	2101      	movs	r1, #1
 800425c:	4848      	ldr	r0, [pc, #288]	; (8004380 <init_motor_controller+0x250>)
 800425e:	f7ff faa3 	bl	80037a8 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Middle.PID_Struct, 1);
 8004262:	2101      	movs	r1, #1
 8004264:	4846      	ldr	r0, [pc, #280]	; (8004380 <init_motor_controller+0x250>)
 8004266:	f7ff fc13 	bl	8003a90 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Middle.PID_Struct, 0, 100);
 800426a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8004318 <init_motor_controller+0x1e8>
 800426e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8004300 <init_motor_controller+0x1d0>
 8004272:	4843      	ldr	r0, [pc, #268]	; (8004380 <init_motor_controller+0x250>)
 8004274:	f7ff fab6 	bl	80037e4 <PID_SetOutputLimits>
	//********RING
	PID(&Fingers_Status.Ring.PID_Struct, &Fingers_Status.Ring.position, &Fingers_Status.Ring.speed, &Fingers_Status.Ring.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8004278:	2300      	movs	r3, #0
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	2301      	movs	r3, #1
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8004300 <init_motor_controller+0x1d0>
 8004284:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8004308 <init_motor_controller+0x1d8>
 8004288:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004310 <init_motor_controller+0x1e0>
 800428c:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <init_motor_controller+0x254>)
 800428e:	4a3e      	ldr	r2, [pc, #248]	; (8004388 <init_motor_controller+0x258>)
 8004290:	493e      	ldr	r1, [pc, #248]	; (800438c <init_motor_controller+0x25c>)
 8004292:	483f      	ldr	r0, [pc, #252]	; (8004390 <init_motor_controller+0x260>)
 8004294:	f7ff f930 	bl	80034f8 <PID>
	PID_SetMode(&Fingers_Status.Ring.PID_Struct, _PID_MODE_AUTOMATIC);
 8004298:	2101      	movs	r1, #1
 800429a:	483d      	ldr	r0, [pc, #244]	; (8004390 <init_motor_controller+0x260>)
 800429c:	f7ff fa84 	bl	80037a8 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Ring.PID_Struct, 1);
 80042a0:	2101      	movs	r1, #1
 80042a2:	483b      	ldr	r0, [pc, #236]	; (8004390 <init_motor_controller+0x260>)
 80042a4:	f7ff fbf4 	bl	8003a90 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Ring.PID_Struct, 0, 100);
 80042a8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004318 <init_motor_controller+0x1e8>
 80042ac:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8004300 <init_motor_controller+0x1d0>
 80042b0:	4837      	ldr	r0, [pc, #220]	; (8004390 <init_motor_controller+0x260>)
 80042b2:	f7ff fa97 	bl	80037e4 <PID_SetOutputLimits>
	//********PINKY
	PID(&Fingers_Status.Pinky.PID_Struct, &Fingers_Status.Pinky.position, &Fingers_Status.Pinky.speed, &Fingers_Status.Pinky.SetPoint, 1, 3, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 80042b6:	2300      	movs	r3, #0
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	2301      	movs	r3, #1
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8004300 <init_motor_controller+0x1d0>
 80042c2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8004308 <init_motor_controller+0x1d8>
 80042c6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004310 <init_motor_controller+0x1e0>
 80042ca:	4b32      	ldr	r3, [pc, #200]	; (8004394 <init_motor_controller+0x264>)
 80042cc:	4a32      	ldr	r2, [pc, #200]	; (8004398 <init_motor_controller+0x268>)
 80042ce:	4933      	ldr	r1, [pc, #204]	; (800439c <init_motor_controller+0x26c>)
 80042d0:	4833      	ldr	r0, [pc, #204]	; (80043a0 <init_motor_controller+0x270>)
 80042d2:	f7ff f911 	bl	80034f8 <PID>
	PID_SetMode(&Fingers_Status.Pinky.PID_Struct, _PID_MODE_AUTOMATIC);
 80042d6:	2101      	movs	r1, #1
 80042d8:	4831      	ldr	r0, [pc, #196]	; (80043a0 <init_motor_controller+0x270>)
 80042da:	f7ff fa65 	bl	80037a8 <PID_SetMode>
	PID_SetSampleTime(&Fingers_Status.Pinky.PID_Struct, 1);
 80042de:	2101      	movs	r1, #1
 80042e0:	482f      	ldr	r0, [pc, #188]	; (80043a0 <init_motor_controller+0x270>)
 80042e2:	f7ff fbd5 	bl	8003a90 <PID_SetSampleTime>
	PID_SetOutputLimits(&Fingers_Status.Pinky.PID_Struct, 0, 100);
 80042e6:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8004318 <init_motor_controller+0x1e8>
 80042ea:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004300 <init_motor_controller+0x1d0>
 80042ee:	482c      	ldr	r0, [pc, #176]	; (80043a0 <init_motor_controller+0x270>)
 80042f0:	f7ff fa78 	bl	80037e4 <PID_SetOutputLimits>
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w
	...
 800430c:	40080000 	.word	0x40080000
 8004310:	00000000 	.word	0x00000000
 8004314:	3ff00000 	.word	0x3ff00000
 8004318:	00000000 	.word	0x00000000
 800431c:	40590000 	.word	0x40590000
 8004320:	200009ec 	.word	0x200009ec
 8004324:	2000038c 	.word	0x2000038c
 8004328:	20000534 	.word	0x20000534
 800432c:	20000580 	.word	0x20000580
 8004330:	200004e8 	.word	0x200004e8
 8004334:	20000618 	.word	0x20000618
 8004338:	2000049c 	.word	0x2000049c
 800433c:	20000328 	.word	0x20000328
 8004340:	20000664 	.word	0x20000664
 8004344:	20000324 	.word	0x20000324
 8004348:	200005cc 	.word	0x200005cc
 800434c:	20000325 	.word	0x20000325
 8004350:	20000327 	.word	0x20000327
 8004354:	200006f0 	.word	0x200006f0
 8004358:	20000708 	.word	0x20000708
 800435c:	200006f8 	.word	0x200006f8
 8004360:	20000718 	.word	0x20000718
 8004364:	20000788 	.word	0x20000788
 8004368:	200007a0 	.word	0x200007a0
 800436c:	20000790 	.word	0x20000790
 8004370:	200007b0 	.word	0x200007b0
 8004374:	20000820 	.word	0x20000820
 8004378:	20000838 	.word	0x20000838
 800437c:	20000828 	.word	0x20000828
 8004380:	20000848 	.word	0x20000848
 8004384:	200008b8 	.word	0x200008b8
 8004388:	200008d0 	.word	0x200008d0
 800438c:	200008c0 	.word	0x200008c0
 8004390:	200008e0 	.word	0x200008e0
 8004394:	20000950 	.word	0x20000950
 8004398:	20000968 	.word	0x20000968
 800439c:	20000958 	.word	0x20000958
 80043a0:	20000978 	.word	0x20000978

080043a4 <Fingers_Calibration>:

void Fingers_Calibration(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
	//read current until stable
	while(calibration_counter<500)
 80043a8:	e009      	b.n	80043be <Fingers_Calibration+0x1a>
	{
		ADC_ReadCurrent_Thumb();
 80043aa:	f7fd fb11 	bl	80019d0 <ADC_ReadCurrent_Thumb>
		ADC_ReadCurrent_Index();
 80043ae:	f7fd fab7 	bl	8001920 <ADC_ReadCurrent_Index>
		ADC_ReadCurrent_Middle();
 80043b2:	f7fd fa61 	bl	8001878 <ADC_ReadCurrent_Middle>
		ADC_ReadCurrent_Ring();
 80043b6:	f7fd fa07 	bl	80017c8 <ADC_ReadCurrent_Ring>
		ADC_ReadCurrent_Pinky();
 80043ba:	f7fd f9b1 	bl	8001720 <ADC_ReadCurrent_Pinky>
	while(calibration_counter<500)
 80043be:	4b9f      	ldr	r3, [pc, #636]	; (800463c <Fingers_Calibration+0x298>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043c8:	d3ef      	bcc.n	80043aa <Fingers_Calibration+0x6>
	}
	//have mechanical problem

	//------------------------------| Thumb finger |----------------------------------------
		Fingers_Status.Thumb.Direction_motor=Open;
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <Fingers_Calibration+0x29c>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	749a      	strb	r2, [r3, #18]
		calibration_counter=0;
 80043d0:	4b9a      	ldr	r3, [pc, #616]	; (800463c <Fingers_Calibration+0x298>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	801a      	strh	r2, [r3, #0]
		while(Fingers_Status.Thumb.Stuck_Finger==0 || calibration_counter<60)
 80043d6:	e00b      	b.n	80043f0 <Fingers_Calibration+0x4c>
		{
			Fingers_Status.Thumb.speed=60;
 80043d8:	4999      	ldr	r1, [pc, #612]	; (8004640 <Fingers_Calibration+0x29c>)
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	4b99      	ldr	r3, [pc, #612]	; (8004644 <Fingers_Calibration+0x2a0>)
 80043e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			SetMotor(Thumb, &Fingers_Status.Thumb);
 80043e4:	4996      	ldr	r1, [pc, #600]	; (8004640 <Fingers_Calibration+0x29c>)
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7ff fcb4 	bl	8003d54 <SetMotor>
			ADC_ReadCurrent_Thumb();
 80043ec:	f7fd faf0 	bl	80019d0 <ADC_ReadCurrent_Thumb>
		while(Fingers_Status.Thumb.Stuck_Finger==0 || calibration_counter<60)
 80043f0:	4b93      	ldr	r3, [pc, #588]	; (8004640 <Fingers_Calibration+0x29c>)
 80043f2:	7ddb      	ldrb	r3, [r3, #23]
 80043f4:	f083 0301 	eor.w	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ec      	bne.n	80043d8 <Fingers_Calibration+0x34>
 80043fe:	4b8f      	ldr	r3, [pc, #572]	; (800463c <Fingers_Calibration+0x298>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b3b      	cmp	r3, #59	; 0x3b
 8004406:	d9e7      	bls.n	80043d8 <Fingers_Calibration+0x34>
		}
		Fingers_Status.Thumb.Direction_motor=Stop;
 8004408:	4b8d      	ldr	r3, [pc, #564]	; (8004640 <Fingers_Calibration+0x29c>)
 800440a:	2200      	movs	r2, #0
 800440c:	749a      	strb	r2, [r3, #18]
		Fingers_Status.Thumb.speed=0;
 800440e:	498c      	ldr	r1, [pc, #560]	; (8004640 <Fingers_Calibration+0x29c>)
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9c1 2306 	strd	r2, r3, [r1, #24]
		SetMotor(Thumb, &Fingers_Status.Thumb);
 800441c:	4988      	ldr	r1, [pc, #544]	; (8004640 <Fingers_Calibration+0x29c>)
 800441e:	2000      	movs	r0, #0
 8004420:	f7ff fc98 	bl	8003d54 <SetMotor>
		Fingers_Status.Thumb.Stuck_Finger=0;
 8004424:	4b86      	ldr	r3, [pc, #536]	; (8004640 <Fingers_Calibration+0x29c>)
 8004426:	2200      	movs	r2, #0
 8004428:	75da      	strb	r2, [r3, #23]
		Fingers_Status.Thumb.Encoder=Max_Encoder_Thumb;
 800442a:	4b85      	ldr	r3, [pc, #532]	; (8004640 <Fingers_Calibration+0x29c>)
 800442c:	f241 2227 	movw	r2, #4647	; 0x1227
 8004430:	821a      	strh	r2, [r3, #16]
		Fingers_Status.Thumb.SetPoint=100;
 8004432:	4983      	ldr	r1, [pc, #524]	; (8004640 <Fingers_Calibration+0x29c>)
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <Fingers_Calibration+0x2a4>)
 800443a:	e9c1 2300 	strd	r2, r3, [r1]
	//------------------------------| Index finger |----------------------------------------
	Fingers_Status.Index.Direction_motor=Open;
 800443e:	4b80      	ldr	r3, [pc, #512]	; (8004640 <Fingers_Calibration+0x29c>)
 8004440:	2201      	movs	r2, #1
 8004442:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	calibration_counter=0;
 8004446:	4b7d      	ldr	r3, [pc, #500]	; (800463c <Fingers_Calibration+0x298>)
 8004448:	2200      	movs	r2, #0
 800444a:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<60)
 800444c:	e00b      	b.n	8004466 <Fingers_Calibration+0xc2>
	{
		Fingers_Status.Index.speed=60;
 800444e:	497c      	ldr	r1, [pc, #496]	; (8004640 <Fingers_Calibration+0x29c>)
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <Fingers_Calibration+0x2a0>)
 8004456:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
		SetMotor(Index, &Fingers_Status.Index);
 800445a:	497c      	ldr	r1, [pc, #496]	; (800464c <Fingers_Calibration+0x2a8>)
 800445c:	2001      	movs	r0, #1
 800445e:	f7ff fc79 	bl	8003d54 <SetMotor>
		ADC_ReadCurrent_Index();
 8004462:	f7fd fa5d 	bl	8001920 <ADC_ReadCurrent_Index>
	while(Fingers_Status.Index.Stuck_Finger==0 || calibration_counter<60)
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <Fingers_Calibration+0x29c>)
 8004468:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1eb      	bne.n	800444e <Fingers_Calibration+0xaa>
 8004476:	4b71      	ldr	r3, [pc, #452]	; (800463c <Fingers_Calibration+0x298>)
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b3b      	cmp	r3, #59	; 0x3b
 800447e:	d9e6      	bls.n	800444e <Fingers_Calibration+0xaa>
	}
	Fingers_Status.Index.Direction_motor=Stop;
 8004480:	4b6f      	ldr	r3, [pc, #444]	; (8004640 <Fingers_Calibration+0x29c>)
 8004482:	2200      	movs	r2, #0
 8004484:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	Fingers_Status.Index.speed=0;
 8004488:	496d      	ldr	r1, [pc, #436]	; (8004640 <Fingers_Calibration+0x29c>)
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	SetMotor(Index, &Fingers_Status.Index);
 8004496:	496d      	ldr	r1, [pc, #436]	; (800464c <Fingers_Calibration+0x2a8>)
 8004498:	2001      	movs	r0, #1
 800449a:	f7ff fc5b 	bl	8003d54 <SetMotor>
	Fingers_Status.Index.Stuck_Finger=0;
 800449e:	4b68      	ldr	r3, [pc, #416]	; (8004640 <Fingers_Calibration+0x29c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	Fingers_Status.Index.Encoder=Max_Encoder_Index;
 80044a6:	4b66      	ldr	r3, [pc, #408]	; (8004640 <Fingers_Calibration+0x29c>)
 80044a8:	f246 7284 	movw	r2, #26500	; 0x6784
 80044ac:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	Fingers_Status.Index.SetPoint=100;
 80044b0:	4963      	ldr	r1, [pc, #396]	; (8004640 <Fingers_Calibration+0x29c>)
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	4b64      	ldr	r3, [pc, #400]	; (8004648 <Fingers_Calibration+0x2a4>)
 80044b8:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	//------------------------------| Middle finger |----------------------------------------
	Fingers_Status.Middle.Direction_motor=Open;
 80044bc:	4b60      	ldr	r3, [pc, #384]	; (8004640 <Fingers_Calibration+0x29c>)
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	calibration_counter=0;
 80044c4:	4b5d      	ldr	r3, [pc, #372]	; (800463c <Fingers_Calibration+0x298>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<60)
 80044ca:	e00b      	b.n	80044e4 <Fingers_Calibration+0x140>
	{
		Fingers_Status.Middle.speed=60;
 80044cc:	495c      	ldr	r1, [pc, #368]	; (8004640 <Fingers_Calibration+0x29c>)
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <Fingers_Calibration+0x2a0>)
 80044d4:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
		SetMotor(Middle, &Fingers_Status.Middle);
 80044d8:	495d      	ldr	r1, [pc, #372]	; (8004650 <Fingers_Calibration+0x2ac>)
 80044da:	2002      	movs	r0, #2
 80044dc:	f7ff fc3a 	bl	8003d54 <SetMotor>
		ADC_ReadCurrent_Middle();
 80044e0:	f7fd f9ca 	bl	8001878 <ADC_ReadCurrent_Middle>
	while(Fingers_Status.Middle.Stuck_Finger==0 || calibration_counter<60)
 80044e4:	4b56      	ldr	r3, [pc, #344]	; (8004640 <Fingers_Calibration+0x29c>)
 80044e6:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80044ea:	f083 0301 	eor.w	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1eb      	bne.n	80044cc <Fingers_Calibration+0x128>
 80044f4:	4b51      	ldr	r3, [pc, #324]	; (800463c <Fingers_Calibration+0x298>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b3b      	cmp	r3, #59	; 0x3b
 80044fc:	d9e6      	bls.n	80044cc <Fingers_Calibration+0x128>
	}
	Fingers_Status.Middle.Direction_motor=Stop;
 80044fe:	4b50      	ldr	r3, [pc, #320]	; (8004640 <Fingers_Calibration+0x29c>)
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	Fingers_Status.Middle.speed=0;
 8004506:	494e      	ldr	r1, [pc, #312]	; (8004640 <Fingers_Calibration+0x29c>)
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
	SetMotor(Middle, &Fingers_Status.Middle);
 8004514:	494e      	ldr	r1, [pc, #312]	; (8004650 <Fingers_Calibration+0x2ac>)
 8004516:	2002      	movs	r0, #2
 8004518:	f7ff fc1c 	bl	8003d54 <SetMotor>
	Fingers_Status.Middle.Stuck_Finger=0;
 800451c:	4b48      	ldr	r3, [pc, #288]	; (8004640 <Fingers_Calibration+0x29c>)
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	Fingers_Status.Middle.Encoder=Max_Encoder_Middle;
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <Fingers_Calibration+0x29c>)
 8004526:	f246 42c8 	movw	r2, #25800	; 0x64c8
 800452a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	Fingers_Status.Middle.SetPoint=100;
 800452e:	4944      	ldr	r1, [pc, #272]	; (8004640 <Fingers_Calibration+0x29c>)
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	4b44      	ldr	r3, [pc, #272]	; (8004648 <Fingers_Calibration+0x2a4>)
 8004536:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
	//------------------------------| Ring finger |----------------------------------------
	Fingers_Status.Ring.Direction_motor=Open;
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <Fingers_Calibration+0x29c>)
 800453c:	2201      	movs	r2, #1
 800453e:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	calibration_counter=0;
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <Fingers_Calibration+0x298>)
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<60)
 8004548:	e00b      	b.n	8004562 <Fingers_Calibration+0x1be>
	{
		Fingers_Status.Ring.speed=60;
 800454a:	493d      	ldr	r1, [pc, #244]	; (8004640 <Fingers_Calibration+0x29c>)
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <Fingers_Calibration+0x2a0>)
 8004552:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
		SetMotor(Ring, &Fingers_Status.Ring);
 8004556:	493f      	ldr	r1, [pc, #252]	; (8004654 <Fingers_Calibration+0x2b0>)
 8004558:	2003      	movs	r0, #3
 800455a:	f7ff fbfb 	bl	8003d54 <SetMotor>
		ADC_ReadCurrent_Ring();
 800455e:	f7fd f933 	bl	80017c8 <ADC_ReadCurrent_Ring>
	while(Fingers_Status.Ring.Stuck_Finger==0 || calibration_counter<60)
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <Fingers_Calibration+0x29c>)
 8004564:	f893 31df 	ldrb.w	r3, [r3, #479]	; 0x1df
 8004568:	f083 0301 	eor.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1eb      	bne.n	800454a <Fingers_Calibration+0x1a6>
 8004572:	4b32      	ldr	r3, [pc, #200]	; (800463c <Fingers_Calibration+0x298>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b3b      	cmp	r3, #59	; 0x3b
 800457a:	d9e6      	bls.n	800454a <Fingers_Calibration+0x1a6>
	}
	Fingers_Status.Ring.Direction_motor=Stop;
 800457c:	4b30      	ldr	r3, [pc, #192]	; (8004640 <Fingers_Calibration+0x29c>)
 800457e:	2200      	movs	r2, #0
 8004580:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	Fingers_Status.Ring.speed=0;
 8004584:	492e      	ldr	r1, [pc, #184]	; (8004640 <Fingers_Calibration+0x29c>)
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
	SetMotor(Ring, &Fingers_Status.Ring);
 8004592:	4930      	ldr	r1, [pc, #192]	; (8004654 <Fingers_Calibration+0x2b0>)
 8004594:	2003      	movs	r0, #3
 8004596:	f7ff fbdd 	bl	8003d54 <SetMotor>
	Fingers_Status.Ring.Stuck_Finger=0;
 800459a:	4b29      	ldr	r3, [pc, #164]	; (8004640 <Fingers_Calibration+0x29c>)
 800459c:	2200      	movs	r2, #0
 800459e:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
	Fingers_Status.Ring.Encoder=Max_Encoder_Ring;
 80045a2:	4b27      	ldr	r3, [pc, #156]	; (8004640 <Fingers_Calibration+0x29c>)
 80045a4:	f645 7250 	movw	r2, #24400	; 0x5f50
 80045a8:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
	Fingers_Status.Ring.SetPoint=100;
 80045ac:	4924      	ldr	r1, [pc, #144]	; (8004640 <Fingers_Calibration+0x29c>)
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <Fingers_Calibration+0x2a4>)
 80045b4:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
	//------------------------------| Pinky finger |----------------------------------------
	Fingers_Status.Pinky.Direction_motor=Open;
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <Fingers_Calibration+0x29c>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
	calibration_counter=0;
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <Fingers_Calibration+0x298>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	801a      	strh	r2, [r3, #0]
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<60)
 80045c6:	e00b      	b.n	80045e0 <Fingers_Calibration+0x23c>
	{
		Fingers_Status.Pinky.speed=60;
 80045c8:	491d      	ldr	r1, [pc, #116]	; (8004640 <Fingers_Calibration+0x29c>)
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <Fingers_Calibration+0x2a0>)
 80045d0:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
		SetMotor(Pinky, &Fingers_Status.Pinky);
 80045d4:	4920      	ldr	r1, [pc, #128]	; (8004658 <Fingers_Calibration+0x2b4>)
 80045d6:	2004      	movs	r0, #4
 80045d8:	f7ff fbbc 	bl	8003d54 <SetMotor>
		ADC_ReadCurrent_Pinky();
 80045dc:	f7fd f8a0 	bl	8001720 <ADC_ReadCurrent_Pinky>
	while(Fingers_Status.Pinky.Stuck_Finger==0 || calibration_counter<60)
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <Fingers_Calibration+0x29c>)
 80045e2:	f893 3277 	ldrb.w	r3, [r3, #631]	; 0x277
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1eb      	bne.n	80045c8 <Fingers_Calibration+0x224>
 80045f0:	4b12      	ldr	r3, [pc, #72]	; (800463c <Fingers_Calibration+0x298>)
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b3b      	cmp	r3, #59	; 0x3b
 80045f8:	d9e6      	bls.n	80045c8 <Fingers_Calibration+0x224>
	}
	Fingers_Status.Pinky.Direction_motor=Stop;
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <Fingers_Calibration+0x29c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
	Fingers_Status.Pinky.speed=0;
 8004602:	490f      	ldr	r1, [pc, #60]	; (8004640 <Fingers_Calibration+0x29c>)
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
	SetMotor(Pinky, &Fingers_Status.Pinky);
 8004610:	4911      	ldr	r1, [pc, #68]	; (8004658 <Fingers_Calibration+0x2b4>)
 8004612:	2004      	movs	r0, #4
 8004614:	f7ff fb9e 	bl	8003d54 <SetMotor>
	Fingers_Status.Pinky.Stuck_Finger=0;
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <Fingers_Calibration+0x29c>)
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
	Fingers_Status.Pinky.Encoder=Max_Encoder_Pinky;
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <Fingers_Calibration+0x29c>)
 8004622:	f246 52f4 	movw	r2, #26100	; 0x65f4
 8004626:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
	Fingers_Status.Pinky.SetPoint=100;
 800462a:	4905      	ldr	r1, [pc, #20]	; (8004640 <Fingers_Calibration+0x29c>)
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <Fingers_Calibration+0x2a4>)
 8004632:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200009f8 	.word	0x200009f8
 8004640:	200006f0 	.word	0x200006f0
 8004644:	404e0000 	.word	0x404e0000
 8004648:	40590000 	.word	0x40590000
 800464c:	20000788 	.word	0x20000788
 8004650:	20000820 	.word	0x20000820
 8004654:	200008b8 	.word	0x200008b8
 8004658:	20000950 	.word	0x20000950
 800465c:	00000000 	.word	0x00000000

08004660 <Control_Motor>:
void Control_Motor(Fingers_Name_Enum FingerName,Finger_Struct* FingerStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
	if(control_mode==position_mode)
 800466c:	4b5c      	ldr	r3, [pc, #368]	; (80047e0 <Control_Motor+0x180>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	f040 80a5 	bne.w	80047c2 <Control_Motor+0x162>
	{
		if(FingerStruct->SetPoint-FingerStruct->position>0.01)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004684:	f7fb fe00 	bl	8000288 <__aeabi_dsub>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	a34f      	add	r3, pc, #316	; (adr r3, 80047d0 <Control_Motor+0x170>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fc fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00f      	beq.n	80046c0 <Control_Motor+0x60>
		{
			FingerStruct->Direction_motor=Open;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	749a      	strb	r2, [r3, #18]
			FingerStruct->Direction_Encoder=Open;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	74da      	strb	r2, [r3, #19]
			FingerStruct->ChangeDirection=0;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	751a      	strb	r2, [r3, #20]
			PID_SetControllerDirection(&FingerStruct->PID_Struct, _PID_CD_DIRECT);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	3328      	adds	r3, #40	; 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff f9a9 	bl	8003a10 <PID_SetControllerDirection>
 80046be:	e026      	b.n	800470e <Control_Motor+0xae>
		}
		else if (FingerStruct->SetPoint-FingerStruct->position<-0.01)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046cc:	f7fb fddc 	bl	8000288 <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	a33f      	add	r3, pc, #252	; (adr r3, 80047d8 <Control_Motor+0x178>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fc f9fd 	bl	8000adc <__aeabi_dcmplt>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00f      	beq.n	8004708 <Control_Motor+0xa8>
		{
			FingerStruct->Direction_motor=Close;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2202      	movs	r2, #2
 80046ec:	749a      	strb	r2, [r3, #18]
			FingerStruct->Direction_Encoder=Close;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2202      	movs	r2, #2
 80046f2:	74da      	strb	r2, [r3, #19]
			FingerStruct->ChangeDirection=0;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	751a      	strb	r2, [r3, #20]
			PID_SetControllerDirection(&FingerStruct->PID_Struct, _PID_CD_REVERSE);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3328      	adds	r3, #40	; 0x28
 80046fe:	2101      	movs	r1, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f985 	bl	8003a10 <PID_SetControllerDirection>
 8004706:	e002      	b.n	800470e <Control_Motor+0xae>
		}
		else
		{
			FingerStruct->Direction_motor=Stop;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	749a      	strb	r2, [r3, #18]
		}
		if(FingerStruct->Stuck_Finger)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	7ddb      	ldrb	r3, [r3, #23]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d052      	beq.n	80047bc <Control_Motor+0x15c>
		{
			if( FingerStruct->Current_Counter>600)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800471a:	b29b      	uxth	r3, r3
 800471c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004720:	d94f      	bls.n	80047c2 <Control_Motor+0x162>
			{
				if(FingerStruct->Direction_motor==Open)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	7c9b      	ldrb	r3, [r3, #18]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d129      	bne.n	800477e <Control_Motor+0x11e>
				{
					switch (FingerName) {
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d839      	bhi.n	80047a4 <Control_Motor+0x144>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <Control_Motor+0xd8>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800474d 	.word	0x0800474d
 800473c:	08004757 	.word	0x08004757
 8004740:	08004761 	.word	0x08004761
 8004744:	0800476b 	.word	0x0800476b
 8004748:	08004775 	.word	0x08004775
					case Thumb:
						FingerStruct->Encoder=Max_Encoder_Thumb;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f241 2227 	movw	r2, #4647	; 0x1227
 8004752:	821a      	strh	r2, [r3, #16]
						break;
 8004754:	e027      	b.n	80047a6 <Control_Motor+0x146>
					case Index:
						FingerStruct->Encoder=Max_Encoder_Index;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f246 7284 	movw	r2, #26500	; 0x6784
 800475c:	821a      	strh	r2, [r3, #16]
						break;
 800475e:	e022      	b.n	80047a6 <Control_Motor+0x146>
					case Middle:
						FingerStruct->Encoder=Max_Encoder_Middle;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f246 42c8 	movw	r2, #25800	; 0x64c8
 8004766:	821a      	strh	r2, [r3, #16]
						break;
 8004768:	e01d      	b.n	80047a6 <Control_Motor+0x146>
					case Ring:
						FingerStruct->Encoder=Max_Encoder_Ring;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f645 7250 	movw	r2, #24400	; 0x5f50
 8004770:	821a      	strh	r2, [r3, #16]
						break;
 8004772:	e018      	b.n	80047a6 <Control_Motor+0x146>
					case Pinky:
						FingerStruct->Encoder=Max_Encoder_Pinky;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f246 52f4 	movw	r2, #26100	; 0x65f4
 800477a:	821a      	strh	r2, [r3, #16]
						break;
 800477c:	e013      	b.n	80047a6 <Control_Motor+0x146>
					default:
						break;
					}
				}
				else if(FingerStruct->Direction_motor==Close && FingerStruct->position<5 )
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	7c9b      	ldrb	r3, [r3, #18]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d10f      	bne.n	80047a6 <Control_Motor+0x146>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <Control_Motor+0x184>)
 8004792:	f7fc f9a3 	bl	8000adc <__aeabi_dcmplt>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <Control_Motor+0x146>
					FingerStruct->Encoder=0;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	821a      	strh	r2, [r3, #16]
 80047a2:	e000      	b.n	80047a6 <Control_Motor+0x146>
						break;
 80047a4:	bf00      	nop
				FingerStruct->Direction_motor=Stop;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	749a      	strb	r2, [r3, #18]
				FingerStruct->speed=0;
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
			}
		}else
			FingerStruct->Current_Counter=0;
	}
}
 80047ba:	e002      	b.n	80047c2 <Control_Motor+0x162>
			FingerStruct->Current_Counter=0;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
 80047d0:	47ae147b 	.word	0x47ae147b
 80047d4:	3f847ae1 	.word	0x3f847ae1
 80047d8:	47ae147b 	.word	0x47ae147b
 80047dc:	bf847ae1 	.word	0xbf847ae1
 80047e0:	20000327 	.word	0x20000327
 80047e4:	40140000 	.word	0x40140000

080047e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80047e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047ec:	f7fe f9aa 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047f0:	480c      	ldr	r0, [pc, #48]	; (8004824 <LoopForever+0x6>)
  ldr r1, =_edata
 80047f2:	490d      	ldr	r1, [pc, #52]	; (8004828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047f4:	4a0d      	ldr	r2, [pc, #52]	; (800482c <LoopForever+0xe>)
  movs r3, #0
 80047f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047f8:	e002      	b.n	8004800 <LoopCopyDataInit>

080047fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047fe:	3304      	adds	r3, #4

08004800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004804:	d3f9      	bcc.n	80047fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004808:	4c0a      	ldr	r4, [pc, #40]	; (8004834 <LoopForever+0x16>)
  movs r3, #0
 800480a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800480c:	e001      	b.n	8004812 <LoopFillZerobss>

0800480e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800480e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004810:	3204      	adds	r2, #4

08004812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004814:	d3fb      	bcc.n	800480e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004816:	f007 fd2d 	bl	800c274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800481a:	f7fd fd0f 	bl	800223c <main>

0800481e <LoopForever>:

LoopForever:
    b LoopForever
 800481e:	e7fe      	b.n	800481e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004828:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800482c:	0800f1c4 	.word	0x0800f1c4
  ldr r2, =_sbss
 8004830:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004834:	20000b4c 	.word	0x20000b4c

08004838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004838:	e7fe      	b.n	8004838 <ADC1_2_IRQHandler>

0800483a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004844:	2003      	movs	r0, #3
 8004846:	f001 fc3f 	bl	80060c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800484a:	2002      	movs	r0, #2
 800484c:	f000 f80e 	bl	800486c <HAL_InitTick>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	71fb      	strb	r3, [r7, #7]
 800485a:	e001      	b.n	8004860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800485c:	f7fd ffae 	bl	80027bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004860:	79fb      	ldrb	r3, [r7, #7]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_InitTick+0x6c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d023      	beq.n	80048c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <HAL_InitTick+0x70>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_InitTick+0x6c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800488e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fc4b 	bl	8006132 <HAL_SYSTICK_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b0f      	cmp	r3, #15
 80048a6:	d809      	bhi.n	80048bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048a8:	2200      	movs	r2, #0
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	f001 fc15 	bl	80060de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <HAL_InitTick+0x74>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e007      	b.n	80048cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e004      	b.n	80048cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e001      	b.n	80048cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000008 	.word	0x20000008
 80048dc:	20000000 	.word	0x20000000
 80048e0:	20000004 	.word	0x20000004

080048e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_IncTick+0x20>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <HAL_IncTick+0x24>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4413      	add	r3, r2
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <HAL_IncTick+0x24>)
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000008 	.word	0x20000008
 8004908:	200009fc 	.word	0x200009fc

0800490c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return uwTick;
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <HAL_GetTick+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	200009fc 	.word	0x200009fc

08004924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800492c:	f7ff ffee 	bl	800490c <HAL_GetTick>
 8004930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d005      	beq.n	800494a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_Delay+0x44>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800494a:	bf00      	nop
 800494c:	f7ff ffde 	bl	800490c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d8f7      	bhi.n	800494c <HAL_Delay+0x28>
  {
  }
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000008 	.word	0x20000008

0800496c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3360      	adds	r3, #96	; 0x60
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <LL_ADC_SetOffset+0x44>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	03fff000 	.word	0x03fff000

08004a1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3360      	adds	r3, #96	; 0x60
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3360      	adds	r3, #96	; 0x60
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3330      	adds	r3, #48	; 0x30
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	4413      	add	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	211f      	movs	r1, #31
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0e9b      	lsrs	r3, r3, #26
 8004adc:	f003 011f 	and.w	r1, r3, #31
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	431a      	orrs	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	0e5b      	lsrs	r3, r3, #25
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	4413      	add	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	0d1b      	lsrs	r3, r3, #20
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2107      	movs	r1, #7
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	401a      	ands	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	0d1b      	lsrs	r3, r3, #20
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	431a      	orrs	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0318 	and.w	r3, r3, #24
 8004b76:	4908      	ldr	r1, [pc, #32]	; (8004b98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b78:	40d9      	lsrs	r1, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	0007ffff 	.word	0x0007ffff

08004b9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6093      	str	r3, [r2, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf0:	d101      	bne.n	8004bf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d101      	bne.n	8004c46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <LL_ADC_IsEnabled+0x18>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <LL_ADC_IsEnabled+0x1a>
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d101      	bne.n	8004ce2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d101      	bne.n	8004d08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b089      	sub	sp, #36	; 0x24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e130      	b.n	8004f94 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fc0d 	bl	8001560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff3f 	bl	8004bdc <LL_ADC_IsDeepPowerDownEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff25 	bl	8004bb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff ff5a 	bl	8004c2c <LL_ADC_IsInternalRegulatorEnabled>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d115      	bne.n	8004daa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff ff3e 	bl	8004c04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d88:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <HAL_ADC_Init+0x284>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	4a84      	ldr	r2, [pc, #528]	; (8004fa0 <HAL_ADC_Init+0x288>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	3301      	adds	r3, #1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d9c:	e002      	b.n	8004da4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f9      	bne.n	8004d9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff ff3c 	bl	8004c2c <LL_ADC_IsInternalRegulatorEnabled>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f043 0210 	orr.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ff75 	bl	8004cca <LL_ADC_REG_IsConversionOngoing>
 8004de0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 80c9 	bne.w	8004f82 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 80c5 	bne.w	8004f82 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e00:	f043 0202 	orr.w	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ff35 	bl	8004c7c <LL_ADC_IsEnabled>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d115      	bne.n	8004e44 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e18:	4862      	ldr	r0, [pc, #392]	; (8004fa4 <HAL_ADC_Init+0x28c>)
 8004e1a:	f7ff ff2f 	bl	8004c7c <LL_ADC_IsEnabled>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4861      	ldr	r0, [pc, #388]	; (8004fa8 <HAL_ADC_Init+0x290>)
 8004e22:	f7ff ff2b 	bl	8004c7c <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	431c      	orrs	r4, r3
 8004e2a:	4860      	ldr	r0, [pc, #384]	; (8004fac <HAL_ADC_Init+0x294>)
 8004e2c:	f7ff ff26 	bl	8004c7c <LL_ADC_IsEnabled>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4323      	orrs	r3, r4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	485c      	ldr	r0, [pc, #368]	; (8004fb0 <HAL_ADC_Init+0x298>)
 8004e40:	f7ff fd94 	bl	800496c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7e5b      	ldrb	r3, [r3, #25]
 8004e48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d106      	bne.n	8004e80 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	3b01      	subs	r3, #1
 8004e78:	045b      	lsls	r3, r3, #17
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <HAL_ADC_Init+0x29c>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	69b9      	ldr	r1, [r7, #24]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff1b 	bl	8004cf0 <LL_ADC_INJ_IsConversionOngoing>
 8004eba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d13a      	bne.n	8004f3e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ecc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee4:	f023 0302 	bic.w	r3, r3, #2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d118      	bne.n	8004f2e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f06:	f023 0304 	bic.w	r3, r3, #4
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	611a      	str	r2, [r3, #16]
 8004f2c:	e007      	b.n	8004f3e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10c      	bne.n	8004f60 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f023 010f 	bic.w	r1, r3, #15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5e:	e007      	b.n	8004f70 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 020f 	bic.w	r2, r2, #15
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f74:	f023 0303 	bic.w	r3, r3, #3
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
 8004f80:	e007      	b.n	8004f92 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f043 0210 	orr.w	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3724      	adds	r7, #36	; 0x24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}
 8004f9c:	20000000 	.word	0x20000000
 8004fa0:	053e2d63 	.word	0x053e2d63
 8004fa4:	50040000 	.word	0x50040000
 8004fa8:	50040100 	.word	0x50040100
 8004fac:	50040200 	.word	0x50040200
 8004fb0:	50040300 	.word	0x50040300
 8004fb4:	fff0c007 	.word	0xfff0c007

08004fb8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fc4:	4853      	ldr	r0, [pc, #332]	; (8005114 <HAL_ADC_Start_DMA+0x15c>)
 8004fc6:	f7ff fde9 	bl	8004b9c <LL_ADC_GetMultimode>
 8004fca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fe7a 	bl	8004cca <LL_ADC_REG_IsConversionOngoing>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 8093 	bne.w	8005104 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_Start_DMA+0x34>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e08e      	b.n	800510a <HAL_ADC_Start_DMA+0x152>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a47      	ldr	r2, [pc, #284]	; (8005118 <HAL_ADC_Start_DMA+0x160>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d008      	beq.n	8005010 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b05      	cmp	r3, #5
 8005008:	d002      	beq.n	8005010 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b09      	cmp	r3, #9
 800500e:	d172      	bne.n	80050f6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fc9d 	bl	8005950 <ADC_Enable>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d165      	bne.n	80050ec <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a38      	ldr	r2, [pc, #224]	; (800511c <HAL_ADC_Start_DMA+0x164>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d002      	beq.n	8005044 <HAL_ADC_Start_DMA+0x8c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	e000      	b.n	8005046 <HAL_ADC_Start_DMA+0x8e>
 8005044:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_ADC_Start_DMA+0x168>)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	4293      	cmp	r3, r2
 800504c:	d002      	beq.n	8005054 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	f023 0206 	bic.w	r2, r3, #6
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	659a      	str	r2, [r3, #88]	; 0x58
 8005078:	e002      	b.n	8005080 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005084:	4a27      	ldr	r2, [pc, #156]	; (8005124 <HAL_ADC_Start_DMA+0x16c>)
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_ADC_Start_DMA+0x170>)
 800508e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	4a25      	ldr	r2, [pc, #148]	; (800512c <HAL_ADC_Start_DMA+0x174>)
 8005096:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	221c      	movs	r2, #28
 800509e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0210 	orr.w	r2, r2, #16
 80050b6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3340      	adds	r3, #64	; 0x40
 80050d2:	4619      	mov	r1, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f001 f8f0 	bl	80062bc <HAL_DMA_Start_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fddc 	bl	8004ca2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80050ea:	e00d      	b.n	8005108 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80050f4:	e008      	b.n	8005108 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005102:	e001      	b.n	8005108 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005104:	2302      	movs	r3, #2
 8005106:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	50040300 	.word	0x50040300
 8005118:	50040200 	.word	0x50040200
 800511c:	50040100 	.word	0x50040100
 8005120:	50040000 	.word	0x50040000
 8005124:	08005a5d 	.word	0x08005a5d
 8005128:	08005b35 	.word	0x08005b35
 800512c:	08005b51 	.word	0x08005b51

08005130 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0b6      	sub	sp, #216	; 0xd8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800517c:	2300      	movs	r3, #0
 800517e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_ADC_ConfigChannel+0x22>
 800518a:	2302      	movs	r3, #2
 800518c:	e3c9      	b.n	8005922 <HAL_ADC_ConfigChannel+0x7b6>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fd95 	bl	8004cca <LL_ADC_REG_IsConversionOngoing>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 83aa 	bne.w	80058fc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d824      	bhi.n	8005202 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	3b02      	subs	r3, #2
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d81b      	bhi.n	80051fa <HAL_ADC_ConfigChannel+0x8e>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <HAL_ADC_ConfigChannel+0x5c>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051d9 	.word	0x080051d9
 80051cc:	080051e1 	.word	0x080051e1
 80051d0:	080051e9 	.word	0x080051e9
 80051d4:	080051f1 	.word	0x080051f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80051d8:	230c      	movs	r3, #12
 80051da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80051de:	e010      	b.n	8005202 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80051e0:	2312      	movs	r3, #18
 80051e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80051e6:	e00c      	b.n	8005202 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80051e8:	2318      	movs	r3, #24
 80051ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80051ee:	e008      	b.n	8005202 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80051f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80051f8:	e003      	b.n	8005202 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80051fa:	2306      	movs	r3, #6
 80051fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005200:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005210:	f7ff fc48 	bl	8004aa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fd56 	bl	8004cca <LL_ADC_REG_IsConversionOngoing>
 800521e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff fd62 	bl	8004cf0 <LL_ADC_INJ_IsConversionOngoing>
 800522c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 81a4 	bne.w	8005582 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800523a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 819f 	bne.w	8005582 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	461a      	mov	r2, r3
 8005252:	f7ff fc53 	bl	8004afc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d00a      	beq.n	800528e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6919      	ldr	r1, [r3, #16]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005288:	f7ff fba4 	bl	80049d4 <LL_ADC_SetOffset>
 800528c:	e179      	b.n	8005582 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fbc1 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800529a:	4603      	mov	r3, r0
 800529c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x14e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fbb6 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80052b0:	4603      	mov	r3, r0
 80052b2:	0e9b      	lsrs	r3, r3, #26
 80052b4:	f003 021f 	and.w	r2, r3, #31
 80052b8:	e01e      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x18c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fbab 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80052e8:	2320      	movs	r3, #32
 80052ea:	e004      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80052ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x1a4>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0e9b      	lsrs	r3, r3, #26
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	e018      	b.n	8005342 <HAL_ADC_ConfigChannel+0x1d6>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800531c:	fa93 f3a3 	rbit	r3, r3
 8005320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800532c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005334:	2320      	movs	r3, #32
 8005336:	e004      	b.n	8005342 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800533c:	fab3 f383 	clz	r3, r3
 8005340:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005342:	429a      	cmp	r2, r3
 8005344:	d106      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fb7a 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fb5e 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005360:	4603      	mov	r3, r0
 8005362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x214>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fb53 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005376:	4603      	mov	r3, r0
 8005378:	0e9b      	lsrs	r3, r3, #26
 800537a:	f003 021f 	and.w	r2, r3, #31
 800537e:	e01e      	b.n	80053be <HAL_ADC_ConfigChannel+0x252>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2101      	movs	r1, #1
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fb48 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800538c:	4603      	mov	r3, r0
 800538e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800539e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80053a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80053ae:	2320      	movs	r3, #32
 80053b0:	e004      	b.n	80053bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80053b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053b6:	fab3 f383 	clz	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x26a>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	0e9b      	lsrs	r3, r3, #26
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	e018      	b.n	8005408 <HAL_ADC_ConfigChannel+0x29c>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053e2:	fa93 f3a3 	rbit	r3, r3
 80053e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80053ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80053f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80053fa:	2320      	movs	r3, #32
 80053fc:	e004      	b.n	8005408 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80053fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005408:	429a      	cmp	r2, r3
 800540a:	d106      	bne.n	800541a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fb17 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2102      	movs	r1, #2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fafb 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005426:	4603      	mov	r3, r0
 8005428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x2da>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff faf0 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 800543c:	4603      	mov	r3, r0
 800543e:	0e9b      	lsrs	r3, r3, #26
 8005440:	f003 021f 	and.w	r2, r3, #31
 8005444:	e01e      	b.n	8005484 <HAL_ADC_ConfigChannel+0x318>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fae5 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800545c:	fa93 f3a3 	rbit	r3, r3
 8005460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800546c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005474:	2320      	movs	r3, #32
 8005476:	e004      	b.n	8005482 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548c:	2b00      	cmp	r3, #0
 800548e:	d105      	bne.n	800549c <HAL_ADC_ConfigChannel+0x330>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	0e9b      	lsrs	r3, r3, #26
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	e014      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x35a>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80054aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80054b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80054b8:	2320      	movs	r3, #32
 80054ba:	e004      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80054bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d106      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fab8 	bl	8004a48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2103      	movs	r1, #3
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fa9c 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_ADC_ConfigChannel+0x398>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2103      	movs	r1, #3
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fa91 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 80054fa:	4603      	mov	r3, r0
 80054fc:	0e9b      	lsrs	r3, r3, #26
 80054fe:	f003 021f 	and.w	r2, r3, #31
 8005502:	e017      	b.n	8005534 <HAL_ADC_ConfigChannel+0x3c8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2103      	movs	r1, #3
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fa86 	bl	8004a1c <LL_ADC_GetOffsetChannel>
 8005510:	4603      	mov	r3, r0
 8005512:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800551c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005526:	2320      	movs	r3, #32
 8005528:	e003      	b.n	8005532 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800552a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_ADC_ConfigChannel+0x3e0>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0e9b      	lsrs	r3, r3, #26
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	e011      	b.n	8005570 <HAL_ADC_ConfigChannel+0x404>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800555e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005564:	2320      	movs	r3, #32
 8005566:	e003      	b.n	8005570 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005570:	429a      	cmp	r2, r3
 8005572:	d106      	bne.n	8005582 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	2103      	movs	r1, #3
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fa63 	bl	8004a48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fb78 	bl	8004c7c <LL_ADC_IsEnabled>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 8140 	bne.w	8005814 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f7ff fad7 	bl	8004b54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a8f      	ldr	r2, [pc, #572]	; (80057e8 <HAL_ADC_ConfigChannel+0x67c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	f040 8131 	bne.w	8005814 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_ADC_ConfigChannel+0x46e>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	0e9b      	lsrs	r3, r3, #26
 80055c8:	3301      	adds	r3, #1
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2b09      	cmp	r3, #9
 80055d0:	bf94      	ite	ls
 80055d2:	2301      	movls	r3, #1
 80055d4:	2300      	movhi	r3, #0
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	e019      	b.n	800560e <HAL_ADC_ConfigChannel+0x4a2>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80055e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80055ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80055f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3301      	adds	r3, #1
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	2b09      	cmp	r3, #9
 8005606:	bf94      	ite	ls
 8005608:	2301      	movls	r3, #1
 800560a:	2300      	movhi	r3, #0
 800560c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800560e:	2b00      	cmp	r3, #0
 8005610:	d079      	beq.n	8005706 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <HAL_ADC_ConfigChannel+0x4c2>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0e9b      	lsrs	r3, r3, #26
 8005624:	3301      	adds	r3, #1
 8005626:	069b      	lsls	r3, r3, #26
 8005628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800562c:	e015      	b.n	800565a <HAL_ADC_ConfigChannel+0x4ee>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800563c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005646:	2320      	movs	r3, #32
 8005648:	e003      	b.n	8005652 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	3301      	adds	r3, #1
 8005654:	069b      	lsls	r3, r3, #26
 8005656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_ADC_ConfigChannel+0x50e>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	0e9b      	lsrs	r3, r3, #26
 800566c:	3301      	adds	r3, #1
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2101      	movs	r1, #1
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	e017      	b.n	80056aa <HAL_ADC_ConfigChannel+0x53e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800568c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005692:	2320      	movs	r3, #32
 8005694:	e003      	b.n	800569e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	3301      	adds	r3, #1
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	ea42 0103 	orr.w	r1, r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x564>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	0e9b      	lsrs	r3, r3, #26
 80056c0:	3301      	adds	r3, #1
 80056c2:	f003 021f 	and.w	r2, r3, #31
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	e018      	b.n	8005702 <HAL_ADC_ConfigChannel+0x596>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80056e8:	2320      	movs	r3, #32
 80056ea:	e003      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	f003 021f 	and.w	r2, r3, #31
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005702:	430b      	orrs	r3, r1
 8005704:	e081      	b.n	800580a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x5b6>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	0e9b      	lsrs	r3, r3, #26
 8005718:	3301      	adds	r3, #1
 800571a:	069b      	lsls	r3, r3, #26
 800571c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005720:	e015      	b.n	800574e <HAL_ADC_ConfigChannel+0x5e2>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800573a:	2320      	movs	r3, #32
 800573c:	e003      	b.n	8005746 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	fab3 f383 	clz	r3, r3
 8005744:	b2db      	uxtb	r3, r3
 8005746:	3301      	adds	r3, #1
 8005748:	069b      	lsls	r3, r3, #26
 800574a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_ADC_ConfigChannel+0x602>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	0e9b      	lsrs	r3, r3, #26
 8005760:	3301      	adds	r3, #1
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2101      	movs	r1, #1
 8005768:	fa01 f303 	lsl.w	r3, r1, r3
 800576c:	e017      	b.n	800579e <HAL_ADC_ConfigChannel+0x632>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	61bb      	str	r3, [r7, #24]
  return result;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005786:	2320      	movs	r3, #32
 8005788:	e003      	b.n	8005792 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3301      	adds	r3, #1
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	ea42 0103 	orr.w	r1, r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <HAL_ADC_ConfigChannel+0x65e>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0e9b      	lsrs	r3, r3, #26
 80057b4:	3301      	adds	r3, #1
 80057b6:	f003 021f 	and.w	r2, r3, #31
 80057ba:	4613      	mov	r3, r2
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4413      	add	r3, r2
 80057c0:	3b1e      	subs	r3, #30
 80057c2:	051b      	lsls	r3, r3, #20
 80057c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057c8:	e01e      	b.n	8005808 <HAL_ADC_ConfigChannel+0x69c>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	60fb      	str	r3, [r7, #12]
  return result;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80057e2:	2320      	movs	r3, #32
 80057e4:	e006      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x688>
 80057e6:	bf00      	nop
 80057e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	3301      	adds	r3, #1
 80057f6:	f003 021f 	and.w	r2, r3, #31
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	3b1e      	subs	r3, #30
 8005802:	051b      	lsls	r3, r3, #20
 8005804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005808:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800580e:	4619      	mov	r1, r3
 8005810:	f7ff f974 	bl	8004afc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b44      	ldr	r3, [pc, #272]	; (800592c <HAL_ADC_ConfigChannel+0x7c0>)
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d07a      	beq.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005820:	4843      	ldr	r0, [pc, #268]	; (8005930 <HAL_ADC_ConfigChannel+0x7c4>)
 8005822:	f7ff f8c9 	bl	80049b8 <LL_ADC_GetCommonPathInternalCh>
 8005826:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a41      	ldr	r2, [pc, #260]	; (8005934 <HAL_ADC_ConfigChannel+0x7c8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d12c      	bne.n	800588e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d126      	bne.n	800588e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <HAL_ADC_ConfigChannel+0x7cc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_ADC_ConfigChannel+0x6e8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a3b      	ldr	r2, [pc, #236]	; (800593c <HAL_ADC_ConfigChannel+0x7d0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d15d      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800585c:	4619      	mov	r1, r3
 800585e:	4834      	ldr	r0, [pc, #208]	; (8005930 <HAL_ADC_ConfigChannel+0x7c4>)
 8005860:	f7ff f897 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005864:	4b36      	ldr	r3, [pc, #216]	; (8005940 <HAL_ADC_ConfigChannel+0x7d4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	099b      	lsrs	r3, r3, #6
 800586a:	4a36      	ldr	r2, [pc, #216]	; (8005944 <HAL_ADC_ConfigChannel+0x7d8>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800587e:	e002      	b.n	8005886 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f9      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800588c:	e040      	b.n	8005910 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2d      	ldr	r2, [pc, #180]	; (8005948 <HAL_ADC_ConfigChannel+0x7dc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d118      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800589c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d112      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a23      	ldr	r2, [pc, #140]	; (8005938 <HAL_ADC_ConfigChannel+0x7cc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x74c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a22      	ldr	r2, [pc, #136]	; (800593c <HAL_ADC_ConfigChannel+0x7d0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d12d      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c0:	4619      	mov	r1, r3
 80058c2:	481b      	ldr	r0, [pc, #108]	; (8005930 <HAL_ADC_ConfigChannel+0x7c4>)
 80058c4:	f7ff f865 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058c8:	e024      	b.n	8005914 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1f      	ldr	r2, [pc, #124]	; (800594c <HAL_ADC_ConfigChannel+0x7e0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d120      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d11a      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <HAL_ADC_ConfigChannel+0x7cc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d115      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f2:	4619      	mov	r1, r3
 80058f4:	480e      	ldr	r0, [pc, #56]	; (8005930 <HAL_ADC_ConfigChannel+0x7c4>)
 80058f6:	f7ff f84c 	bl	8004992 <LL_ADC_SetCommonPathInternalCh>
 80058fa:	e00c      	b.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800590e:	e002      	b.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005910:	bf00      	nop
 8005912:	e000      	b.n	8005916 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005914:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800591e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005922:	4618      	mov	r0, r3
 8005924:	37d8      	adds	r7, #216	; 0xd8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	80080000 	.word	0x80080000
 8005930:	50040300 	.word	0x50040300
 8005934:	c7520000 	.word	0xc7520000
 8005938:	50040000 	.word	0x50040000
 800593c:	50040200 	.word	0x50040200
 8005940:	20000000 	.word	0x20000000
 8005944:	053e2d63 	.word	0x053e2d63
 8005948:	cb840000 	.word	0xcb840000
 800594c:	80000001 	.word	0x80000001

08005950 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff f98b 	bl	8004c7c <LL_ADC_IsEnabled>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d169      	bne.n	8005a40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	4b36      	ldr	r3, [pc, #216]	; (8005a4c <ADC_Enable+0xfc>)
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f043 0210 	orr.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e055      	b.n	8005a42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff f95a 	bl	8004c54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059a0:	482b      	ldr	r0, [pc, #172]	; (8005a50 <ADC_Enable+0x100>)
 80059a2:	f7ff f809 	bl	80049b8 <LL_ADC_GetCommonPathInternalCh>
 80059a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059b0:	4b28      	ldr	r3, [pc, #160]	; (8005a54 <ADC_Enable+0x104>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <ADC_Enable+0x108>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059ca:	e002      	b.n	80059d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f9      	bne.n	80059cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059d8:	f7fe ff98 	bl	800490c <HAL_GetTick>
 80059dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059de:	e028      	b.n	8005a32 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff f949 	bl	8004c7c <LL_ADC_IsEnabled>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f92d 	bl	8004c54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059fa:	f7fe ff87 	bl	800490c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d914      	bls.n	8005a32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d00d      	beq.n	8005a32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f043 0210 	orr.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e007      	b.n	8005a42 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d1cf      	bne.n	80059e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	8000003f 	.word	0x8000003f
 8005a50:	50040300 	.word	0x50040300
 8005a54:	20000000 	.word	0x20000000
 8005a58:	053e2d63 	.word	0x053e2d63

08005a5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d14b      	bne.n	8005b0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d021      	beq.n	8005ad4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fff2 	bl	8004a7e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d032      	beq.n	8005b06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d12b      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11f      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54
 8005ad2:	e018      	b.n	8005b06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d111      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	f043 0201 	orr.w	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fb12 	bl	8005130 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b0c:	e00e      	b.n	8005b2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fb1c 	bl	8005158 <HAL_ADC_ErrorCallback>
}
 8005b20:	e004      	b.n	8005b2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fafe 	bl	8005144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff faee 	bl	8005158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <LL_ADC_IsEnabled>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <LL_ADC_IsEnabled+0x18>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <LL_ADC_IsEnabled+0x1a>
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <LL_ADC_REG_IsConversionOngoing>:
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d101      	bne.n	8005bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b09f      	sub	sp, #124	; 0x7c
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e093      	b.n	8005d16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a47      	ldr	r2, [pc, #284]	; (8005d20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d102      	bne.n	8005c0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005c08:	4b46      	ldr	r3, [pc, #280]	; (8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005c0a:	60bb      	str	r3, [r7, #8]
 8005c0c:	e001      	b.n	8005c12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e072      	b.n	8005d16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff ffb9 	bl	8005baa <LL_ADC_REG_IsConversionOngoing>
 8005c38:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff ffb3 	bl	8005baa <LL_ADC_REG_IsConversionOngoing>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d154      	bne.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d151      	bne.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005c50:	4b35      	ldr	r3, [pc, #212]	; (8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005c52:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c6e:	035b      	lsls	r3, r3, #13
 8005c70:	430b      	orrs	r3, r1
 8005c72:	431a      	orrs	r2, r3
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c78:	4829      	ldr	r0, [pc, #164]	; (8005d20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005c7a:	f7ff ff83 	bl	8005b84 <LL_ADC_IsEnabled>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4828      	ldr	r0, [pc, #160]	; (8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005c82:	f7ff ff7f 	bl	8005b84 <LL_ADC_IsEnabled>
 8005c86:	4603      	mov	r3, r0
 8005c88:	431c      	orrs	r4, r3
 8005c8a:	4828      	ldr	r0, [pc, #160]	; (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005c8c:	f7ff ff7a 	bl	8005b84 <LL_ADC_IsEnabled>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4323      	orrs	r3, r4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d137      	bne.n	8005d08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ca0:	f023 030f 	bic.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	6811      	ldr	r1, [r2, #0]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	6892      	ldr	r2, [r2, #8]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005cb4:	e028      	b.n	8005d08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cc2:	4817      	ldr	r0, [pc, #92]	; (8005d20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005cc4:	f7ff ff5e 	bl	8005b84 <LL_ADC_IsEnabled>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4816      	ldr	r0, [pc, #88]	; (8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005ccc:	f7ff ff5a 	bl	8005b84 <LL_ADC_IsEnabled>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	431c      	orrs	r4, r3
 8005cd4:	4815      	ldr	r0, [pc, #84]	; (8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005cd6:	f7ff ff55 	bl	8005b84 <LL_ADC_IsEnabled>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4323      	orrs	r3, r4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d112      	bne.n	8005d08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005cea:	f023 030f 	bic.w	r3, r3, #15
 8005cee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cf0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005cf2:	e009      	b.n	8005d08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005d06:	e000      	b.n	8005d0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	377c      	adds	r7, #124	; 0x7c
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	50040000 	.word	0x50040000
 8005d24:	50040100 	.word	0x50040100
 8005d28:	50040300 	.word	0x50040300
 8005d2c:	50040200 	.word	0x50040200

08005d30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0ed      	b.n	8005f1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb fec4 	bl	8001adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d64:	f7fe fdd2 	bl	800490c <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d6a:	e012      	b.n	8005d92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d6c:	f7fe fdce 	bl	800490c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b0a      	cmp	r3, #10
 8005d78:	d90b      	bls.n	8005d92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2205      	movs	r2, #5
 8005d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0c5      	b.n	8005f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0e5      	beq.n	8005d6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0202 	bic.w	r2, r2, #2
 8005dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005db0:	f7fe fdac 	bl	800490c <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005db6:	e012      	b.n	8005dde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005db8:	f7fe fda8 	bl	800490c <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b0a      	cmp	r3, #10
 8005dc4:	d90b      	bls.n	8005dde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e09f      	b.n	8005f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e5      	bne.n	8005db8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7e1b      	ldrb	r3, [r3, #24]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d108      	bne.n	8005e06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e007      	b.n	8005e16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7e5b      	ldrb	r3, [r3, #25]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e007      	b.n	8005e40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7e9b      	ldrb	r3, [r3, #26]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d108      	bne.n	8005e5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0220 	orr.w	r2, r2, #32
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e007      	b.n	8005e6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0220 	bic.w	r2, r2, #32
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	7edb      	ldrb	r3, [r3, #27]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d108      	bne.n	8005e84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0210 	bic.w	r2, r2, #16
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e007      	b.n	8005e94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0210 	orr.w	r2, r2, #16
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7f1b      	ldrb	r3, [r3, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d108      	bne.n	8005eae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0208 	orr.w	r2, r2, #8
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e007      	b.n	8005ebe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0208 	bic.w	r2, r2, #8
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	7f5b      	ldrb	r3, [r3, #29]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d108      	bne.n	8005ed8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0204 	orr.w	r2, r2, #4
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e007      	b.n	8005ee8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0204 	bic.w	r2, r2, #4
 8005ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	ea42 0103 	orr.w	r1, r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	1e5a      	subs	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f44:	4013      	ands	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f5a:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	60d3      	str	r3, [r2, #12]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <__NVIC_GetPriorityGrouping+0x18>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 0307 	and.w	r3, r3, #7
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	db0b      	blt.n	8005fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <__NVIC_EnableIRQ+0x38>)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2001      	movs	r0, #1
 8005fae:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	e000e100 	.word	0xe000e100

08005fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	db0a      	blt.n	8005ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	490c      	ldr	r1, [pc, #48]	; (8006014 <__NVIC_SetPriority+0x4c>)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	0112      	lsls	r2, r2, #4
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	440b      	add	r3, r1
 8005fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff0:	e00a      	b.n	8006008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4908      	ldr	r1, [pc, #32]	; (8006018 <__NVIC_SetPriority+0x50>)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3b04      	subs	r3, #4
 8006000:	0112      	lsls	r2, r2, #4
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	440b      	add	r3, r1
 8006006:	761a      	strb	r2, [r3, #24]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	e000e100 	.word	0xe000e100
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	; 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f1c3 0307 	rsb	r3, r3, #7
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf28      	it	cs
 800603a:	2304      	movcs	r3, #4
 800603c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3304      	adds	r3, #4
 8006042:	2b06      	cmp	r3, #6
 8006044:	d902      	bls.n	800604c <NVIC_EncodePriority+0x30>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3b03      	subs	r3, #3
 800604a:	e000      	b.n	800604e <NVIC_EncodePriority+0x32>
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43da      	mvns	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	401a      	ands	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006064:	f04f 31ff 	mov.w	r1, #4294967295
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43d9      	mvns	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006074:	4313      	orrs	r3, r2
         );
}
 8006076:	4618      	mov	r0, r3
 8006078:	3724      	adds	r7, #36	; 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3b01      	subs	r3, #1
 8006090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006094:	d301      	bcc.n	800609a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006096:	2301      	movs	r3, #1
 8006098:	e00f      	b.n	80060ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609a:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <SysTick_Config+0x40>)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a2:	210f      	movs	r1, #15
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	f7ff ff8e 	bl	8005fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <SysTick_Config+0x40>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <SysTick_Config+0x40>)
 80060b4:	2207      	movs	r2, #7
 80060b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000e010 	.word	0xe000e010

080060c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff29 	bl	8005f28 <__NVIC_SetPriorityGrouping>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b086      	sub	sp, #24
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	4603      	mov	r3, r0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060f0:	f7ff ff3e 	bl	8005f70 <__NVIC_GetPriorityGrouping>
 80060f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ff8e 	bl	800601c <NVIC_EncodePriority>
 8006100:	4602      	mov	r2, r0
 8006102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff5d 	bl	8005fc8 <__NVIC_SetPriority>
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff31 	bl	8005f8c <__NVIC_EnableIRQ>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ffa2 	bl	8006084 <SysTick_Config>
 8006140:	4603      	mov	r3, r0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e098      	b.n	8006290 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	4b4d      	ldr	r3, [pc, #308]	; (800629c <HAL_DMA_Init+0x150>)
 8006166:	429a      	cmp	r2, r3
 8006168:	d80f      	bhi.n	800618a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	4b4b      	ldr	r3, [pc, #300]	; (80062a0 <HAL_DMA_Init+0x154>)
 8006172:	4413      	add	r3, r2
 8006174:	4a4b      	ldr	r2, [pc, #300]	; (80062a4 <HAL_DMA_Init+0x158>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	009a      	lsls	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a48      	ldr	r2, [pc, #288]	; (80062a8 <HAL_DMA_Init+0x15c>)
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
 8006188:	e00e      	b.n	80061a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	4b46      	ldr	r3, [pc, #280]	; (80062ac <HAL_DMA_Init+0x160>)
 8006192:	4413      	add	r3, r2
 8006194:	4a43      	ldr	r2, [pc, #268]	; (80062a4 <HAL_DMA_Init+0x158>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	009a      	lsls	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a42      	ldr	r2, [pc, #264]	; (80062b0 <HAL_DMA_Init+0x164>)
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80061cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006202:	d039      	beq.n	8006278 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	4a27      	ldr	r2, [pc, #156]	; (80062a8 <HAL_DMA_Init+0x15c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d11a      	bne.n	8006244 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <HAL_DMA_Init+0x168>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f003 031c 	and.w	r3, r3, #28
 800621a:	210f      	movs	r1, #15
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	4924      	ldr	r1, [pc, #144]	; (80062b4 <HAL_DMA_Init+0x168>)
 8006224:	4013      	ands	r3, r2
 8006226:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <HAL_DMA_Init+0x168>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	f003 031c 	and.w	r3, r3, #28
 8006238:	fa01 f303 	lsl.w	r3, r1, r3
 800623c:	491d      	ldr	r1, [pc, #116]	; (80062b4 <HAL_DMA_Init+0x168>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
 8006242:	e019      	b.n	8006278 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006244:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <HAL_DMA_Init+0x16c>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624c:	f003 031c 	and.w	r3, r3, #28
 8006250:	210f      	movs	r1, #15
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	4917      	ldr	r1, [pc, #92]	; (80062b8 <HAL_DMA_Init+0x16c>)
 800625a:	4013      	ands	r3, r2
 800625c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800625e:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <HAL_DMA_Init+0x16c>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	f003 031c 	and.w	r3, r3, #28
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	4911      	ldr	r1, [pc, #68]	; (80062b8 <HAL_DMA_Init+0x16c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40020407 	.word	0x40020407
 80062a0:	bffdfff8 	.word	0xbffdfff8
 80062a4:	cccccccd 	.word	0xcccccccd
 80062a8:	40020000 	.word	0x40020000
 80062ac:	bffdfbf8 	.word	0xbffdfbf8
 80062b0:	40020400 	.word	0x40020400
 80062b4:	400200a8 	.word	0x400200a8
 80062b8:	400204a8 	.word	0x400204a8

080062bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_DMA_Start_IT+0x20>
 80062d8:	2302      	movs	r3, #2
 80062da:	e04b      	b.n	8006374 <HAL_DMA_Start_IT+0xb8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d13a      	bne.n	8006366 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f95f 	bl	80065d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	2b00      	cmp	r3, #0
 8006320:	d008      	beq.n	8006334 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 020e 	orr.w	r2, r2, #14
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e00f      	b.n	8006354 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0204 	bic.w	r2, r2, #4
 8006342:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 020a 	orr.w	r2, r2, #10
 8006352:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e005      	b.n	8006372 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800636e:	2302      	movs	r3, #2
 8006370:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d008      	beq.n	80063a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2204      	movs	r2, #4
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e022      	b.n	80063ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 020e 	bic.w	r2, r2, #14
 80063b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f003 021c 	and.w	r2, r3, #28
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f202 	lsl.w	r2, r1, r2
 80063d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d005      	beq.n	800641c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2204      	movs	r2, #4
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e029      	b.n	8006470 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 020e 	bic.w	r2, r2, #14
 800642a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	f003 021c 	and.w	r2, r3, #28
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f202 	lsl.w	r2, r1, r2
 800644e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
    }
  }
  return status;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	f003 031c 	and.w	r3, r3, #28
 800649a:	2204      	movs	r2, #4
 800649c:	409a      	lsls	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d026      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x7a>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d021      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d107      	bne.n	80064ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0204 	bic.w	r2, r2, #4
 80064cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	f003 021c 	and.w	r2, r3, #28
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2104      	movs	r1, #4
 80064dc:	fa01 f202 	lsl.w	r2, r1, r2
 80064e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d071      	beq.n	80065ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80064f2:	e06c      	b.n	80065ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	f003 031c 	and.w	r3, r3, #28
 80064fc:	2202      	movs	r2, #2
 80064fe:	409a      	lsls	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02e      	beq.n	8006566 <HAL_DMA_IRQHandler+0xec>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d029      	beq.n	8006566 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 020a 	bic.w	r2, r2, #10
 800652e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	f003 021c 	and.w	r2, r3, #28
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	2102      	movs	r1, #2
 8006546:	fa01 f202 	lsl.w	r2, r1, r2
 800654a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d038      	beq.n	80065ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006564:	e033      	b.n	80065ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f003 031c 	and.w	r3, r3, #28
 800656e:	2208      	movs	r2, #8
 8006570:	409a      	lsls	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02a      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x156>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d025      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 020e 	bic.w	r2, r2, #14
 8006592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	f003 021c 	and.w	r2, r3, #28
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f202 	lsl.w	r2, r1, r2
 80065a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
}
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f003 021c 	and.w	r2, r3, #28
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	2101      	movs	r1, #1
 80065f4:	fa01 f202 	lsl.w	r2, r1, r2
 80065f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b10      	cmp	r3, #16
 8006608:	d108      	bne.n	800661c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800661a:	e007      	b.n	800662c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006646:	e17f      	b.n	8006948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	2101      	movs	r1, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8171 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d005      	beq.n	8006678 <HAL_GPIO_Init+0x40>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d130      	bne.n	80066da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	2203      	movs	r2, #3
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4013      	ands	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ae:	2201      	movs	r2, #1
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	f003 0201 	and.w	r2, r3, #1
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d118      	bne.n	8006718 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80066ec:	2201      	movs	r2, #1
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	43db      	mvns	r3, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f003 0201 	and.w	r2, r3, #1
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d017      	beq.n	8006754 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	2203      	movs	r2, #3
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d123      	bne.n	80067a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	08da      	lsrs	r2, r3, #3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3208      	adds	r2, #8
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	220f      	movs	r2, #15
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	08da      	lsrs	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3208      	adds	r2, #8
 80067a2:	6939      	ldr	r1, [r7, #16]
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0203 	and.w	r2, r3, #3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80ac 	beq.w	8006942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ea:	4b5f      	ldr	r3, [pc, #380]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	4a5e      	ldr	r2, [pc, #376]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6613      	str	r3, [r2, #96]	; 0x60
 80067f6:	4b5c      	ldr	r3, [pc, #368]	; (8006968 <HAL_GPIO_Init+0x330>)
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006802:	4a5a      	ldr	r2, [pc, #360]	; (800696c <HAL_GPIO_Init+0x334>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	3302      	adds	r3, #2
 800680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	220f      	movs	r2, #15
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4013      	ands	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800682c:	d025      	beq.n	800687a <HAL_GPIO_Init+0x242>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_GPIO_Init+0x338>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <HAL_GPIO_Init+0x23e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4e      	ldr	r2, [pc, #312]	; (8006974 <HAL_GPIO_Init+0x33c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d019      	beq.n	8006872 <HAL_GPIO_Init+0x23a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a4d      	ldr	r2, [pc, #308]	; (8006978 <HAL_GPIO_Init+0x340>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_GPIO_Init+0x236>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a4c      	ldr	r2, [pc, #304]	; (800697c <HAL_GPIO_Init+0x344>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00d      	beq.n	800686a <HAL_GPIO_Init+0x232>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a4b      	ldr	r2, [pc, #300]	; (8006980 <HAL_GPIO_Init+0x348>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_GPIO_Init+0x22e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_GPIO_Init+0x34c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_GPIO_Init+0x22a>
 800685e:	2306      	movs	r3, #6
 8006860:	e00c      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006862:	2307      	movs	r3, #7
 8006864:	e00a      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006866:	2305      	movs	r3, #5
 8006868:	e008      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686a:	2304      	movs	r3, #4
 800686c:	e006      	b.n	800687c <HAL_GPIO_Init+0x244>
 800686e:	2303      	movs	r3, #3
 8006870:	e004      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006872:	2302      	movs	r3, #2
 8006874:	e002      	b.n	800687c <HAL_GPIO_Init+0x244>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_GPIO_Init+0x244>
 800687a:	2300      	movs	r3, #0
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	f002 0203 	and.w	r2, r2, #3
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	4093      	lsls	r3, r2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800688c:	4937      	ldr	r1, [pc, #220]	; (800696c <HAL_GPIO_Init+0x334>)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	089b      	lsrs	r3, r3, #2
 8006892:	3302      	adds	r3, #2
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <HAL_GPIO_Init+0x350>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068be:	4a32      	ldr	r2, [pc, #200]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4013      	ands	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_GPIO_Init+0x350>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_GPIO_Init+0x350>)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_GPIO_Init+0x350>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <HAL_GPIO_Init+0x350>)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3301      	adds	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f ae78 	bne.w	8006648 <HAL_GPIO_Init+0x10>
  }
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000
 800696c:	40010000 	.word	0x40010000
 8006970:	48000400 	.word	0x48000400
 8006974:	48000800 	.word	0x48000800
 8006978:	48000c00 	.word	0x48000c00
 800697c:	48001000 	.word	0x48001000
 8006980:	48001400 	.word	0x48001400
 8006984:	48001800 	.word	0x48001800
 8006988:	40010400 	.word	0x40010400

0800698c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e001      	b.n	80069ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
 80069c8:	4613      	mov	r3, r2
 80069ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069cc:	787b      	ldrb	r3, [r7, #1]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069d8:	e002      	b.n	80069e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4013      	ands	r3, r2
 8006a04:	041a      	lsls	r2, r3, #16
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	43d9      	mvns	r1, r3
 8006a0a:	887b      	ldrh	r3, [r7, #2]
 8006a0c:	400b      	ands	r3, r1
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a36:	4a05      	ldr	r2, [pc, #20]	; (8006a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fb f962 	bl	8001d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40010400 	.word	0x40010400

08006a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40007000 	.word	0x40007000

08006a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7a:	d130      	bne.n	8006ade <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a88:	d038      	beq.n	8006afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a8a:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2232      	movs	r2, #50	; 0x32
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	0c9b      	lsrs	r3, r3, #18
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ab0:	e002      	b.n	8006ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ab8:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	d102      	bne.n	8006acc <HAL_PWREx_ControlVoltageScaling+0x60>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f2      	bne.n	8006ab2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad8:	d110      	bne.n	8006afc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d007      	beq.n	8006afc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006af4:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006afa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40007000 	.word	0x40007000
 8006b10:	20000000 	.word	0x20000000
 8006b14:	431bde83 	.word	0x431bde83

08006b18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e3ca      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b2a:	4b97      	ldr	r3, [pc, #604]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
 8006b32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b34:	4b94      	ldr	r3, [pc, #592]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80e4 	beq.w	8006d14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <HAL_RCC_OscConfig+0x4a>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	f040 808b 	bne.w	8006c70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	f040 8087 	bne.w	8006c70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b62:	4b89      	ldr	r3, [pc, #548]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_RCC_OscConfig+0x62>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e3a2      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_RCC_OscConfig+0x7c>
 8006b8a:	4b7f      	ldr	r3, [pc, #508]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b92:	e005      	b.n	8006ba0 <HAL_RCC_OscConfig+0x88>
 8006b94:	4b7c      	ldr	r3, [pc, #496]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b9a:	091b      	lsrs	r3, r3, #4
 8006b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d223      	bcs.n	8006bec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fd55 	bl	8007658 <RCC_SetFlashLatencyFromMSIRange>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e383      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bb8:	4b73      	ldr	r3, [pc, #460]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a72      	ldr	r2, [pc, #456]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bbe:	f043 0308 	orr.w	r3, r3, #8
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	4b70      	ldr	r3, [pc, #448]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	496d      	ldr	r1, [pc, #436]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bd6:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	4968      	ldr	r1, [pc, #416]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	604b      	str	r3, [r1, #4]
 8006bea:	e025      	b.n	8006c38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bec:	4b66      	ldr	r3, [pc, #408]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a65      	ldr	r2, [pc, #404]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bf2:	f043 0308 	orr.w	r3, r3, #8
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	4b63      	ldr	r3, [pc, #396]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	4960      	ldr	r1, [pc, #384]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c0a:	4b5f      	ldr	r3, [pc, #380]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	495b      	ldr	r1, [pc, #364]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fd15 	bl	8007658 <RCC_SetFlashLatencyFromMSIRange>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e343      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c38:	f000 fc4a 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b52      	ldr	r3, [pc, #328]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	091b      	lsrs	r3, r3, #4
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4950      	ldr	r1, [pc, #320]	; (8006d8c <HAL_RCC_OscConfig+0x274>)
 8006c4a:	5ccb      	ldrb	r3, [r1, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	4a4e      	ldr	r2, [pc, #312]	; (8006d90 <HAL_RCC_OscConfig+0x278>)
 8006c56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c58:	4b4e      	ldr	r3, [pc, #312]	; (8006d94 <HAL_RCC_OscConfig+0x27c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd fe05 	bl	800486c <HAL_InitTick>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d052      	beq.n	8006d12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	e327      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d032      	beq.n	8006cde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c78:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a42      	ldr	r2, [pc, #264]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c84:	f7fd fe42 	bl	800490c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c8c:	f7fd fe3e 	bl	800490c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e310      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c9e:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006caa:	4b37      	ldr	r3, [pc, #220]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a36      	ldr	r2, [pc, #216]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4931      	ldr	r1, [pc, #196]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	492c      	ldr	r1, [pc, #176]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	604b      	str	r3, [r1, #4]
 8006cdc:	e01a      	b.n	8006d14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cde:	4b2a      	ldr	r3, [pc, #168]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cea:	f7fd fe0f 	bl	800490c <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cf2:	f7fd fe0b 	bl	800490c <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e2dd      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d04:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f0      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x1da>
 8006d10:	e000      	b.n	8006d14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d074      	beq.n	8006e0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d005      	beq.n	8006d32 <HAL_RCC_OscConfig+0x21a>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d10e      	bne.n	8006d4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d10b      	bne.n	8006d4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d064      	beq.n	8006e08 <HAL_RCC_OscConfig+0x2f0>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d160      	bne.n	8006e08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e2ba      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d106      	bne.n	8006d62 <HAL_RCC_OscConfig+0x24a>
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e026      	b.n	8006db0 <HAL_RCC_OscConfig+0x298>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d6a:	d115      	bne.n	8006d98 <HAL_RCC_OscConfig+0x280>
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a02      	ldr	r2, [pc, #8]	; (8006d88 <HAL_RCC_OscConfig+0x270>)
 8006d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e014      	b.n	8006db0 <HAL_RCC_OscConfig+0x298>
 8006d86:	bf00      	nop
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	0800ed40 	.word	0x0800ed40
 8006d90:	20000000 	.word	0x20000000
 8006d94:	20000004 	.word	0x20000004
 8006d98:	4ba0      	ldr	r3, [pc, #640]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a9f      	ldr	r2, [pc, #636]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b9d      	ldr	r3, [pc, #628]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a9c      	ldr	r2, [pc, #624]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fd fda8 	bl	800490c <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc0:	f7fd fda4 	bl	800490c <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b64      	cmp	r3, #100	; 0x64
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e276      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd2:	4b92      	ldr	r3, [pc, #584]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x2a8>
 8006dde:	e014      	b.n	8006e0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fd fd94 	bl	800490c <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fd fd90 	bl	800490c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	; 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e262      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dfa:	4b88      	ldr	r3, [pc, #544]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x2d0>
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d060      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d005      	beq.n	8006e28 <HAL_RCC_OscConfig+0x310>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d119      	bne.n	8006e56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d116      	bne.n	8006e56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e28:	4b7c      	ldr	r3, [pc, #496]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_OscConfig+0x328>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e23f      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e40:	4b76      	ldr	r3, [pc, #472]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	4973      	ldr	r1, [pc, #460]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e54:	e040      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d023      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6e      	ldr	r2, [pc, #440]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fd fd4f 	bl	800490c <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e72:	f7fd fd4b 	bl	800490c <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e21d      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e84:	4b65      	ldr	r3, [pc, #404]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f0      	beq.n	8006e72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e90:	4b62      	ldr	r3, [pc, #392]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	495f      	ldr	r1, [pc, #380]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	604b      	str	r3, [r1, #4]
 8006ea4:	e018      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ea6:	4b5d      	ldr	r3, [pc, #372]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a5c      	ldr	r2, [pc, #368]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fd fd2b 	bl	800490c <HAL_GetTick>
 8006eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eba:	f7fd fd27 	bl	800490c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e1f9      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ecc:	4b53      	ldr	r3, [pc, #332]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d03c      	beq.n	8006f5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01c      	beq.n	8006f26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eec:	4b4b      	ldr	r3, [pc, #300]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ef2:	4a4a      	ldr	r2, [pc, #296]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efc:	f7fd fd06 	bl	800490c <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f04:	f7fd fd02 	bl	800490c <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e1d4      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f16:	4b41      	ldr	r3, [pc, #260]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0ef      	beq.n	8006f04 <HAL_RCC_OscConfig+0x3ec>
 8006f24:	e01b      	b.n	8006f5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f26:	4b3d      	ldr	r3, [pc, #244]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2c:	4a3b      	ldr	r2, [pc, #236]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f36:	f7fd fce9 	bl	800490c <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3e:	f7fd fce5 	bl	800490c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e1b7      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f50:	4b32      	ldr	r3, [pc, #200]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ef      	bne.n	8006f3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80a6 	beq.w	80070b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f70:	4b2a      	ldr	r3, [pc, #168]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10d      	bne.n	8006f98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	4b27      	ldr	r3, [pc, #156]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f80:	4a26      	ldr	r2, [pc, #152]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f86:	6593      	str	r3, [r2, #88]	; 0x58
 8006f88:	4b24      	ldr	r3, [pc, #144]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f94:	2301      	movs	r3, #1
 8006f96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <HAL_RCC_OscConfig+0x508>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d118      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	; (8007020 <HAL_RCC_OscConfig+0x508>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_RCC_OscConfig+0x508>)
 8006faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb0:	f7fd fcac 	bl	800490c <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb8:	f7fd fca8 	bl	800490c <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e17a      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <HAL_RCC_OscConfig+0x508>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d108      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x4d8>
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	4a0d      	ldr	r2, [pc, #52]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fee:	e029      	b.n	8007044 <HAL_RCC_OscConfig+0x52c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d115      	bne.n	8007024 <HAL_RCC_OscConfig+0x50c>
 8006ff8:	4b08      	ldr	r3, [pc, #32]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	4a07      	ldr	r2, [pc, #28]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8007000:	f043 0304 	orr.w	r3, r3, #4
 8007004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007008:	4b04      	ldr	r3, [pc, #16]	; (800701c <HAL_RCC_OscConfig+0x504>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	4a03      	ldr	r2, [pc, #12]	; (800701c <HAL_RCC_OscConfig+0x504>)
 8007010:	f043 0301 	orr.w	r3, r3, #1
 8007014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007018:	e014      	b.n	8007044 <HAL_RCC_OscConfig+0x52c>
 800701a:	bf00      	nop
 800701c:	40021000 	.word	0x40021000
 8007020:	40007000 	.word	0x40007000
 8007024:	4b9c      	ldr	r3, [pc, #624]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	4a9b      	ldr	r2, [pc, #620]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007034:	4b98      	ldr	r3, [pc, #608]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	4a97      	ldr	r2, [pc, #604]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704c:	f7fd fc5e 	bl	800490c <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007052:	e00a      	b.n	800706a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007054:	f7fd fc5a 	bl	800490c <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007062:	4293      	cmp	r3, r2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e12a      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800706a:	4b8b      	ldr	r3, [pc, #556]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ed      	beq.n	8007054 <HAL_RCC_OscConfig+0x53c>
 8007078:	e015      	b.n	80070a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707a:	f7fd fc47 	bl	800490c <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007080:	e00a      	b.n	8007098 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007082:	f7fd fc43 	bl	800490c <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	4293      	cmp	r3, r2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e113      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007098:	4b7f      	ldr	r3, [pc, #508]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1ed      	bne.n	8007082 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070a6:	7ffb      	ldrb	r3, [r7, #31]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d105      	bne.n	80070b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ac:	4b7a      	ldr	r3, [pc, #488]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	4a79      	ldr	r2, [pc, #484]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80070b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80fe 	beq.w	80072be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	f040 80d0 	bne.w	800726c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80070cc:	4b72      	ldr	r3, [pc, #456]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f003 0203 	and.w	r2, r3, #3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d130      	bne.n	8007142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	3b01      	subs	r3, #1
 80070ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d127      	bne.n	8007142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070fe:	429a      	cmp	r2, r3
 8007100:	d11f      	bne.n	8007142 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800710c:	2a07      	cmp	r2, #7
 800710e:	bf14      	ite	ne
 8007110:	2201      	movne	r2, #1
 8007112:	2200      	moveq	r2, #0
 8007114:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007116:	4293      	cmp	r3, r2
 8007118:	d113      	bne.n	8007142 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	3b01      	subs	r3, #1
 8007128:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d109      	bne.n	8007142 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	3b01      	subs	r3, #1
 800713c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d06e      	beq.n	8007220 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b0c      	cmp	r3, #12
 8007146:	d069      	beq.n	800721c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007148:	4b53      	ldr	r3, [pc, #332]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007154:	4b50      	ldr	r3, [pc, #320]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0ad      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007164:	4b4c      	ldr	r3, [pc, #304]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a4b      	ldr	r2, [pc, #300]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800716a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800716e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007170:	f7fd fbcc 	bl	800490c <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fd fbc8 	bl	800490c <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e09a      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800718a:	4b43      	ldr	r3, [pc, #268]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007196:	4b40      	ldr	r3, [pc, #256]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	4b40      	ldr	r3, [pc, #256]	; (800729c <HAL_RCC_OscConfig+0x784>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071a6:	3a01      	subs	r2, #1
 80071a8:	0112      	lsls	r2, r2, #4
 80071aa:	4311      	orrs	r1, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071b0:	0212      	lsls	r2, r2, #8
 80071b2:	4311      	orrs	r1, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071b8:	0852      	lsrs	r2, r2, #1
 80071ba:	3a01      	subs	r2, #1
 80071bc:	0552      	lsls	r2, r2, #21
 80071be:	4311      	orrs	r1, r2
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071c4:	0852      	lsrs	r2, r2, #1
 80071c6:	3a01      	subs	r2, #1
 80071c8:	0652      	lsls	r2, r2, #25
 80071ca:	4311      	orrs	r1, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071d0:	0912      	lsrs	r2, r2, #4
 80071d2:	0452      	lsls	r2, r2, #17
 80071d4:	430a      	orrs	r2, r1
 80071d6:	4930      	ldr	r1, [pc, #192]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80071dc:	4b2e      	ldr	r3, [pc, #184]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2d      	ldr	r2, [pc, #180]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80071e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071e8:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a2a      	ldr	r2, [pc, #168]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 80071ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071f4:	f7fd fb8a 	bl	800490c <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fc:	f7fd fb86 	bl	800490c <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e058      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800720e:	4b22      	ldr	r3, [pc, #136]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0f0      	beq.n	80071fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800721a:	e050      	b.n	80072be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e04f      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d148      	bne.n	80072be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a19      	ldr	r2, [pc, #100]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007238:	4b17      	ldr	r3, [pc, #92]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4a16      	ldr	r2, [pc, #88]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 800723e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007244:	f7fd fb62 	bl	800490c <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fd fb5e 	bl	800490c <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e030      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x734>
 800726a:	e028      	b.n	80072be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b0c      	cmp	r3, #12
 8007270:	d023      	beq.n	80072ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <HAL_RCC_OscConfig+0x780>)
 8007278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800727c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727e:	f7fd fb45 	bl	800490c <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007284:	e00c      	b.n	80072a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007286:	f7fd fb41 	bl	800490c <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d905      	bls.n	80072a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e013      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
 8007298:	40021000 	.word	0x40021000
 800729c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <HAL_RCC_OscConfig+0x7b0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1ec      	bne.n	8007286 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <HAL_RCC_OscConfig+0x7b0>)
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	4905      	ldr	r1, [pc, #20]	; (80072c8 <HAL_RCC_OscConfig+0x7b0>)
 80072b2:	4b06      	ldr	r3, [pc, #24]	; (80072cc <HAL_RCC_OscConfig+0x7b4>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	60cb      	str	r3, [r1, #12]
 80072b8:	e001      	b.n	80072be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40021000 	.word	0x40021000
 80072cc:	feeefffc 	.word	0xfeeefffc

080072d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0e7      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072e4:	4b75      	ldr	r3, [pc, #468]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d910      	bls.n	8007314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f2:	4b72      	ldr	r3, [pc, #456]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f023 0207 	bic.w	r2, r3, #7
 80072fa:	4970      	ldr	r1, [pc, #448]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	4313      	orrs	r3, r2
 8007300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007302:	4b6e      	ldr	r3, [pc, #440]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d001      	beq.n	8007314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0cf      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	4b66      	ldr	r3, [pc, #408]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800732c:	429a      	cmp	r2, r3
 800732e:	d908      	bls.n	8007342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007330:	4b63      	ldr	r3, [pc, #396]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4960      	ldr	r1, [pc, #384]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d04c      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d107      	bne.n	8007366 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007356:	4b5a      	ldr	r3, [pc, #360]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d121      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e0a6      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d107      	bne.n	800737e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800736e:	4b54      	ldr	r3, [pc, #336]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d115      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e09a      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d107      	bne.n	8007396 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007386:	4b4e      	ldr	r3, [pc, #312]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e08e      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007396:	4b4a      	ldr	r3, [pc, #296]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e086      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073a6:	4b46      	ldr	r3, [pc, #280]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 0203 	bic.w	r2, r3, #3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4943      	ldr	r1, [pc, #268]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b8:	f7fd faa8 	bl	800490c <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c0:	f7fd faa4 	bl	800490c <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e06e      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d6:	4b3a      	ldr	r3, [pc, #232]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 020c 	and.w	r2, r3, #12
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d1eb      	bne.n	80073c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d010      	beq.n	8007416 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	4b31      	ldr	r3, [pc, #196]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007400:	429a      	cmp	r2, r3
 8007402:	d208      	bcs.n	8007416 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007404:	4b2e      	ldr	r3, [pc, #184]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	492b      	ldr	r1, [pc, #172]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d210      	bcs.n	8007446 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007424:	4b25      	ldr	r3, [pc, #148]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f023 0207 	bic.w	r2, r3, #7
 800742c:	4923      	ldr	r1, [pc, #140]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007434:	4b21      	ldr	r3, [pc, #132]	; (80074bc <HAL_RCC_ClockConfig+0x1ec>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d001      	beq.n	8007446 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e036      	b.n	80074b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d008      	beq.n	8007464 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	4918      	ldr	r1, [pc, #96]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007460:	4313      	orrs	r3, r2
 8007462:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007470:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	4910      	ldr	r1, [pc, #64]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007484:	f000 f824 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 8007488:	4602      	mov	r2, r0
 800748a:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <HAL_RCC_ClockConfig+0x1f0>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	490b      	ldr	r1, [pc, #44]	; (80074c4 <HAL_RCC_ClockConfig+0x1f4>)
 8007496:	5ccb      	ldrb	r3, [r1, r3]
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <HAL_RCC_ClockConfig+0x1f8>)
 80074a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <HAL_RCC_ClockConfig+0x1fc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fd f9df 	bl	800486c <HAL_InitTick>
 80074ae:	4603      	mov	r3, r0
 80074b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80074b2:	7afb      	ldrb	r3, [r7, #11]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40022000 	.word	0x40022000
 80074c0:	40021000 	.word	0x40021000
 80074c4:	0800ed40 	.word	0x0800ed40
 80074c8:	20000000 	.word	0x20000000
 80074cc:	20000004 	.word	0x20000004

080074d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b089      	sub	sp, #36	; 0x24
 80074d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074de:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 030c 	and.w	r3, r3, #12
 80074e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074e8:	4b3b      	ldr	r3, [pc, #236]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0x34>
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b0c      	cmp	r3, #12
 80074fc:	d121      	bne.n	8007542 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d11e      	bne.n	8007542 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007504:	4b34      	ldr	r3, [pc, #208]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007510:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	e005      	b.n	800752c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007520:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800752c:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007534:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007540:	e00a      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b04      	cmp	r3, #4
 8007546:	d102      	bne.n	800754e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e004      	b.n	8007558 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d101      	bne.n	8007558 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007554:	4b23      	ldr	r3, [pc, #140]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007556:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b0c      	cmp	r3, #12
 800755c:	d134      	bne.n	80075c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800755e:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d003      	beq.n	8007576 <HAL_RCC_GetSysClockFreq+0xa6>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d003      	beq.n	800757c <HAL_RCC_GetSysClockFreq+0xac>
 8007574:	e005      	b.n	8007582 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007576:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007578:	617b      	str	r3, [r7, #20]
      break;
 800757a:	e005      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800757c:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800757e:	617b      	str	r3, [r7, #20]
      break;
 8007580:	e002      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	617b      	str	r3, [r7, #20]
      break;
 8007586:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	3301      	adds	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	fb03 f202 	mul.w	r2, r3, r2
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	0e5b      	lsrs	r3, r3, #25
 80075b4:	f003 0303 	and.w	r3, r3, #3
 80075b8:	3301      	adds	r3, #1
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075c8:	69bb      	ldr	r3, [r7, #24]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40021000 	.word	0x40021000
 80075dc:	0800ed58 	.word	0x0800ed58
 80075e0:	00f42400 	.word	0x00f42400
 80075e4:	007a1200 	.word	0x007a1200

080075e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ec:	4b03      	ldr	r3, [pc, #12]	; (80075fc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ee:	681b      	ldr	r3, [r3, #0]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000000 	.word	0x20000000

08007600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007604:	f7ff fff0 	bl	80075e8 <HAL_RCC_GetHCLKFreq>
 8007608:	4602      	mov	r2, r0
 800760a:	4b06      	ldr	r3, [pc, #24]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	0a1b      	lsrs	r3, r3, #8
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007616:	5ccb      	ldrb	r3, [r1, r3]
 8007618:	f003 031f 	and.w	r3, r3, #31
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40021000 	.word	0x40021000
 8007628:	0800ed50 	.word	0x0800ed50

0800762c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007630:	f7ff ffda 	bl	80075e8 <HAL_RCC_GetHCLKFreq>
 8007634:	4602      	mov	r2, r0
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	0adb      	lsrs	r3, r3, #11
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	4904      	ldr	r1, [pc, #16]	; (8007654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007642:	5ccb      	ldrb	r3, [r1, r3]
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800764c:	4618      	mov	r0, r3
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40021000 	.word	0x40021000
 8007654:	0800ed50 	.word	0x0800ed50

08007658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007664:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007670:	f7ff f9ee 	bl	8006a50 <HAL_PWREx_GetVoltageRange>
 8007674:	6178      	str	r0, [r7, #20]
 8007676:	e014      	b.n	80076a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007678:	4b25      	ldr	r3, [pc, #148]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767c:	4a24      	ldr	r2, [pc, #144]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800767e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007682:	6593      	str	r3, [r2, #88]	; 0x58
 8007684:	4b22      	ldr	r3, [pc, #136]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007690:	f7ff f9de 	bl	8006a50 <HAL_PWREx_GetVoltageRange>
 8007694:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007696:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d10b      	bne.n	80076c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b80      	cmp	r3, #128	; 0x80
 80076ae:	d919      	bls.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2ba0      	cmp	r3, #160	; 0xa0
 80076b4:	d902      	bls.n	80076bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076b6:	2302      	movs	r3, #2
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e013      	b.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076bc:	2301      	movs	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	e010      	b.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d902      	bls.n	80076ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80076c8:	2303      	movs	r3, #3
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	e00a      	b.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d102      	bne.n	80076da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076d4:	2302      	movs	r3, #2
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	e004      	b.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b70      	cmp	r3, #112	; 0x70
 80076de:	d101      	bne.n	80076e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076e0:	2301      	movs	r3, #1
 80076e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f023 0207 	bic.w	r2, r3, #7
 80076ec:	4909      	ldr	r1, [pc, #36]	; (8007714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80076f4:	4b07      	ldr	r3, [pc, #28]	; (8007714 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d001      	beq.n	8007706 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40021000 	.word	0x40021000
 8007714:	40022000 	.word	0x40022000

08007718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007720:	2300      	movs	r3, #0
 8007722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007724:	2300      	movs	r3, #0
 8007726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007730:	2b00      	cmp	r3, #0
 8007732:	d041      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007738:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800773c:	d02a      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800773e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007742:	d824      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007744:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007748:	d008      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800774a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800774e:	d81e      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007758:	d010      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800775a:	e018      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800775c:	4b86      	ldr	r3, [pc, #536]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4a85      	ldr	r2, [pc, #532]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007766:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007768:	e015      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fabb 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007776:	4603      	mov	r3, r0
 8007778:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800777a:	e00c      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3320      	adds	r3, #32
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fba6 	bl	8007ed4 <RCCEx_PLLSAI2_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800778c:	e003      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	74fb      	strb	r3, [r7, #19]
      break;
 8007792:	e000      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007796:	7cfb      	ldrb	r3, [r7, #19]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800779c:	4b76      	ldr	r3, [pc, #472]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077aa:	4973      	ldr	r1, [pc, #460]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80077b2:	e001      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b4:	7cfb      	ldrb	r3, [r7, #19]
 80077b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d041      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077cc:	d02a      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80077ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077d2:	d824      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077d8:	d008      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077de:	d81e      	bhi.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80077e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077e8:	d010      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80077ea:	e018      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80077ec:	4b62      	ldr	r3, [pc, #392]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a61      	ldr	r2, [pc, #388]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80077f8:	e015      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3304      	adds	r3, #4
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fa73 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800780a:	e00c      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3320      	adds	r3, #32
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fb5e 	bl	8007ed4 <RCCEx_PLLSAI2_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800781c:	e003      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	74fb      	strb	r3, [r7, #19]
      break;
 8007822:	e000      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007826:	7cfb      	ldrb	r3, [r7, #19]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10b      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800782c:	4b52      	ldr	r3, [pc, #328]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800783a:	494f      	ldr	r1, [pc, #316]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007842:	e001      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80a0 	beq.w	8007996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007856:	2300      	movs	r3, #0
 8007858:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800785a:	4b47      	ldr	r3, [pc, #284]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007870:	4b41      	ldr	r3, [pc, #260]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007874:	4a40      	ldr	r2, [pc, #256]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800787a:	6593      	str	r3, [r2, #88]	; 0x58
 800787c:	4b3e      	ldr	r3, [pc, #248]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800787e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007888:	2301      	movs	r3, #1
 800788a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800788c:	4b3b      	ldr	r3, [pc, #236]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a3a      	ldr	r2, [pc, #232]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007898:	f7fd f838 	bl	800490c <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800789e:	e009      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a0:	f7fd f834 	bl	800490c <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d902      	bls.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	74fb      	strb	r3, [r7, #19]
        break;
 80078b2:	e005      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80078b4:	4b31      	ldr	r3, [pc, #196]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ef      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80078c0:	7cfb      	ldrb	r3, [r7, #19]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d15c      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078c6:	4b2c      	ldr	r3, [pc, #176]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01f      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d019      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007900:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007906:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007910:	4a19      	ldr	r2, [pc, #100]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fc fff3 	bl	800490c <HAL_GetTick>
 8007926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007928:	e00b      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7fc ffef 	bl	800490c <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d902      	bls.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	74fb      	strb	r3, [r7, #19]
            break;
 8007940:	e006      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007942:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0ec      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007950:	7cfb      	ldrb	r3, [r7, #19]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10c      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007956:	4b08      	ldr	r3, [pc, #32]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007966:	4904      	ldr	r1, [pc, #16]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007968:	4313      	orrs	r3, r2
 800796a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800796e:	e009      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007970:	7cfb      	ldrb	r3, [r7, #19]
 8007972:	74bb      	strb	r3, [r7, #18]
 8007974:	e006      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007976:	bf00      	nop
 8007978:	40021000 	.word	0x40021000
 800797c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7cfb      	ldrb	r3, [r7, #19]
 8007982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007984:	7c7b      	ldrb	r3, [r7, #17]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d105      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800798a:	4b9e      	ldr	r3, [pc, #632]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800798c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798e:	4a9d      	ldr	r2, [pc, #628]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079a2:	4b98      	ldr	r3, [pc, #608]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a8:	f023 0203 	bic.w	r2, r3, #3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	4994      	ldr	r1, [pc, #592]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079c4:	4b8f      	ldr	r3, [pc, #572]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ca:	f023 020c 	bic.w	r2, r3, #12
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	498c      	ldr	r1, [pc, #560]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079e6:	4b87      	ldr	r3, [pc, #540]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	4983      	ldr	r1, [pc, #524]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a08:	4b7e      	ldr	r3, [pc, #504]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	497b      	ldr	r1, [pc, #492]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a2a:	4b76      	ldr	r3, [pc, #472]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a38:	4972      	ldr	r1, [pc, #456]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a4c:	4b6d      	ldr	r3, [pc, #436]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	496a      	ldr	r1, [pc, #424]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a6e:	4b65      	ldr	r3, [pc, #404]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7c:	4961      	ldr	r1, [pc, #388]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a90:	4b5c      	ldr	r3, [pc, #368]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9e:	4959      	ldr	r1, [pc, #356]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ab2:	4b54      	ldr	r3, [pc, #336]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac0:	4950      	ldr	r1, [pc, #320]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ad4:	4b4b      	ldr	r3, [pc, #300]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	4948      	ldr	r1, [pc, #288]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007af6:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b04:	493f      	ldr	r1, [pc, #252]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d028      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b18:	4b3a      	ldr	r3, [pc, #232]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b26:	4937      	ldr	r1, [pc, #220]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b36:	d106      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a31      	ldr	r2, [pc, #196]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b42:	60d3      	str	r3, [r2, #12]
 8007b44:	e011      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b4e:	d10c      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f8c8 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007b60:	7cfb      	ldrb	r3, [r7, #19]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d028      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b76:	4b23      	ldr	r3, [pc, #140]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	491f      	ldr	r1, [pc, #124]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b94:	d106      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b96:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba0:	60d3      	str	r3, [r2, #12]
 8007ba2:	e011      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f899 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007bc4:	7cfb      	ldrb	r3, [r7, #19]
 8007bc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d02b      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be2:	4908      	ldr	r1, [pc, #32]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf2:	d109      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	4a02      	ldr	r2, [pc, #8]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bfe:	60d3      	str	r3, [r2, #12]
 8007c00:	e014      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007c02:	bf00      	nop
 8007c04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3304      	adds	r3, #4
 8007c16:	2101      	movs	r1, #1
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f867 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c22:	7cfb      	ldrb	r3, [r7, #19]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007c28:	7cfb      	ldrb	r3, [r7, #19]
 8007c2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d02f      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c38:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c46:	4928      	ldr	r1, [pc, #160]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c56:	d10d      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f844 	bl	8007cec <RCCEx_PLLSAI1_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c68:	7cfb      	ldrb	r3, [r7, #19]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c6e:	7cfb      	ldrb	r3, [r7, #19]
 8007c70:	74bb      	strb	r3, [r7, #18]
 8007c72:	e011      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3320      	adds	r3, #32
 8007c82:	2102      	movs	r1, #2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f925 	bl	8007ed4 <RCCEx_PLLSAI2_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c8e:	7cfb      	ldrb	r3, [r7, #19]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007c94:	7cfb      	ldrb	r3, [r7, #19]
 8007c96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb2:	490d      	ldr	r1, [pc, #52]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cc6:	4b08      	ldr	r3, [pc, #32]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cd6:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007cde:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40021000 	.word	0x40021000

08007cec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cfa:	4b75      	ldr	r3, [pc, #468]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007d06:	4b72      	ldr	r3, [pc, #456]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0203 	and.w	r2, r3, #3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d10d      	bne.n	8007d32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
       ||
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007d1e:	4b6c      	ldr	r3, [pc, #432]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	091b      	lsrs	r3, r3, #4
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d047      	beq.n	8007dc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
 8007d36:	e044      	b.n	8007dc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d018      	beq.n	8007d72 <RCCEx_PLLSAI1_Config+0x86>
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d825      	bhi.n	8007d90 <RCCEx_PLLSAI1_Config+0xa4>
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d002      	beq.n	8007d4e <RCCEx_PLLSAI1_Config+0x62>
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d009      	beq.n	8007d60 <RCCEx_PLLSAI1_Config+0x74>
 8007d4c:	e020      	b.n	8007d90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d4e:	4b60      	ldr	r3, [pc, #384]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11d      	bne.n	8007d96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d5e:	e01a      	b.n	8007d96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d60:	4b5b      	ldr	r3, [pc, #364]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d116      	bne.n	8007d9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d70:	e013      	b.n	8007d9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d72:	4b57      	ldr	r3, [pc, #348]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10f      	bne.n	8007d9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d7e:	4b54      	ldr	r3, [pc, #336]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d8e:	e006      	b.n	8007d9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	e004      	b.n	8007da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d96:	bf00      	nop
 8007d98:	e002      	b.n	8007da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10d      	bne.n	8007dc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007da6:	4b4a      	ldr	r3, [pc, #296]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6819      	ldr	r1, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	4944      	ldr	r1, [pc, #272]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d17d      	bne.n	8007ec4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007dc8:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a40      	ldr	r2, [pc, #256]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd4:	f7fc fd9a 	bl	800490c <HAL_GetTick>
 8007dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007dda:	e009      	b.n	8007df0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ddc:	f7fc fd96 	bl	800490c <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d902      	bls.n	8007df0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	73fb      	strb	r3, [r7, #15]
        break;
 8007dee:	e005      	b.n	8007dfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007df0:	4b37      	ldr	r3, [pc, #220]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1ef      	bne.n	8007ddc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d160      	bne.n	8007ec4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d111      	bne.n	8007e2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e08:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6892      	ldr	r2, [r2, #8]
 8007e18:	0211      	lsls	r1, r2, #8
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	68d2      	ldr	r2, [r2, #12]
 8007e1e:	0912      	lsrs	r2, r2, #4
 8007e20:	0452      	lsls	r2, r2, #17
 8007e22:	430a      	orrs	r2, r1
 8007e24:	492a      	ldr	r1, [pc, #168]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
 8007e2a:	e027      	b.n	8007e7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d112      	bne.n	8007e58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e32:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007e3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6892      	ldr	r2, [r2, #8]
 8007e42:	0211      	lsls	r1, r2, #8
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6912      	ldr	r2, [r2, #16]
 8007e48:	0852      	lsrs	r2, r2, #1
 8007e4a:	3a01      	subs	r2, #1
 8007e4c:	0552      	lsls	r2, r2, #21
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	491f      	ldr	r1, [pc, #124]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	610b      	str	r3, [r1, #16]
 8007e56:	e011      	b.n	8007e7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6892      	ldr	r2, [r2, #8]
 8007e68:	0211      	lsls	r1, r2, #8
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6952      	ldr	r2, [r2, #20]
 8007e6e:	0852      	lsrs	r2, r2, #1
 8007e70:	3a01      	subs	r2, #1
 8007e72:	0652      	lsls	r2, r2, #25
 8007e74:	430a      	orrs	r2, r1
 8007e76:	4916      	ldr	r1, [pc, #88]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e7c:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e88:	f7fc fd40 	bl	800490c <HAL_GetTick>
 8007e8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e8e:	e009      	b.n	8007ea4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e90:	f7fc fd3c 	bl	800490c <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d902      	bls.n	8007ea4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	73fb      	strb	r3, [r7, #15]
          break;
 8007ea2:	e005      	b.n	8007eb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ef      	beq.n	8007e90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007eb6:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eb8:	691a      	ldr	r2, [r3, #16]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000

08007ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ee2:	4b6a      	ldr	r3, [pc, #424]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007eee:	4b67      	ldr	r3, [pc, #412]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f003 0203 	and.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d10d      	bne.n	8007f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
       ||
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007f06:	4b61      	ldr	r3, [pc, #388]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
       ||
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d047      	beq.n	8007faa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
 8007f1e:	e044      	b.n	8007faa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d018      	beq.n	8007f5a <RCCEx_PLLSAI2_Config+0x86>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d825      	bhi.n	8007f78 <RCCEx_PLLSAI2_Config+0xa4>
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d002      	beq.n	8007f36 <RCCEx_PLLSAI2_Config+0x62>
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d009      	beq.n	8007f48 <RCCEx_PLLSAI2_Config+0x74>
 8007f34:	e020      	b.n	8007f78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f36:	4b55      	ldr	r3, [pc, #340]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d11d      	bne.n	8007f7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f46:	e01a      	b.n	8007f7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f48:	4b50      	ldr	r3, [pc, #320]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d116      	bne.n	8007f82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f58:	e013      	b.n	8007f82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f5a:	4b4c      	ldr	r3, [pc, #304]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10f      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f66:	4b49      	ldr	r3, [pc, #292]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f76:	e006      	b.n	8007f86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e004      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f7e:	bf00      	nop
 8007f80:	e002      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f82:	bf00      	nop
 8007f84:	e000      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f8e:	4b3f      	ldr	r3, [pc, #252]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	4939      	ldr	r1, [pc, #228]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d167      	bne.n	8008080 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007fb0:	4b36      	ldr	r3, [pc, #216]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a35      	ldr	r2, [pc, #212]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbc:	f7fc fca6 	bl	800490c <HAL_GetTick>
 8007fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fc2:	e009      	b.n	8007fd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fc4:	f7fc fca2 	bl	800490c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d902      	bls.n	8007fd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8007fd6:	e005      	b.n	8007fe4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fd8:	4b2c      	ldr	r3, [pc, #176]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1ef      	bne.n	8007fc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d14a      	bne.n	8008080 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d111      	bne.n	8008014 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ff0:	4b26      	ldr	r3, [pc, #152]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6892      	ldr	r2, [r2, #8]
 8008000:	0211      	lsls	r1, r2, #8
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	68d2      	ldr	r2, [r2, #12]
 8008006:	0912      	lsrs	r2, r2, #4
 8008008:	0452      	lsls	r2, r2, #17
 800800a:	430a      	orrs	r2, r1
 800800c:	491f      	ldr	r1, [pc, #124]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 800800e:	4313      	orrs	r3, r2
 8008010:	614b      	str	r3, [r1, #20]
 8008012:	e011      	b.n	8008038 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800801c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6892      	ldr	r2, [r2, #8]
 8008024:	0211      	lsls	r1, r2, #8
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6912      	ldr	r2, [r2, #16]
 800802a:	0852      	lsrs	r2, r2, #1
 800802c:	3a01      	subs	r2, #1
 800802e:	0652      	lsls	r2, r2, #25
 8008030:	430a      	orrs	r2, r1
 8008032:	4916      	ldr	r1, [pc, #88]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008034:	4313      	orrs	r3, r2
 8008036:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 800803e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008044:	f7fc fc62 	bl	800490c <HAL_GetTick>
 8008048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800804a:	e009      	b.n	8008060 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800804c:	f7fc fc5e 	bl	800490c <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d902      	bls.n	8008060 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	73fb      	strb	r3, [r7, #15]
          break;
 800805e:	e005      	b.n	800806c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0ef      	beq.n	800804c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008072:	4b06      	ldr	r3, [pc, #24]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4904      	ldr	r1, [pc, #16]	; (800808c <RCCEx_PLLSAI2_Config+0x1b8>)
 800807c:	4313      	orrs	r3, r2
 800807e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40021000 	.word	0x40021000

08008090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e049      	b.n	8008136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fb f85c 	bl	8003174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f000 fc42 	bl	8008958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d001      	beq.n	8008158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e04f      	b.n	80081f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <HAL_TIM_Base_Start_IT+0xc4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01d      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d018      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1f      	ldr	r2, [pc, #124]	; (8008208 <HAL_TIM_Base_Start_IT+0xc8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1e      	ldr	r2, [pc, #120]	; (800820c <HAL_TIM_Base_Start_IT+0xcc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1c      	ldr	r2, [pc, #112]	; (8008210 <HAL_TIM_Base_Start_IT+0xd0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <HAL_TIM_Base_Start_IT+0xd4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0x76>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a19      	ldr	r2, [pc, #100]	; (8008218 <HAL_TIM_Base_Start_IT+0xd8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d115      	bne.n	80081e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	4b17      	ldr	r3, [pc, #92]	; (800821c <HAL_TIM_Base_Start_IT+0xdc>)
 80081be:	4013      	ands	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	d015      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0xb4>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ce:	d011      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e0:	e008      	b.n	80081f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e000      	b.n	80081f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40014000 	.word	0x40014000
 800821c:	00010007 	.word	0x00010007

08008220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e049      	b.n	80082c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fa ff26 	bl	8003098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 fb7a 	bl	8008958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <HAL_TIM_PWM_Start+0x24>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	bf14      	ite	ne
 80082ec:	2301      	movne	r3, #1
 80082ee:	2300      	moveq	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	e03c      	b.n	800836e <HAL_TIM_PWM_Start+0x9e>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d109      	bne.n	800830e <HAL_TIM_PWM_Start+0x3e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b01      	cmp	r3, #1
 8008304:	bf14      	ite	ne
 8008306:	2301      	movne	r3, #1
 8008308:	2300      	moveq	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	e02f      	b.n	800836e <HAL_TIM_PWM_Start+0x9e>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b08      	cmp	r3, #8
 8008312:	d109      	bne.n	8008328 <HAL_TIM_PWM_Start+0x58>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	bf14      	ite	ne
 8008320:	2301      	movne	r3, #1
 8008322:	2300      	moveq	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	e022      	b.n	800836e <HAL_TIM_PWM_Start+0x9e>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b0c      	cmp	r3, #12
 800832c:	d109      	bne.n	8008342 <HAL_TIM_PWM_Start+0x72>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b01      	cmp	r3, #1
 8008338:	bf14      	ite	ne
 800833a:	2301      	movne	r3, #1
 800833c:	2300      	moveq	r3, #0
 800833e:	b2db      	uxtb	r3, r3
 8008340:	e015      	b.n	800836e <HAL_TIM_PWM_Start+0x9e>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b10      	cmp	r3, #16
 8008346:	d109      	bne.n	800835c <HAL_TIM_PWM_Start+0x8c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b01      	cmp	r3, #1
 8008352:	bf14      	ite	ne
 8008354:	2301      	movne	r3, #1
 8008356:	2300      	moveq	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	e008      	b.n	800836e <HAL_TIM_PWM_Start+0x9e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b01      	cmp	r3, #1
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e09c      	b.n	80084b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_TIM_PWM_Start+0xb6>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008384:	e023      	b.n	80083ce <HAL_TIM_PWM_Start+0xfe>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b04      	cmp	r3, #4
 800838a:	d104      	bne.n	8008396 <HAL_TIM_PWM_Start+0xc6>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008394:	e01b      	b.n	80083ce <HAL_TIM_PWM_Start+0xfe>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b08      	cmp	r3, #8
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_PWM_Start+0xd6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a4:	e013      	b.n	80083ce <HAL_TIM_PWM_Start+0xfe>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b0c      	cmp	r3, #12
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Start+0xe6>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083b4:	e00b      	b.n	80083ce <HAL_TIM_PWM_Start+0xfe>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Start+0xf6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083c4:	e003      	b.n	80083ce <HAL_TIM_PWM_Start+0xfe>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2202      	movs	r2, #2
 80083ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2201      	movs	r2, #1
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fe2e 	bl	8009038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a35      	ldr	r2, [pc, #212]	; (80084b8 <HAL_TIM_PWM_Start+0x1e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_TIM_PWM_Start+0x13e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a34      	ldr	r2, [pc, #208]	; (80084bc <HAL_TIM_PWM_Start+0x1ec>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_TIM_PWM_Start+0x13e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a32      	ldr	r2, [pc, #200]	; (80084c0 <HAL_TIM_PWM_Start+0x1f0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_TIM_PWM_Start+0x13e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a31      	ldr	r2, [pc, #196]	; (80084c4 <HAL_TIM_PWM_Start+0x1f4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_TIM_PWM_Start+0x13e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a2f      	ldr	r2, [pc, #188]	; (80084c8 <HAL_TIM_PWM_Start+0x1f8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d101      	bne.n	8008412 <HAL_TIM_PWM_Start+0x142>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <HAL_TIM_PWM_Start+0x144>
 8008412:	2300      	movs	r3, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008426:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <HAL_TIM_PWM_Start+0x1e8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01d      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843a:	d018      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a22      	ldr	r2, [pc, #136]	; (80084cc <HAL_TIM_PWM_Start+0x1fc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <HAL_TIM_PWM_Start+0x200>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1f      	ldr	r2, [pc, #124]	; (80084d4 <HAL_TIM_PWM_Start+0x204>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a17      	ldr	r2, [pc, #92]	; (80084bc <HAL_TIM_PWM_Start+0x1ec>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_TIM_PWM_Start+0x19e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <HAL_TIM_PWM_Start+0x1f0>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d115      	bne.n	800849a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <HAL_TIM_PWM_Start+0x208>)
 8008476:	4013      	ands	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b06      	cmp	r3, #6
 800847e:	d015      	beq.n	80084ac <HAL_TIM_PWM_Start+0x1dc>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008486:	d011      	beq.n	80084ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008498:	e008      	b.n	80084ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0201 	orr.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	e000      	b.n	80084ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40013400 	.word	0x40013400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	00010007 	.word	0x00010007

080084dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d020      	beq.n	8008540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01b      	beq.n	8008540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0202 	mvn.w	r2, #2
 8008510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f9f8 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 800852c:	e005      	b.n	800853a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9ea 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9fb 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d020      	beq.n	800858c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0204 	mvn.w	r2, #4
 800855c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f9d2 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8008578:	e005      	b.n	8008586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9c4 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f9d5 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d020      	beq.n	80085d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0208 	mvn.w	r2, #8
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2204      	movs	r2, #4
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9ac 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f99e 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9af 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d020      	beq.n	8008624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01b      	beq.n	8008624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0210 	mvn.w	r2, #16
 80085f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2208      	movs	r2, #8
 80085fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f986 	bl	800891c <HAL_TIM_IC_CaptureCallback>
 8008610:	e005      	b.n	800861e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f978 	bl	8008908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f989 	bl	8008930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0201 	mvn.w	r2, #1
 8008640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fa f8aa 	bl	800279c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00c      	beq.n	800866c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fe1c 	bl	80092a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fe14 	bl	80092b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00c      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f948 	bl	8008944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0220 	mvn.w	r2, #32
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fddc 	bl	8009290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e0ff      	b.n	80088fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b14      	cmp	r3, #20
 800870a:	f200 80f0 	bhi.w	80088ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008769 	.word	0x08008769
 8008718:	080088ef 	.word	0x080088ef
 800871c:	080088ef 	.word	0x080088ef
 8008720:	080088ef 	.word	0x080088ef
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080088ef 	.word	0x080088ef
 800872c:	080088ef 	.word	0x080088ef
 8008730:	080088ef 	.word	0x080088ef
 8008734:	080087eb 	.word	0x080087eb
 8008738:	080088ef 	.word	0x080088ef
 800873c:	080088ef 	.word	0x080088ef
 8008740:	080088ef 	.word	0x080088ef
 8008744:	0800882b 	.word	0x0800882b
 8008748:	080088ef 	.word	0x080088ef
 800874c:	080088ef 	.word	0x080088ef
 8008750:	080088ef 	.word	0x080088ef
 8008754:	0800886d 	.word	0x0800886d
 8008758:	080088ef 	.word	0x080088ef
 800875c:	080088ef 	.word	0x080088ef
 8008760:	080088ef 	.word	0x080088ef
 8008764:	080088ad 	.word	0x080088ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f98c 	bl	8008a8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0208 	orr.w	r2, r2, #8
 8008782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0204 	bic.w	r2, r2, #4
 8008792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6999      	ldr	r1, [r3, #24]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691a      	ldr	r2, [r3, #16]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	619a      	str	r2, [r3, #24]
      break;
 80087a6:	e0a5      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f9fc 	bl	8008bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6999      	ldr	r1, [r3, #24]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	021a      	lsls	r2, r3, #8
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	619a      	str	r2, [r3, #24]
      break;
 80087e8:	e084      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fa65 	bl	8008cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0208 	orr.w	r2, r2, #8
 8008804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0204 	bic.w	r2, r2, #4
 8008814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69d9      	ldr	r1, [r3, #28]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	61da      	str	r2, [r3, #28]
      break;
 8008828:	e064      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	4618      	mov	r0, r3
 8008832:	f000 facd 	bl	8008dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69da      	ldr	r2, [r3, #28]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69d9      	ldr	r1, [r3, #28]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	021a      	lsls	r2, r3, #8
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	61da      	str	r2, [r3, #28]
      break;
 800886a:	e043      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fb16 	bl	8008ea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0208 	orr.w	r2, r2, #8
 8008886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0204 	bic.w	r2, r2, #4
 8008896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088aa:	e023      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fb5a 	bl	8008f6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	021a      	lsls	r2, r3, #8
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088ec:	e002      	b.n	80088f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
      break;
 80088f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop

08008908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a40      	ldr	r2, [pc, #256]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d013      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008976:	d00f      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3d      	ldr	r2, [pc, #244]	; (8008a70 <TIM_Base_SetConfig+0x118>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3c      	ldr	r2, [pc, #240]	; (8008a74 <TIM_Base_SetConfig+0x11c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a3b      	ldr	r2, [pc, #236]	; (8008a78 <TIM_Base_SetConfig+0x120>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_Base_SetConfig+0x40>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a3a      	ldr	r2, [pc, #232]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d108      	bne.n	80089aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a2f      	ldr	r2, [pc, #188]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01f      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b8:	d01b      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a2c      	ldr	r2, [pc, #176]	; (8008a70 <TIM_Base_SetConfig+0x118>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d017      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2b      	ldr	r2, [pc, #172]	; (8008a74 <TIM_Base_SetConfig+0x11c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a2a      	ldr	r2, [pc, #168]	; (8008a78 <TIM_Base_SetConfig+0x120>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00f      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a29      	ldr	r2, [pc, #164]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a28      	ldr	r2, [pc, #160]	; (8008a80 <TIM_Base_SetConfig+0x128>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a27      	ldr	r2, [pc, #156]	; (8008a84 <TIM_Base_SetConfig+0x12c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_Base_SetConfig+0x9a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <TIM_Base_SetConfig+0x130>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d108      	bne.n	8008a04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <TIM_Base_SetConfig+0x114>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00f      	beq.n	8008a50 <TIM_Base_SetConfig+0xf8>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a12      	ldr	r2, [pc, #72]	; (8008a7c <TIM_Base_SetConfig+0x124>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00b      	beq.n	8008a50 <TIM_Base_SetConfig+0xf8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <TIM_Base_SetConfig+0x128>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d007      	beq.n	8008a50 <TIM_Base_SetConfig+0xf8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a10      	ldr	r2, [pc, #64]	; (8008a84 <TIM_Base_SetConfig+0x12c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_Base_SetConfig+0xf8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0f      	ldr	r2, [pc, #60]	; (8008a88 <TIM_Base_SetConfig+0x130>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d103      	bne.n	8008a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	615a      	str	r2, [r3, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800

08008a8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	f023 0201 	bic.w	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 0302 	bic.w	r3, r3, #2
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a2c      	ldr	r2, [pc, #176]	; (8008b98 <TIM_OC1_SetConfig+0x10c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_OC1_SetConfig+0x80>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a2b      	ldr	r2, [pc, #172]	; (8008b9c <TIM_OC1_SetConfig+0x110>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_OC1_SetConfig+0x80>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <TIM_OC1_SetConfig+0x114>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_OC1_SetConfig+0x80>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <TIM_OC1_SetConfig+0x118>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_OC1_SetConfig+0x80>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <TIM_OC1_SetConfig+0x11c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d10c      	bne.n	8008b26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f023 0308 	bic.w	r3, r3, #8
 8008b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f023 0304 	bic.w	r3, r3, #4
 8008b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <TIM_OC1_SetConfig+0x10c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_OC1_SetConfig+0xc2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	; (8008b9c <TIM_OC1_SetConfig+0x110>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_OC1_SetConfig+0xc2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <TIM_OC1_SetConfig+0x114>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_OC1_SetConfig+0xc2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a18      	ldr	r2, [pc, #96]	; (8008ba4 <TIM_OC1_SetConfig+0x118>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_OC1_SetConfig+0xc2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <TIM_OC1_SetConfig+0x11c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d111      	bne.n	8008b72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40012c00 	.word	0x40012c00
 8008b9c:	40013400 	.word	0x40013400
 8008ba0:	40014000 	.word	0x40014000
 8008ba4:	40014400 	.word	0x40014400
 8008ba8:	40014800 	.word	0x40014800

08008bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	f023 0210 	bic.w	r2, r3, #16
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f023 0320 	bic.w	r3, r3, #32
 8008bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a28      	ldr	r2, [pc, #160]	; (8008cac <TIM_OC2_SetConfig+0x100>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d003      	beq.n	8008c18 <TIM_OC2_SetConfig+0x6c>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a27      	ldr	r2, [pc, #156]	; (8008cb0 <TIM_OC2_SetConfig+0x104>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d10d      	bne.n	8008c34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <TIM_OC2_SetConfig+0x100>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00f      	beq.n	8008c5c <TIM_OC2_SetConfig+0xb0>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <TIM_OC2_SetConfig+0x104>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00b      	beq.n	8008c5c <TIM_OC2_SetConfig+0xb0>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <TIM_OC2_SetConfig+0x108>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d007      	beq.n	8008c5c <TIM_OC2_SetConfig+0xb0>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <TIM_OC2_SetConfig+0x10c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d003      	beq.n	8008c5c <TIM_OC2_SetConfig+0xb0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <TIM_OC2_SetConfig+0x110>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d113      	bne.n	8008c84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	40012c00 	.word	0x40012c00
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	40014000 	.word	0x40014000
 8008cb8:	40014400 	.word	0x40014400
 8008cbc:	40014800 	.word	0x40014800

08008cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a27      	ldr	r2, [pc, #156]	; (8008dbc <TIM_OC3_SetConfig+0xfc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x6a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a26      	ldr	r2, [pc, #152]	; (8008dc0 <TIM_OC3_SetConfig+0x100>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10d      	bne.n	8008d46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1c      	ldr	r2, [pc, #112]	; (8008dbc <TIM_OC3_SetConfig+0xfc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00f      	beq.n	8008d6e <TIM_OC3_SetConfig+0xae>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1b      	ldr	r2, [pc, #108]	; (8008dc0 <TIM_OC3_SetConfig+0x100>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00b      	beq.n	8008d6e <TIM_OC3_SetConfig+0xae>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1a      	ldr	r2, [pc, #104]	; (8008dc4 <TIM_OC3_SetConfig+0x104>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d007      	beq.n	8008d6e <TIM_OC3_SetConfig+0xae>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a19      	ldr	r2, [pc, #100]	; (8008dc8 <TIM_OC3_SetConfig+0x108>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d003      	beq.n	8008d6e <TIM_OC3_SetConfig+0xae>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <TIM_OC3_SetConfig+0x10c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d113      	bne.n	8008d96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	621a      	str	r2, [r3, #32]
}
 8008db0:	bf00      	nop
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	40012c00 	.word	0x40012c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40014400 	.word	0x40014400
 8008dcc:	40014800 	.word	0x40014800

08008dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	031b      	lsls	r3, r3, #12
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <TIM_OC4_SetConfig+0xc0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00f      	beq.n	8008e54 <TIM_OC4_SetConfig+0x84>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <TIM_OC4_SetConfig+0xc4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00b      	beq.n	8008e54 <TIM_OC4_SetConfig+0x84>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a16      	ldr	r2, [pc, #88]	; (8008e98 <TIM_OC4_SetConfig+0xc8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d007      	beq.n	8008e54 <TIM_OC4_SetConfig+0x84>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a15      	ldr	r2, [pc, #84]	; (8008e9c <TIM_OC4_SetConfig+0xcc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d003      	beq.n	8008e54 <TIM_OC4_SetConfig+0x84>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <TIM_OC4_SetConfig+0xd0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d109      	bne.n	8008e68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	019b      	lsls	r3, r3, #6
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40012c00 	.word	0x40012c00
 8008e94:	40013400 	.word	0x40013400
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40014400 	.word	0x40014400
 8008ea0:	40014800 	.word	0x40014800

08008ea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a17      	ldr	r2, [pc, #92]	; (8008f58 <TIM_OC5_SetConfig+0xb4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a16      	ldr	r2, [pc, #88]	; (8008f5c <TIM_OC5_SetConfig+0xb8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a15      	ldr	r2, [pc, #84]	; (8008f60 <TIM_OC5_SetConfig+0xbc>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a14      	ldr	r2, [pc, #80]	; (8008f64 <TIM_OC5_SetConfig+0xc0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_OC5_SetConfig+0x7a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <TIM_OC5_SetConfig+0xc4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d109      	bne.n	8008f32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40012c00 	.word	0x40012c00
 8008f5c:	40013400 	.word	0x40013400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40014400 	.word	0x40014400
 8008f68:	40014800 	.word	0x40014800

08008f6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	051b      	lsls	r3, r3, #20
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a18      	ldr	r2, [pc, #96]	; (8009024 <TIM_OC6_SetConfig+0xb8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00f      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a17      	ldr	r2, [pc, #92]	; (8009028 <TIM_OC6_SetConfig+0xbc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a16      	ldr	r2, [pc, #88]	; (800902c <TIM_OC6_SetConfig+0xc0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a15      	ldr	r2, [pc, #84]	; (8009030 <TIM_OC6_SetConfig+0xc4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x7c>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a14      	ldr	r2, [pc, #80]	; (8009034 <TIM_OC6_SetConfig+0xc8>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800

08009038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	2201      	movs	r2, #1
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a1a      	ldr	r2, [r3, #32]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	43db      	mvns	r3, r3
 800905a:	401a      	ands	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	fa01 f303 	lsl.w	r3, r1, r3
 8009070:	431a      	orrs	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009098:	2302      	movs	r3, #2
 800909a:	e068      	b.n	800916e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a2e      	ldr	r2, [pc, #184]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d108      	bne.n	80090e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1e      	ldr	r2, [pc, #120]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d01d      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800910e:	d018      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a1a      	ldr	r2, [pc, #104]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00e      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a18      	ldr	r2, [pc, #96]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d009      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a13      	ldr	r2, [pc, #76]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d004      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a14      	ldr	r2, [pc, #80]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d10c      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40000400 	.word	0x40000400
 8009188:	40000800 	.word	0x40000800
 800918c:	40000c00 	.word	0x40000c00
 8009190:	40014000 	.word	0x40014000

08009194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e065      	b.n	800927c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	041b      	lsls	r3, r3, #16
 8009226:	4313      	orrs	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a16      	ldr	r2, [pc, #88]	; (8009288 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d004      	beq.n	800923e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a14      	ldr	r2, [pc, #80]	; (800928c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d115      	bne.n	800926a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	051b      	lsls	r3, r3, #20
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	4313      	orrs	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40013400 	.word	0x40013400

08009290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e040      	b.n	8009360 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7fa f860 	bl	80033b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2224      	movs	r2, #36	; 0x24
 80092f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 feb6 	bl	800a084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fbfb 	bl	8009b14 <UART_SetConfig>
 800931e:	4603      	mov	r3, r0
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e01b      	b.n	8009360 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 ff35 	bl	800a1c8 <UART_CheckIdleState>
 800935e:	4603      	mov	r3, r0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08a      	sub	sp, #40	; 0x28
 800936c:	af02      	add	r7, sp, #8
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800937c:	2b20      	cmp	r3, #32
 800937e:	d178      	bne.n	8009472 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_UART_Transmit+0x24>
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e071      	b.n	8009474 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2221      	movs	r2, #33	; 0x21
 800939c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800939e:	f7fb fab5 	bl	800490c <HAL_GetTick>
 80093a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093bc:	d108      	bne.n	80093d0 <HAL_UART_Transmit+0x68>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d104      	bne.n	80093d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e003      	b.n	80093d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093d8:	e030      	b.n	800943c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 ff97 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e03c      	b.n	8009474 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800940c:	b292      	uxth	r2, r2
 800940e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	3302      	adds	r3, #2
 8009414:	61bb      	str	r3, [r7, #24]
 8009416:	e008      	b.n	800942a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	b292      	uxth	r2, r2
 8009422:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	3301      	adds	r3, #1
 8009428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1c8      	bne.n	80093da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2200      	movs	r2, #0
 8009450:	2140      	movs	r1, #64	; 0x40
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 ff60 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e005      	b.n	8009474 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2220      	movs	r2, #32
 800946c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	e000      	b.n	8009474 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009472:	2302      	movs	r3, #2
  }
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08a      	sub	sp, #40	; 0x28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009490:	2b20      	cmp	r3, #32
 8009492:	d137      	bne.n	8009504 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_UART_Receive_IT+0x24>
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e030      	b.n	8009506 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a18      	ldr	r2, [pc, #96]	; (8009510 <HAL_UART_Receive_IT+0x94>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d01f      	beq.n	80094f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d018      	beq.n	80094f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	613b      	str	r3, [r7, #16]
   return(result);
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	69f9      	ldr	r1, [r7, #28]
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	461a      	mov	r2, r3
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 ff74 	bl	800a3e8 <UART_Start_Receive_IT>
 8009500:	4603      	mov	r3, r0
 8009502:	e000      	b.n	8009506 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009504:	2302      	movs	r3, #2
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3728      	adds	r7, #40	; 0x28
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40008000 	.word	0x40008000

08009514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b0ba      	sub	sp, #232	; 0xe8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800953a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800953e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009542:	4013      	ands	r3, r2
 8009544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d115      	bne.n	800957c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00f      	beq.n	800957c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800955c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 82ae 	beq.w	8009ace <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
      }
      return;
 800957a:	e2a8      	b.n	8009ace <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800957c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8117 	beq.w	80097b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d106      	bne.n	80095a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009596:	4b85      	ldr	r3, [pc, #532]	; (80097ac <HAL_UART_IRQHandler+0x298>)
 8009598:	4013      	ands	r3, r2
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 810a 	beq.w	80097b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d011      	beq.n	80095d0 <HAL_UART_IRQHandler+0xbc>
 80095ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2201      	movs	r2, #1
 80095be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c6:	f043 0201 	orr.w	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d011      	beq.n	8009600 <HAL_UART_IRQHandler+0xec>
 80095dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00b      	beq.n	8009600 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2202      	movs	r2, #2
 80095ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f6:	f043 0204 	orr.w	r2, r3, #4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d011      	beq.n	8009630 <HAL_UART_IRQHandler+0x11c>
 800960c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2204      	movs	r2, #4
 800961e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009626:	f043 0202 	orr.w	r2, r3, #2
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b00      	cmp	r3, #0
 8009646:	d105      	bne.n	8009654 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800964c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2208      	movs	r2, #8
 800965a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009662:	f043 0208 	orr.w	r2, r3, #8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009674:	2b00      	cmp	r3, #0
 8009676:	d012      	beq.n	800969e <HAL_UART_IRQHandler+0x18a>
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800967c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00c      	beq.n	800969e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800968c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009694:	f043 0220 	orr.w	r2, r3, #32
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8214 	beq.w	8009ad2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80096aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d005      	beq.n	80096f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d04f      	beq.n	8009796 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 ff3c 	bl	800a574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b40      	cmp	r3, #64	; 0x40
 8009708:	d141      	bne.n	800978e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800973a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800974e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1d9      	bne.n	800970a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975a:	2b00      	cmp	r3, #0
 800975c:	d013      	beq.n	8009786 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009762:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <HAL_UART_IRQHandler+0x29c>)
 8009764:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976a:	4618      	mov	r0, r3
 800976c:	f7fc fe44 	bl	80063f8 <HAL_DMA_Abort_IT>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d017      	beq.n	80097a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009784:	e00f      	b.n	80097a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f9ae 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800978c:	e00b      	b.n	80097a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9aa 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009794:	e007      	b.n	80097a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9a6 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80097a4:	e195      	b.n	8009ad2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a6:	bf00      	nop
    return;
 80097a8:	e193      	b.n	8009ad2 <HAL_UART_IRQHandler+0x5be>
 80097aa:	bf00      	nop
 80097ac:	04000120 	.word	0x04000120
 80097b0:	0800a63d 	.word	0x0800a63d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	f040 814e 	bne.w	8009a5a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c2:	f003 0310 	and.w	r3, r3, #16
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8147 	beq.w	8009a5a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8140 	beq.w	8009a5a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2210      	movs	r2, #16
 80097e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	f040 80b8 	bne.w	8009962 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8167 	beq.w	8009ad6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800980e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009812:	429a      	cmp	r2, r3
 8009814:	f080 815f 	bcs.w	8009ad6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800981e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	f040 8086 	bne.w	8009940 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800984c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800985e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009862:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800986a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1da      	bne.n	8009834 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800988e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009890:	f023 0301 	bic.w	r3, r3, #1
 8009894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3308      	adds	r3, #8
 800989e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e1      	bne.n	800987e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800990e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009910:	f023 0310 	bic.w	r3, r3, #16
 8009914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009922:	65bb      	str	r3, [r7, #88]	; 0x58
 8009924:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e4      	bne.n	8009900 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800993a:	4618      	mov	r0, r3
 800993c:	f7fc fd1e 	bl	800637c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009952:	b29b      	uxth	r3, r3
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	b29b      	uxth	r3, r3
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f8ce 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009960:	e0b9      	b.n	8009ad6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800996e:	b29b      	uxth	r3, r3
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800997c:	b29b      	uxth	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 80ab 	beq.w	8009ada <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8009984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 80a6 	beq.w	8009ada <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800999c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099b0:	647b      	str	r3, [r7, #68]	; 0x44
 80099b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e4      	bne.n	800998e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	623b      	str	r3, [r7, #32]
   return(result);
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	f023 0301 	bic.w	r3, r3, #1
 80099da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099e8:	633a      	str	r2, [r7, #48]	; 0x30
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e3      	bne.n	80099c4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f023 0310 	bic.w	r3, r3, #16
 8009a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	69b9      	ldr	r1, [r7, #24]
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e4      	bne.n	8009a10 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f852 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a58:	e03f      	b.n	8009ada <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00e      	beq.n	8009a84 <HAL_UART_IRQHandler+0x570>
 8009a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d008      	beq.n	8009a84 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 ffd9 	bl	800aa34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a82:	e02d      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00e      	beq.n	8009aae <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d008      	beq.n	8009aae <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d01c      	beq.n	8009ade <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	4798      	blx	r3
    }
    return;
 8009aac:	e017      	b.n	8009ade <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d012      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
 8009aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00c      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fdce 	bl	800a668 <UART_EndTransmit_IT>
    return;
 8009acc:	e008      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009ace:	bf00      	nop
 8009ad0:	e006      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009ad2:	bf00      	nop
 8009ad4:	e004      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009ad6:	bf00      	nop
 8009ad8:	e002      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009ada:	bf00      	nop
 8009adc:	e000      	b.n	8009ae0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8009ade:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009ae0:	37e8      	adds	r7, #232	; 0xe8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop

08009ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b18:	b08a      	sub	sp, #40	; 0x28
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4ba4      	ldr	r3, [pc, #656]	; (8009dd4 <UART_SetConfig+0x2c0>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a99      	ldr	r2, [pc, #612]	; (8009dd8 <UART_SetConfig+0x2c4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b90:	430a      	orrs	r2, r1
 8009b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a90      	ldr	r2, [pc, #576]	; (8009ddc <UART_SetConfig+0x2c8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d126      	bne.n	8009bec <UART_SetConfig+0xd8>
 8009b9e:	4b90      	ldr	r3, [pc, #576]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d81b      	bhi.n	8009be4 <UART_SetConfig+0xd0>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0xa0>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009bc5 	.word	0x08009bc5
 8009bb8:	08009bd5 	.word	0x08009bd5
 8009bbc:	08009bcd 	.word	0x08009bcd
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bca:	e116      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bd2:	e112      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bda:	e10e      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009be2:	e10a      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bea:	e106      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a7c      	ldr	r2, [pc, #496]	; (8009de4 <UART_SetConfig+0x2d0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d138      	bne.n	8009c68 <UART_SetConfig+0x154>
 8009bf6:	4b7a      	ldr	r3, [pc, #488]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfc:	f003 030c 	and.w	r3, r3, #12
 8009c00:	2b0c      	cmp	r3, #12
 8009c02:	d82d      	bhi.n	8009c60 <UART_SetConfig+0x14c>
 8009c04:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <UART_SetConfig+0xf8>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c41 	.word	0x08009c41
 8009c10:	08009c61 	.word	0x08009c61
 8009c14:	08009c61 	.word	0x08009c61
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c51 	.word	0x08009c51
 8009c20:	08009c61 	.word	0x08009c61
 8009c24:	08009c61 	.word	0x08009c61
 8009c28:	08009c61 	.word	0x08009c61
 8009c2c:	08009c49 	.word	0x08009c49
 8009c30:	08009c61 	.word	0x08009c61
 8009c34:	08009c61 	.word	0x08009c61
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c59 	.word	0x08009c59
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c46:	e0d8      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c4e:	e0d4      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c50:	2304      	movs	r3, #4
 8009c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c56:	e0d0      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c5e:	e0cc      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c60:	2310      	movs	r3, #16
 8009c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c66:	e0c8      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a5e      	ldr	r2, [pc, #376]	; (8009de8 <UART_SetConfig+0x2d4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d125      	bne.n	8009cbe <UART_SetConfig+0x1aa>
 8009c72:	4b5b      	ldr	r3, [pc, #364]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c7c:	2b30      	cmp	r3, #48	; 0x30
 8009c7e:	d016      	beq.n	8009cae <UART_SetConfig+0x19a>
 8009c80:	2b30      	cmp	r3, #48	; 0x30
 8009c82:	d818      	bhi.n	8009cb6 <UART_SetConfig+0x1a2>
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d00a      	beq.n	8009c9e <UART_SetConfig+0x18a>
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	d814      	bhi.n	8009cb6 <UART_SetConfig+0x1a2>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <UART_SetConfig+0x182>
 8009c90:	2b10      	cmp	r3, #16
 8009c92:	d008      	beq.n	8009ca6 <UART_SetConfig+0x192>
 8009c94:	e00f      	b.n	8009cb6 <UART_SetConfig+0x1a2>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c9c:	e0ad      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ca4:	e0a9      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009ca6:	2304      	movs	r3, #4
 8009ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cac:	e0a5      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009cae:	2308      	movs	r3, #8
 8009cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cb4:	e0a1      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009cb6:	2310      	movs	r3, #16
 8009cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cbc:	e09d      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a4a      	ldr	r2, [pc, #296]	; (8009dec <UART_SetConfig+0x2d8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d125      	bne.n	8009d14 <UART_SetConfig+0x200>
 8009cc8:	4b45      	ldr	r3, [pc, #276]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8009cd4:	d016      	beq.n	8009d04 <UART_SetConfig+0x1f0>
 8009cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8009cd8:	d818      	bhi.n	8009d0c <UART_SetConfig+0x1f8>
 8009cda:	2b80      	cmp	r3, #128	; 0x80
 8009cdc:	d00a      	beq.n	8009cf4 <UART_SetConfig+0x1e0>
 8009cde:	2b80      	cmp	r3, #128	; 0x80
 8009ce0:	d814      	bhi.n	8009d0c <UART_SetConfig+0x1f8>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <UART_SetConfig+0x1d8>
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d008      	beq.n	8009cfc <UART_SetConfig+0x1e8>
 8009cea:	e00f      	b.n	8009d0c <UART_SetConfig+0x1f8>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cf2:	e082      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cfa:	e07e      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009cfc:	2304      	movs	r3, #4
 8009cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d02:	e07a      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d04:	2308      	movs	r3, #8
 8009d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d0a:	e076      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d12:	e072      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a35      	ldr	r2, [pc, #212]	; (8009df0 <UART_SetConfig+0x2dc>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d12a      	bne.n	8009d74 <UART_SetConfig+0x260>
 8009d1e:	4b30      	ldr	r3, [pc, #192]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d2c:	d01a      	beq.n	8009d64 <UART_SetConfig+0x250>
 8009d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d32:	d81b      	bhi.n	8009d6c <UART_SetConfig+0x258>
 8009d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d38:	d00c      	beq.n	8009d54 <UART_SetConfig+0x240>
 8009d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d3e:	d815      	bhi.n	8009d6c <UART_SetConfig+0x258>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <UART_SetConfig+0x238>
 8009d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d48:	d008      	beq.n	8009d5c <UART_SetConfig+0x248>
 8009d4a:	e00f      	b.n	8009d6c <UART_SetConfig+0x258>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d52:	e052      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d54:	2302      	movs	r3, #2
 8009d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d5a:	e04e      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d5c:	2304      	movs	r3, #4
 8009d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d62:	e04a      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d64:	2308      	movs	r3, #8
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d6a:	e046      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d72:	e042      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <UART_SetConfig+0x2c4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d13a      	bne.n	8009df4 <UART_SetConfig+0x2e0>
 8009d7e:	4b18      	ldr	r3, [pc, #96]	; (8009de0 <UART_SetConfig+0x2cc>)
 8009d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d8c:	d01a      	beq.n	8009dc4 <UART_SetConfig+0x2b0>
 8009d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d92:	d81b      	bhi.n	8009dcc <UART_SetConfig+0x2b8>
 8009d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d98:	d00c      	beq.n	8009db4 <UART_SetConfig+0x2a0>
 8009d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d9e:	d815      	bhi.n	8009dcc <UART_SetConfig+0x2b8>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <UART_SetConfig+0x298>
 8009da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da8:	d008      	beq.n	8009dbc <UART_SetConfig+0x2a8>
 8009daa:	e00f      	b.n	8009dcc <UART_SetConfig+0x2b8>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009db2:	e022      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dba:	e01e      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dc2:	e01a      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dca:	e016      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dd2:	e012      	b.n	8009dfa <UART_SetConfig+0x2e6>
 8009dd4:	efff69f3 	.word	0xefff69f3
 8009dd8:	40008000 	.word	0x40008000
 8009ddc:	40013800 	.word	0x40013800
 8009de0:	40021000 	.word	0x40021000
 8009de4:	40004400 	.word	0x40004400
 8009de8:	40004800 	.word	0x40004800
 8009dec:	40004c00 	.word	0x40004c00
 8009df0:	40005000 	.word	0x40005000
 8009df4:	2310      	movs	r3, #16
 8009df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a9f      	ldr	r2, [pc, #636]	; (800a07c <UART_SetConfig+0x568>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d17a      	bne.n	8009efa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	d824      	bhi.n	8009e56 <UART_SetConfig+0x342>
 8009e0c:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <UART_SetConfig+0x300>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e57 	.word	0x08009e57
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e57 	.word	0x08009e57
 8009e24:	08009e47 	.word	0x08009e47
 8009e28:	08009e57 	.word	0x08009e57
 8009e2c:	08009e57 	.word	0x08009e57
 8009e30:	08009e57 	.word	0x08009e57
 8009e34:	08009e4f 	.word	0x08009e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e38:	f7fd fbe2 	bl	8007600 <HAL_RCC_GetPCLK1Freq>
 8009e3c:	61f8      	str	r0, [r7, #28]
        break;
 8009e3e:	e010      	b.n	8009e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e40:	4b8f      	ldr	r3, [pc, #572]	; (800a080 <UART_SetConfig+0x56c>)
 8009e42:	61fb      	str	r3, [r7, #28]
        break;
 8009e44:	e00d      	b.n	8009e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e46:	f7fd fb43 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 8009e4a:	61f8      	str	r0, [r7, #28]
        break;
 8009e4c:	e009      	b.n	8009e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e52:	61fb      	str	r3, [r7, #28]
        break;
 8009e54:	e005      	b.n	8009e62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 80fb 	beq.w	800a060 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	4413      	add	r3, r2
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d305      	bcc.n	8009e86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d903      	bls.n	8009e8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009e8c:	e0e8      	b.n	800a060 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	2200      	movs	r2, #0
 8009e92:	461c      	mov	r4, r3
 8009e94:	4615      	mov	r5, r2
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	022b      	lsls	r3, r5, #8
 8009ea0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009ea4:	0222      	lsls	r2, r4, #8
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	6849      	ldr	r1, [r1, #4]
 8009eaa:	0849      	lsrs	r1, r1, #1
 8009eac:	2000      	movs	r0, #0
 8009eae:	4688      	mov	r8, r1
 8009eb0:	4681      	mov	r9, r0
 8009eb2:	eb12 0a08 	adds.w	sl, r2, r8
 8009eb6:	eb43 0b09 	adc.w	fp, r3, r9
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	603b      	str	r3, [r7, #0]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec8:	4650      	mov	r0, sl
 8009eca:	4659      	mov	r1, fp
 8009ecc:	f7f6 fe8c 	bl	8000be8 <__aeabi_uldivmod>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ede:	d308      	bcc.n	8009ef2 <UART_SetConfig+0x3de>
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee6:	d204      	bcs.n	8009ef2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	60da      	str	r2, [r3, #12]
 8009ef0:	e0b6      	b.n	800a060 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ef8:	e0b2      	b.n	800a060 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f02:	d15e      	bne.n	8009fc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d828      	bhi.n	8009f5e <UART_SetConfig+0x44a>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <UART_SetConfig+0x400>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	08009f5f 	.word	0x08009f5f
 8009f24:	08009f4f 	.word	0x08009f4f
 8009f28:	08009f5f 	.word	0x08009f5f
 8009f2c:	08009f5f 	.word	0x08009f5f
 8009f30:	08009f5f 	.word	0x08009f5f
 8009f34:	08009f57 	.word	0x08009f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f38:	f7fd fb62 	bl	8007600 <HAL_RCC_GetPCLK1Freq>
 8009f3c:	61f8      	str	r0, [r7, #28]
        break;
 8009f3e:	e014      	b.n	8009f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f40:	f7fd fb74 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 8009f44:	61f8      	str	r0, [r7, #28]
        break;
 8009f46:	e010      	b.n	8009f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f48:	4b4d      	ldr	r3, [pc, #308]	; (800a080 <UART_SetConfig+0x56c>)
 8009f4a:	61fb      	str	r3, [r7, #28]
        break;
 8009f4c:	e00d      	b.n	8009f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4e:	f7fd fabf 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 8009f52:	61f8      	str	r0, [r7, #28]
        break;
 8009f54:	e009      	b.n	8009f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5a:	61fb      	str	r3, [r7, #28]
        break;
 8009f5c:	e005      	b.n	8009f6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d077      	beq.n	800a060 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	005a      	lsls	r2, r3, #1
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	085b      	lsrs	r3, r3, #1
 8009f7a:	441a      	add	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b0f      	cmp	r3, #15
 8009f8a:	d916      	bls.n	8009fba <UART_SetConfig+0x4a6>
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f92:	d212      	bcs.n	8009fba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f023 030f 	bic.w	r3, r3, #15
 8009f9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	8afb      	ldrh	r3, [r7, #22]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	8afa      	ldrh	r2, [r7, #22]
 8009fb6:	60da      	str	r2, [r3, #12]
 8009fb8:	e052      	b.n	800a060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009fc0:	e04e      	b.n	800a060 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fc6:	2b08      	cmp	r3, #8
 8009fc8:	d827      	bhi.n	800a01a <UART_SetConfig+0x506>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x4bc>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	08009ffd 	.word	0x08009ffd
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	0800a01b 	.word	0x0800a01b
 8009fe0:	0800a00b 	.word	0x0800a00b
 8009fe4:	0800a01b 	.word	0x0800a01b
 8009fe8:	0800a01b 	.word	0x0800a01b
 8009fec:	0800a01b 	.word	0x0800a01b
 8009ff0:	0800a013 	.word	0x0800a013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ff4:	f7fd fb04 	bl	8007600 <HAL_RCC_GetPCLK1Freq>
 8009ff8:	61f8      	str	r0, [r7, #28]
        break;
 8009ffa:	e014      	b.n	800a026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ffc:	f7fd fb16 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 800a000:	61f8      	str	r0, [r7, #28]
        break;
 800a002:	e010      	b.n	800a026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a004:	4b1e      	ldr	r3, [pc, #120]	; (800a080 <UART_SetConfig+0x56c>)
 800a006:	61fb      	str	r3, [r7, #28]
        break;
 800a008:	e00d      	b.n	800a026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a00a:	f7fd fa61 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800a00e:	61f8      	str	r0, [r7, #28]
        break;
 800a010:	e009      	b.n	800a026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a016:	61fb      	str	r3, [r7, #28]
        break;
 800a018:	e005      	b.n	800a026 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a024:	bf00      	nop
    }

    if (pclk != 0U)
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d019      	beq.n	800a060 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	085a      	lsrs	r2, r3, #1
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	441a      	add	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b0f      	cmp	r3, #15
 800a044:	d909      	bls.n	800a05a <UART_SetConfig+0x546>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a04c:	d205      	bcs.n	800a05a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60da      	str	r2, [r3, #12]
 800a058:	e002      	b.n	800a060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a06c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a070:	4618      	mov	r0, r3
 800a072:	3728      	adds	r7, #40	; 0x28
 800a074:	46bd      	mov	sp, r7
 800a076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a07a:	bf00      	nop
 800a07c:	40008000 	.word	0x40008000
 800a080:	00f42400 	.word	0x00f42400

0800a084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01a      	beq.n	800a19a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a182:	d10a      	bne.n	800a19a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b098      	sub	sp, #96	; 0x60
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1d8:	f7fa fb98 	bl	800490c <HAL_GetTick>
 800a1dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0308 	and.w	r3, r3, #8
 800a1e8:	2b08      	cmp	r3, #8
 800a1ea:	d12e      	bne.n	800a24a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f88c 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d021      	beq.n	800a24a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a21a:	653b      	str	r3, [r7, #80]	; 0x50
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a224:	647b      	str	r3, [r7, #68]	; 0x44
 800a226:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a22a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e6      	bne.n	800a206 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e062      	b.n	800a310 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b04      	cmp	r3, #4
 800a256:	d149      	bne.n	800a2ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a260:	2200      	movs	r2, #0
 800a262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f856 	bl	800a318 <UART_WaitOnFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d03c      	beq.n	800a2ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	623b      	str	r3, [r7, #32]
   return(result);
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a286:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a290:	633b      	str	r3, [r7, #48]	; 0x30
 800a292:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e6      	bne.n	800a272 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0301 	bic.w	r3, r3, #1
 800a2ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c4:	61fa      	str	r2, [r7, #28]
 800a2c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	69b9      	ldr	r1, [r7, #24]
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e5      	bne.n	800a2a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e011      	b.n	800a310 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3758      	adds	r7, #88	; 0x58
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a328:	e049      	b.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d045      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a332:	f7fa faeb 	bl	800490c <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	69ba      	ldr	r2, [r7, #24]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d302      	bcc.n	800a348 <UART_WaitOnFlagUntilTimeout+0x30>
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e048      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	d031      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b08      	cmp	r3, #8
 800a366:	d110      	bne.n	800a38a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2208      	movs	r2, #8
 800a36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f8ff 	bl	800a574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2208      	movs	r2, #8
 800a37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e029      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a398:	d111      	bne.n	800a3be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f8e5 	bl	800a574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e00f      	b.n	800a3de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	bf0c      	ite	eq
 800a3ce:	2301      	moveq	r3, #1
 800a3d0:	2300      	movne	r3, #0
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d0a6      	beq.n	800a32a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b097      	sub	sp, #92	; 0x5c
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	88fa      	ldrh	r2, [r7, #6]
 800a408:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41a:	d10e      	bne.n	800a43a <UART_Start_Receive_IT+0x52>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d105      	bne.n	800a430 <UART_Start_Receive_IT+0x48>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a42a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a42e:	e02d      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	22ff      	movs	r2, #255	; 0xff
 800a434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a438:	e028      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10d      	bne.n	800a45e <UART_Start_Receive_IT+0x76>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d104      	bne.n	800a454 <UART_Start_Receive_IT+0x6c>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	22ff      	movs	r2, #255	; 0xff
 800a44e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a452:	e01b      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	227f      	movs	r2, #127	; 0x7f
 800a458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a45c:	e016      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a466:	d10d      	bne.n	800a484 <UART_Start_Receive_IT+0x9c>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <UART_Start_Receive_IT+0x92>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	227f      	movs	r2, #127	; 0x7f
 800a474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a478:	e008      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	223f      	movs	r2, #63	; 0x3f
 800a47e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a482:	e003      	b.n	800a48c <UART_Start_Receive_IT+0xa4>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2222      	movs	r2, #34	; 0x22
 800a498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	f043 0301 	orr.w	r3, r3, #1
 800a4b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4bc:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e5      	bne.n	800a49c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d8:	d107      	bne.n	800a4ea <UART_Start_Receive_IT+0x102>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4a21      	ldr	r2, [pc, #132]	; (800a56c <UART_Start_Receive_IT+0x184>)
 800a4e6:	669a      	str	r2, [r3, #104]	; 0x68
 800a4e8:	e002      	b.n	800a4f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4a20      	ldr	r2, [pc, #128]	; (800a570 <UART_Start_Receive_IT+0x188>)
 800a4ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d019      	beq.n	800a52c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a50c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a516:	637b      	str	r3, [r7, #52]	; 0x34
 800a518:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a51c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e6      	bne.n	800a4f8 <UART_Start_Receive_IT+0x110>
 800a52a:	e018      	b.n	800a55e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	613b      	str	r3, [r7, #16]
   return(result);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f043 0320 	orr.w	r3, r3, #32
 800a540:	653b      	str	r3, [r7, #80]	; 0x50
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a54a:	623b      	str	r3, [r7, #32]
 800a54c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	69f9      	ldr	r1, [r7, #28]
 800a550:	6a3a      	ldr	r2, [r7, #32]
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	61bb      	str	r3, [r7, #24]
   return(result);
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e6      	bne.n	800a52c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	375c      	adds	r7, #92	; 0x5c
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	0800a879 	.word	0x0800a879
 800a570:	0800a6bd 	.word	0x0800a6bd

0800a574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b095      	sub	sp, #84	; 0x54
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a590:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40
 800a59c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e6      	bne.n	800a57c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	f023 0301 	bic.w	r3, r3, #1
 800a5c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d118      	bne.n	800a61c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f023 0310 	bic.w	r3, r3, #16
 800a5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6979      	ldr	r1, [r7, #20]
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	613b      	str	r3, [r7, #16]
   return(result);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e6      	bne.n	800a5ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a630:	bf00      	nop
 800a632:	3754      	adds	r7, #84	; 0x54
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fa44 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a660:	bf00      	nop
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a684:	61fb      	str	r3, [r7, #28]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	61bb      	str	r3, [r7, #24]
 800a690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	6979      	ldr	r1, [r7, #20]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	613b      	str	r3, [r7, #16]
   return(result);
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e6      	bne.n	800a670 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7f6 fdd2 	bl	8001258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b4:	bf00      	nop
 800a6b6:	3720      	adds	r7, #32
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b09c      	sub	sp, #112	; 0x70
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d4:	2b22      	cmp	r3, #34	; 0x22
 800a6d6:	f040 80be 	bne.w	800a856 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a6e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a6e8:	b2d9      	uxtb	r1, r3
 800a6ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f4:	400a      	ands	r2, r1
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	3b01      	subs	r3, #1
 800a70e:	b29a      	uxth	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 80a3 	bne.w	800a86a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a738:	66bb      	str	r3, [r7, #104]	; 0x68
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a742:	65bb      	str	r3, [r7, #88]	; 0x58
 800a744:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e6      	bne.n	800a724 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	f023 0301 	bic.w	r3, r3, #1
 800a76c:	667b      	str	r3, [r7, #100]	; 0x64
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a776:	647a      	str	r2, [r7, #68]	; 0x44
 800a778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a77c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e5      	bne.n	800a756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a34      	ldr	r2, [pc, #208]	; (800a874 <UART_RxISR_8BIT+0x1b8>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d01f      	beq.n	800a7e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d018      	beq.n	800a7e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	e853 3f00 	ldrex	r3, [r3]
 800a7c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7ca:	663b      	str	r3, [r7, #96]	; 0x60
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e6      	bne.n	800a7b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d12e      	bne.n	800a84e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	60fb      	str	r3, [r7, #12]
   return(result);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0310 	bic.w	r3, r3, #16
 800a80a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a814:	61fb      	str	r3, [r7, #28]
 800a816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	69b9      	ldr	r1, [r7, #24]
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	617b      	str	r3, [r7, #20]
   return(result);
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e6      	bne.n	800a7f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	2b10      	cmp	r3, #16
 800a834:	d103      	bne.n	800a83e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2210      	movs	r2, #16
 800a83c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff f958 	bl	8009afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a84c:	e00d      	b.n	800a86a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7f6 fcb6 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 800a854:	e009      	b.n	800a86a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	8b1b      	ldrh	r3, [r3, #24]
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0208 	orr.w	r2, r2, #8
 800a866:	b292      	uxth	r2, r2
 800a868:	831a      	strh	r2, [r3, #24]
}
 800a86a:	bf00      	nop
 800a86c:	3770      	adds	r7, #112	; 0x70
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40008000 	.word	0x40008000

0800a878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b09c      	sub	sp, #112	; 0x70
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a890:	2b22      	cmp	r3, #34	; 0x22
 800a892:	f040 80be 	bne.w	800aa12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a89c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a8a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a8aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ba:	1c9a      	adds	r2, r3, #2
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 80a3 	bne.w	800aa26 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a900:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e6      	bne.n	800a8e0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3308      	adds	r3, #8
 800a918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	f023 0301 	bic.w	r3, r3, #1
 800a928:	663b      	str	r3, [r7, #96]	; 0x60
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3308      	adds	r3, #8
 800a930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a932:	643a      	str	r2, [r7, #64]	; 0x40
 800a934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e5      	bne.n	800a912 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a34      	ldr	r2, [pc, #208]	; (800aa30 <UART_RxISR_16BIT+0x1b8>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d01f      	beq.n	800a9a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d018      	beq.n	800a9a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a986:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a990:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a992:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e6      	bne.n	800a972 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d12e      	bne.n	800aa0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f023 0310 	bic.w	r3, r3, #16
 800a9c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9d0:	61bb      	str	r3, [r7, #24]
 800a9d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6979      	ldr	r1, [r7, #20]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e6      	bne.n	800a9b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	f003 0310 	and.w	r3, r3, #16
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d103      	bne.n	800a9fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2210      	movs	r2, #16
 800a9f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff f87a 	bl	8009afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa08:	e00d      	b.n	800aa26 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7f6 fbd8 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 800aa10:	e009      	b.n	800aa26 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	8b1b      	ldrh	r3, [r3, #24]
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0208 	orr.w	r2, r2, #8
 800aa22:	b292      	uxth	r2, r2
 800aa24:	831a      	strh	r2, [r3, #24]
}
 800aa26:	bf00      	nop
 800aa28:	3770      	adds	r7, #112	; 0x70
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	40008000 	.word	0x40008000

0800aa34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <atof>:
 800aa48:	2100      	movs	r1, #0
 800aa4a:	f000 be0d 	b.w	800b668 <strtod>

0800aa4e <sulp>:
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	ec45 4b10 	vmov	d0, r4, r5
 800aa58:	4616      	mov	r6, r2
 800aa5a:	f003 fa99 	bl	800df90 <__ulp>
 800aa5e:	ec51 0b10 	vmov	r0, r1, d0
 800aa62:	b17e      	cbz	r6, 800aa84 <sulp+0x36>
 800aa64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dd09      	ble.n	800aa84 <sulp+0x36>
 800aa70:	051b      	lsls	r3, r3, #20
 800aa72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa76:	2400      	movs	r4, #0
 800aa78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa88 <_strtod_l>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b02 	vpush	{d8}
 800aa90:	b09b      	sub	sp, #108	; 0x6c
 800aa92:	4604      	mov	r4, r0
 800aa94:	9213      	str	r2, [sp, #76]	; 0x4c
 800aa96:	2200      	movs	r2, #0
 800aa98:	9216      	str	r2, [sp, #88]	; 0x58
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	f04f 0800 	mov.w	r8, #0
 800aaa0:	f04f 0900 	mov.w	r9, #0
 800aaa4:	460a      	mov	r2, r1
 800aaa6:	9215      	str	r2, [sp, #84]	; 0x54
 800aaa8:	7811      	ldrb	r1, [r2, #0]
 800aaaa:	292b      	cmp	r1, #43	; 0x2b
 800aaac:	d04c      	beq.n	800ab48 <_strtod_l+0xc0>
 800aaae:	d83a      	bhi.n	800ab26 <_strtod_l+0x9e>
 800aab0:	290d      	cmp	r1, #13
 800aab2:	d834      	bhi.n	800ab1e <_strtod_l+0x96>
 800aab4:	2908      	cmp	r1, #8
 800aab6:	d834      	bhi.n	800ab22 <_strtod_l+0x9a>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	d03d      	beq.n	800ab38 <_strtod_l+0xb0>
 800aabc:	2200      	movs	r2, #0
 800aabe:	920a      	str	r2, [sp, #40]	; 0x28
 800aac0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aac2:	7832      	ldrb	r2, [r6, #0]
 800aac4:	2a30      	cmp	r2, #48	; 0x30
 800aac6:	f040 80b4 	bne.w	800ac32 <_strtod_l+0x1aa>
 800aaca:	7872      	ldrb	r2, [r6, #1]
 800aacc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aad0:	2a58      	cmp	r2, #88	; 0x58
 800aad2:	d170      	bne.n	800abb6 <_strtod_l+0x12e>
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	ab16      	add	r3, sp, #88	; 0x58
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4a8e      	ldr	r2, [pc, #568]	; (800ad18 <_strtod_l+0x290>)
 800aae0:	ab17      	add	r3, sp, #92	; 0x5c
 800aae2:	a915      	add	r1, sp, #84	; 0x54
 800aae4:	4620      	mov	r0, r4
 800aae6:	f002 fb31 	bl	800d14c <__gethex>
 800aaea:	f010 070f 	ands.w	r7, r0, #15
 800aaee:	4605      	mov	r5, r0
 800aaf0:	d005      	beq.n	800aafe <_strtod_l+0x76>
 800aaf2:	2f06      	cmp	r7, #6
 800aaf4:	d12a      	bne.n	800ab4c <_strtod_l+0xc4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9615      	str	r6, [sp, #84]	; 0x54
 800aafc:	930a      	str	r3, [sp, #40]	; 0x28
 800aafe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 857f 	bne.w	800b604 <_strtod_l+0xb7c>
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	b1db      	cbz	r3, 800ab42 <_strtod_l+0xba>
 800ab0a:	4642      	mov	r2, r8
 800ab0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab10:	ec43 2b10 	vmov	d0, r2, r3
 800ab14:	b01b      	add	sp, #108	; 0x6c
 800ab16:	ecbd 8b02 	vpop	{d8}
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	2920      	cmp	r1, #32
 800ab20:	d1cc      	bne.n	800aabc <_strtod_l+0x34>
 800ab22:	3201      	adds	r2, #1
 800ab24:	e7bf      	b.n	800aaa6 <_strtod_l+0x1e>
 800ab26:	292d      	cmp	r1, #45	; 0x2d
 800ab28:	d1c8      	bne.n	800aabc <_strtod_l+0x34>
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	910a      	str	r1, [sp, #40]	; 0x28
 800ab2e:	1c51      	adds	r1, r2, #1
 800ab30:	9115      	str	r1, [sp, #84]	; 0x54
 800ab32:	7852      	ldrb	r2, [r2, #1]
 800ab34:	2a00      	cmp	r2, #0
 800ab36:	d1c3      	bne.n	800aac0 <_strtod_l+0x38>
 800ab38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab3a:	9515      	str	r5, [sp, #84]	; 0x54
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 855f 	bne.w	800b600 <_strtod_l+0xb78>
 800ab42:	4642      	mov	r2, r8
 800ab44:	464b      	mov	r3, r9
 800ab46:	e7e3      	b.n	800ab10 <_strtod_l+0x88>
 800ab48:	2100      	movs	r1, #0
 800ab4a:	e7ef      	b.n	800ab2c <_strtod_l+0xa4>
 800ab4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab4e:	b13a      	cbz	r2, 800ab60 <_strtod_l+0xd8>
 800ab50:	2135      	movs	r1, #53	; 0x35
 800ab52:	a818      	add	r0, sp, #96	; 0x60
 800ab54:	f003 fb19 	bl	800e18a <__copybits>
 800ab58:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f002 feec 	bl	800d938 <_Bfree>
 800ab60:	3f01      	subs	r7, #1
 800ab62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab64:	2f04      	cmp	r7, #4
 800ab66:	d806      	bhi.n	800ab76 <_strtod_l+0xee>
 800ab68:	e8df f007 	tbb	[pc, r7]
 800ab6c:	201d0314 	.word	0x201d0314
 800ab70:	14          	.byte	0x14
 800ab71:	00          	.byte	0x00
 800ab72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ab76:	05e9      	lsls	r1, r5, #23
 800ab78:	bf48      	it	mi
 800ab7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ab7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab82:	0d1b      	lsrs	r3, r3, #20
 800ab84:	051b      	lsls	r3, r3, #20
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1b9      	bne.n	800aafe <_strtod_l+0x76>
 800ab8a:	f001 fb6d 	bl	800c268 <__errno>
 800ab8e:	2322      	movs	r3, #34	; 0x22
 800ab90:	6003      	str	r3, [r0, #0]
 800ab92:	e7b4      	b.n	800aafe <_strtod_l+0x76>
 800ab94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ab98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aba0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aba4:	e7e7      	b.n	800ab76 <_strtod_l+0xee>
 800aba6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad20 <_strtod_l+0x298>
 800abaa:	e7e4      	b.n	800ab76 <_strtod_l+0xee>
 800abac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abb0:	f04f 38ff 	mov.w	r8, #4294967295
 800abb4:	e7df      	b.n	800ab76 <_strtod_l+0xee>
 800abb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	9215      	str	r2, [sp, #84]	; 0x54
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	2b30      	cmp	r3, #48	; 0x30
 800abc0:	d0f9      	beq.n	800abb6 <_strtod_l+0x12e>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d09b      	beq.n	800aafe <_strtod_l+0x76>
 800abc6:	2301      	movs	r3, #1
 800abc8:	f04f 0a00 	mov.w	sl, #0
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abd6:	46d3      	mov	fp, sl
 800abd8:	220a      	movs	r2, #10
 800abda:	9815      	ldr	r0, [sp, #84]	; 0x54
 800abdc:	7806      	ldrb	r6, [r0, #0]
 800abde:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800abe2:	b2d9      	uxtb	r1, r3
 800abe4:	2909      	cmp	r1, #9
 800abe6:	d926      	bls.n	800ac36 <_strtod_l+0x1ae>
 800abe8:	494c      	ldr	r1, [pc, #304]	; (800ad1c <_strtod_l+0x294>)
 800abea:	2201      	movs	r2, #1
 800abec:	f001 fac9 	bl	800c182 <strncmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d030      	beq.n	800ac56 <_strtod_l+0x1ce>
 800abf4:	2000      	movs	r0, #0
 800abf6:	4632      	mov	r2, r6
 800abf8:	9005      	str	r0, [sp, #20]
 800abfa:	465e      	mov	r6, fp
 800abfc:	4603      	mov	r3, r0
 800abfe:	2a65      	cmp	r2, #101	; 0x65
 800ac00:	d001      	beq.n	800ac06 <_strtod_l+0x17e>
 800ac02:	2a45      	cmp	r2, #69	; 0x45
 800ac04:	d113      	bne.n	800ac2e <_strtod_l+0x1a6>
 800ac06:	b91e      	cbnz	r6, 800ac10 <_strtod_l+0x188>
 800ac08:	9a04      	ldr	r2, [sp, #16]
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	d094      	beq.n	800ab38 <_strtod_l+0xb0>
 800ac0e:	2600      	movs	r6, #0
 800ac10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac12:	1c6a      	adds	r2, r5, #1
 800ac14:	9215      	str	r2, [sp, #84]	; 0x54
 800ac16:	786a      	ldrb	r2, [r5, #1]
 800ac18:	2a2b      	cmp	r2, #43	; 0x2b
 800ac1a:	d074      	beq.n	800ad06 <_strtod_l+0x27e>
 800ac1c:	2a2d      	cmp	r2, #45	; 0x2d
 800ac1e:	d078      	beq.n	800ad12 <_strtod_l+0x28a>
 800ac20:	f04f 0c00 	mov.w	ip, #0
 800ac24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac28:	2909      	cmp	r1, #9
 800ac2a:	d97f      	bls.n	800ad2c <_strtod_l+0x2a4>
 800ac2c:	9515      	str	r5, [sp, #84]	; 0x54
 800ac2e:	2700      	movs	r7, #0
 800ac30:	e09e      	b.n	800ad70 <_strtod_l+0x2e8>
 800ac32:	2300      	movs	r3, #0
 800ac34:	e7c8      	b.n	800abc8 <_strtod_l+0x140>
 800ac36:	f1bb 0f08 	cmp.w	fp, #8
 800ac3a:	bfd8      	it	le
 800ac3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac3e:	f100 0001 	add.w	r0, r0, #1
 800ac42:	bfda      	itte	le
 800ac44:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac48:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ac4e:	f10b 0b01 	add.w	fp, fp, #1
 800ac52:	9015      	str	r0, [sp, #84]	; 0x54
 800ac54:	e7c1      	b.n	800abda <_strtod_l+0x152>
 800ac56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	9215      	str	r2, [sp, #84]	; 0x54
 800ac5c:	785a      	ldrb	r2, [r3, #1]
 800ac5e:	f1bb 0f00 	cmp.w	fp, #0
 800ac62:	d037      	beq.n	800acd4 <_strtod_l+0x24c>
 800ac64:	9005      	str	r0, [sp, #20]
 800ac66:	465e      	mov	r6, fp
 800ac68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d912      	bls.n	800ac96 <_strtod_l+0x20e>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e7c4      	b.n	800abfe <_strtod_l+0x176>
 800ac74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	9215      	str	r2, [sp, #84]	; 0x54
 800ac7a:	785a      	ldrb	r2, [r3, #1]
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	2a30      	cmp	r2, #48	; 0x30
 800ac80:	d0f8      	beq.n	800ac74 <_strtod_l+0x1ec>
 800ac82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	f200 84c1 	bhi.w	800b60e <_strtod_l+0xb86>
 800ac8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac8e:	9005      	str	r0, [sp, #20]
 800ac90:	2000      	movs	r0, #0
 800ac92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac94:	4606      	mov	r6, r0
 800ac96:	3a30      	subs	r2, #48	; 0x30
 800ac98:	f100 0301 	add.w	r3, r0, #1
 800ac9c:	d014      	beq.n	800acc8 <_strtod_l+0x240>
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	4419      	add	r1, r3
 800aca2:	9105      	str	r1, [sp, #20]
 800aca4:	4633      	mov	r3, r6
 800aca6:	eb00 0c06 	add.w	ip, r0, r6
 800acaa:	210a      	movs	r1, #10
 800acac:	4563      	cmp	r3, ip
 800acae:	d113      	bne.n	800acd8 <_strtod_l+0x250>
 800acb0:	1833      	adds	r3, r6, r0
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	f106 0601 	add.w	r6, r6, #1
 800acb8:	4406      	add	r6, r0
 800acba:	dc1a      	bgt.n	800acf2 <_strtod_l+0x26a>
 800acbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acbe:	230a      	movs	r3, #10
 800acc0:	fb03 2301 	mla	r3, r3, r1, r2
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	2300      	movs	r3, #0
 800acc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acca:	1c51      	adds	r1, r2, #1
 800accc:	9115      	str	r1, [sp, #84]	; 0x54
 800acce:	7852      	ldrb	r2, [r2, #1]
 800acd0:	4618      	mov	r0, r3
 800acd2:	e7c9      	b.n	800ac68 <_strtod_l+0x1e0>
 800acd4:	4658      	mov	r0, fp
 800acd6:	e7d2      	b.n	800ac7e <_strtod_l+0x1f6>
 800acd8:	2b08      	cmp	r3, #8
 800acda:	f103 0301 	add.w	r3, r3, #1
 800acde:	dc03      	bgt.n	800ace8 <_strtod_l+0x260>
 800ace0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ace2:	434f      	muls	r7, r1
 800ace4:	9709      	str	r7, [sp, #36]	; 0x24
 800ace6:	e7e1      	b.n	800acac <_strtod_l+0x224>
 800ace8:	2b10      	cmp	r3, #16
 800acea:	bfd8      	it	le
 800acec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800acf0:	e7dc      	b.n	800acac <_strtod_l+0x224>
 800acf2:	2e10      	cmp	r6, #16
 800acf4:	bfdc      	itt	le
 800acf6:	230a      	movle	r3, #10
 800acf8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800acfc:	e7e3      	b.n	800acc6 <_strtod_l+0x23e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	2301      	movs	r3, #1
 800ad04:	e780      	b.n	800ac08 <_strtod_l+0x180>
 800ad06:	f04f 0c00 	mov.w	ip, #0
 800ad0a:	1caa      	adds	r2, r5, #2
 800ad0c:	9215      	str	r2, [sp, #84]	; 0x54
 800ad0e:	78aa      	ldrb	r2, [r5, #2]
 800ad10:	e788      	b.n	800ac24 <_strtod_l+0x19c>
 800ad12:	f04f 0c01 	mov.w	ip, #1
 800ad16:	e7f8      	b.n	800ad0a <_strtod_l+0x282>
 800ad18:	0800ed8c 	.word	0x0800ed8c
 800ad1c:	0800ed88 	.word	0x0800ed88
 800ad20:	7ff00000 	.word	0x7ff00000
 800ad24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad26:	1c51      	adds	r1, r2, #1
 800ad28:	9115      	str	r1, [sp, #84]	; 0x54
 800ad2a:	7852      	ldrb	r2, [r2, #1]
 800ad2c:	2a30      	cmp	r2, #48	; 0x30
 800ad2e:	d0f9      	beq.n	800ad24 <_strtod_l+0x29c>
 800ad30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad34:	2908      	cmp	r1, #8
 800ad36:	f63f af7a 	bhi.w	800ac2e <_strtod_l+0x1a6>
 800ad3a:	3a30      	subs	r2, #48	; 0x30
 800ad3c:	9208      	str	r2, [sp, #32]
 800ad3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad40:	920c      	str	r2, [sp, #48]	; 0x30
 800ad42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad44:	1c57      	adds	r7, r2, #1
 800ad46:	9715      	str	r7, [sp, #84]	; 0x54
 800ad48:	7852      	ldrb	r2, [r2, #1]
 800ad4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad4e:	f1be 0f09 	cmp.w	lr, #9
 800ad52:	d938      	bls.n	800adc6 <_strtod_l+0x33e>
 800ad54:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad56:	1a7f      	subs	r7, r7, r1
 800ad58:	2f08      	cmp	r7, #8
 800ad5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ad5e:	dc03      	bgt.n	800ad68 <_strtod_l+0x2e0>
 800ad60:	9908      	ldr	r1, [sp, #32]
 800ad62:	428f      	cmp	r7, r1
 800ad64:	bfa8      	it	ge
 800ad66:	460f      	movge	r7, r1
 800ad68:	f1bc 0f00 	cmp.w	ip, #0
 800ad6c:	d000      	beq.n	800ad70 <_strtod_l+0x2e8>
 800ad6e:	427f      	negs	r7, r7
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d14f      	bne.n	800ae14 <_strtod_l+0x38c>
 800ad74:	9904      	ldr	r1, [sp, #16]
 800ad76:	4301      	orrs	r1, r0
 800ad78:	f47f aec1 	bne.w	800aafe <_strtod_l+0x76>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f47f aedb 	bne.w	800ab38 <_strtod_l+0xb0>
 800ad82:	2a69      	cmp	r2, #105	; 0x69
 800ad84:	d029      	beq.n	800adda <_strtod_l+0x352>
 800ad86:	dc26      	bgt.n	800add6 <_strtod_l+0x34e>
 800ad88:	2a49      	cmp	r2, #73	; 0x49
 800ad8a:	d026      	beq.n	800adda <_strtod_l+0x352>
 800ad8c:	2a4e      	cmp	r2, #78	; 0x4e
 800ad8e:	f47f aed3 	bne.w	800ab38 <_strtod_l+0xb0>
 800ad92:	499b      	ldr	r1, [pc, #620]	; (800b000 <_strtod_l+0x578>)
 800ad94:	a815      	add	r0, sp, #84	; 0x54
 800ad96:	f002 fc19 	bl	800d5cc <__match>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f43f aecc 	beq.w	800ab38 <_strtod_l+0xb0>
 800ada0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b28      	cmp	r3, #40	; 0x28
 800ada6:	d12f      	bne.n	800ae08 <_strtod_l+0x380>
 800ada8:	4996      	ldr	r1, [pc, #600]	; (800b004 <_strtod_l+0x57c>)
 800adaa:	aa18      	add	r2, sp, #96	; 0x60
 800adac:	a815      	add	r0, sp, #84	; 0x54
 800adae:	f002 fc21 	bl	800d5f4 <__hexnan>
 800adb2:	2805      	cmp	r0, #5
 800adb4:	d128      	bne.n	800ae08 <_strtod_l+0x380>
 800adb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800adbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800adc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800adc4:	e69b      	b.n	800aafe <_strtod_l+0x76>
 800adc6:	9f08      	ldr	r7, [sp, #32]
 800adc8:	210a      	movs	r1, #10
 800adca:	fb01 2107 	mla	r1, r1, r7, r2
 800adce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800add2:	9208      	str	r2, [sp, #32]
 800add4:	e7b5      	b.n	800ad42 <_strtod_l+0x2ba>
 800add6:	2a6e      	cmp	r2, #110	; 0x6e
 800add8:	e7d9      	b.n	800ad8e <_strtod_l+0x306>
 800adda:	498b      	ldr	r1, [pc, #556]	; (800b008 <_strtod_l+0x580>)
 800addc:	a815      	add	r0, sp, #84	; 0x54
 800adde:	f002 fbf5 	bl	800d5cc <__match>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f43f aea8 	beq.w	800ab38 <_strtod_l+0xb0>
 800ade8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adea:	4988      	ldr	r1, [pc, #544]	; (800b00c <_strtod_l+0x584>)
 800adec:	3b01      	subs	r3, #1
 800adee:	a815      	add	r0, sp, #84	; 0x54
 800adf0:	9315      	str	r3, [sp, #84]	; 0x54
 800adf2:	f002 fbeb 	bl	800d5cc <__match>
 800adf6:	b910      	cbnz	r0, 800adfe <_strtod_l+0x376>
 800adf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adfa:	3301      	adds	r3, #1
 800adfc:	9315      	str	r3, [sp, #84]	; 0x54
 800adfe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b01c <_strtod_l+0x594>
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	e67a      	b.n	800aafe <_strtod_l+0x76>
 800ae08:	4881      	ldr	r0, [pc, #516]	; (800b010 <_strtod_l+0x588>)
 800ae0a:	f001 fa69 	bl	800c2e0 <nan>
 800ae0e:	ec59 8b10 	vmov	r8, r9, d0
 800ae12:	e674      	b.n	800aafe <_strtod_l+0x76>
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae18:	1afb      	subs	r3, r7, r3
 800ae1a:	f1bb 0f00 	cmp.w	fp, #0
 800ae1e:	bf08      	it	eq
 800ae20:	46b3      	moveq	fp, r6
 800ae22:	2e10      	cmp	r6, #16
 800ae24:	9308      	str	r3, [sp, #32]
 800ae26:	4635      	mov	r5, r6
 800ae28:	bfa8      	it	ge
 800ae2a:	2510      	movge	r5, #16
 800ae2c:	f7f5 fb6a 	bl	8000504 <__aeabi_ui2d>
 800ae30:	2e09      	cmp	r6, #9
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	dd13      	ble.n	800ae60 <_strtod_l+0x3d8>
 800ae38:	4b76      	ldr	r3, [pc, #472]	; (800b014 <_strtod_l+0x58c>)
 800ae3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	4680      	mov	r8, r0
 800ae48:	4650      	mov	r0, sl
 800ae4a:	4689      	mov	r9, r1
 800ae4c:	f7f5 fb5a 	bl	8000504 <__aeabi_ui2d>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4640      	mov	r0, r8
 800ae56:	4649      	mov	r1, r9
 800ae58:	f7f5 fa18 	bl	800028c <__adddf3>
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4689      	mov	r9, r1
 800ae60:	2e0f      	cmp	r6, #15
 800ae62:	dc38      	bgt.n	800aed6 <_strtod_l+0x44e>
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f43f ae49 	beq.w	800aafe <_strtod_l+0x76>
 800ae6c:	dd24      	ble.n	800aeb8 <_strtod_l+0x430>
 800ae6e:	2b16      	cmp	r3, #22
 800ae70:	dc0b      	bgt.n	800ae8a <_strtod_l+0x402>
 800ae72:	4968      	ldr	r1, [pc, #416]	; (800b014 <_strtod_l+0x58c>)
 800ae74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7c:	4642      	mov	r2, r8
 800ae7e:	464b      	mov	r3, r9
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	4680      	mov	r8, r0
 800ae86:	4689      	mov	r9, r1
 800ae88:	e639      	b.n	800aafe <_strtod_l+0x76>
 800ae8a:	9a08      	ldr	r2, [sp, #32]
 800ae8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ae90:	4293      	cmp	r3, r2
 800ae92:	db20      	blt.n	800aed6 <_strtod_l+0x44e>
 800ae94:	4c5f      	ldr	r4, [pc, #380]	; (800b014 <_strtod_l+0x58c>)
 800ae96:	f1c6 060f 	rsb	r6, r6, #15
 800ae9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ae9e:	4642      	mov	r2, r8
 800aea0:	464b      	mov	r3, r9
 800aea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea6:	f7f5 fba7 	bl	80005f8 <__aeabi_dmul>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	1b9e      	subs	r6, r3, r6
 800aeae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aeb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aeb6:	e7e3      	b.n	800ae80 <_strtod_l+0x3f8>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	3316      	adds	r3, #22
 800aebc:	db0b      	blt.n	800aed6 <_strtod_l+0x44e>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	1bdf      	subs	r7, r3, r7
 800aec2:	4b54      	ldr	r3, [pc, #336]	; (800b014 <_strtod_l+0x58c>)
 800aec4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 fcbc 	bl	800084c <__aeabi_ddiv>
 800aed4:	e7d6      	b.n	800ae84 <_strtod_l+0x3fc>
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	1b75      	subs	r5, r6, r5
 800aeda:	441d      	add	r5, r3
 800aedc:	2d00      	cmp	r5, #0
 800aede:	dd70      	ble.n	800afc2 <_strtod_l+0x53a>
 800aee0:	f015 030f 	ands.w	r3, r5, #15
 800aee4:	d00a      	beq.n	800aefc <_strtod_l+0x474>
 800aee6:	494b      	ldr	r1, [pc, #300]	; (800b014 <_strtod_l+0x58c>)
 800aee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeec:	4642      	mov	r2, r8
 800aeee:	464b      	mov	r3, r9
 800aef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef4:	f7f5 fb80 	bl	80005f8 <__aeabi_dmul>
 800aef8:	4680      	mov	r8, r0
 800aefa:	4689      	mov	r9, r1
 800aefc:	f035 050f 	bics.w	r5, r5, #15
 800af00:	d04d      	beq.n	800af9e <_strtod_l+0x516>
 800af02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800af06:	dd22      	ble.n	800af4e <_strtod_l+0x4c6>
 800af08:	2500      	movs	r5, #0
 800af0a:	46ab      	mov	fp, r5
 800af0c:	9509      	str	r5, [sp, #36]	; 0x24
 800af0e:	9505      	str	r5, [sp, #20]
 800af10:	2322      	movs	r3, #34	; 0x22
 800af12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b01c <_strtod_l+0x594>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	f04f 0800 	mov.w	r8, #0
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f43f aded 	beq.w	800aafe <_strtod_l+0x76>
 800af24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af26:	4620      	mov	r0, r4
 800af28:	f002 fd06 	bl	800d938 <_Bfree>
 800af2c:	9905      	ldr	r1, [sp, #20]
 800af2e:	4620      	mov	r0, r4
 800af30:	f002 fd02 	bl	800d938 <_Bfree>
 800af34:	4659      	mov	r1, fp
 800af36:	4620      	mov	r0, r4
 800af38:	f002 fcfe 	bl	800d938 <_Bfree>
 800af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af3e:	4620      	mov	r0, r4
 800af40:	f002 fcfa 	bl	800d938 <_Bfree>
 800af44:	4629      	mov	r1, r5
 800af46:	4620      	mov	r0, r4
 800af48:	f002 fcf6 	bl	800d938 <_Bfree>
 800af4c:	e5d7      	b.n	800aafe <_strtod_l+0x76>
 800af4e:	4b32      	ldr	r3, [pc, #200]	; (800b018 <_strtod_l+0x590>)
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	2300      	movs	r3, #0
 800af54:	112d      	asrs	r5, r5, #4
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	469a      	mov	sl, r3
 800af5c:	2d01      	cmp	r5, #1
 800af5e:	dc21      	bgt.n	800afa4 <_strtod_l+0x51c>
 800af60:	b10b      	cbz	r3, 800af66 <_strtod_l+0x4de>
 800af62:	4680      	mov	r8, r0
 800af64:	4689      	mov	r9, r1
 800af66:	492c      	ldr	r1, [pc, #176]	; (800b018 <_strtod_l+0x590>)
 800af68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800af70:	4642      	mov	r2, r8
 800af72:	464b      	mov	r3, r9
 800af74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af78:	f7f5 fb3e 	bl	80005f8 <__aeabi_dmul>
 800af7c:	4b27      	ldr	r3, [pc, #156]	; (800b01c <_strtod_l+0x594>)
 800af7e:	460a      	mov	r2, r1
 800af80:	400b      	ands	r3, r1
 800af82:	4927      	ldr	r1, [pc, #156]	; (800b020 <_strtod_l+0x598>)
 800af84:	428b      	cmp	r3, r1
 800af86:	4680      	mov	r8, r0
 800af88:	d8be      	bhi.n	800af08 <_strtod_l+0x480>
 800af8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af8e:	428b      	cmp	r3, r1
 800af90:	bf86      	itte	hi
 800af92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b024 <_strtod_l+0x59c>
 800af96:	f04f 38ff 	movhi.w	r8, #4294967295
 800af9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af9e:	2300      	movs	r3, #0
 800afa0:	9304      	str	r3, [sp, #16]
 800afa2:	e07b      	b.n	800b09c <_strtod_l+0x614>
 800afa4:	07ea      	lsls	r2, r5, #31
 800afa6:	d505      	bpl.n	800afb4 <_strtod_l+0x52c>
 800afa8:	9b04      	ldr	r3, [sp, #16]
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 fb23 	bl	80005f8 <__aeabi_dmul>
 800afb2:	2301      	movs	r3, #1
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	3208      	adds	r2, #8
 800afb8:	f10a 0a01 	add.w	sl, sl, #1
 800afbc:	106d      	asrs	r5, r5, #1
 800afbe:	9204      	str	r2, [sp, #16]
 800afc0:	e7cc      	b.n	800af5c <_strtod_l+0x4d4>
 800afc2:	d0ec      	beq.n	800af9e <_strtod_l+0x516>
 800afc4:	426d      	negs	r5, r5
 800afc6:	f015 020f 	ands.w	r2, r5, #15
 800afca:	d00a      	beq.n	800afe2 <_strtod_l+0x55a>
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <_strtod_l+0x58c>)
 800afce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd2:	4640      	mov	r0, r8
 800afd4:	4649      	mov	r1, r9
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 fc37 	bl	800084c <__aeabi_ddiv>
 800afde:	4680      	mov	r8, r0
 800afe0:	4689      	mov	r9, r1
 800afe2:	112d      	asrs	r5, r5, #4
 800afe4:	d0db      	beq.n	800af9e <_strtod_l+0x516>
 800afe6:	2d1f      	cmp	r5, #31
 800afe8:	dd1e      	ble.n	800b028 <_strtod_l+0x5a0>
 800afea:	2500      	movs	r5, #0
 800afec:	46ab      	mov	fp, r5
 800afee:	9509      	str	r5, [sp, #36]	; 0x24
 800aff0:	9505      	str	r5, [sp, #20]
 800aff2:	2322      	movs	r3, #34	; 0x22
 800aff4:	f04f 0800 	mov.w	r8, #0
 800aff8:	f04f 0900 	mov.w	r9, #0
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	e78d      	b.n	800af1c <_strtod_l+0x494>
 800b000:	0800eded 	.word	0x0800eded
 800b004:	0800eda0 	.word	0x0800eda0
 800b008:	0800ede5 	.word	0x0800ede5
 800b00c:	0800ee1f 	.word	0x0800ee1f
 800b010:	0800f1b1 	.word	0x0800f1b1
 800b014:	0800ef90 	.word	0x0800ef90
 800b018:	0800ef68 	.word	0x0800ef68
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	7ca00000 	.word	0x7ca00000
 800b024:	7fefffff 	.word	0x7fefffff
 800b028:	f015 0310 	ands.w	r3, r5, #16
 800b02c:	bf18      	it	ne
 800b02e:	236a      	movne	r3, #106	; 0x6a
 800b030:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b3d4 <_strtod_l+0x94c>
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	2300      	movs	r3, #0
 800b03c:	07ea      	lsls	r2, r5, #31
 800b03e:	d504      	bpl.n	800b04a <_strtod_l+0x5c2>
 800b040:	e9da 2300 	ldrd	r2, r3, [sl]
 800b044:	f7f5 fad8 	bl	80005f8 <__aeabi_dmul>
 800b048:	2301      	movs	r3, #1
 800b04a:	106d      	asrs	r5, r5, #1
 800b04c:	f10a 0a08 	add.w	sl, sl, #8
 800b050:	d1f4      	bne.n	800b03c <_strtod_l+0x5b4>
 800b052:	b10b      	cbz	r3, 800b058 <_strtod_l+0x5d0>
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	b1bb      	cbz	r3, 800b08c <_strtod_l+0x604>
 800b05c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b060:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b064:	2b00      	cmp	r3, #0
 800b066:	4649      	mov	r1, r9
 800b068:	dd10      	ble.n	800b08c <_strtod_l+0x604>
 800b06a:	2b1f      	cmp	r3, #31
 800b06c:	f340 811e 	ble.w	800b2ac <_strtod_l+0x824>
 800b070:	2b34      	cmp	r3, #52	; 0x34
 800b072:	bfde      	ittt	le
 800b074:	f04f 33ff 	movle.w	r3, #4294967295
 800b078:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b07c:	4093      	lslle	r3, r2
 800b07e:	f04f 0800 	mov.w	r8, #0
 800b082:	bfcc      	ite	gt
 800b084:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b088:	ea03 0901 	andle.w	r9, r3, r1
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1a6      	bne.n	800afea <_strtod_l+0x562>
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0a2:	4633      	mov	r3, r6
 800b0a4:	465a      	mov	r2, fp
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f002 fcae 	bl	800da08 <__s2b>
 800b0ac:	9009      	str	r0, [sp, #36]	; 0x24
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f43f af2a 	beq.w	800af08 <_strtod_l+0x480>
 800b0b4:	9a08      	ldr	r2, [sp, #32]
 800b0b6:	9b05      	ldr	r3, [sp, #20]
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	eba3 0307 	sub.w	r3, r3, r7
 800b0be:	bfa8      	it	ge
 800b0c0:	2300      	movge	r3, #0
 800b0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800b0c4:	2500      	movs	r5, #0
 800b0c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b0cc:	46ab      	mov	fp, r5
 800b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	6859      	ldr	r1, [r3, #4]
 800b0d4:	f002 fbf0 	bl	800d8b8 <_Balloc>
 800b0d8:	9005      	str	r0, [sp, #20]
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f43f af18 	beq.w	800af10 <_strtod_l+0x488>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	3202      	adds	r2, #2
 800b0e6:	f103 010c 	add.w	r1, r3, #12
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	300c      	adds	r0, #12
 800b0ee:	f001 f8e7 	bl	800c2c0 <memcpy>
 800b0f2:	ec49 8b10 	vmov	d0, r8, r9
 800b0f6:	aa18      	add	r2, sp, #96	; 0x60
 800b0f8:	a917      	add	r1, sp, #92	; 0x5c
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f002 ffb8 	bl	800e070 <__d2b>
 800b100:	ec49 8b18 	vmov	d8, r8, r9
 800b104:	9016      	str	r0, [sp, #88]	; 0x58
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f af02 	beq.w	800af10 <_strtod_l+0x488>
 800b10c:	2101      	movs	r1, #1
 800b10e:	4620      	mov	r0, r4
 800b110:	f002 fd12 	bl	800db38 <__i2b>
 800b114:	4683      	mov	fp, r0
 800b116:	2800      	cmp	r0, #0
 800b118:	f43f aefa 	beq.w	800af10 <_strtod_l+0x488>
 800b11c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b11e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b120:	2e00      	cmp	r6, #0
 800b122:	bfab      	itete	ge
 800b124:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b126:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b12a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b12e:	bfac      	ite	ge
 800b130:	eb06 0a03 	addge.w	sl, r6, r3
 800b134:	1b9f      	sublt	r7, r3, r6
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	1af6      	subs	r6, r6, r3
 800b13a:	4416      	add	r6, r2
 800b13c:	4ba0      	ldr	r3, [pc, #640]	; (800b3c0 <_strtod_l+0x938>)
 800b13e:	3e01      	subs	r6, #1
 800b140:	429e      	cmp	r6, r3
 800b142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b146:	f280 80c4 	bge.w	800b2d2 <_strtod_l+0x84a>
 800b14a:	1b9b      	subs	r3, r3, r6
 800b14c:	2b1f      	cmp	r3, #31
 800b14e:	eba2 0203 	sub.w	r2, r2, r3
 800b152:	f04f 0101 	mov.w	r1, #1
 800b156:	f300 80b0 	bgt.w	800b2ba <_strtod_l+0x832>
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	930e      	str	r3, [sp, #56]	; 0x38
 800b160:	2300      	movs	r3, #0
 800b162:	930d      	str	r3, [sp, #52]	; 0x34
 800b164:	eb0a 0602 	add.w	r6, sl, r2
 800b168:	9b04      	ldr	r3, [sp, #16]
 800b16a:	45b2      	cmp	sl, r6
 800b16c:	4417      	add	r7, r2
 800b16e:	441f      	add	r7, r3
 800b170:	4653      	mov	r3, sl
 800b172:	bfa8      	it	ge
 800b174:	4633      	movge	r3, r6
 800b176:	42bb      	cmp	r3, r7
 800b178:	bfa8      	it	ge
 800b17a:	463b      	movge	r3, r7
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfc2      	ittt	gt
 800b180:	1af6      	subgt	r6, r6, r3
 800b182:	1aff      	subgt	r7, r7, r3
 800b184:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dd17      	ble.n	800b1be <_strtod_l+0x736>
 800b18e:	4659      	mov	r1, fp
 800b190:	461a      	mov	r2, r3
 800b192:	4620      	mov	r0, r4
 800b194:	f002 fd90 	bl	800dcb8 <__pow5mult>
 800b198:	4683      	mov	fp, r0
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f43f aeb8 	beq.w	800af10 <_strtod_l+0x488>
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f002 fcdd 	bl	800db64 <__multiply>
 800b1aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f43f aeaf 	beq.w	800af10 <_strtod_l+0x488>
 800b1b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f002 fbbf 	bl	800d938 <_Bfree>
 800b1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1bc:	9316      	str	r3, [sp, #88]	; 0x58
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	f300 808c 	bgt.w	800b2dc <_strtod_l+0x854>
 800b1c4:	9b08      	ldr	r3, [sp, #32]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dd08      	ble.n	800b1dc <_strtod_l+0x754>
 800b1ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1cc:	9905      	ldr	r1, [sp, #20]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f002 fd72 	bl	800dcb8 <__pow5mult>
 800b1d4:	9005      	str	r0, [sp, #20]
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f ae9a 	beq.w	800af10 <_strtod_l+0x488>
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	dd08      	ble.n	800b1f2 <_strtod_l+0x76a>
 800b1e0:	9905      	ldr	r1, [sp, #20]
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f002 fdc1 	bl	800dd6c <__lshift>
 800b1ea:	9005      	str	r0, [sp, #20]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f ae8f 	beq.w	800af10 <_strtod_l+0x488>
 800b1f2:	f1ba 0f00 	cmp.w	sl, #0
 800b1f6:	dd08      	ble.n	800b20a <_strtod_l+0x782>
 800b1f8:	4659      	mov	r1, fp
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f002 fdb5 	bl	800dd6c <__lshift>
 800b202:	4683      	mov	fp, r0
 800b204:	2800      	cmp	r0, #0
 800b206:	f43f ae83 	beq.w	800af10 <_strtod_l+0x488>
 800b20a:	9a05      	ldr	r2, [sp, #20]
 800b20c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b20e:	4620      	mov	r0, r4
 800b210:	f002 fe34 	bl	800de7c <__mdiff>
 800b214:	4605      	mov	r5, r0
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f ae7a 	beq.w	800af10 <_strtod_l+0x488>
 800b21c:	68c3      	ldr	r3, [r0, #12]
 800b21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b220:	2300      	movs	r3, #0
 800b222:	60c3      	str	r3, [r0, #12]
 800b224:	4659      	mov	r1, fp
 800b226:	f002 fe0d 	bl	800de44 <__mcmp>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	da60      	bge.n	800b2f0 <_strtod_l+0x868>
 800b22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b230:	ea53 0308 	orrs.w	r3, r3, r8
 800b234:	f040 8084 	bne.w	800b340 <_strtod_l+0x8b8>
 800b238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d17f      	bne.n	800b340 <_strtod_l+0x8b8>
 800b240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b244:	0d1b      	lsrs	r3, r3, #20
 800b246:	051b      	lsls	r3, r3, #20
 800b248:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b24c:	d978      	bls.n	800b340 <_strtod_l+0x8b8>
 800b24e:	696b      	ldr	r3, [r5, #20]
 800b250:	b913      	cbnz	r3, 800b258 <_strtod_l+0x7d0>
 800b252:	692b      	ldr	r3, [r5, #16]
 800b254:	2b01      	cmp	r3, #1
 800b256:	dd73      	ble.n	800b340 <_strtod_l+0x8b8>
 800b258:	4629      	mov	r1, r5
 800b25a:	2201      	movs	r2, #1
 800b25c:	4620      	mov	r0, r4
 800b25e:	f002 fd85 	bl	800dd6c <__lshift>
 800b262:	4659      	mov	r1, fp
 800b264:	4605      	mov	r5, r0
 800b266:	f002 fded 	bl	800de44 <__mcmp>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	dd68      	ble.n	800b340 <_strtod_l+0x8b8>
 800b26e:	9904      	ldr	r1, [sp, #16]
 800b270:	4a54      	ldr	r2, [pc, #336]	; (800b3c4 <_strtod_l+0x93c>)
 800b272:	464b      	mov	r3, r9
 800b274:	2900      	cmp	r1, #0
 800b276:	f000 8084 	beq.w	800b382 <_strtod_l+0x8fa>
 800b27a:	ea02 0109 	and.w	r1, r2, r9
 800b27e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b282:	dc7e      	bgt.n	800b382 <_strtod_l+0x8fa>
 800b284:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b288:	f77f aeb3 	ble.w	800aff2 <_strtod_l+0x56a>
 800b28c:	4b4e      	ldr	r3, [pc, #312]	; (800b3c8 <_strtod_l+0x940>)
 800b28e:	4640      	mov	r0, r8
 800b290:	4649      	mov	r1, r9
 800b292:	2200      	movs	r2, #0
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	4b4a      	ldr	r3, [pc, #296]	; (800b3c4 <_strtod_l+0x93c>)
 800b29a:	400b      	ands	r3, r1
 800b29c:	4680      	mov	r8, r0
 800b29e:	4689      	mov	r9, r1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f47f ae3f 	bne.w	800af24 <_strtod_l+0x49c>
 800b2a6:	2322      	movs	r3, #34	; 0x22
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	e63b      	b.n	800af24 <_strtod_l+0x49c>
 800b2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b4:	ea03 0808 	and.w	r8, r3, r8
 800b2b8:	e6e8      	b.n	800b08c <_strtod_l+0x604>
 800b2ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b2be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b2c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b2c6:	36e2      	adds	r6, #226	; 0xe2
 800b2c8:	fa01 f306 	lsl.w	r3, r1, r6
 800b2cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b2d0:	e748      	b.n	800b164 <_strtod_l+0x6dc>
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b2da:	e743      	b.n	800b164 <_strtod_l+0x6dc>
 800b2dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2de:	4632      	mov	r2, r6
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f002 fd43 	bl	800dd6c <__lshift>
 800b2e6:	9016      	str	r0, [sp, #88]	; 0x58
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f47f af6b 	bne.w	800b1c4 <_strtod_l+0x73c>
 800b2ee:	e60f      	b.n	800af10 <_strtod_l+0x488>
 800b2f0:	46ca      	mov	sl, r9
 800b2f2:	d171      	bne.n	800b3d8 <_strtod_l+0x950>
 800b2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2fa:	b352      	cbz	r2, 800b352 <_strtod_l+0x8ca>
 800b2fc:	4a33      	ldr	r2, [pc, #204]	; (800b3cc <_strtod_l+0x944>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d12a      	bne.n	800b358 <_strtod_l+0x8d0>
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	4641      	mov	r1, r8
 800b306:	b1fb      	cbz	r3, 800b348 <_strtod_l+0x8c0>
 800b308:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <_strtod_l+0x93c>)
 800b30a:	ea09 0303 	and.w	r3, r9, r3
 800b30e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b312:	f04f 32ff 	mov.w	r2, #4294967295
 800b316:	d81a      	bhi.n	800b34e <_strtod_l+0x8c6>
 800b318:	0d1b      	lsrs	r3, r3, #20
 800b31a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	4299      	cmp	r1, r3
 800b324:	d118      	bne.n	800b358 <_strtod_l+0x8d0>
 800b326:	4b2a      	ldr	r3, [pc, #168]	; (800b3d0 <_strtod_l+0x948>)
 800b328:	459a      	cmp	sl, r3
 800b32a:	d102      	bne.n	800b332 <_strtod_l+0x8aa>
 800b32c:	3101      	adds	r1, #1
 800b32e:	f43f adef 	beq.w	800af10 <_strtod_l+0x488>
 800b332:	4b24      	ldr	r3, [pc, #144]	; (800b3c4 <_strtod_l+0x93c>)
 800b334:	ea0a 0303 	and.w	r3, sl, r3
 800b338:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b33c:	f04f 0800 	mov.w	r8, #0
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1a2      	bne.n	800b28c <_strtod_l+0x804>
 800b346:	e5ed      	b.n	800af24 <_strtod_l+0x49c>
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	e7e9      	b.n	800b322 <_strtod_l+0x89a>
 800b34e:	4613      	mov	r3, r2
 800b350:	e7e7      	b.n	800b322 <_strtod_l+0x89a>
 800b352:	ea53 0308 	orrs.w	r3, r3, r8
 800b356:	d08a      	beq.n	800b26e <_strtod_l+0x7e6>
 800b358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b35a:	b1e3      	cbz	r3, 800b396 <_strtod_l+0x90e>
 800b35c:	ea13 0f0a 	tst.w	r3, sl
 800b360:	d0ee      	beq.n	800b340 <_strtod_l+0x8b8>
 800b362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	b1c3      	cbz	r3, 800b39e <_strtod_l+0x916>
 800b36c:	f7ff fb6f 	bl	800aa4e <sulp>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	ec51 0b18 	vmov	r0, r1, d8
 800b378:	f7f4 ff88 	bl	800028c <__adddf3>
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	e7de      	b.n	800b340 <_strtod_l+0x8b8>
 800b382:	4013      	ands	r3, r2
 800b384:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b388:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b38c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b390:	f04f 38ff 	mov.w	r8, #4294967295
 800b394:	e7d4      	b.n	800b340 <_strtod_l+0x8b8>
 800b396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b398:	ea13 0f08 	tst.w	r3, r8
 800b39c:	e7e0      	b.n	800b360 <_strtod_l+0x8d8>
 800b39e:	f7ff fb56 	bl	800aa4e <sulp>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	ec51 0b18 	vmov	r0, r1, d8
 800b3aa:	f7f4 ff6d 	bl	8000288 <__aeabi_dsub>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	4689      	mov	r9, r1
 800b3b6:	f7f5 fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d0c0      	beq.n	800b340 <_strtod_l+0x8b8>
 800b3be:	e618      	b.n	800aff2 <_strtod_l+0x56a>
 800b3c0:	fffffc02 	.word	0xfffffc02
 800b3c4:	7ff00000 	.word	0x7ff00000
 800b3c8:	39500000 	.word	0x39500000
 800b3cc:	000fffff 	.word	0x000fffff
 800b3d0:	7fefffff 	.word	0x7fefffff
 800b3d4:	0800edb8 	.word	0x0800edb8
 800b3d8:	4659      	mov	r1, fp
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f002 fea2 	bl	800e124 <__ratio>
 800b3e0:	ec57 6b10 	vmov	r6, r7, d0
 800b3e4:	ee10 0a10 	vmov	r0, s0
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 fb7e 	bl	8000af0 <__aeabi_dcmple>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d071      	beq.n	800b4dc <_strtod_l+0xa54>
 800b3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d17c      	bne.n	800b4f8 <_strtod_l+0xa70>
 800b3fe:	f1b8 0f00 	cmp.w	r8, #0
 800b402:	d15a      	bne.n	800b4ba <_strtod_l+0xa32>
 800b404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d15d      	bne.n	800b4c8 <_strtod_l+0xa40>
 800b40c:	4b90      	ldr	r3, [pc, #576]	; (800b650 <_strtod_l+0xbc8>)
 800b40e:	2200      	movs	r2, #0
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb62 	bl	8000adc <__aeabi_dcmplt>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d15c      	bne.n	800b4d6 <_strtod_l+0xa4e>
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	4b8c      	ldr	r3, [pc, #560]	; (800b654 <_strtod_l+0xbcc>)
 800b422:	2200      	movs	r2, #0
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b430:	9606      	str	r6, [sp, #24]
 800b432:	9307      	str	r3, [sp, #28]
 800b434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b438:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b43c:	4b86      	ldr	r3, [pc, #536]	; (800b658 <_strtod_l+0xbd0>)
 800b43e:	ea0a 0303 	and.w	r3, sl, r3
 800b442:	930d      	str	r3, [sp, #52]	; 0x34
 800b444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b446:	4b85      	ldr	r3, [pc, #532]	; (800b65c <_strtod_l+0xbd4>)
 800b448:	429a      	cmp	r2, r3
 800b44a:	f040 8090 	bne.w	800b56e <_strtod_l+0xae6>
 800b44e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b452:	ec49 8b10 	vmov	d0, r8, r9
 800b456:	f002 fd9b 	bl	800df90 <__ulp>
 800b45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b45e:	ec51 0b10 	vmov	r0, r1, d0
 800b462:	f7f5 f8c9 	bl	80005f8 <__aeabi_dmul>
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	f7f4 ff0f 	bl	800028c <__adddf3>
 800b46e:	460b      	mov	r3, r1
 800b470:	4979      	ldr	r1, [pc, #484]	; (800b658 <_strtod_l+0xbd0>)
 800b472:	4a7b      	ldr	r2, [pc, #492]	; (800b660 <_strtod_l+0xbd8>)
 800b474:	4019      	ands	r1, r3
 800b476:	4291      	cmp	r1, r2
 800b478:	4680      	mov	r8, r0
 800b47a:	d944      	bls.n	800b506 <_strtod_l+0xa7e>
 800b47c:	ee18 2a90 	vmov	r2, s17
 800b480:	4b78      	ldr	r3, [pc, #480]	; (800b664 <_strtod_l+0xbdc>)
 800b482:	429a      	cmp	r2, r3
 800b484:	d104      	bne.n	800b490 <_strtod_l+0xa08>
 800b486:	ee18 3a10 	vmov	r3, s16
 800b48a:	3301      	adds	r3, #1
 800b48c:	f43f ad40 	beq.w	800af10 <_strtod_l+0x488>
 800b490:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b664 <_strtod_l+0xbdc>
 800b494:	f04f 38ff 	mov.w	r8, #4294967295
 800b498:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b49a:	4620      	mov	r0, r4
 800b49c:	f002 fa4c 	bl	800d938 <_Bfree>
 800b4a0:	9905      	ldr	r1, [sp, #20]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f002 fa48 	bl	800d938 <_Bfree>
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f002 fa44 	bl	800d938 <_Bfree>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f002 fa40 	bl	800d938 <_Bfree>
 800b4b8:	e609      	b.n	800b0ce <_strtod_l+0x646>
 800b4ba:	f1b8 0f01 	cmp.w	r8, #1
 800b4be:	d103      	bne.n	800b4c8 <_strtod_l+0xa40>
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	f43f ad95 	beq.w	800aff2 <_strtod_l+0x56a>
 800b4c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b620 <_strtod_l+0xb98>
 800b4cc:	4f60      	ldr	r7, [pc, #384]	; (800b650 <_strtod_l+0xbc8>)
 800b4ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	e7ae      	b.n	800b434 <_strtod_l+0x9ac>
 800b4d6:	4f5f      	ldr	r7, [pc, #380]	; (800b654 <_strtod_l+0xbcc>)
 800b4d8:	2600      	movs	r6, #0
 800b4da:	e7a7      	b.n	800b42c <_strtod_l+0x9a4>
 800b4dc:	4b5d      	ldr	r3, [pc, #372]	; (800b654 <_strtod_l+0xbcc>)
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d09c      	beq.n	800b42c <_strtod_l+0x9a4>
 800b4f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4f6:	e79d      	b.n	800b434 <_strtod_l+0x9ac>
 800b4f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b628 <_strtod_l+0xba0>
 800b4fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b500:	ec57 6b17 	vmov	r6, r7, d7
 800b504:	e796      	b.n	800b434 <_strtod_l+0x9ac>
 800b506:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	46ca      	mov	sl, r9
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1c2      	bne.n	800b498 <_strtod_l+0xa10>
 800b512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b518:	0d1b      	lsrs	r3, r3, #20
 800b51a:	051b      	lsls	r3, r3, #20
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d1bb      	bne.n	800b498 <_strtod_l+0xa10>
 800b520:	4630      	mov	r0, r6
 800b522:	4639      	mov	r1, r7
 800b524:	f7f5 fb78 	bl	8000c18 <__aeabi_d2lz>
 800b528:	f7f5 f838 	bl	800059c <__aeabi_l2d>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b53a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b53e:	ea43 0308 	orr.w	r3, r3, r8
 800b542:	4313      	orrs	r3, r2
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	d054      	beq.n	800b5f4 <_strtod_l+0xb6c>
 800b54a:	a339      	add	r3, pc, #228	; (adr r3, 800b630 <_strtod_l+0xba8>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f5 fac4 	bl	8000adc <__aeabi_dcmplt>
 800b554:	2800      	cmp	r0, #0
 800b556:	f47f ace5 	bne.w	800af24 <_strtod_l+0x49c>
 800b55a:	a337      	add	r3, pc, #220	; (adr r3, 800b638 <_strtod_l+0xbb0>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fad8 	bl	8000b18 <__aeabi_dcmpgt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d095      	beq.n	800b498 <_strtod_l+0xa10>
 800b56c:	e4da      	b.n	800af24 <_strtod_l+0x49c>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	b333      	cbz	r3, 800b5c0 <_strtod_l+0xb38>
 800b572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b578:	d822      	bhi.n	800b5c0 <_strtod_l+0xb38>
 800b57a:	a331      	add	r3, pc, #196	; (adr r3, 800b640 <_strtod_l+0xbb8>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 fab4 	bl	8000af0 <__aeabi_dcmple>
 800b588:	b1a0      	cbz	r0, 800b5b4 <_strtod_l+0xb2c>
 800b58a:	4639      	mov	r1, r7
 800b58c:	4630      	mov	r0, r6
 800b58e:	f7f5 fb0b 	bl	8000ba8 <__aeabi_d2uiz>
 800b592:	2801      	cmp	r0, #1
 800b594:	bf38      	it	cc
 800b596:	2001      	movcc	r0, #1
 800b598:	f7f4 ffb4 	bl	8000504 <__aeabi_ui2d>
 800b59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	bb23      	cbnz	r3, 800b5ee <_strtod_l+0xb66>
 800b5a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a8:	9010      	str	r0, [sp, #64]	; 0x40
 800b5aa:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b5c8:	eef0 0a68 	vmov.f32	s1, s17
 800b5cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b5d0:	f002 fcde 	bl	800df90 <__ulp>
 800b5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5d8:	ec53 2b10 	vmov	r2, r3, d0
 800b5dc:	f7f5 f80c 	bl	80005f8 <__aeabi_dmul>
 800b5e0:	ec53 2b18 	vmov	r2, r3, d8
 800b5e4:	f7f4 fe52 	bl	800028c <__adddf3>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	e78d      	b.n	800b50a <_strtod_l+0xa82>
 800b5ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b5f2:	e7db      	b.n	800b5ac <_strtod_l+0xb24>
 800b5f4:	a314      	add	r3, pc, #80	; (adr r3, 800b648 <_strtod_l+0xbc0>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f7f5 fa6f 	bl	8000adc <__aeabi_dcmplt>
 800b5fe:	e7b3      	b.n	800b568 <_strtod_l+0xae0>
 800b600:	2300      	movs	r3, #0
 800b602:	930a      	str	r3, [sp, #40]	; 0x28
 800b604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	f7ff ba7c 	b.w	800ab06 <_strtod_l+0x7e>
 800b60e:	2a65      	cmp	r2, #101	; 0x65
 800b610:	f43f ab75 	beq.w	800acfe <_strtod_l+0x276>
 800b614:	2a45      	cmp	r2, #69	; 0x45
 800b616:	f43f ab72 	beq.w	800acfe <_strtod_l+0x276>
 800b61a:	2301      	movs	r3, #1
 800b61c:	f7ff bbaa 	b.w	800ad74 <_strtod_l+0x2ec>
 800b620:	00000000 	.word	0x00000000
 800b624:	bff00000 	.word	0xbff00000
 800b628:	00000000 	.word	0x00000000
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	94a03595 	.word	0x94a03595
 800b634:	3fdfffff 	.word	0x3fdfffff
 800b638:	35afe535 	.word	0x35afe535
 800b63c:	3fe00000 	.word	0x3fe00000
 800b640:	ffc00000 	.word	0xffc00000
 800b644:	41dfffff 	.word	0x41dfffff
 800b648:	94a03595 	.word	0x94a03595
 800b64c:	3fcfffff 	.word	0x3fcfffff
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	7fe00000 	.word	0x7fe00000
 800b660:	7c9fffff 	.word	0x7c9fffff
 800b664:	7fefffff 	.word	0x7fefffff

0800b668 <strtod>:
 800b668:	460a      	mov	r2, r1
 800b66a:	4601      	mov	r1, r0
 800b66c:	4802      	ldr	r0, [pc, #8]	; (800b678 <strtod+0x10>)
 800b66e:	4b03      	ldr	r3, [pc, #12]	; (800b67c <strtod+0x14>)
 800b670:	6800      	ldr	r0, [r0, #0]
 800b672:	f7ff ba09 	b.w	800aa88 <_strtod_l>
 800b676:	bf00      	nop
 800b678:	200001d0 	.word	0x200001d0
 800b67c:	20000018 	.word	0x20000018

0800b680 <__cvt>:
 800b680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b684:	ec55 4b10 	vmov	r4, r5, d0
 800b688:	2d00      	cmp	r5, #0
 800b68a:	460e      	mov	r6, r1
 800b68c:	4619      	mov	r1, r3
 800b68e:	462b      	mov	r3, r5
 800b690:	bfbb      	ittet	lt
 800b692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b696:	461d      	movlt	r5, r3
 800b698:	2300      	movge	r3, #0
 800b69a:	232d      	movlt	r3, #45	; 0x2d
 800b69c:	700b      	strb	r3, [r1, #0]
 800b69e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6a4:	4691      	mov	r9, r2
 800b6a6:	f023 0820 	bic.w	r8, r3, #32
 800b6aa:	bfbc      	itt	lt
 800b6ac:	4622      	movlt	r2, r4
 800b6ae:	4614      	movlt	r4, r2
 800b6b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6b4:	d005      	beq.n	800b6c2 <__cvt+0x42>
 800b6b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6ba:	d100      	bne.n	800b6be <__cvt+0x3e>
 800b6bc:	3601      	adds	r6, #1
 800b6be:	2102      	movs	r1, #2
 800b6c0:	e000      	b.n	800b6c4 <__cvt+0x44>
 800b6c2:	2103      	movs	r1, #3
 800b6c4:	ab03      	add	r3, sp, #12
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	ab02      	add	r3, sp, #8
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	ec45 4b10 	vmov	d0, r4, r5
 800b6d0:	4653      	mov	r3, sl
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	f000 fe94 	bl	800c400 <_dtoa_r>
 800b6d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6dc:	4607      	mov	r7, r0
 800b6de:	d102      	bne.n	800b6e6 <__cvt+0x66>
 800b6e0:	f019 0f01 	tst.w	r9, #1
 800b6e4:	d022      	beq.n	800b72c <__cvt+0xac>
 800b6e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6ea:	eb07 0906 	add.w	r9, r7, r6
 800b6ee:	d110      	bne.n	800b712 <__cvt+0x92>
 800b6f0:	783b      	ldrb	r3, [r7, #0]
 800b6f2:	2b30      	cmp	r3, #48	; 0x30
 800b6f4:	d10a      	bne.n	800b70c <__cvt+0x8c>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f5 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b702:	b918      	cbnz	r0, 800b70c <__cvt+0x8c>
 800b704:	f1c6 0601 	rsb	r6, r6, #1
 800b708:	f8ca 6000 	str.w	r6, [sl]
 800b70c:	f8da 3000 	ldr.w	r3, [sl]
 800b710:	4499      	add	r9, r3
 800b712:	2200      	movs	r2, #0
 800b714:	2300      	movs	r3, #0
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	f7f5 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71e:	b108      	cbz	r0, 800b724 <__cvt+0xa4>
 800b720:	f8cd 900c 	str.w	r9, [sp, #12]
 800b724:	2230      	movs	r2, #48	; 0x30
 800b726:	9b03      	ldr	r3, [sp, #12]
 800b728:	454b      	cmp	r3, r9
 800b72a:	d307      	bcc.n	800b73c <__cvt+0xbc>
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b730:	1bdb      	subs	r3, r3, r7
 800b732:	4638      	mov	r0, r7
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	b004      	add	sp, #16
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	1c59      	adds	r1, r3, #1
 800b73e:	9103      	str	r1, [sp, #12]
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	e7f0      	b.n	800b726 <__cvt+0xa6>

0800b744 <__exponent>:
 800b744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b746:	4603      	mov	r3, r0
 800b748:	2900      	cmp	r1, #0
 800b74a:	bfb8      	it	lt
 800b74c:	4249      	neglt	r1, r1
 800b74e:	f803 2b02 	strb.w	r2, [r3], #2
 800b752:	bfb4      	ite	lt
 800b754:	222d      	movlt	r2, #45	; 0x2d
 800b756:	222b      	movge	r2, #43	; 0x2b
 800b758:	2909      	cmp	r1, #9
 800b75a:	7042      	strb	r2, [r0, #1]
 800b75c:	dd2a      	ble.n	800b7b4 <__exponent+0x70>
 800b75e:	f10d 0207 	add.w	r2, sp, #7
 800b762:	4617      	mov	r7, r2
 800b764:	260a      	movs	r6, #10
 800b766:	4694      	mov	ip, r2
 800b768:	fb91 f5f6 	sdiv	r5, r1, r6
 800b76c:	fb06 1415 	mls	r4, r6, r5, r1
 800b770:	3430      	adds	r4, #48	; 0x30
 800b772:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b776:	460c      	mov	r4, r1
 800b778:	2c63      	cmp	r4, #99	; 0x63
 800b77a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b77e:	4629      	mov	r1, r5
 800b780:	dcf1      	bgt.n	800b766 <__exponent+0x22>
 800b782:	3130      	adds	r1, #48	; 0x30
 800b784:	f1ac 0402 	sub.w	r4, ip, #2
 800b788:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b78c:	1c41      	adds	r1, r0, #1
 800b78e:	4622      	mov	r2, r4
 800b790:	42ba      	cmp	r2, r7
 800b792:	d30a      	bcc.n	800b7aa <__exponent+0x66>
 800b794:	f10d 0209 	add.w	r2, sp, #9
 800b798:	eba2 020c 	sub.w	r2, r2, ip
 800b79c:	42bc      	cmp	r4, r7
 800b79e:	bf88      	it	hi
 800b7a0:	2200      	movhi	r2, #0
 800b7a2:	4413      	add	r3, r2
 800b7a4:	1a18      	subs	r0, r3, r0
 800b7a6:	b003      	add	sp, #12
 800b7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b7ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b7b2:	e7ed      	b.n	800b790 <__exponent+0x4c>
 800b7b4:	2330      	movs	r3, #48	; 0x30
 800b7b6:	3130      	adds	r1, #48	; 0x30
 800b7b8:	7083      	strb	r3, [r0, #2]
 800b7ba:	70c1      	strb	r1, [r0, #3]
 800b7bc:	1d03      	adds	r3, r0, #4
 800b7be:	e7f1      	b.n	800b7a4 <__exponent+0x60>

0800b7c0 <_printf_float>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	ed2d 8b02 	vpush	{d8}
 800b7c8:	b08d      	sub	sp, #52	; 0x34
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	461f      	mov	r7, r3
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	f000 fcfd 	bl	800c1d4 <_localeconv_r>
 800b7da:	f8d0 a000 	ldr.w	sl, [r0]
 800b7de:	4650      	mov	r0, sl
 800b7e0:	f7f4 fd46 	bl	8000270 <strlen>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	9305      	str	r3, [sp, #20]
 800b7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b7f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7f4:	3307      	adds	r3, #7
 800b7f6:	f023 0307 	bic.w	r3, r3, #7
 800b7fa:	f103 0208 	add.w	r2, r3, #8
 800b7fe:	f8c8 2000 	str.w	r2, [r8]
 800b802:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b80a:	9307      	str	r3, [sp, #28]
 800b80c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b810:	ee08 0a10 	vmov	s16, r0
 800b814:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81c:	4b9e      	ldr	r3, [pc, #632]	; (800ba98 <_printf_float+0x2d8>)
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	f7f5 f983 	bl	8000b2c <__aeabi_dcmpun>
 800b826:	bb88      	cbnz	r0, 800b88c <_printf_float+0xcc>
 800b828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82c:	4b9a      	ldr	r3, [pc, #616]	; (800ba98 <_printf_float+0x2d8>)
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	f7f5 f95d 	bl	8000af0 <__aeabi_dcmple>
 800b836:	bb48      	cbnz	r0, 800b88c <_printf_float+0xcc>
 800b838:	2200      	movs	r2, #0
 800b83a:	2300      	movs	r3, #0
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f94c 	bl	8000adc <__aeabi_dcmplt>
 800b844:	b110      	cbz	r0, 800b84c <_printf_float+0x8c>
 800b846:	232d      	movs	r3, #45	; 0x2d
 800b848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b84c:	4a93      	ldr	r2, [pc, #588]	; (800ba9c <_printf_float+0x2dc>)
 800b84e:	4b94      	ldr	r3, [pc, #592]	; (800baa0 <_printf_float+0x2e0>)
 800b850:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b854:	bf94      	ite	ls
 800b856:	4690      	movls	r8, r2
 800b858:	4698      	movhi	r8, r3
 800b85a:	2303      	movs	r3, #3
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	9b05      	ldr	r3, [sp, #20]
 800b860:	f023 0304 	bic.w	r3, r3, #4
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	f04f 0900 	mov.w	r9, #0
 800b86a:	9700      	str	r7, [sp, #0]
 800b86c:	4633      	mov	r3, r6
 800b86e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b870:	4621      	mov	r1, r4
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f9da 	bl	800bc2c <_printf_common>
 800b878:	3001      	adds	r0, #1
 800b87a:	f040 8090 	bne.w	800b99e <_printf_float+0x1de>
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295
 800b882:	b00d      	add	sp, #52	; 0x34
 800b884:	ecbd 8b02 	vpop	{d8}
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	4642      	mov	r2, r8
 800b88e:	464b      	mov	r3, r9
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f5 f94a 	bl	8000b2c <__aeabi_dcmpun>
 800b898:	b140      	cbz	r0, 800b8ac <_printf_float+0xec>
 800b89a:	464b      	mov	r3, r9
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bfbc      	itt	lt
 800b8a0:	232d      	movlt	r3, #45	; 0x2d
 800b8a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8a6:	4a7f      	ldr	r2, [pc, #508]	; (800baa4 <_printf_float+0x2e4>)
 800b8a8:	4b7f      	ldr	r3, [pc, #508]	; (800baa8 <_printf_float+0x2e8>)
 800b8aa:	e7d1      	b.n	800b850 <_printf_float+0x90>
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b8b2:	9206      	str	r2, [sp, #24]
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	d13f      	bne.n	800b938 <_printf_float+0x178>
 800b8b8:	2306      	movs	r3, #6
 800b8ba:	6063      	str	r3, [r4, #4]
 800b8bc:	9b05      	ldr	r3, [sp, #20]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	ab0a      	add	r3, sp, #40	; 0x28
 800b8ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8ce:	ab09      	add	r3, sp, #36	; 0x24
 800b8d0:	ec49 8b10 	vmov	d0, r8, r9
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7ff fecf 	bl	800b680 <__cvt>
 800b8e2:	9b06      	ldr	r3, [sp, #24]
 800b8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8e6:	2b47      	cmp	r3, #71	; 0x47
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	d108      	bne.n	800b8fe <_printf_float+0x13e>
 800b8ec:	1cc8      	adds	r0, r1, #3
 800b8ee:	db02      	blt.n	800b8f6 <_printf_float+0x136>
 800b8f0:	6863      	ldr	r3, [r4, #4]
 800b8f2:	4299      	cmp	r1, r3
 800b8f4:	dd41      	ble.n	800b97a <_printf_float+0x1ba>
 800b8f6:	f1ab 0302 	sub.w	r3, fp, #2
 800b8fa:	fa5f fb83 	uxtb.w	fp, r3
 800b8fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b902:	d820      	bhi.n	800b946 <_printf_float+0x186>
 800b904:	3901      	subs	r1, #1
 800b906:	465a      	mov	r2, fp
 800b908:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b90c:	9109      	str	r1, [sp, #36]	; 0x24
 800b90e:	f7ff ff19 	bl	800b744 <__exponent>
 800b912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b914:	1813      	adds	r3, r2, r0
 800b916:	2a01      	cmp	r2, #1
 800b918:	4681      	mov	r9, r0
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	dc02      	bgt.n	800b924 <_printf_float+0x164>
 800b91e:	6822      	ldr	r2, [r4, #0]
 800b920:	07d2      	lsls	r2, r2, #31
 800b922:	d501      	bpl.n	800b928 <_printf_float+0x168>
 800b924:	3301      	adds	r3, #1
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d09c      	beq.n	800b86a <_printf_float+0xaa>
 800b930:	232d      	movs	r3, #45	; 0x2d
 800b932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b936:	e798      	b.n	800b86a <_printf_float+0xaa>
 800b938:	9a06      	ldr	r2, [sp, #24]
 800b93a:	2a47      	cmp	r2, #71	; 0x47
 800b93c:	d1be      	bne.n	800b8bc <_printf_float+0xfc>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1bc      	bne.n	800b8bc <_printf_float+0xfc>
 800b942:	2301      	movs	r3, #1
 800b944:	e7b9      	b.n	800b8ba <_printf_float+0xfa>
 800b946:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b94a:	d118      	bne.n	800b97e <_printf_float+0x1be>
 800b94c:	2900      	cmp	r1, #0
 800b94e:	6863      	ldr	r3, [r4, #4]
 800b950:	dd0b      	ble.n	800b96a <_printf_float+0x1aa>
 800b952:	6121      	str	r1, [r4, #16]
 800b954:	b913      	cbnz	r3, 800b95c <_printf_float+0x19c>
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	07d0      	lsls	r0, r2, #31
 800b95a:	d502      	bpl.n	800b962 <_printf_float+0x1a2>
 800b95c:	3301      	adds	r3, #1
 800b95e:	440b      	add	r3, r1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	65a1      	str	r1, [r4, #88]	; 0x58
 800b964:	f04f 0900 	mov.w	r9, #0
 800b968:	e7de      	b.n	800b928 <_printf_float+0x168>
 800b96a:	b913      	cbnz	r3, 800b972 <_printf_float+0x1b2>
 800b96c:	6822      	ldr	r2, [r4, #0]
 800b96e:	07d2      	lsls	r2, r2, #31
 800b970:	d501      	bpl.n	800b976 <_printf_float+0x1b6>
 800b972:	3302      	adds	r3, #2
 800b974:	e7f4      	b.n	800b960 <_printf_float+0x1a0>
 800b976:	2301      	movs	r3, #1
 800b978:	e7f2      	b.n	800b960 <_printf_float+0x1a0>
 800b97a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b980:	4299      	cmp	r1, r3
 800b982:	db05      	blt.n	800b990 <_printf_float+0x1d0>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	6121      	str	r1, [r4, #16]
 800b988:	07d8      	lsls	r0, r3, #31
 800b98a:	d5ea      	bpl.n	800b962 <_printf_float+0x1a2>
 800b98c:	1c4b      	adds	r3, r1, #1
 800b98e:	e7e7      	b.n	800b960 <_printf_float+0x1a0>
 800b990:	2900      	cmp	r1, #0
 800b992:	bfd4      	ite	le
 800b994:	f1c1 0202 	rsble	r2, r1, #2
 800b998:	2201      	movgt	r2, #1
 800b99a:	4413      	add	r3, r2
 800b99c:	e7e0      	b.n	800b960 <_printf_float+0x1a0>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	055a      	lsls	r2, r3, #21
 800b9a2:	d407      	bmi.n	800b9b4 <_printf_float+0x1f4>
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	4642      	mov	r2, r8
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b8      	blx	r7
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d12c      	bne.n	800ba0c <_printf_float+0x24c>
 800b9b2:	e764      	b.n	800b87e <_printf_float+0xbe>
 800b9b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9b8:	f240 80e0 	bls.w	800bb7c <_printf_float+0x3bc>
 800b9bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f7f5 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d034      	beq.n	800ba36 <_printf_float+0x276>
 800b9cc:	4a37      	ldr	r2, [pc, #220]	; (800baac <_printf_float+0x2ec>)
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f43f af51 	beq.w	800b87e <_printf_float+0xbe>
 800b9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	db02      	blt.n	800b9ea <_printf_float+0x22a>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	07d8      	lsls	r0, r3, #31
 800b9e8:	d510      	bpl.n	800ba0c <_printf_float+0x24c>
 800b9ea:	ee18 3a10 	vmov	r3, s16
 800b9ee:	4652      	mov	r2, sl
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	47b8      	blx	r7
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	f43f af41 	beq.w	800b87e <_printf_float+0xbe>
 800b9fc:	f04f 0800 	mov.w	r8, #0
 800ba00:	f104 091a 	add.w	r9, r4, #26
 800ba04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4543      	cmp	r3, r8
 800ba0a:	dc09      	bgt.n	800ba20 <_printf_float+0x260>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	079b      	lsls	r3, r3, #30
 800ba10:	f100 8107 	bmi.w	800bc22 <_printf_float+0x462>
 800ba14:	68e0      	ldr	r0, [r4, #12]
 800ba16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba18:	4298      	cmp	r0, r3
 800ba1a:	bfb8      	it	lt
 800ba1c:	4618      	movlt	r0, r3
 800ba1e:	e730      	b.n	800b882 <_printf_float+0xc2>
 800ba20:	2301      	movs	r3, #1
 800ba22:	464a      	mov	r2, r9
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	f43f af27 	beq.w	800b87e <_printf_float+0xbe>
 800ba30:	f108 0801 	add.w	r8, r8, #1
 800ba34:	e7e6      	b.n	800ba04 <_printf_float+0x244>
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc39      	bgt.n	800bab0 <_printf_float+0x2f0>
 800ba3c:	4a1b      	ldr	r2, [pc, #108]	; (800baac <_printf_float+0x2ec>)
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	f43f af19 	beq.w	800b87e <_printf_float+0xbe>
 800ba4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba50:	4313      	orrs	r3, r2
 800ba52:	d102      	bne.n	800ba5a <_printf_float+0x29a>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	07d9      	lsls	r1, r3, #31
 800ba58:	d5d8      	bpl.n	800ba0c <_printf_float+0x24c>
 800ba5a:	ee18 3a10 	vmov	r3, s16
 800ba5e:	4652      	mov	r2, sl
 800ba60:	4631      	mov	r1, r6
 800ba62:	4628      	mov	r0, r5
 800ba64:	47b8      	blx	r7
 800ba66:	3001      	adds	r0, #1
 800ba68:	f43f af09 	beq.w	800b87e <_printf_float+0xbe>
 800ba6c:	f04f 0900 	mov.w	r9, #0
 800ba70:	f104 0a1a 	add.w	sl, r4, #26
 800ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba76:	425b      	negs	r3, r3
 800ba78:	454b      	cmp	r3, r9
 800ba7a:	dc01      	bgt.n	800ba80 <_printf_float+0x2c0>
 800ba7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba7e:	e792      	b.n	800b9a6 <_printf_float+0x1e6>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4652      	mov	r2, sl
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f aef7 	beq.w	800b87e <_printf_float+0xbe>
 800ba90:	f109 0901 	add.w	r9, r9, #1
 800ba94:	e7ee      	b.n	800ba74 <_printf_float+0x2b4>
 800ba96:	bf00      	nop
 800ba98:	7fefffff 	.word	0x7fefffff
 800ba9c:	0800ede0 	.word	0x0800ede0
 800baa0:	0800ede4 	.word	0x0800ede4
 800baa4:	0800ede8 	.word	0x0800ede8
 800baa8:	0800edec 	.word	0x0800edec
 800baac:	0800edf0 	.word	0x0800edf0
 800bab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bab4:	429a      	cmp	r2, r3
 800bab6:	bfa8      	it	ge
 800bab8:	461a      	movge	r2, r3
 800baba:	2a00      	cmp	r2, #0
 800babc:	4691      	mov	r9, r2
 800babe:	dc37      	bgt.n	800bb30 <_printf_float+0x370>
 800bac0:	f04f 0b00 	mov.w	fp, #0
 800bac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bac8:	f104 021a 	add.w	r2, r4, #26
 800bacc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	eba3 0309 	sub.w	r3, r3, r9
 800bad4:	455b      	cmp	r3, fp
 800bad6:	dc33      	bgt.n	800bb40 <_printf_float+0x380>
 800bad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800badc:	429a      	cmp	r2, r3
 800bade:	db3b      	blt.n	800bb58 <_printf_float+0x398>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	07da      	lsls	r2, r3, #31
 800bae4:	d438      	bmi.n	800bb58 <_printf_float+0x398>
 800bae6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800baea:	eba2 0903 	sub.w	r9, r2, r3
 800baee:	9b05      	ldr	r3, [sp, #20]
 800baf0:	1ad2      	subs	r2, r2, r3
 800baf2:	4591      	cmp	r9, r2
 800baf4:	bfa8      	it	ge
 800baf6:	4691      	movge	r9, r2
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	dc35      	bgt.n	800bb6a <_printf_float+0x3aa>
 800bafe:	f04f 0800 	mov.w	r8, #0
 800bb02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb06:	f104 0a1a 	add.w	sl, r4, #26
 800bb0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	eba3 0309 	sub.w	r3, r3, r9
 800bb14:	4543      	cmp	r3, r8
 800bb16:	f77f af79 	ble.w	800ba0c <_printf_float+0x24c>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	4631      	mov	r1, r6
 800bb20:	4628      	mov	r0, r5
 800bb22:	47b8      	blx	r7
 800bb24:	3001      	adds	r0, #1
 800bb26:	f43f aeaa 	beq.w	800b87e <_printf_float+0xbe>
 800bb2a:	f108 0801 	add.w	r8, r8, #1
 800bb2e:	e7ec      	b.n	800bb0a <_printf_float+0x34a>
 800bb30:	4613      	mov	r3, r2
 800bb32:	4631      	mov	r1, r6
 800bb34:	4642      	mov	r2, r8
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	d1c0      	bne.n	800bac0 <_printf_float+0x300>
 800bb3e:	e69e      	b.n	800b87e <_printf_float+0xbe>
 800bb40:	2301      	movs	r3, #1
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	9205      	str	r2, [sp, #20]
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f ae97 	beq.w	800b87e <_printf_float+0xbe>
 800bb50:	9a05      	ldr	r2, [sp, #20]
 800bb52:	f10b 0b01 	add.w	fp, fp, #1
 800bb56:	e7b9      	b.n	800bacc <_printf_float+0x30c>
 800bb58:	ee18 3a10 	vmov	r3, s16
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b8      	blx	r7
 800bb64:	3001      	adds	r0, #1
 800bb66:	d1be      	bne.n	800bae6 <_printf_float+0x326>
 800bb68:	e689      	b.n	800b87e <_printf_float+0xbe>
 800bb6a:	9a05      	ldr	r2, [sp, #20]
 800bb6c:	464b      	mov	r3, r9
 800bb6e:	4442      	add	r2, r8
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	d1c1      	bne.n	800bafe <_printf_float+0x33e>
 800bb7a:	e680      	b.n	800b87e <_printf_float+0xbe>
 800bb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb7e:	2a01      	cmp	r2, #1
 800bb80:	dc01      	bgt.n	800bb86 <_printf_float+0x3c6>
 800bb82:	07db      	lsls	r3, r3, #31
 800bb84:	d53a      	bpl.n	800bbfc <_printf_float+0x43c>
 800bb86:	2301      	movs	r3, #1
 800bb88:	4642      	mov	r2, r8
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	47b8      	blx	r7
 800bb90:	3001      	adds	r0, #1
 800bb92:	f43f ae74 	beq.w	800b87e <_printf_float+0xbe>
 800bb96:	ee18 3a10 	vmov	r3, s16
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f ae6b 	beq.w	800b87e <_printf_float+0xbe>
 800bba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbac:	2200      	movs	r2, #0
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bbb4:	f7f4 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbb8:	b9d8      	cbnz	r0, 800bbf2 <_printf_float+0x432>
 800bbba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbbe:	f108 0201 	add.w	r2, r8, #1
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d10e      	bne.n	800bbea <_printf_float+0x42a>
 800bbcc:	e657      	b.n	800b87e <_printf_float+0xbe>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4652      	mov	r2, sl
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b8      	blx	r7
 800bbd8:	3001      	adds	r0, #1
 800bbda:	f43f ae50 	beq.w	800b87e <_printf_float+0xbe>
 800bbde:	f108 0801 	add.w	r8, r8, #1
 800bbe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	4543      	cmp	r3, r8
 800bbe8:	dcf1      	bgt.n	800bbce <_printf_float+0x40e>
 800bbea:	464b      	mov	r3, r9
 800bbec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbf0:	e6da      	b.n	800b9a8 <_printf_float+0x1e8>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	f104 0a1a 	add.w	sl, r4, #26
 800bbfa:	e7f2      	b.n	800bbe2 <_printf_float+0x422>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4642      	mov	r2, r8
 800bc00:	e7df      	b.n	800bbc2 <_printf_float+0x402>
 800bc02:	2301      	movs	r3, #1
 800bc04:	464a      	mov	r2, r9
 800bc06:	4631      	mov	r1, r6
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b8      	blx	r7
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	f43f ae36 	beq.w	800b87e <_printf_float+0xbe>
 800bc12:	f108 0801 	add.w	r8, r8, #1
 800bc16:	68e3      	ldr	r3, [r4, #12]
 800bc18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc1a:	1a5b      	subs	r3, r3, r1
 800bc1c:	4543      	cmp	r3, r8
 800bc1e:	dcf0      	bgt.n	800bc02 <_printf_float+0x442>
 800bc20:	e6f8      	b.n	800ba14 <_printf_float+0x254>
 800bc22:	f04f 0800 	mov.w	r8, #0
 800bc26:	f104 0919 	add.w	r9, r4, #25
 800bc2a:	e7f4      	b.n	800bc16 <_printf_float+0x456>

0800bc2c <_printf_common>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	4616      	mov	r6, r2
 800bc32:	4699      	mov	r9, r3
 800bc34:	688a      	ldr	r2, [r1, #8]
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	bfb8      	it	lt
 800bc40:	4613      	movlt	r3, r2
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc48:	4607      	mov	r7, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_printf_common+0x26>
 800bc4e:	3301      	adds	r3, #1
 800bc50:	6033      	str	r3, [r6, #0]
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	0699      	lsls	r1, r3, #26
 800bc56:	bf42      	ittt	mi
 800bc58:	6833      	ldrmi	r3, [r6, #0]
 800bc5a:	3302      	addmi	r3, #2
 800bc5c:	6033      	strmi	r3, [r6, #0]
 800bc5e:	6825      	ldr	r5, [r4, #0]
 800bc60:	f015 0506 	ands.w	r5, r5, #6
 800bc64:	d106      	bne.n	800bc74 <_printf_common+0x48>
 800bc66:	f104 0a19 	add.w	sl, r4, #25
 800bc6a:	68e3      	ldr	r3, [r4, #12]
 800bc6c:	6832      	ldr	r2, [r6, #0]
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dc26      	bgt.n	800bcc2 <_printf_common+0x96>
 800bc74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc78:	1e13      	subs	r3, r2, #0
 800bc7a:	6822      	ldr	r2, [r4, #0]
 800bc7c:	bf18      	it	ne
 800bc7e:	2301      	movne	r3, #1
 800bc80:	0692      	lsls	r2, r2, #26
 800bc82:	d42b      	bmi.n	800bcdc <_printf_common+0xb0>
 800bc84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc88:	4649      	mov	r1, r9
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	47c0      	blx	r8
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d01e      	beq.n	800bcd0 <_printf_common+0xa4>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	6922      	ldr	r2, [r4, #16]
 800bc96:	f003 0306 	and.w	r3, r3, #6
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	bf02      	ittt	eq
 800bc9e:	68e5      	ldreq	r5, [r4, #12]
 800bca0:	6833      	ldreq	r3, [r6, #0]
 800bca2:	1aed      	subeq	r5, r5, r3
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	bf0c      	ite	eq
 800bca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcac:	2500      	movne	r5, #0
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bfc4      	itt	gt
 800bcb2:	1a9b      	subgt	r3, r3, r2
 800bcb4:	18ed      	addgt	r5, r5, r3
 800bcb6:	2600      	movs	r6, #0
 800bcb8:	341a      	adds	r4, #26
 800bcba:	42b5      	cmp	r5, r6
 800bcbc:	d11a      	bne.n	800bcf4 <_printf_common+0xc8>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e008      	b.n	800bcd4 <_printf_common+0xa8>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	4638      	mov	r0, r7
 800bcca:	47c0      	blx	r8
 800bccc:	3001      	adds	r0, #1
 800bcce:	d103      	bne.n	800bcd8 <_printf_common+0xac>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd8:	3501      	adds	r5, #1
 800bcda:	e7c6      	b.n	800bc6a <_printf_common+0x3e>
 800bcdc:	18e1      	adds	r1, r4, r3
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	2030      	movs	r0, #48	; 0x30
 800bce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bce6:	4422      	add	r2, r4
 800bce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcf0:	3302      	adds	r3, #2
 800bcf2:	e7c7      	b.n	800bc84 <_printf_common+0x58>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	47c0      	blx	r8
 800bcfe:	3001      	adds	r0, #1
 800bd00:	d0e6      	beq.n	800bcd0 <_printf_common+0xa4>
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7d9      	b.n	800bcba <_printf_common+0x8e>
	...

0800bd08 <_printf_i>:
 800bd08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	7e0f      	ldrb	r7, [r1, #24]
 800bd0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd10:	2f78      	cmp	r7, #120	; 0x78
 800bd12:	4691      	mov	r9, r2
 800bd14:	4680      	mov	r8, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	469a      	mov	sl, r3
 800bd1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd1e:	d807      	bhi.n	800bd30 <_printf_i+0x28>
 800bd20:	2f62      	cmp	r7, #98	; 0x62
 800bd22:	d80a      	bhi.n	800bd3a <_printf_i+0x32>
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	f000 80d4 	beq.w	800bed2 <_printf_i+0x1ca>
 800bd2a:	2f58      	cmp	r7, #88	; 0x58
 800bd2c:	f000 80c0 	beq.w	800beb0 <_printf_i+0x1a8>
 800bd30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd38:	e03a      	b.n	800bdb0 <_printf_i+0xa8>
 800bd3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd3e:	2b15      	cmp	r3, #21
 800bd40:	d8f6      	bhi.n	800bd30 <_printf_i+0x28>
 800bd42:	a101      	add	r1, pc, #4	; (adr r1, 800bd48 <_printf_i+0x40>)
 800bd44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bdb5 	.word	0x0800bdb5
 800bd50:	0800bd31 	.word	0x0800bd31
 800bd54:	0800bd31 	.word	0x0800bd31
 800bd58:	0800bd31 	.word	0x0800bd31
 800bd5c:	0800bd31 	.word	0x0800bd31
 800bd60:	0800bdb5 	.word	0x0800bdb5
 800bd64:	0800bd31 	.word	0x0800bd31
 800bd68:	0800bd31 	.word	0x0800bd31
 800bd6c:	0800bd31 	.word	0x0800bd31
 800bd70:	0800bd31 	.word	0x0800bd31
 800bd74:	0800beb9 	.word	0x0800beb9
 800bd78:	0800bde1 	.word	0x0800bde1
 800bd7c:	0800be73 	.word	0x0800be73
 800bd80:	0800bd31 	.word	0x0800bd31
 800bd84:	0800bd31 	.word	0x0800bd31
 800bd88:	0800bedb 	.word	0x0800bedb
 800bd8c:	0800bd31 	.word	0x0800bd31
 800bd90:	0800bde1 	.word	0x0800bde1
 800bd94:	0800bd31 	.word	0x0800bd31
 800bd98:	0800bd31 	.word	0x0800bd31
 800bd9c:	0800be7b 	.word	0x0800be7b
 800bda0:	682b      	ldr	r3, [r5, #0]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	602a      	str	r2, [r5, #0]
 800bda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e09f      	b.n	800bef4 <_printf_i+0x1ec>
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	682b      	ldr	r3, [r5, #0]
 800bdb8:	0607      	lsls	r7, r0, #24
 800bdba:	f103 0104 	add.w	r1, r3, #4
 800bdbe:	6029      	str	r1, [r5, #0]
 800bdc0:	d501      	bpl.n	800bdc6 <_printf_i+0xbe>
 800bdc2:	681e      	ldr	r6, [r3, #0]
 800bdc4:	e003      	b.n	800bdce <_printf_i+0xc6>
 800bdc6:	0646      	lsls	r6, r0, #25
 800bdc8:	d5fb      	bpl.n	800bdc2 <_printf_i+0xba>
 800bdca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	da03      	bge.n	800bdda <_printf_i+0xd2>
 800bdd2:	232d      	movs	r3, #45	; 0x2d
 800bdd4:	4276      	negs	r6, r6
 800bdd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdda:	485a      	ldr	r0, [pc, #360]	; (800bf44 <_printf_i+0x23c>)
 800bddc:	230a      	movs	r3, #10
 800bdde:	e012      	b.n	800be06 <_printf_i+0xfe>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	6820      	ldr	r0, [r4, #0]
 800bde4:	1d19      	adds	r1, r3, #4
 800bde6:	6029      	str	r1, [r5, #0]
 800bde8:	0605      	lsls	r5, r0, #24
 800bdea:	d501      	bpl.n	800bdf0 <_printf_i+0xe8>
 800bdec:	681e      	ldr	r6, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <_printf_i+0xee>
 800bdf0:	0641      	lsls	r1, r0, #25
 800bdf2:	d5fb      	bpl.n	800bdec <_printf_i+0xe4>
 800bdf4:	881e      	ldrh	r6, [r3, #0]
 800bdf6:	4853      	ldr	r0, [pc, #332]	; (800bf44 <_printf_i+0x23c>)
 800bdf8:	2f6f      	cmp	r7, #111	; 0x6f
 800bdfa:	bf0c      	ite	eq
 800bdfc:	2308      	moveq	r3, #8
 800bdfe:	230a      	movne	r3, #10
 800be00:	2100      	movs	r1, #0
 800be02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be06:	6865      	ldr	r5, [r4, #4]
 800be08:	60a5      	str	r5, [r4, #8]
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	bfa2      	ittt	ge
 800be0e:	6821      	ldrge	r1, [r4, #0]
 800be10:	f021 0104 	bicge.w	r1, r1, #4
 800be14:	6021      	strge	r1, [r4, #0]
 800be16:	b90e      	cbnz	r6, 800be1c <_printf_i+0x114>
 800be18:	2d00      	cmp	r5, #0
 800be1a:	d04b      	beq.n	800beb4 <_printf_i+0x1ac>
 800be1c:	4615      	mov	r5, r2
 800be1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800be22:	fb03 6711 	mls	r7, r3, r1, r6
 800be26:	5dc7      	ldrb	r7, [r0, r7]
 800be28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be2c:	4637      	mov	r7, r6
 800be2e:	42bb      	cmp	r3, r7
 800be30:	460e      	mov	r6, r1
 800be32:	d9f4      	bls.n	800be1e <_printf_i+0x116>
 800be34:	2b08      	cmp	r3, #8
 800be36:	d10b      	bne.n	800be50 <_printf_i+0x148>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	07de      	lsls	r6, r3, #31
 800be3c:	d508      	bpl.n	800be50 <_printf_i+0x148>
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	4299      	cmp	r1, r3
 800be44:	bfde      	ittt	le
 800be46:	2330      	movle	r3, #48	; 0x30
 800be48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be50:	1b52      	subs	r2, r2, r5
 800be52:	6122      	str	r2, [r4, #16]
 800be54:	f8cd a000 	str.w	sl, [sp]
 800be58:	464b      	mov	r3, r9
 800be5a:	aa03      	add	r2, sp, #12
 800be5c:	4621      	mov	r1, r4
 800be5e:	4640      	mov	r0, r8
 800be60:	f7ff fee4 	bl	800bc2c <_printf_common>
 800be64:	3001      	adds	r0, #1
 800be66:	d14a      	bne.n	800befe <_printf_i+0x1f6>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	b004      	add	sp, #16
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	f043 0320 	orr.w	r3, r3, #32
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	4833      	ldr	r0, [pc, #204]	; (800bf48 <_printf_i+0x240>)
 800be7c:	2778      	movs	r7, #120	; 0x78
 800be7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	6829      	ldr	r1, [r5, #0]
 800be86:	061f      	lsls	r7, r3, #24
 800be88:	f851 6b04 	ldr.w	r6, [r1], #4
 800be8c:	d402      	bmi.n	800be94 <_printf_i+0x18c>
 800be8e:	065f      	lsls	r7, r3, #25
 800be90:	bf48      	it	mi
 800be92:	b2b6      	uxthmi	r6, r6
 800be94:	07df      	lsls	r7, r3, #31
 800be96:	bf48      	it	mi
 800be98:	f043 0320 	orrmi.w	r3, r3, #32
 800be9c:	6029      	str	r1, [r5, #0]
 800be9e:	bf48      	it	mi
 800bea0:	6023      	strmi	r3, [r4, #0]
 800bea2:	b91e      	cbnz	r6, 800beac <_printf_i+0x1a4>
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	f023 0320 	bic.w	r3, r3, #32
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	2310      	movs	r3, #16
 800beae:	e7a7      	b.n	800be00 <_printf_i+0xf8>
 800beb0:	4824      	ldr	r0, [pc, #144]	; (800bf44 <_printf_i+0x23c>)
 800beb2:	e7e4      	b.n	800be7e <_printf_i+0x176>
 800beb4:	4615      	mov	r5, r2
 800beb6:	e7bd      	b.n	800be34 <_printf_i+0x12c>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	6826      	ldr	r6, [r4, #0]
 800bebc:	6961      	ldr	r1, [r4, #20]
 800bebe:	1d18      	adds	r0, r3, #4
 800bec0:	6028      	str	r0, [r5, #0]
 800bec2:	0635      	lsls	r5, r6, #24
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	d501      	bpl.n	800becc <_printf_i+0x1c4>
 800bec8:	6019      	str	r1, [r3, #0]
 800beca:	e002      	b.n	800bed2 <_printf_i+0x1ca>
 800becc:	0670      	lsls	r0, r6, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0x1c0>
 800bed0:	8019      	strh	r1, [r3, #0]
 800bed2:	2300      	movs	r3, #0
 800bed4:	6123      	str	r3, [r4, #16]
 800bed6:	4615      	mov	r5, r2
 800bed8:	e7bc      	b.n	800be54 <_printf_i+0x14c>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	1d1a      	adds	r2, r3, #4
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	681d      	ldr	r5, [r3, #0]
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	2100      	movs	r1, #0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f7f4 f972 	bl	80001d0 <memchr>
 800beec:	b108      	cbz	r0, 800bef2 <_printf_i+0x1ea>
 800beee:	1b40      	subs	r0, r0, r5
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	6863      	ldr	r3, [r4, #4]
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	2300      	movs	r3, #0
 800bef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800befc:	e7aa      	b.n	800be54 <_printf_i+0x14c>
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4649      	mov	r1, r9
 800bf04:	4640      	mov	r0, r8
 800bf06:	47d0      	blx	sl
 800bf08:	3001      	adds	r0, #1
 800bf0a:	d0ad      	beq.n	800be68 <_printf_i+0x160>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	079b      	lsls	r3, r3, #30
 800bf10:	d413      	bmi.n	800bf3a <_printf_i+0x232>
 800bf12:	68e0      	ldr	r0, [r4, #12]
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	4298      	cmp	r0, r3
 800bf18:	bfb8      	it	lt
 800bf1a:	4618      	movlt	r0, r3
 800bf1c:	e7a6      	b.n	800be6c <_printf_i+0x164>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	4632      	mov	r2, r6
 800bf22:	4649      	mov	r1, r9
 800bf24:	4640      	mov	r0, r8
 800bf26:	47d0      	blx	sl
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d09d      	beq.n	800be68 <_printf_i+0x160>
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	68e3      	ldr	r3, [r4, #12]
 800bf30:	9903      	ldr	r1, [sp, #12]
 800bf32:	1a5b      	subs	r3, r3, r1
 800bf34:	42ab      	cmp	r3, r5
 800bf36:	dcf2      	bgt.n	800bf1e <_printf_i+0x216>
 800bf38:	e7eb      	b.n	800bf12 <_printf_i+0x20a>
 800bf3a:	2500      	movs	r5, #0
 800bf3c:	f104 0619 	add.w	r6, r4, #25
 800bf40:	e7f5      	b.n	800bf2e <_printf_i+0x226>
 800bf42:	bf00      	nop
 800bf44:	0800edf2 	.word	0x0800edf2
 800bf48:	0800ee03 	.word	0x0800ee03

0800bf4c <std>:
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	4604      	mov	r4, r0
 800bf52:	e9c0 3300 	strd	r3, r3, [r0]
 800bf56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5a:	6083      	str	r3, [r0, #8]
 800bf5c:	8181      	strh	r1, [r0, #12]
 800bf5e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf60:	81c2      	strh	r2, [r0, #14]
 800bf62:	6183      	str	r3, [r0, #24]
 800bf64:	4619      	mov	r1, r3
 800bf66:	2208      	movs	r2, #8
 800bf68:	305c      	adds	r0, #92	; 0x5c
 800bf6a:	f000 f902 	bl	800c172 <memset>
 800bf6e:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <std+0x38>)
 800bf70:	6263      	str	r3, [r4, #36]	; 0x24
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <std+0x3c>)
 800bf74:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <std+0x40>)
 800bf78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x44>)
 800bf7c:	6224      	str	r4, [r4, #32]
 800bf7e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	bf00      	nop
 800bf84:	0800c0ed 	.word	0x0800c0ed
 800bf88:	0800c10f 	.word	0x0800c10f
 800bf8c:	0800c147 	.word	0x0800c147
 800bf90:	0800c16b 	.word	0x0800c16b

0800bf94 <stdio_exit_handler>:
 800bf94:	4a02      	ldr	r2, [pc, #8]	; (800bfa0 <stdio_exit_handler+0xc>)
 800bf96:	4903      	ldr	r1, [pc, #12]	; (800bfa4 <stdio_exit_handler+0x10>)
 800bf98:	4803      	ldr	r0, [pc, #12]	; (800bfa8 <stdio_exit_handler+0x14>)
 800bf9a:	f000 b869 	b.w	800c070 <_fwalk_sglue>
 800bf9e:	bf00      	nop
 800bfa0:	2000000c 	.word	0x2000000c
 800bfa4:	0800e5e9 	.word	0x0800e5e9
 800bfa8:	20000184 	.word	0x20000184

0800bfac <cleanup_stdio>:
 800bfac:	6841      	ldr	r1, [r0, #4]
 800bfae:	4b0c      	ldr	r3, [pc, #48]	; (800bfe0 <cleanup_stdio+0x34>)
 800bfb0:	4299      	cmp	r1, r3
 800bfb2:	b510      	push	{r4, lr}
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	d001      	beq.n	800bfbc <cleanup_stdio+0x10>
 800bfb8:	f002 fb16 	bl	800e5e8 <_fflush_r>
 800bfbc:	68a1      	ldr	r1, [r4, #8]
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <cleanup_stdio+0x38>)
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	d002      	beq.n	800bfca <cleanup_stdio+0x1e>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f002 fb0f 	bl	800e5e8 <_fflush_r>
 800bfca:	68e1      	ldr	r1, [r4, #12]
 800bfcc:	4b06      	ldr	r3, [pc, #24]	; (800bfe8 <cleanup_stdio+0x3c>)
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	d004      	beq.n	800bfdc <cleanup_stdio+0x30>
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd8:	f002 bb06 	b.w	800e5e8 <_fflush_r>
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000a00 	.word	0x20000a00
 800bfe4:	20000a68 	.word	0x20000a68
 800bfe8:	20000ad0 	.word	0x20000ad0

0800bfec <global_stdio_init.part.0>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <global_stdio_init.part.0+0x30>)
 800bff0:	4c0b      	ldr	r4, [pc, #44]	; (800c020 <global_stdio_init.part.0+0x34>)
 800bff2:	4a0c      	ldr	r2, [pc, #48]	; (800c024 <global_stdio_init.part.0+0x38>)
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	4620      	mov	r0, r4
 800bff8:	2200      	movs	r2, #0
 800bffa:	2104      	movs	r1, #4
 800bffc:	f7ff ffa6 	bl	800bf4c <std>
 800c000:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c004:	2201      	movs	r2, #1
 800c006:	2109      	movs	r1, #9
 800c008:	f7ff ffa0 	bl	800bf4c <std>
 800c00c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c010:	2202      	movs	r2, #2
 800c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c016:	2112      	movs	r1, #18
 800c018:	f7ff bf98 	b.w	800bf4c <std>
 800c01c:	20000b38 	.word	0x20000b38
 800c020:	20000a00 	.word	0x20000a00
 800c024:	0800bf95 	.word	0x0800bf95

0800c028 <__sfp_lock_acquire>:
 800c028:	4801      	ldr	r0, [pc, #4]	; (800c030 <__sfp_lock_acquire+0x8>)
 800c02a:	f000 b947 	b.w	800c2bc <__retarget_lock_acquire_recursive>
 800c02e:	bf00      	nop
 800c030:	20000b41 	.word	0x20000b41

0800c034 <__sfp_lock_release>:
 800c034:	4801      	ldr	r0, [pc, #4]	; (800c03c <__sfp_lock_release+0x8>)
 800c036:	f000 b942 	b.w	800c2be <__retarget_lock_release_recursive>
 800c03a:	bf00      	nop
 800c03c:	20000b41 	.word	0x20000b41

0800c040 <__sinit>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4604      	mov	r4, r0
 800c044:	f7ff fff0 	bl	800c028 <__sfp_lock_acquire>
 800c048:	6a23      	ldr	r3, [r4, #32]
 800c04a:	b11b      	cbz	r3, 800c054 <__sinit+0x14>
 800c04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c050:	f7ff bff0 	b.w	800c034 <__sfp_lock_release>
 800c054:	4b04      	ldr	r3, [pc, #16]	; (800c068 <__sinit+0x28>)
 800c056:	6223      	str	r3, [r4, #32]
 800c058:	4b04      	ldr	r3, [pc, #16]	; (800c06c <__sinit+0x2c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1f5      	bne.n	800c04c <__sinit+0xc>
 800c060:	f7ff ffc4 	bl	800bfec <global_stdio_init.part.0>
 800c064:	e7f2      	b.n	800c04c <__sinit+0xc>
 800c066:	bf00      	nop
 800c068:	0800bfad 	.word	0x0800bfad
 800c06c:	20000b38 	.word	0x20000b38

0800c070 <_fwalk_sglue>:
 800c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c074:	4607      	mov	r7, r0
 800c076:	4688      	mov	r8, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	2600      	movs	r6, #0
 800c07c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c080:	f1b9 0901 	subs.w	r9, r9, #1
 800c084:	d505      	bpl.n	800c092 <_fwalk_sglue+0x22>
 800c086:	6824      	ldr	r4, [r4, #0]
 800c088:	2c00      	cmp	r4, #0
 800c08a:	d1f7      	bne.n	800c07c <_fwalk_sglue+0xc>
 800c08c:	4630      	mov	r0, r6
 800c08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c092:	89ab      	ldrh	r3, [r5, #12]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d907      	bls.n	800c0a8 <_fwalk_sglue+0x38>
 800c098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c09c:	3301      	adds	r3, #1
 800c09e:	d003      	beq.n	800c0a8 <_fwalk_sglue+0x38>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	47c0      	blx	r8
 800c0a6:	4306      	orrs	r6, r0
 800c0a8:	3568      	adds	r5, #104	; 0x68
 800c0aa:	e7e9      	b.n	800c080 <_fwalk_sglue+0x10>

0800c0ac <siprintf>:
 800c0ac:	b40e      	push	{r1, r2, r3}
 800c0ae:	b500      	push	{lr}
 800c0b0:	b09c      	sub	sp, #112	; 0x70
 800c0b2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0b4:	9002      	str	r0, [sp, #8]
 800c0b6:	9006      	str	r0, [sp, #24]
 800c0b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0bc:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <siprintf+0x38>)
 800c0be:	9107      	str	r1, [sp, #28]
 800c0c0:	9104      	str	r1, [sp, #16]
 800c0c2:	4909      	ldr	r1, [pc, #36]	; (800c0e8 <siprintf+0x3c>)
 800c0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c8:	9105      	str	r1, [sp, #20]
 800c0ca:	6800      	ldr	r0, [r0, #0]
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	a902      	add	r1, sp, #8
 800c0d0:	f002 f906 	bl	800e2e0 <_svfiprintf_r>
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	b01c      	add	sp, #112	; 0x70
 800c0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0e0:	b003      	add	sp, #12
 800c0e2:	4770      	bx	lr
 800c0e4:	200001d0 	.word	0x200001d0
 800c0e8:	ffff0208 	.word	0xffff0208

0800c0ec <__sread>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f4:	f000 f894 	bl	800c220 <_read_r>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	bfab      	itete	ge
 800c0fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c100:	181b      	addge	r3, r3, r0
 800c102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c106:	bfac      	ite	ge
 800c108:	6563      	strge	r3, [r4, #84]	; 0x54
 800c10a:	81a3      	strhlt	r3, [r4, #12]
 800c10c:	bd10      	pop	{r4, pc}

0800c10e <__swrite>:
 800c10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c112:	461f      	mov	r7, r3
 800c114:	898b      	ldrh	r3, [r1, #12]
 800c116:	05db      	lsls	r3, r3, #23
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	4616      	mov	r6, r2
 800c11e:	d505      	bpl.n	800c12c <__swrite+0x1e>
 800c120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c124:	2302      	movs	r3, #2
 800c126:	2200      	movs	r2, #0
 800c128:	f000 f868 	bl	800c1fc <_lseek_r>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	4632      	mov	r2, r6
 800c13a:	463b      	mov	r3, r7
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	f000 b87f 	b.w	800c244 <_write_r>

0800c146 <__sseek>:
 800c146:	b510      	push	{r4, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14e:	f000 f855 	bl	800c1fc <_lseek_r>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	bf15      	itete	ne
 800c158:	6560      	strne	r0, [r4, #84]	; 0x54
 800c15a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c15e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c162:	81a3      	strheq	r3, [r4, #12]
 800c164:	bf18      	it	ne
 800c166:	81a3      	strhne	r3, [r4, #12]
 800c168:	bd10      	pop	{r4, pc}

0800c16a <__sclose>:
 800c16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16e:	f000 b835 	b.w	800c1dc <_close_r>

0800c172 <memset>:
 800c172:	4402      	add	r2, r0
 800c174:	4603      	mov	r3, r0
 800c176:	4293      	cmp	r3, r2
 800c178:	d100      	bne.n	800c17c <memset+0xa>
 800c17a:	4770      	bx	lr
 800c17c:	f803 1b01 	strb.w	r1, [r3], #1
 800c180:	e7f9      	b.n	800c176 <memset+0x4>

0800c182 <strncmp>:
 800c182:	b510      	push	{r4, lr}
 800c184:	b16a      	cbz	r2, 800c1a2 <strncmp+0x20>
 800c186:	3901      	subs	r1, #1
 800c188:	1884      	adds	r4, r0, r2
 800c18a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c18e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c192:	429a      	cmp	r2, r3
 800c194:	d103      	bne.n	800c19e <strncmp+0x1c>
 800c196:	42a0      	cmp	r0, r4
 800c198:	d001      	beq.n	800c19e <strncmp+0x1c>
 800c19a:	2a00      	cmp	r2, #0
 800c19c:	d1f5      	bne.n	800c18a <strncmp+0x8>
 800c19e:	1ad0      	subs	r0, r2, r3
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	e7fc      	b.n	800c1a0 <strncmp+0x1e>

0800c1a6 <strstr>:
 800c1a6:	780a      	ldrb	r2, [r1, #0]
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	b96a      	cbnz	r2, 800c1c8 <strstr+0x22>
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d109      	bne.n	800c1c6 <strstr+0x20>
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0f6      	beq.n	800c1ac <strstr+0x6>
 800c1be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c1c2:	429e      	cmp	r6, r3
 800c1c4:	d0f7      	beq.n	800c1b6 <strstr+0x10>
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	7803      	ldrb	r3, [r0, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1ef      	bne.n	800c1ae <strstr+0x8>
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	e7ec      	b.n	800c1ac <strstr+0x6>
	...

0800c1d4 <_localeconv_r>:
 800c1d4:	4800      	ldr	r0, [pc, #0]	; (800c1d8 <_localeconv_r+0x4>)
 800c1d6:	4770      	bx	lr
 800c1d8:	20000108 	.word	0x20000108

0800c1dc <_close_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d06      	ldr	r5, [pc, #24]	; (800c1f8 <_close_r+0x1c>)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	f7f6 fc41 	bl	8002a6e <_close>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_close_r+0x1a>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_close_r+0x1a>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20000b3c 	.word	0x20000b3c

0800c1fc <_lseek_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d07      	ldr	r5, [pc, #28]	; (800c21c <_lseek_r+0x20>)
 800c200:	4604      	mov	r4, r0
 800c202:	4608      	mov	r0, r1
 800c204:	4611      	mov	r1, r2
 800c206:	2200      	movs	r2, #0
 800c208:	602a      	str	r2, [r5, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	f7f6 fc56 	bl	8002abc <_lseek>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <_lseek_r+0x1e>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b103      	cbz	r3, 800c21a <_lseek_r+0x1e>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	20000b3c 	.word	0x20000b3c

0800c220 <_read_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d07      	ldr	r5, [pc, #28]	; (800c240 <_read_r+0x20>)
 800c224:	4604      	mov	r4, r0
 800c226:	4608      	mov	r0, r1
 800c228:	4611      	mov	r1, r2
 800c22a:	2200      	movs	r2, #0
 800c22c:	602a      	str	r2, [r5, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	f7f6 fbe4 	bl	80029fc <_read>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_read_r+0x1e>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_read_r+0x1e>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20000b3c 	.word	0x20000b3c

0800c244 <_write_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d07      	ldr	r5, [pc, #28]	; (800c264 <_write_r+0x20>)
 800c248:	4604      	mov	r4, r0
 800c24a:	4608      	mov	r0, r1
 800c24c:	4611      	mov	r1, r2
 800c24e:	2200      	movs	r2, #0
 800c250:	602a      	str	r2, [r5, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	f7f6 fbef 	bl	8002a36 <_write>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_write_r+0x1e>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_write_r+0x1e>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	20000b3c 	.word	0x20000b3c

0800c268 <__errno>:
 800c268:	4b01      	ldr	r3, [pc, #4]	; (800c270 <__errno+0x8>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	200001d0 	.word	0x200001d0

0800c274 <__libc_init_array>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4d0d      	ldr	r5, [pc, #52]	; (800c2ac <__libc_init_array+0x38>)
 800c278:	4c0d      	ldr	r4, [pc, #52]	; (800c2b0 <__libc_init_array+0x3c>)
 800c27a:	1b64      	subs	r4, r4, r5
 800c27c:	10a4      	asrs	r4, r4, #2
 800c27e:	2600      	movs	r6, #0
 800c280:	42a6      	cmp	r6, r4
 800c282:	d109      	bne.n	800c298 <__libc_init_array+0x24>
 800c284:	4d0b      	ldr	r5, [pc, #44]	; (800c2b4 <__libc_init_array+0x40>)
 800c286:	4c0c      	ldr	r4, [pc, #48]	; (800c2b8 <__libc_init_array+0x44>)
 800c288:	f002 fd26 	bl	800ecd8 <_init>
 800c28c:	1b64      	subs	r4, r4, r5
 800c28e:	10a4      	asrs	r4, r4, #2
 800c290:	2600      	movs	r6, #0
 800c292:	42a6      	cmp	r6, r4
 800c294:	d105      	bne.n	800c2a2 <__libc_init_array+0x2e>
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29c:	4798      	blx	r3
 800c29e:	3601      	adds	r6, #1
 800c2a0:	e7ee      	b.n	800c280 <__libc_init_array+0xc>
 800c2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a6:	4798      	blx	r3
 800c2a8:	3601      	adds	r6, #1
 800c2aa:	e7f2      	b.n	800c292 <__libc_init_array+0x1e>
 800c2ac:	0800f1bc 	.word	0x0800f1bc
 800c2b0:	0800f1bc 	.word	0x0800f1bc
 800c2b4:	0800f1bc 	.word	0x0800f1bc
 800c2b8:	0800f1c0 	.word	0x0800f1c0

0800c2bc <__retarget_lock_acquire_recursive>:
 800c2bc:	4770      	bx	lr

0800c2be <__retarget_lock_release_recursive>:
 800c2be:	4770      	bx	lr

0800c2c0 <memcpy>:
 800c2c0:	440a      	add	r2, r1
 800c2c2:	4291      	cmp	r1, r2
 800c2c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2c8:	d100      	bne.n	800c2cc <memcpy+0xc>
 800c2ca:	4770      	bx	lr
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2d6:	4291      	cmp	r1, r2
 800c2d8:	d1f9      	bne.n	800c2ce <memcpy+0xe>
 800c2da:	bd10      	pop	{r4, pc}
 800c2dc:	0000      	movs	r0, r0
	...

0800c2e0 <nan>:
 800c2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2e8 <nan+0x8>
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	7ff80000 	.word	0x7ff80000

0800c2f0 <quorem>:
 800c2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	6903      	ldr	r3, [r0, #16]
 800c2f6:	690c      	ldr	r4, [r1, #16]
 800c2f8:	42a3      	cmp	r3, r4
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	db7e      	blt.n	800c3fc <quorem+0x10c>
 800c2fe:	3c01      	subs	r4, #1
 800c300:	f101 0814 	add.w	r8, r1, #20
 800c304:	f100 0514 	add.w	r5, r0, #20
 800c308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c316:	3301      	adds	r3, #1
 800c318:	429a      	cmp	r2, r3
 800c31a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c31e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c322:	fbb2 f6f3 	udiv	r6, r2, r3
 800c326:	d331      	bcc.n	800c38c <quorem+0x9c>
 800c328:	f04f 0e00 	mov.w	lr, #0
 800c32c:	4640      	mov	r0, r8
 800c32e:	46ac      	mov	ip, r5
 800c330:	46f2      	mov	sl, lr
 800c332:	f850 2b04 	ldr.w	r2, [r0], #4
 800c336:	b293      	uxth	r3, r2
 800c338:	fb06 e303 	mla	r3, r6, r3, lr
 800c33c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c340:	0c1a      	lsrs	r2, r3, #16
 800c342:	b29b      	uxth	r3, r3
 800c344:	ebaa 0303 	sub.w	r3, sl, r3
 800c348:	f8dc a000 	ldr.w	sl, [ip]
 800c34c:	fa13 f38a 	uxtah	r3, r3, sl
 800c350:	fb06 220e 	mla	r2, r6, lr, r2
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	9b00      	ldr	r3, [sp, #0]
 800c358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c35c:	b292      	uxth	r2, r2
 800c35e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c366:	f8bd 3000 	ldrh.w	r3, [sp]
 800c36a:	4581      	cmp	r9, r0
 800c36c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c370:	f84c 3b04 	str.w	r3, [ip], #4
 800c374:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c378:	d2db      	bcs.n	800c332 <quorem+0x42>
 800c37a:	f855 300b 	ldr.w	r3, [r5, fp]
 800c37e:	b92b      	cbnz	r3, 800c38c <quorem+0x9c>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	3b04      	subs	r3, #4
 800c384:	429d      	cmp	r5, r3
 800c386:	461a      	mov	r2, r3
 800c388:	d32c      	bcc.n	800c3e4 <quorem+0xf4>
 800c38a:	613c      	str	r4, [r7, #16]
 800c38c:	4638      	mov	r0, r7
 800c38e:	f001 fd59 	bl	800de44 <__mcmp>
 800c392:	2800      	cmp	r0, #0
 800c394:	db22      	blt.n	800c3dc <quorem+0xec>
 800c396:	3601      	adds	r6, #1
 800c398:	4629      	mov	r1, r5
 800c39a:	2000      	movs	r0, #0
 800c39c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3a0:	f8d1 c000 	ldr.w	ip, [r1]
 800c3a4:	b293      	uxth	r3, r2
 800c3a6:	1ac3      	subs	r3, r0, r3
 800c3a8:	0c12      	lsrs	r2, r2, #16
 800c3aa:	fa13 f38c 	uxtah	r3, r3, ip
 800c3ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3bc:	45c1      	cmp	r9, r8
 800c3be:	f841 3b04 	str.w	r3, [r1], #4
 800c3c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3c6:	d2e9      	bcs.n	800c39c <quorem+0xac>
 800c3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3d0:	b922      	cbnz	r2, 800c3dc <quorem+0xec>
 800c3d2:	3b04      	subs	r3, #4
 800c3d4:	429d      	cmp	r5, r3
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	d30a      	bcc.n	800c3f0 <quorem+0x100>
 800c3da:	613c      	str	r4, [r7, #16]
 800c3dc:	4630      	mov	r0, r6
 800c3de:	b003      	add	sp, #12
 800c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e4:	6812      	ldr	r2, [r2, #0]
 800c3e6:	3b04      	subs	r3, #4
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	d1ce      	bne.n	800c38a <quorem+0x9a>
 800c3ec:	3c01      	subs	r4, #1
 800c3ee:	e7c9      	b.n	800c384 <quorem+0x94>
 800c3f0:	6812      	ldr	r2, [r2, #0]
 800c3f2:	3b04      	subs	r3, #4
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	d1f0      	bne.n	800c3da <quorem+0xea>
 800c3f8:	3c01      	subs	r4, #1
 800c3fa:	e7eb      	b.n	800c3d4 <quorem+0xe4>
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7ee      	b.n	800c3de <quorem+0xee>

0800c400 <_dtoa_r>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	ed2d 8b04 	vpush	{d8-d9}
 800c408:	69c5      	ldr	r5, [r0, #28]
 800c40a:	b093      	sub	sp, #76	; 0x4c
 800c40c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c410:	ec57 6b10 	vmov	r6, r7, d0
 800c414:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c418:	9107      	str	r1, [sp, #28]
 800c41a:	4604      	mov	r4, r0
 800c41c:	920a      	str	r2, [sp, #40]	; 0x28
 800c41e:	930d      	str	r3, [sp, #52]	; 0x34
 800c420:	b975      	cbnz	r5, 800c440 <_dtoa_r+0x40>
 800c422:	2010      	movs	r0, #16
 800c424:	f001 f982 	bl	800d72c <malloc>
 800c428:	4602      	mov	r2, r0
 800c42a:	61e0      	str	r0, [r4, #28]
 800c42c:	b920      	cbnz	r0, 800c438 <_dtoa_r+0x38>
 800c42e:	4bae      	ldr	r3, [pc, #696]	; (800c6e8 <_dtoa_r+0x2e8>)
 800c430:	21ef      	movs	r1, #239	; 0xef
 800c432:	48ae      	ldr	r0, [pc, #696]	; (800c6ec <_dtoa_r+0x2ec>)
 800c434:	f002 f92a 	bl	800e68c <__assert_func>
 800c438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c43c:	6005      	str	r5, [r0, #0]
 800c43e:	60c5      	str	r5, [r0, #12]
 800c440:	69e3      	ldr	r3, [r4, #28]
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	b151      	cbz	r1, 800c45c <_dtoa_r+0x5c>
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	604a      	str	r2, [r1, #4]
 800c44a:	2301      	movs	r3, #1
 800c44c:	4093      	lsls	r3, r2
 800c44e:	608b      	str	r3, [r1, #8]
 800c450:	4620      	mov	r0, r4
 800c452:	f001 fa71 	bl	800d938 <_Bfree>
 800c456:	69e3      	ldr	r3, [r4, #28]
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	1e3b      	subs	r3, r7, #0
 800c45e:	bfbb      	ittet	lt
 800c460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c464:	9303      	strlt	r3, [sp, #12]
 800c466:	2300      	movge	r3, #0
 800c468:	2201      	movlt	r2, #1
 800c46a:	bfac      	ite	ge
 800c46c:	f8c8 3000 	strge.w	r3, [r8]
 800c470:	f8c8 2000 	strlt.w	r2, [r8]
 800c474:	4b9e      	ldr	r3, [pc, #632]	; (800c6f0 <_dtoa_r+0x2f0>)
 800c476:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c47a:	ea33 0308 	bics.w	r3, r3, r8
 800c47e:	d11b      	bne.n	800c4b8 <_dtoa_r+0xb8>
 800c480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c482:	f242 730f 	movw	r3, #9999	; 0x270f
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c48c:	4333      	orrs	r3, r6
 800c48e:	f000 8593 	beq.w	800cfb8 <_dtoa_r+0xbb8>
 800c492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c494:	b963      	cbnz	r3, 800c4b0 <_dtoa_r+0xb0>
 800c496:	4b97      	ldr	r3, [pc, #604]	; (800c6f4 <_dtoa_r+0x2f4>)
 800c498:	e027      	b.n	800c4ea <_dtoa_r+0xea>
 800c49a:	4b97      	ldr	r3, [pc, #604]	; (800c6f8 <_dtoa_r+0x2f8>)
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	9800      	ldr	r0, [sp, #0]
 800c4a6:	b013      	add	sp, #76	; 0x4c
 800c4a8:	ecbd 8b04 	vpop	{d8-d9}
 800c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b0:	4b90      	ldr	r3, [pc, #576]	; (800c6f4 <_dtoa_r+0x2f4>)
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	3303      	adds	r3, #3
 800c4b6:	e7f3      	b.n	800c4a0 <_dtoa_r+0xa0>
 800c4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	ec51 0b17 	vmov	r0, r1, d7
 800c4c2:	eeb0 8a47 	vmov.f32	s16, s14
 800c4c6:	eef0 8a67 	vmov.f32	s17, s15
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f7f4 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4d0:	4681      	mov	r9, r0
 800c4d2:	b160      	cbz	r0, 800c4ee <_dtoa_r+0xee>
 800c4d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 8568 	beq.w	800cfb2 <_dtoa_r+0xbb2>
 800c4e2:	4b86      	ldr	r3, [pc, #536]	; (800c6fc <_dtoa_r+0x2fc>)
 800c4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4e6:	6013      	str	r3, [r2, #0]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	e7da      	b.n	800c4a4 <_dtoa_r+0xa4>
 800c4ee:	aa10      	add	r2, sp, #64	; 0x40
 800c4f0:	a911      	add	r1, sp, #68	; 0x44
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4f8:	eef0 0a68 	vmov.f32	s1, s17
 800c4fc:	f001 fdb8 	bl	800e070 <__d2b>
 800c500:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c504:	4682      	mov	sl, r0
 800c506:	2d00      	cmp	r5, #0
 800c508:	d07f      	beq.n	800c60a <_dtoa_r+0x20a>
 800c50a:	ee18 3a90 	vmov	r3, s17
 800c50e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c512:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c516:	ec51 0b18 	vmov	r0, r1, d8
 800c51a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c522:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c526:	4619      	mov	r1, r3
 800c528:	2200      	movs	r2, #0
 800c52a:	4b75      	ldr	r3, [pc, #468]	; (800c700 <_dtoa_r+0x300>)
 800c52c:	f7f3 feac 	bl	8000288 <__aeabi_dsub>
 800c530:	a367      	add	r3, pc, #412	; (adr r3, 800c6d0 <_dtoa_r+0x2d0>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f4 f85f 	bl	80005f8 <__aeabi_dmul>
 800c53a:	a367      	add	r3, pc, #412	; (adr r3, 800c6d8 <_dtoa_r+0x2d8>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 fea4 	bl	800028c <__adddf3>
 800c544:	4606      	mov	r6, r0
 800c546:	4628      	mov	r0, r5
 800c548:	460f      	mov	r7, r1
 800c54a:	f7f3 ffeb 	bl	8000524 <__aeabi_i2d>
 800c54e:	a364      	add	r3, pc, #400	; (adr r3, 800c6e0 <_dtoa_r+0x2e0>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f7f4 f850 	bl	80005f8 <__aeabi_dmul>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4630      	mov	r0, r6
 800c55e:	4639      	mov	r1, r7
 800c560:	f7f3 fe94 	bl	800028c <__adddf3>
 800c564:	4606      	mov	r6, r0
 800c566:	460f      	mov	r7, r1
 800c568:	f7f4 faf6 	bl	8000b58 <__aeabi_d2iz>
 800c56c:	2200      	movs	r2, #0
 800c56e:	4683      	mov	fp, r0
 800c570:	2300      	movs	r3, #0
 800c572:	4630      	mov	r0, r6
 800c574:	4639      	mov	r1, r7
 800c576:	f7f4 fab1 	bl	8000adc <__aeabi_dcmplt>
 800c57a:	b148      	cbz	r0, 800c590 <_dtoa_r+0x190>
 800c57c:	4658      	mov	r0, fp
 800c57e:	f7f3 ffd1 	bl	8000524 <__aeabi_i2d>
 800c582:	4632      	mov	r2, r6
 800c584:	463b      	mov	r3, r7
 800c586:	f7f4 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c58a:	b908      	cbnz	r0, 800c590 <_dtoa_r+0x190>
 800c58c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c590:	f1bb 0f16 	cmp.w	fp, #22
 800c594:	d857      	bhi.n	800c646 <_dtoa_r+0x246>
 800c596:	4b5b      	ldr	r3, [pc, #364]	; (800c704 <_dtoa_r+0x304>)
 800c598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	ec51 0b18 	vmov	r0, r1, d8
 800c5a4:	f7f4 fa9a 	bl	8000adc <__aeabi_dcmplt>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d04e      	beq.n	800c64a <_dtoa_r+0x24a>
 800c5ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5b6:	1b5b      	subs	r3, r3, r5
 800c5b8:	1e5a      	subs	r2, r3, #1
 800c5ba:	bf45      	ittet	mi
 800c5bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c5c0:	9305      	strmi	r3, [sp, #20]
 800c5c2:	2300      	movpl	r3, #0
 800c5c4:	2300      	movmi	r3, #0
 800c5c6:	9206      	str	r2, [sp, #24]
 800c5c8:	bf54      	ite	pl
 800c5ca:	9305      	strpl	r3, [sp, #20]
 800c5cc:	9306      	strmi	r3, [sp, #24]
 800c5ce:	f1bb 0f00 	cmp.w	fp, #0
 800c5d2:	db3c      	blt.n	800c64e <_dtoa_r+0x24e>
 800c5d4:	9b06      	ldr	r3, [sp, #24]
 800c5d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c5da:	445b      	add	r3, fp
 800c5dc:	9306      	str	r3, [sp, #24]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9308      	str	r3, [sp, #32]
 800c5e2:	9b07      	ldr	r3, [sp, #28]
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d868      	bhi.n	800c6ba <_dtoa_r+0x2ba>
 800c5e8:	2b05      	cmp	r3, #5
 800c5ea:	bfc4      	itt	gt
 800c5ec:	3b04      	subgt	r3, #4
 800c5ee:	9307      	strgt	r3, [sp, #28]
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c5f6:	bfcc      	ite	gt
 800c5f8:	2500      	movgt	r5, #0
 800c5fa:	2501      	movle	r5, #1
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	f200 8085 	bhi.w	800c70c <_dtoa_r+0x30c>
 800c602:	e8df f003 	tbb	[pc, r3]
 800c606:	3b2e      	.short	0x3b2e
 800c608:	5839      	.short	0x5839
 800c60a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c60e:	441d      	add	r5, r3
 800c610:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c614:	2b20      	cmp	r3, #32
 800c616:	bfc1      	itttt	gt
 800c618:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c61c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c620:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c624:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c628:	bfd6      	itet	le
 800c62a:	f1c3 0320 	rsble	r3, r3, #32
 800c62e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c632:	fa06 f003 	lslle.w	r0, r6, r3
 800c636:	f7f3 ff65 	bl	8000504 <__aeabi_ui2d>
 800c63a:	2201      	movs	r2, #1
 800c63c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c640:	3d01      	subs	r5, #1
 800c642:	920e      	str	r2, [sp, #56]	; 0x38
 800c644:	e76f      	b.n	800c526 <_dtoa_r+0x126>
 800c646:	2301      	movs	r3, #1
 800c648:	e7b3      	b.n	800c5b2 <_dtoa_r+0x1b2>
 800c64a:	900c      	str	r0, [sp, #48]	; 0x30
 800c64c:	e7b2      	b.n	800c5b4 <_dtoa_r+0x1b4>
 800c64e:	9b05      	ldr	r3, [sp, #20]
 800c650:	eba3 030b 	sub.w	r3, r3, fp
 800c654:	9305      	str	r3, [sp, #20]
 800c656:	f1cb 0300 	rsb	r3, fp, #0
 800c65a:	9308      	str	r3, [sp, #32]
 800c65c:	2300      	movs	r3, #0
 800c65e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c660:	e7bf      	b.n	800c5e2 <_dtoa_r+0x1e2>
 800c662:	2300      	movs	r3, #0
 800c664:	9309      	str	r3, [sp, #36]	; 0x24
 800c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c668:	2b00      	cmp	r3, #0
 800c66a:	dc52      	bgt.n	800c712 <_dtoa_r+0x312>
 800c66c:	2301      	movs	r3, #1
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	461a      	mov	r2, r3
 800c674:	920a      	str	r2, [sp, #40]	; 0x28
 800c676:	e00b      	b.n	800c690 <_dtoa_r+0x290>
 800c678:	2301      	movs	r3, #1
 800c67a:	e7f3      	b.n	800c664 <_dtoa_r+0x264>
 800c67c:	2300      	movs	r3, #0
 800c67e:	9309      	str	r3, [sp, #36]	; 0x24
 800c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c682:	445b      	add	r3, fp
 800c684:	9301      	str	r3, [sp, #4]
 800c686:	3301      	adds	r3, #1
 800c688:	2b01      	cmp	r3, #1
 800c68a:	9304      	str	r3, [sp, #16]
 800c68c:	bfb8      	it	lt
 800c68e:	2301      	movlt	r3, #1
 800c690:	69e0      	ldr	r0, [r4, #28]
 800c692:	2100      	movs	r1, #0
 800c694:	2204      	movs	r2, #4
 800c696:	f102 0614 	add.w	r6, r2, #20
 800c69a:	429e      	cmp	r6, r3
 800c69c:	d93d      	bls.n	800c71a <_dtoa_r+0x31a>
 800c69e:	6041      	str	r1, [r0, #4]
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f001 f909 	bl	800d8b8 <_Balloc>
 800c6a6:	9000      	str	r0, [sp, #0]
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d139      	bne.n	800c720 <_dtoa_r+0x320>
 800c6ac:	4b16      	ldr	r3, [pc, #88]	; (800c708 <_dtoa_r+0x308>)
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	f240 11af 	movw	r1, #431	; 0x1af
 800c6b4:	e6bd      	b.n	800c432 <_dtoa_r+0x32>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e7e1      	b.n	800c67e <_dtoa_r+0x27e>
 800c6ba:	2501      	movs	r5, #1
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9307      	str	r3, [sp, #28]
 800c6c0:	9509      	str	r5, [sp, #36]	; 0x24
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	9304      	str	r3, [sp, #16]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2312      	movs	r3, #18
 800c6ce:	e7d1      	b.n	800c674 <_dtoa_r+0x274>
 800c6d0:	636f4361 	.word	0x636f4361
 800c6d4:	3fd287a7 	.word	0x3fd287a7
 800c6d8:	8b60c8b3 	.word	0x8b60c8b3
 800c6dc:	3fc68a28 	.word	0x3fc68a28
 800c6e0:	509f79fb 	.word	0x509f79fb
 800c6e4:	3fd34413 	.word	0x3fd34413
 800c6e8:	0800ee29 	.word	0x0800ee29
 800c6ec:	0800ee40 	.word	0x0800ee40
 800c6f0:	7ff00000 	.word	0x7ff00000
 800c6f4:	0800ee25 	.word	0x0800ee25
 800c6f8:	0800ee1c 	.word	0x0800ee1c
 800c6fc:	0800edf1 	.word	0x0800edf1
 800c700:	3ff80000 	.word	0x3ff80000
 800c704:	0800ef90 	.word	0x0800ef90
 800c708:	0800ee98 	.word	0x0800ee98
 800c70c:	2301      	movs	r3, #1
 800c70e:	9309      	str	r3, [sp, #36]	; 0x24
 800c710:	e7d7      	b.n	800c6c2 <_dtoa_r+0x2c2>
 800c712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	9304      	str	r3, [sp, #16]
 800c718:	e7ba      	b.n	800c690 <_dtoa_r+0x290>
 800c71a:	3101      	adds	r1, #1
 800c71c:	0052      	lsls	r2, r2, #1
 800c71e:	e7ba      	b.n	800c696 <_dtoa_r+0x296>
 800c720:	69e3      	ldr	r3, [r4, #28]
 800c722:	9a00      	ldr	r2, [sp, #0]
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	9b04      	ldr	r3, [sp, #16]
 800c728:	2b0e      	cmp	r3, #14
 800c72a:	f200 80a8 	bhi.w	800c87e <_dtoa_r+0x47e>
 800c72e:	2d00      	cmp	r5, #0
 800c730:	f000 80a5 	beq.w	800c87e <_dtoa_r+0x47e>
 800c734:	f1bb 0f00 	cmp.w	fp, #0
 800c738:	dd38      	ble.n	800c7ac <_dtoa_r+0x3ac>
 800c73a:	4bc0      	ldr	r3, [pc, #768]	; (800ca3c <_dtoa_r+0x63c>)
 800c73c:	f00b 020f 	and.w	r2, fp, #15
 800c740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c744:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c748:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c74c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c750:	d019      	beq.n	800c786 <_dtoa_r+0x386>
 800c752:	4bbb      	ldr	r3, [pc, #748]	; (800ca40 <_dtoa_r+0x640>)
 800c754:	ec51 0b18 	vmov	r0, r1, d8
 800c758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c75c:	f7f4 f876 	bl	800084c <__aeabi_ddiv>
 800c760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c764:	f008 080f 	and.w	r8, r8, #15
 800c768:	2503      	movs	r5, #3
 800c76a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca40 <_dtoa_r+0x640>
 800c76e:	f1b8 0f00 	cmp.w	r8, #0
 800c772:	d10a      	bne.n	800c78a <_dtoa_r+0x38a>
 800c774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c778:	4632      	mov	r2, r6
 800c77a:	463b      	mov	r3, r7
 800c77c:	f7f4 f866 	bl	800084c <__aeabi_ddiv>
 800c780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c784:	e02b      	b.n	800c7de <_dtoa_r+0x3de>
 800c786:	2502      	movs	r5, #2
 800c788:	e7ef      	b.n	800c76a <_dtoa_r+0x36a>
 800c78a:	f018 0f01 	tst.w	r8, #1
 800c78e:	d008      	beq.n	800c7a2 <_dtoa_r+0x3a2>
 800c790:	4630      	mov	r0, r6
 800c792:	4639      	mov	r1, r7
 800c794:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	3501      	adds	r5, #1
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7a6:	f109 0908 	add.w	r9, r9, #8
 800c7aa:	e7e0      	b.n	800c76e <_dtoa_r+0x36e>
 800c7ac:	f000 809f 	beq.w	800c8ee <_dtoa_r+0x4ee>
 800c7b0:	f1cb 0600 	rsb	r6, fp, #0
 800c7b4:	4ba1      	ldr	r3, [pc, #644]	; (800ca3c <_dtoa_r+0x63c>)
 800c7b6:	4fa2      	ldr	r7, [pc, #648]	; (800ca40 <_dtoa_r+0x640>)
 800c7b8:	f006 020f 	and.w	r2, r6, #15
 800c7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	ec51 0b18 	vmov	r0, r1, d8
 800c7c8:	f7f3 ff16 	bl	80005f8 <__aeabi_dmul>
 800c7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7d0:	1136      	asrs	r6, r6, #4
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	2502      	movs	r5, #2
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	d17e      	bne.n	800c8d8 <_dtoa_r+0x4d8>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1d0      	bne.n	800c780 <_dtoa_r+0x380>
 800c7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8084 	beq.w	800c8f2 <_dtoa_r+0x4f2>
 800c7ea:	4b96      	ldr	r3, [pc, #600]	; (800ca44 <_dtoa_r+0x644>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	4649      	mov	r1, r9
 800c7f2:	f7f4 f973 	bl	8000adc <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d07b      	beq.n	800c8f2 <_dtoa_r+0x4f2>
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d078      	beq.n	800c8f2 <_dtoa_r+0x4f2>
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd39      	ble.n	800c87a <_dtoa_r+0x47a>
 800c806:	4b90      	ldr	r3, [pc, #576]	; (800ca48 <_dtoa_r+0x648>)
 800c808:	2200      	movs	r2, #0
 800c80a:	4640      	mov	r0, r8
 800c80c:	4649      	mov	r1, r9
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c816:	9e01      	ldr	r6, [sp, #4]
 800c818:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c81c:	3501      	adds	r5, #1
 800c81e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c822:	4628      	mov	r0, r5
 800c824:	f7f3 fe7e 	bl	8000524 <__aeabi_i2d>
 800c828:	4642      	mov	r2, r8
 800c82a:	464b      	mov	r3, r9
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	4b86      	ldr	r3, [pc, #536]	; (800ca4c <_dtoa_r+0x64c>)
 800c832:	2200      	movs	r2, #0
 800c834:	f7f3 fd2a 	bl	800028c <__adddf3>
 800c838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c840:	9303      	str	r3, [sp, #12]
 800c842:	2e00      	cmp	r6, #0
 800c844:	d158      	bne.n	800c8f8 <_dtoa_r+0x4f8>
 800c846:	4b82      	ldr	r3, [pc, #520]	; (800ca50 <_dtoa_r+0x650>)
 800c848:	2200      	movs	r2, #0
 800c84a:	4640      	mov	r0, r8
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f3 fd1b 	bl	8000288 <__aeabi_dsub>
 800c852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c856:	4680      	mov	r8, r0
 800c858:	4689      	mov	r9, r1
 800c85a:	f7f4 f95d 	bl	8000b18 <__aeabi_dcmpgt>
 800c85e:	2800      	cmp	r0, #0
 800c860:	f040 8296 	bne.w	800cd90 <_dtoa_r+0x990>
 800c864:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c868:	4640      	mov	r0, r8
 800c86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c86e:	4649      	mov	r1, r9
 800c870:	f7f4 f934 	bl	8000adc <__aeabi_dcmplt>
 800c874:	2800      	cmp	r0, #0
 800c876:	f040 8289 	bne.w	800cd8c <_dtoa_r+0x98c>
 800c87a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c87e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c880:	2b00      	cmp	r3, #0
 800c882:	f2c0 814e 	blt.w	800cb22 <_dtoa_r+0x722>
 800c886:	f1bb 0f0e 	cmp.w	fp, #14
 800c88a:	f300 814a 	bgt.w	800cb22 <_dtoa_r+0x722>
 800c88e:	4b6b      	ldr	r3, [pc, #428]	; (800ca3c <_dtoa_r+0x63c>)
 800c890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c894:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f280 80dc 	bge.w	800ca58 <_dtoa_r+0x658>
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f300 80d8 	bgt.w	800ca58 <_dtoa_r+0x658>
 800c8a8:	f040 826f 	bne.w	800cd8a <_dtoa_r+0x98a>
 800c8ac:	4b68      	ldr	r3, [pc, #416]	; (800ca50 <_dtoa_r+0x650>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	f7f3 fea0 	bl	80005f8 <__aeabi_dmul>
 800c8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8bc:	f7f4 f922 	bl	8000b04 <__aeabi_dcmpge>
 800c8c0:	9e04      	ldr	r6, [sp, #16]
 800c8c2:	4637      	mov	r7, r6
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f040 8245 	bne.w	800cd54 <_dtoa_r+0x954>
 800c8ca:	9d00      	ldr	r5, [sp, #0]
 800c8cc:	2331      	movs	r3, #49	; 0x31
 800c8ce:	f805 3b01 	strb.w	r3, [r5], #1
 800c8d2:	f10b 0b01 	add.w	fp, fp, #1
 800c8d6:	e241      	b.n	800cd5c <_dtoa_r+0x95c>
 800c8d8:	07f2      	lsls	r2, r6, #31
 800c8da:	d505      	bpl.n	800c8e8 <_dtoa_r+0x4e8>
 800c8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8e0:	f7f3 fe8a 	bl	80005f8 <__aeabi_dmul>
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	1076      	asrs	r6, r6, #1
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	e773      	b.n	800c7d6 <_dtoa_r+0x3d6>
 800c8ee:	2502      	movs	r5, #2
 800c8f0:	e775      	b.n	800c7de <_dtoa_r+0x3de>
 800c8f2:	9e04      	ldr	r6, [sp, #16]
 800c8f4:	465f      	mov	r7, fp
 800c8f6:	e792      	b.n	800c81e <_dtoa_r+0x41e>
 800c8f8:	9900      	ldr	r1, [sp, #0]
 800c8fa:	4b50      	ldr	r3, [pc, #320]	; (800ca3c <_dtoa_r+0x63c>)
 800c8fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c900:	4431      	add	r1, r6
 800c902:	9102      	str	r1, [sp, #8]
 800c904:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c906:	eeb0 9a47 	vmov.f32	s18, s14
 800c90a:	eef0 9a67 	vmov.f32	s19, s15
 800c90e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c916:	2900      	cmp	r1, #0
 800c918:	d044      	beq.n	800c9a4 <_dtoa_r+0x5a4>
 800c91a:	494e      	ldr	r1, [pc, #312]	; (800ca54 <_dtoa_r+0x654>)
 800c91c:	2000      	movs	r0, #0
 800c91e:	f7f3 ff95 	bl	800084c <__aeabi_ddiv>
 800c922:	ec53 2b19 	vmov	r2, r3, d9
 800c926:	f7f3 fcaf 	bl	8000288 <__aeabi_dsub>
 800c92a:	9d00      	ldr	r5, [sp, #0]
 800c92c:	ec41 0b19 	vmov	d9, r0, r1
 800c930:	4649      	mov	r1, r9
 800c932:	4640      	mov	r0, r8
 800c934:	f7f4 f910 	bl	8000b58 <__aeabi_d2iz>
 800c938:	4606      	mov	r6, r0
 800c93a:	f7f3 fdf3 	bl	8000524 <__aeabi_i2d>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	f7f3 fc9f 	bl	8000288 <__aeabi_dsub>
 800c94a:	3630      	adds	r6, #48	; 0x30
 800c94c:	f805 6b01 	strb.w	r6, [r5], #1
 800c950:	ec53 2b19 	vmov	r2, r3, d9
 800c954:	4680      	mov	r8, r0
 800c956:	4689      	mov	r9, r1
 800c958:	f7f4 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d164      	bne.n	800ca2a <_dtoa_r+0x62a>
 800c960:	4642      	mov	r2, r8
 800c962:	464b      	mov	r3, r9
 800c964:	4937      	ldr	r1, [pc, #220]	; (800ca44 <_dtoa_r+0x644>)
 800c966:	2000      	movs	r0, #0
 800c968:	f7f3 fc8e 	bl	8000288 <__aeabi_dsub>
 800c96c:	ec53 2b19 	vmov	r2, r3, d9
 800c970:	f7f4 f8b4 	bl	8000adc <__aeabi_dcmplt>
 800c974:	2800      	cmp	r0, #0
 800c976:	f040 80b6 	bne.w	800cae6 <_dtoa_r+0x6e6>
 800c97a:	9b02      	ldr	r3, [sp, #8]
 800c97c:	429d      	cmp	r5, r3
 800c97e:	f43f af7c 	beq.w	800c87a <_dtoa_r+0x47a>
 800c982:	4b31      	ldr	r3, [pc, #196]	; (800ca48 <_dtoa_r+0x648>)
 800c984:	ec51 0b19 	vmov	r0, r1, d9
 800c988:	2200      	movs	r2, #0
 800c98a:	f7f3 fe35 	bl	80005f8 <__aeabi_dmul>
 800c98e:	4b2e      	ldr	r3, [pc, #184]	; (800ca48 <_dtoa_r+0x648>)
 800c990:	ec41 0b19 	vmov	d9, r0, r1
 800c994:	2200      	movs	r2, #0
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f3 fe2d 	bl	80005f8 <__aeabi_dmul>
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	e7c5      	b.n	800c930 <_dtoa_r+0x530>
 800c9a4:	ec51 0b17 	vmov	r0, r1, d7
 800c9a8:	f7f3 fe26 	bl	80005f8 <__aeabi_dmul>
 800c9ac:	9b02      	ldr	r3, [sp, #8]
 800c9ae:	9d00      	ldr	r5, [sp, #0]
 800c9b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9b2:	ec41 0b19 	vmov	d9, r0, r1
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	f7f4 f8cd 	bl	8000b58 <__aeabi_d2iz>
 800c9be:	4606      	mov	r6, r0
 800c9c0:	f7f3 fdb0 	bl	8000524 <__aeabi_i2d>
 800c9c4:	3630      	adds	r6, #48	; 0x30
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f3 fc5b 	bl	8000288 <__aeabi_dsub>
 800c9d2:	f805 6b01 	strb.w	r6, [r5], #1
 800c9d6:	9b02      	ldr	r3, [sp, #8]
 800c9d8:	429d      	cmp	r5, r3
 800c9da:	4680      	mov	r8, r0
 800c9dc:	4689      	mov	r9, r1
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	d124      	bne.n	800ca2e <_dtoa_r+0x62e>
 800c9e4:	4b1b      	ldr	r3, [pc, #108]	; (800ca54 <_dtoa_r+0x654>)
 800c9e6:	ec51 0b19 	vmov	r0, r1, d9
 800c9ea:	f7f3 fc4f 	bl	800028c <__adddf3>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f4 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d173      	bne.n	800cae6 <_dtoa_r+0x6e6>
 800c9fe:	ec53 2b19 	vmov	r2, r3, d9
 800ca02:	4914      	ldr	r1, [pc, #80]	; (800ca54 <_dtoa_r+0x654>)
 800ca04:	2000      	movs	r0, #0
 800ca06:	f7f3 fc3f 	bl	8000288 <__aeabi_dsub>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f7f4 f863 	bl	8000adc <__aeabi_dcmplt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f43f af2f 	beq.w	800c87a <_dtoa_r+0x47a>
 800ca1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca1e:	1e6b      	subs	r3, r5, #1
 800ca20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca26:	2b30      	cmp	r3, #48	; 0x30
 800ca28:	d0f8      	beq.n	800ca1c <_dtoa_r+0x61c>
 800ca2a:	46bb      	mov	fp, r7
 800ca2c:	e04a      	b.n	800cac4 <_dtoa_r+0x6c4>
 800ca2e:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <_dtoa_r+0x648>)
 800ca30:	f7f3 fde2 	bl	80005f8 <__aeabi_dmul>
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	e7bd      	b.n	800c9b6 <_dtoa_r+0x5b6>
 800ca3a:	bf00      	nop
 800ca3c:	0800ef90 	.word	0x0800ef90
 800ca40:	0800ef68 	.word	0x0800ef68
 800ca44:	3ff00000 	.word	0x3ff00000
 800ca48:	40240000 	.word	0x40240000
 800ca4c:	401c0000 	.word	0x401c0000
 800ca50:	40140000 	.word	0x40140000
 800ca54:	3fe00000 	.word	0x3fe00000
 800ca58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca5c:	9d00      	ldr	r5, [sp, #0]
 800ca5e:	4642      	mov	r2, r8
 800ca60:	464b      	mov	r3, r9
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fef1 	bl	800084c <__aeabi_ddiv>
 800ca6a:	f7f4 f875 	bl	8000b58 <__aeabi_d2iz>
 800ca6e:	9001      	str	r0, [sp, #4]
 800ca70:	f7f3 fd58 	bl	8000524 <__aeabi_i2d>
 800ca74:	4642      	mov	r2, r8
 800ca76:	464b      	mov	r3, r9
 800ca78:	f7f3 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f3 fc00 	bl	8000288 <__aeabi_dsub>
 800ca88:	9e01      	ldr	r6, [sp, #4]
 800ca8a:	9f04      	ldr	r7, [sp, #16]
 800ca8c:	3630      	adds	r6, #48	; 0x30
 800ca8e:	f805 6b01 	strb.w	r6, [r5], #1
 800ca92:	9e00      	ldr	r6, [sp, #0]
 800ca94:	1bae      	subs	r6, r5, r6
 800ca96:	42b7      	cmp	r7, r6
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	d134      	bne.n	800cb08 <_dtoa_r+0x708>
 800ca9e:	f7f3 fbf5 	bl	800028c <__adddf3>
 800caa2:	4642      	mov	r2, r8
 800caa4:	464b      	mov	r3, r9
 800caa6:	4606      	mov	r6, r0
 800caa8:	460f      	mov	r7, r1
 800caaa:	f7f4 f835 	bl	8000b18 <__aeabi_dcmpgt>
 800caae:	b9c8      	cbnz	r0, 800cae4 <_dtoa_r+0x6e4>
 800cab0:	4642      	mov	r2, r8
 800cab2:	464b      	mov	r3, r9
 800cab4:	4630      	mov	r0, r6
 800cab6:	4639      	mov	r1, r7
 800cab8:	f7f4 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 800cabc:	b110      	cbz	r0, 800cac4 <_dtoa_r+0x6c4>
 800cabe:	9b01      	ldr	r3, [sp, #4]
 800cac0:	07db      	lsls	r3, r3, #31
 800cac2:	d40f      	bmi.n	800cae4 <_dtoa_r+0x6e4>
 800cac4:	4651      	mov	r1, sl
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 ff36 	bl	800d938 <_Bfree>
 800cacc:	2300      	movs	r3, #0
 800cace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cad0:	702b      	strb	r3, [r5, #0]
 800cad2:	f10b 0301 	add.w	r3, fp, #1
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f43f ace2 	beq.w	800c4a4 <_dtoa_r+0xa4>
 800cae0:	601d      	str	r5, [r3, #0]
 800cae2:	e4df      	b.n	800c4a4 <_dtoa_r+0xa4>
 800cae4:	465f      	mov	r7, fp
 800cae6:	462b      	mov	r3, r5
 800cae8:	461d      	mov	r5, r3
 800caea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800caee:	2a39      	cmp	r2, #57	; 0x39
 800caf0:	d106      	bne.n	800cb00 <_dtoa_r+0x700>
 800caf2:	9a00      	ldr	r2, [sp, #0]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d1f7      	bne.n	800cae8 <_dtoa_r+0x6e8>
 800caf8:	9900      	ldr	r1, [sp, #0]
 800cafa:	2230      	movs	r2, #48	; 0x30
 800cafc:	3701      	adds	r7, #1
 800cafe:	700a      	strb	r2, [r1, #0]
 800cb00:	781a      	ldrb	r2, [r3, #0]
 800cb02:	3201      	adds	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	e790      	b.n	800ca2a <_dtoa_r+0x62a>
 800cb08:	4ba3      	ldr	r3, [pc, #652]	; (800cd98 <_dtoa_r+0x998>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f7f3 fd74 	bl	80005f8 <__aeabi_dmul>
 800cb10:	2200      	movs	r2, #0
 800cb12:	2300      	movs	r3, #0
 800cb14:	4606      	mov	r6, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	f7f3 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d09e      	beq.n	800ca5e <_dtoa_r+0x65e>
 800cb20:	e7d0      	b.n	800cac4 <_dtoa_r+0x6c4>
 800cb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	f000 80ca 	beq.w	800ccbe <_dtoa_r+0x8be>
 800cb2a:	9a07      	ldr	r2, [sp, #28]
 800cb2c:	2a01      	cmp	r2, #1
 800cb2e:	f300 80ad 	bgt.w	800cc8c <_dtoa_r+0x88c>
 800cb32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	f000 80a5 	beq.w	800cc84 <_dtoa_r+0x884>
 800cb3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb3e:	9e08      	ldr	r6, [sp, #32]
 800cb40:	9d05      	ldr	r5, [sp, #20]
 800cb42:	9a05      	ldr	r2, [sp, #20]
 800cb44:	441a      	add	r2, r3
 800cb46:	9205      	str	r2, [sp, #20]
 800cb48:	9a06      	ldr	r2, [sp, #24]
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	441a      	add	r2, r3
 800cb4e:	4620      	mov	r0, r4
 800cb50:	9206      	str	r2, [sp, #24]
 800cb52:	f000 fff1 	bl	800db38 <__i2b>
 800cb56:	4607      	mov	r7, r0
 800cb58:	b165      	cbz	r5, 800cb74 <_dtoa_r+0x774>
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dd09      	ble.n	800cb74 <_dtoa_r+0x774>
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	9a05      	ldr	r2, [sp, #20]
 800cb64:	bfa8      	it	ge
 800cb66:	462b      	movge	r3, r5
 800cb68:	1ad2      	subs	r2, r2, r3
 800cb6a:	9205      	str	r2, [sp, #20]
 800cb6c:	9a06      	ldr	r2, [sp, #24]
 800cb6e:	1aed      	subs	r5, r5, r3
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	9306      	str	r3, [sp, #24]
 800cb74:	9b08      	ldr	r3, [sp, #32]
 800cb76:	b1f3      	cbz	r3, 800cbb6 <_dtoa_r+0x7b6>
 800cb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 80a3 	beq.w	800ccc6 <_dtoa_r+0x8c6>
 800cb80:	2e00      	cmp	r6, #0
 800cb82:	dd10      	ble.n	800cba6 <_dtoa_r+0x7a6>
 800cb84:	4639      	mov	r1, r7
 800cb86:	4632      	mov	r2, r6
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 f895 	bl	800dcb8 <__pow5mult>
 800cb8e:	4652      	mov	r2, sl
 800cb90:	4601      	mov	r1, r0
 800cb92:	4607      	mov	r7, r0
 800cb94:	4620      	mov	r0, r4
 800cb96:	f000 ffe5 	bl	800db64 <__multiply>
 800cb9a:	4651      	mov	r1, sl
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 feca 	bl	800d938 <_Bfree>
 800cba4:	46c2      	mov	sl, r8
 800cba6:	9b08      	ldr	r3, [sp, #32]
 800cba8:	1b9a      	subs	r2, r3, r6
 800cbaa:	d004      	beq.n	800cbb6 <_dtoa_r+0x7b6>
 800cbac:	4651      	mov	r1, sl
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f001 f882 	bl	800dcb8 <__pow5mult>
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 ffbd 	bl	800db38 <__i2b>
 800cbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	f340 8081 	ble.w	800ccca <_dtoa_r+0x8ca>
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4601      	mov	r1, r0
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f001 f873 	bl	800dcb8 <__pow5mult>
 800cbd2:	9b07      	ldr	r3, [sp, #28]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	dd7a      	ble.n	800ccd0 <_dtoa_r+0x8d0>
 800cbda:	f04f 0800 	mov.w	r8, #0
 800cbde:	6933      	ldr	r3, [r6, #16]
 800cbe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbe4:	6918      	ldr	r0, [r3, #16]
 800cbe6:	f000 ff59 	bl	800da9c <__hi0bits>
 800cbea:	f1c0 0020 	rsb	r0, r0, #32
 800cbee:	9b06      	ldr	r3, [sp, #24]
 800cbf0:	4418      	add	r0, r3
 800cbf2:	f010 001f 	ands.w	r0, r0, #31
 800cbf6:	f000 8094 	beq.w	800cd22 <_dtoa_r+0x922>
 800cbfa:	f1c0 0320 	rsb	r3, r0, #32
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	f340 8085 	ble.w	800cd0e <_dtoa_r+0x90e>
 800cc04:	9b05      	ldr	r3, [sp, #20]
 800cc06:	f1c0 001c 	rsb	r0, r0, #28
 800cc0a:	4403      	add	r3, r0
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	9b06      	ldr	r3, [sp, #24]
 800cc10:	4403      	add	r3, r0
 800cc12:	4405      	add	r5, r0
 800cc14:	9306      	str	r3, [sp, #24]
 800cc16:	9b05      	ldr	r3, [sp, #20]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dd05      	ble.n	800cc28 <_dtoa_r+0x828>
 800cc1c:	4651      	mov	r1, sl
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4620      	mov	r0, r4
 800cc22:	f001 f8a3 	bl	800dd6c <__lshift>
 800cc26:	4682      	mov	sl, r0
 800cc28:	9b06      	ldr	r3, [sp, #24]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dd05      	ble.n	800cc3a <_dtoa_r+0x83a>
 800cc2e:	4631      	mov	r1, r6
 800cc30:	461a      	mov	r2, r3
 800cc32:	4620      	mov	r0, r4
 800cc34:	f001 f89a 	bl	800dd6c <__lshift>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d072      	beq.n	800cd26 <_dtoa_r+0x926>
 800cc40:	4631      	mov	r1, r6
 800cc42:	4650      	mov	r0, sl
 800cc44:	f001 f8fe 	bl	800de44 <__mcmp>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	da6c      	bge.n	800cd26 <_dtoa_r+0x926>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4651      	mov	r1, sl
 800cc50:	220a      	movs	r2, #10
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 fe92 	bl	800d97c <__multadd>
 800cc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc5e:	4682      	mov	sl, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 81b0 	beq.w	800cfc6 <_dtoa_r+0xbc6>
 800cc66:	2300      	movs	r3, #0
 800cc68:	4639      	mov	r1, r7
 800cc6a:	220a      	movs	r2, #10
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 fe85 	bl	800d97c <__multadd>
 800cc72:	9b01      	ldr	r3, [sp, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	4607      	mov	r7, r0
 800cc78:	f300 8096 	bgt.w	800cda8 <_dtoa_r+0x9a8>
 800cc7c:	9b07      	ldr	r3, [sp, #28]
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	dc59      	bgt.n	800cd36 <_dtoa_r+0x936>
 800cc82:	e091      	b.n	800cda8 <_dtoa_r+0x9a8>
 800cc84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc8a:	e758      	b.n	800cb3e <_dtoa_r+0x73e>
 800cc8c:	9b04      	ldr	r3, [sp, #16]
 800cc8e:	1e5e      	subs	r6, r3, #1
 800cc90:	9b08      	ldr	r3, [sp, #32]
 800cc92:	42b3      	cmp	r3, r6
 800cc94:	bfbf      	itttt	lt
 800cc96:	9b08      	ldrlt	r3, [sp, #32]
 800cc98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc9a:	9608      	strlt	r6, [sp, #32]
 800cc9c:	1af3      	sublt	r3, r6, r3
 800cc9e:	bfb4      	ite	lt
 800cca0:	18d2      	addlt	r2, r2, r3
 800cca2:	1b9e      	subge	r6, r3, r6
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	bfbc      	itt	lt
 800cca8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ccaa:	2600      	movlt	r6, #0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	bfb7      	itett	lt
 800ccb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ccb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ccb8:	1a9d      	sublt	r5, r3, r2
 800ccba:	2300      	movlt	r3, #0
 800ccbc:	e741      	b.n	800cb42 <_dtoa_r+0x742>
 800ccbe:	9e08      	ldr	r6, [sp, #32]
 800ccc0:	9d05      	ldr	r5, [sp, #20]
 800ccc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ccc4:	e748      	b.n	800cb58 <_dtoa_r+0x758>
 800ccc6:	9a08      	ldr	r2, [sp, #32]
 800ccc8:	e770      	b.n	800cbac <_dtoa_r+0x7ac>
 800ccca:	9b07      	ldr	r3, [sp, #28]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	dc19      	bgt.n	800cd04 <_dtoa_r+0x904>
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	b9bb      	cbnz	r3, 800cd04 <_dtoa_r+0x904>
 800ccd4:	9b03      	ldr	r3, [sp, #12]
 800ccd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccda:	b99b      	cbnz	r3, 800cd04 <_dtoa_r+0x904>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cce2:	0d1b      	lsrs	r3, r3, #20
 800cce4:	051b      	lsls	r3, r3, #20
 800cce6:	b183      	cbz	r3, 800cd0a <_dtoa_r+0x90a>
 800cce8:	9b05      	ldr	r3, [sp, #20]
 800ccea:	3301      	adds	r3, #1
 800ccec:	9305      	str	r3, [sp, #20]
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	9306      	str	r3, [sp, #24]
 800ccf4:	f04f 0801 	mov.w	r8, #1
 800ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f47f af6f 	bne.w	800cbde <_dtoa_r+0x7de>
 800cd00:	2001      	movs	r0, #1
 800cd02:	e774      	b.n	800cbee <_dtoa_r+0x7ee>
 800cd04:	f04f 0800 	mov.w	r8, #0
 800cd08:	e7f6      	b.n	800ccf8 <_dtoa_r+0x8f8>
 800cd0a:	4698      	mov	r8, r3
 800cd0c:	e7f4      	b.n	800ccf8 <_dtoa_r+0x8f8>
 800cd0e:	d082      	beq.n	800cc16 <_dtoa_r+0x816>
 800cd10:	9a05      	ldr	r2, [sp, #20]
 800cd12:	331c      	adds	r3, #28
 800cd14:	441a      	add	r2, r3
 800cd16:	9205      	str	r2, [sp, #20]
 800cd18:	9a06      	ldr	r2, [sp, #24]
 800cd1a:	441a      	add	r2, r3
 800cd1c:	441d      	add	r5, r3
 800cd1e:	9206      	str	r2, [sp, #24]
 800cd20:	e779      	b.n	800cc16 <_dtoa_r+0x816>
 800cd22:	4603      	mov	r3, r0
 800cd24:	e7f4      	b.n	800cd10 <_dtoa_r+0x910>
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dc37      	bgt.n	800cd9c <_dtoa_r+0x99c>
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	dd34      	ble.n	800cd9c <_dtoa_r+0x99c>
 800cd32:	9b04      	ldr	r3, [sp, #16]
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	b963      	cbnz	r3, 800cd54 <_dtoa_r+0x954>
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	2205      	movs	r2, #5
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 fe1c 	bl	800d97c <__multadd>
 800cd44:	4601      	mov	r1, r0
 800cd46:	4606      	mov	r6, r0
 800cd48:	4650      	mov	r0, sl
 800cd4a:	f001 f87b 	bl	800de44 <__mcmp>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	f73f adbb 	bgt.w	800c8ca <_dtoa_r+0x4ca>
 800cd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd56:	9d00      	ldr	r5, [sp, #0]
 800cd58:	ea6f 0b03 	mvn.w	fp, r3
 800cd5c:	f04f 0800 	mov.w	r8, #0
 800cd60:	4631      	mov	r1, r6
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 fde8 	bl	800d938 <_Bfree>
 800cd68:	2f00      	cmp	r7, #0
 800cd6a:	f43f aeab 	beq.w	800cac4 <_dtoa_r+0x6c4>
 800cd6e:	f1b8 0f00 	cmp.w	r8, #0
 800cd72:	d005      	beq.n	800cd80 <_dtoa_r+0x980>
 800cd74:	45b8      	cmp	r8, r7
 800cd76:	d003      	beq.n	800cd80 <_dtoa_r+0x980>
 800cd78:	4641      	mov	r1, r8
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 fddc 	bl	800d938 <_Bfree>
 800cd80:	4639      	mov	r1, r7
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 fdd8 	bl	800d938 <_Bfree>
 800cd88:	e69c      	b.n	800cac4 <_dtoa_r+0x6c4>
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	4637      	mov	r7, r6
 800cd8e:	e7e1      	b.n	800cd54 <_dtoa_r+0x954>
 800cd90:	46bb      	mov	fp, r7
 800cd92:	4637      	mov	r7, r6
 800cd94:	e599      	b.n	800c8ca <_dtoa_r+0x4ca>
 800cd96:	bf00      	nop
 800cd98:	40240000 	.word	0x40240000
 800cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 80c8 	beq.w	800cf34 <_dtoa_r+0xb34>
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	dd05      	ble.n	800cdb8 <_dtoa_r+0x9b8>
 800cdac:	4639      	mov	r1, r7
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 ffdb 	bl	800dd6c <__lshift>
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	f1b8 0f00 	cmp.w	r8, #0
 800cdbc:	d05b      	beq.n	800ce76 <_dtoa_r+0xa76>
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fd79 	bl	800d8b8 <_Balloc>
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <_dtoa_r+0x9d6>
 800cdca:	4b83      	ldr	r3, [pc, #524]	; (800cfd8 <_dtoa_r+0xbd8>)
 800cdcc:	4602      	mov	r2, r0
 800cdce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cdd2:	f7ff bb2e 	b.w	800c432 <_dtoa_r+0x32>
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	3202      	adds	r2, #2
 800cdda:	0092      	lsls	r2, r2, #2
 800cddc:	f107 010c 	add.w	r1, r7, #12
 800cde0:	300c      	adds	r0, #12
 800cde2:	f7ff fa6d 	bl	800c2c0 <memcpy>
 800cde6:	2201      	movs	r2, #1
 800cde8:	4629      	mov	r1, r5
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 ffbe 	bl	800dd6c <__lshift>
 800cdf0:	9b00      	ldr	r3, [sp, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	9308      	str	r3, [sp, #32]
 800cdfe:	9b02      	ldr	r3, [sp, #8]
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	46b8      	mov	r8, r7
 800ce06:	9306      	str	r3, [sp, #24]
 800ce08:	4607      	mov	r7, r0
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	4650      	mov	r0, sl
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	f7ff fa6c 	bl	800c2f0 <quorem>
 800ce18:	4641      	mov	r1, r8
 800ce1a:	9002      	str	r0, [sp, #8]
 800ce1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce20:	4650      	mov	r0, sl
 800ce22:	f001 f80f 	bl	800de44 <__mcmp>
 800ce26:	463a      	mov	r2, r7
 800ce28:	9005      	str	r0, [sp, #20]
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f001 f825 	bl	800de7c <__mdiff>
 800ce32:	68c2      	ldr	r2, [r0, #12]
 800ce34:	4605      	mov	r5, r0
 800ce36:	bb02      	cbnz	r2, 800ce7a <_dtoa_r+0xa7a>
 800ce38:	4601      	mov	r1, r0
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	f001 f802 	bl	800de44 <__mcmp>
 800ce40:	4602      	mov	r2, r0
 800ce42:	4629      	mov	r1, r5
 800ce44:	4620      	mov	r0, r4
 800ce46:	9209      	str	r2, [sp, #36]	; 0x24
 800ce48:	f000 fd76 	bl	800d938 <_Bfree>
 800ce4c:	9b07      	ldr	r3, [sp, #28]
 800ce4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce50:	9d04      	ldr	r5, [sp, #16]
 800ce52:	ea43 0102 	orr.w	r1, r3, r2
 800ce56:	9b06      	ldr	r3, [sp, #24]
 800ce58:	4319      	orrs	r1, r3
 800ce5a:	d110      	bne.n	800ce7e <_dtoa_r+0xa7e>
 800ce5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce60:	d029      	beq.n	800ceb6 <_dtoa_r+0xab6>
 800ce62:	9b05      	ldr	r3, [sp, #20]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dd02      	ble.n	800ce6e <_dtoa_r+0xa6e>
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce6e:	9b01      	ldr	r3, [sp, #4]
 800ce70:	f883 9000 	strb.w	r9, [r3]
 800ce74:	e774      	b.n	800cd60 <_dtoa_r+0x960>
 800ce76:	4638      	mov	r0, r7
 800ce78:	e7ba      	b.n	800cdf0 <_dtoa_r+0x9f0>
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	e7e1      	b.n	800ce42 <_dtoa_r+0xa42>
 800ce7e:	9b05      	ldr	r3, [sp, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	db04      	blt.n	800ce8e <_dtoa_r+0xa8e>
 800ce84:	9907      	ldr	r1, [sp, #28]
 800ce86:	430b      	orrs	r3, r1
 800ce88:	9906      	ldr	r1, [sp, #24]
 800ce8a:	430b      	orrs	r3, r1
 800ce8c:	d120      	bne.n	800ced0 <_dtoa_r+0xad0>
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	dded      	ble.n	800ce6e <_dtoa_r+0xa6e>
 800ce92:	4651      	mov	r1, sl
 800ce94:	2201      	movs	r2, #1
 800ce96:	4620      	mov	r0, r4
 800ce98:	f000 ff68 	bl	800dd6c <__lshift>
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4682      	mov	sl, r0
 800cea0:	f000 ffd0 	bl	800de44 <__mcmp>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	dc03      	bgt.n	800ceb0 <_dtoa_r+0xab0>
 800cea8:	d1e1      	bne.n	800ce6e <_dtoa_r+0xa6e>
 800ceaa:	f019 0f01 	tst.w	r9, #1
 800ceae:	d0de      	beq.n	800ce6e <_dtoa_r+0xa6e>
 800ceb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ceb4:	d1d8      	bne.n	800ce68 <_dtoa_r+0xa68>
 800ceb6:	9a01      	ldr	r2, [sp, #4]
 800ceb8:	2339      	movs	r3, #57	; 0x39
 800ceba:	7013      	strb	r3, [r2, #0]
 800cebc:	462b      	mov	r3, r5
 800cebe:	461d      	mov	r5, r3
 800cec0:	3b01      	subs	r3, #1
 800cec2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cec6:	2a39      	cmp	r2, #57	; 0x39
 800cec8:	d06c      	beq.n	800cfa4 <_dtoa_r+0xba4>
 800ceca:	3201      	adds	r2, #1
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e747      	b.n	800cd60 <_dtoa_r+0x960>
 800ced0:	2a00      	cmp	r2, #0
 800ced2:	dd07      	ble.n	800cee4 <_dtoa_r+0xae4>
 800ced4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ced8:	d0ed      	beq.n	800ceb6 <_dtoa_r+0xab6>
 800ceda:	9a01      	ldr	r2, [sp, #4]
 800cedc:	f109 0301 	add.w	r3, r9, #1
 800cee0:	7013      	strb	r3, [r2, #0]
 800cee2:	e73d      	b.n	800cd60 <_dtoa_r+0x960>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	9a08      	ldr	r2, [sp, #32]
 800cee8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d043      	beq.n	800cf78 <_dtoa_r+0xb78>
 800cef0:	4651      	mov	r1, sl
 800cef2:	2300      	movs	r3, #0
 800cef4:	220a      	movs	r2, #10
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 fd40 	bl	800d97c <__multadd>
 800cefc:	45b8      	cmp	r8, r7
 800cefe:	4682      	mov	sl, r0
 800cf00:	f04f 0300 	mov.w	r3, #0
 800cf04:	f04f 020a 	mov.w	r2, #10
 800cf08:	4641      	mov	r1, r8
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	d107      	bne.n	800cf1e <_dtoa_r+0xb1e>
 800cf0e:	f000 fd35 	bl	800d97c <__multadd>
 800cf12:	4680      	mov	r8, r0
 800cf14:	4607      	mov	r7, r0
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	e775      	b.n	800ce0a <_dtoa_r+0xa0a>
 800cf1e:	f000 fd2d 	bl	800d97c <__multadd>
 800cf22:	4639      	mov	r1, r7
 800cf24:	4680      	mov	r8, r0
 800cf26:	2300      	movs	r3, #0
 800cf28:	220a      	movs	r2, #10
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fd26 	bl	800d97c <__multadd>
 800cf30:	4607      	mov	r7, r0
 800cf32:	e7f0      	b.n	800cf16 <_dtoa_r+0xb16>
 800cf34:	9b04      	ldr	r3, [sp, #16]
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	9d00      	ldr	r5, [sp, #0]
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4650      	mov	r0, sl
 800cf3e:	f7ff f9d7 	bl	800c2f0 <quorem>
 800cf42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf46:	9b00      	ldr	r3, [sp, #0]
 800cf48:	f805 9b01 	strb.w	r9, [r5], #1
 800cf4c:	1aea      	subs	r2, r5, r3
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	4293      	cmp	r3, r2
 800cf52:	dd07      	ble.n	800cf64 <_dtoa_r+0xb64>
 800cf54:	4651      	mov	r1, sl
 800cf56:	2300      	movs	r3, #0
 800cf58:	220a      	movs	r2, #10
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 fd0e 	bl	800d97c <__multadd>
 800cf60:	4682      	mov	sl, r0
 800cf62:	e7ea      	b.n	800cf3a <_dtoa_r+0xb3a>
 800cf64:	9b01      	ldr	r3, [sp, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfc8      	it	gt
 800cf6a:	461d      	movgt	r5, r3
 800cf6c:	9b00      	ldr	r3, [sp, #0]
 800cf6e:	bfd8      	it	le
 800cf70:	2501      	movle	r5, #1
 800cf72:	441d      	add	r5, r3
 800cf74:	f04f 0800 	mov.w	r8, #0
 800cf78:	4651      	mov	r1, sl
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fef5 	bl	800dd6c <__lshift>
 800cf82:	4631      	mov	r1, r6
 800cf84:	4682      	mov	sl, r0
 800cf86:	f000 ff5d 	bl	800de44 <__mcmp>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	dc96      	bgt.n	800cebc <_dtoa_r+0xabc>
 800cf8e:	d102      	bne.n	800cf96 <_dtoa_r+0xb96>
 800cf90:	f019 0f01 	tst.w	r9, #1
 800cf94:	d192      	bne.n	800cebc <_dtoa_r+0xabc>
 800cf96:	462b      	mov	r3, r5
 800cf98:	461d      	mov	r5, r3
 800cf9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf9e:	2a30      	cmp	r2, #48	; 0x30
 800cfa0:	d0fa      	beq.n	800cf98 <_dtoa_r+0xb98>
 800cfa2:	e6dd      	b.n	800cd60 <_dtoa_r+0x960>
 800cfa4:	9a00      	ldr	r2, [sp, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d189      	bne.n	800cebe <_dtoa_r+0xabe>
 800cfaa:	f10b 0b01 	add.w	fp, fp, #1
 800cfae:	2331      	movs	r3, #49	; 0x31
 800cfb0:	e796      	b.n	800cee0 <_dtoa_r+0xae0>
 800cfb2:	4b0a      	ldr	r3, [pc, #40]	; (800cfdc <_dtoa_r+0xbdc>)
 800cfb4:	f7ff ba99 	b.w	800c4ea <_dtoa_r+0xea>
 800cfb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f47f aa6d 	bne.w	800c49a <_dtoa_r+0x9a>
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <_dtoa_r+0xbe0>)
 800cfc2:	f7ff ba92 	b.w	800c4ea <_dtoa_r+0xea>
 800cfc6:	9b01      	ldr	r3, [sp, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	dcb5      	bgt.n	800cf38 <_dtoa_r+0xb38>
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	f73f aeb1 	bgt.w	800cd36 <_dtoa_r+0x936>
 800cfd4:	e7b0      	b.n	800cf38 <_dtoa_r+0xb38>
 800cfd6:	bf00      	nop
 800cfd8:	0800ee98 	.word	0x0800ee98
 800cfdc:	0800edf0 	.word	0x0800edf0
 800cfe0:	0800ee1c 	.word	0x0800ee1c

0800cfe4 <_free_r>:
 800cfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfe6:	2900      	cmp	r1, #0
 800cfe8:	d044      	beq.n	800d074 <_free_r+0x90>
 800cfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfee:	9001      	str	r0, [sp, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f1a1 0404 	sub.w	r4, r1, #4
 800cff6:	bfb8      	it	lt
 800cff8:	18e4      	addlt	r4, r4, r3
 800cffa:	f000 fc51 	bl	800d8a0 <__malloc_lock>
 800cffe:	4a1e      	ldr	r2, [pc, #120]	; (800d078 <_free_r+0x94>)
 800d000:	9801      	ldr	r0, [sp, #4]
 800d002:	6813      	ldr	r3, [r2, #0]
 800d004:	b933      	cbnz	r3, 800d014 <_free_r+0x30>
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	6014      	str	r4, [r2, #0]
 800d00a:	b003      	add	sp, #12
 800d00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d010:	f000 bc4c 	b.w	800d8ac <__malloc_unlock>
 800d014:	42a3      	cmp	r3, r4
 800d016:	d908      	bls.n	800d02a <_free_r+0x46>
 800d018:	6825      	ldr	r5, [r4, #0]
 800d01a:	1961      	adds	r1, r4, r5
 800d01c:	428b      	cmp	r3, r1
 800d01e:	bf01      	itttt	eq
 800d020:	6819      	ldreq	r1, [r3, #0]
 800d022:	685b      	ldreq	r3, [r3, #4]
 800d024:	1949      	addeq	r1, r1, r5
 800d026:	6021      	streq	r1, [r4, #0]
 800d028:	e7ed      	b.n	800d006 <_free_r+0x22>
 800d02a:	461a      	mov	r2, r3
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	b10b      	cbz	r3, 800d034 <_free_r+0x50>
 800d030:	42a3      	cmp	r3, r4
 800d032:	d9fa      	bls.n	800d02a <_free_r+0x46>
 800d034:	6811      	ldr	r1, [r2, #0]
 800d036:	1855      	adds	r5, r2, r1
 800d038:	42a5      	cmp	r5, r4
 800d03a:	d10b      	bne.n	800d054 <_free_r+0x70>
 800d03c:	6824      	ldr	r4, [r4, #0]
 800d03e:	4421      	add	r1, r4
 800d040:	1854      	adds	r4, r2, r1
 800d042:	42a3      	cmp	r3, r4
 800d044:	6011      	str	r1, [r2, #0]
 800d046:	d1e0      	bne.n	800d00a <_free_r+0x26>
 800d048:	681c      	ldr	r4, [r3, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	6053      	str	r3, [r2, #4]
 800d04e:	440c      	add	r4, r1
 800d050:	6014      	str	r4, [r2, #0]
 800d052:	e7da      	b.n	800d00a <_free_r+0x26>
 800d054:	d902      	bls.n	800d05c <_free_r+0x78>
 800d056:	230c      	movs	r3, #12
 800d058:	6003      	str	r3, [r0, #0]
 800d05a:	e7d6      	b.n	800d00a <_free_r+0x26>
 800d05c:	6825      	ldr	r5, [r4, #0]
 800d05e:	1961      	adds	r1, r4, r5
 800d060:	428b      	cmp	r3, r1
 800d062:	bf04      	itt	eq
 800d064:	6819      	ldreq	r1, [r3, #0]
 800d066:	685b      	ldreq	r3, [r3, #4]
 800d068:	6063      	str	r3, [r4, #4]
 800d06a:	bf04      	itt	eq
 800d06c:	1949      	addeq	r1, r1, r5
 800d06e:	6021      	streq	r1, [r4, #0]
 800d070:	6054      	str	r4, [r2, #4]
 800d072:	e7ca      	b.n	800d00a <_free_r+0x26>
 800d074:	b003      	add	sp, #12
 800d076:	bd30      	pop	{r4, r5, pc}
 800d078:	20000b44 	.word	0x20000b44

0800d07c <rshift>:
 800d07c:	6903      	ldr	r3, [r0, #16]
 800d07e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d08a:	f100 0414 	add.w	r4, r0, #20
 800d08e:	dd45      	ble.n	800d11c <rshift+0xa0>
 800d090:	f011 011f 	ands.w	r1, r1, #31
 800d094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d09c:	d10c      	bne.n	800d0b8 <rshift+0x3c>
 800d09e:	f100 0710 	add.w	r7, r0, #16
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	42b1      	cmp	r1, r6
 800d0a6:	d334      	bcc.n	800d112 <rshift+0x96>
 800d0a8:	1a9b      	subs	r3, r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	1eea      	subs	r2, r5, #3
 800d0ae:	4296      	cmp	r6, r2
 800d0b0:	bf38      	it	cc
 800d0b2:	2300      	movcc	r3, #0
 800d0b4:	4423      	add	r3, r4
 800d0b6:	e015      	b.n	800d0e4 <rshift+0x68>
 800d0b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0bc:	f1c1 0820 	rsb	r8, r1, #32
 800d0c0:	40cf      	lsrs	r7, r1
 800d0c2:	f105 0e04 	add.w	lr, r5, #4
 800d0c6:	46a1      	mov	r9, r4
 800d0c8:	4576      	cmp	r6, lr
 800d0ca:	46f4      	mov	ip, lr
 800d0cc:	d815      	bhi.n	800d0fa <rshift+0x7e>
 800d0ce:	1a9a      	subs	r2, r3, r2
 800d0d0:	0092      	lsls	r2, r2, #2
 800d0d2:	3a04      	subs	r2, #4
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	42ae      	cmp	r6, r5
 800d0d8:	bf38      	it	cc
 800d0da:	2200      	movcc	r2, #0
 800d0dc:	18a3      	adds	r3, r4, r2
 800d0de:	50a7      	str	r7, [r4, r2]
 800d0e0:	b107      	cbz	r7, 800d0e4 <rshift+0x68>
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	1b1a      	subs	r2, r3, r4
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0ec:	bf08      	it	eq
 800d0ee:	2300      	moveq	r3, #0
 800d0f0:	6102      	str	r2, [r0, #16]
 800d0f2:	bf08      	it	eq
 800d0f4:	6143      	streq	r3, [r0, #20]
 800d0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0fa:	f8dc c000 	ldr.w	ip, [ip]
 800d0fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800d102:	ea4c 0707 	orr.w	r7, ip, r7
 800d106:	f849 7b04 	str.w	r7, [r9], #4
 800d10a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d10e:	40cf      	lsrs	r7, r1
 800d110:	e7da      	b.n	800d0c8 <rshift+0x4c>
 800d112:	f851 cb04 	ldr.w	ip, [r1], #4
 800d116:	f847 cf04 	str.w	ip, [r7, #4]!
 800d11a:	e7c3      	b.n	800d0a4 <rshift+0x28>
 800d11c:	4623      	mov	r3, r4
 800d11e:	e7e1      	b.n	800d0e4 <rshift+0x68>

0800d120 <__hexdig_fun>:
 800d120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d124:	2b09      	cmp	r3, #9
 800d126:	d802      	bhi.n	800d12e <__hexdig_fun+0xe>
 800d128:	3820      	subs	r0, #32
 800d12a:	b2c0      	uxtb	r0, r0
 800d12c:	4770      	bx	lr
 800d12e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d132:	2b05      	cmp	r3, #5
 800d134:	d801      	bhi.n	800d13a <__hexdig_fun+0x1a>
 800d136:	3847      	subs	r0, #71	; 0x47
 800d138:	e7f7      	b.n	800d12a <__hexdig_fun+0xa>
 800d13a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d13e:	2b05      	cmp	r3, #5
 800d140:	d801      	bhi.n	800d146 <__hexdig_fun+0x26>
 800d142:	3827      	subs	r0, #39	; 0x27
 800d144:	e7f1      	b.n	800d12a <__hexdig_fun+0xa>
 800d146:	2000      	movs	r0, #0
 800d148:	4770      	bx	lr
	...

0800d14c <__gethex>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	4617      	mov	r7, r2
 800d152:	680a      	ldr	r2, [r1, #0]
 800d154:	b085      	sub	sp, #20
 800d156:	f102 0b02 	add.w	fp, r2, #2
 800d15a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d15e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d162:	4681      	mov	r9, r0
 800d164:	468a      	mov	sl, r1
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	32fe      	adds	r2, #254	; 0xfe
 800d16a:	eb02 030b 	add.w	r3, r2, fp
 800d16e:	46d8      	mov	r8, fp
 800d170:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	2830      	cmp	r0, #48	; 0x30
 800d178:	d0f7      	beq.n	800d16a <__gethex+0x1e>
 800d17a:	f7ff ffd1 	bl	800d120 <__hexdig_fun>
 800d17e:	4604      	mov	r4, r0
 800d180:	2800      	cmp	r0, #0
 800d182:	d138      	bne.n	800d1f6 <__gethex+0xaa>
 800d184:	49a7      	ldr	r1, [pc, #668]	; (800d424 <__gethex+0x2d8>)
 800d186:	2201      	movs	r2, #1
 800d188:	4640      	mov	r0, r8
 800d18a:	f7fe fffa 	bl	800c182 <strncmp>
 800d18e:	4606      	mov	r6, r0
 800d190:	2800      	cmp	r0, #0
 800d192:	d169      	bne.n	800d268 <__gethex+0x11c>
 800d194:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d198:	465d      	mov	r5, fp
 800d19a:	f7ff ffc1 	bl	800d120 <__hexdig_fun>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d064      	beq.n	800d26c <__gethex+0x120>
 800d1a2:	465a      	mov	r2, fp
 800d1a4:	7810      	ldrb	r0, [r2, #0]
 800d1a6:	2830      	cmp	r0, #48	; 0x30
 800d1a8:	4690      	mov	r8, r2
 800d1aa:	f102 0201 	add.w	r2, r2, #1
 800d1ae:	d0f9      	beq.n	800d1a4 <__gethex+0x58>
 800d1b0:	f7ff ffb6 	bl	800d120 <__hexdig_fun>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	fab0 f480 	clz	r4, r0
 800d1ba:	0964      	lsrs	r4, r4, #5
 800d1bc:	465e      	mov	r6, fp
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	4615      	mov	r5, r2
 800d1c4:	3201      	adds	r2, #1
 800d1c6:	7828      	ldrb	r0, [r5, #0]
 800d1c8:	f7ff ffaa 	bl	800d120 <__hexdig_fun>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1f8      	bne.n	800d1c2 <__gethex+0x76>
 800d1d0:	4994      	ldr	r1, [pc, #592]	; (800d424 <__gethex+0x2d8>)
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f7fe ffd4 	bl	800c182 <strncmp>
 800d1da:	b978      	cbnz	r0, 800d1fc <__gethex+0xb0>
 800d1dc:	b946      	cbnz	r6, 800d1f0 <__gethex+0xa4>
 800d1de:	1c6e      	adds	r6, r5, #1
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	4615      	mov	r5, r2
 800d1e4:	3201      	adds	r2, #1
 800d1e6:	7828      	ldrb	r0, [r5, #0]
 800d1e8:	f7ff ff9a 	bl	800d120 <__hexdig_fun>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d1f8      	bne.n	800d1e2 <__gethex+0x96>
 800d1f0:	1b73      	subs	r3, r6, r5
 800d1f2:	009e      	lsls	r6, r3, #2
 800d1f4:	e004      	b.n	800d200 <__gethex+0xb4>
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	4626      	mov	r6, r4
 800d1fa:	e7e1      	b.n	800d1c0 <__gethex+0x74>
 800d1fc:	2e00      	cmp	r6, #0
 800d1fe:	d1f7      	bne.n	800d1f0 <__gethex+0xa4>
 800d200:	782b      	ldrb	r3, [r5, #0]
 800d202:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d206:	2b50      	cmp	r3, #80	; 0x50
 800d208:	d13d      	bne.n	800d286 <__gethex+0x13a>
 800d20a:	786b      	ldrb	r3, [r5, #1]
 800d20c:	2b2b      	cmp	r3, #43	; 0x2b
 800d20e:	d02f      	beq.n	800d270 <__gethex+0x124>
 800d210:	2b2d      	cmp	r3, #45	; 0x2d
 800d212:	d031      	beq.n	800d278 <__gethex+0x12c>
 800d214:	1c69      	adds	r1, r5, #1
 800d216:	f04f 0b00 	mov.w	fp, #0
 800d21a:	7808      	ldrb	r0, [r1, #0]
 800d21c:	f7ff ff80 	bl	800d120 <__hexdig_fun>
 800d220:	1e42      	subs	r2, r0, #1
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	2a18      	cmp	r2, #24
 800d226:	d82e      	bhi.n	800d286 <__gethex+0x13a>
 800d228:	f1a0 0210 	sub.w	r2, r0, #16
 800d22c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d230:	f7ff ff76 	bl	800d120 <__hexdig_fun>
 800d234:	f100 3cff 	add.w	ip, r0, #4294967295
 800d238:	fa5f fc8c 	uxtb.w	ip, ip
 800d23c:	f1bc 0f18 	cmp.w	ip, #24
 800d240:	d91d      	bls.n	800d27e <__gethex+0x132>
 800d242:	f1bb 0f00 	cmp.w	fp, #0
 800d246:	d000      	beq.n	800d24a <__gethex+0xfe>
 800d248:	4252      	negs	r2, r2
 800d24a:	4416      	add	r6, r2
 800d24c:	f8ca 1000 	str.w	r1, [sl]
 800d250:	b1dc      	cbz	r4, 800d28a <__gethex+0x13e>
 800d252:	9b01      	ldr	r3, [sp, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	bf14      	ite	ne
 800d258:	f04f 0800 	movne.w	r8, #0
 800d25c:	f04f 0806 	moveq.w	r8, #6
 800d260:	4640      	mov	r0, r8
 800d262:	b005      	add	sp, #20
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	4645      	mov	r5, r8
 800d26a:	4626      	mov	r6, r4
 800d26c:	2401      	movs	r4, #1
 800d26e:	e7c7      	b.n	800d200 <__gethex+0xb4>
 800d270:	f04f 0b00 	mov.w	fp, #0
 800d274:	1ca9      	adds	r1, r5, #2
 800d276:	e7d0      	b.n	800d21a <__gethex+0xce>
 800d278:	f04f 0b01 	mov.w	fp, #1
 800d27c:	e7fa      	b.n	800d274 <__gethex+0x128>
 800d27e:	230a      	movs	r3, #10
 800d280:	fb03 0002 	mla	r0, r3, r2, r0
 800d284:	e7d0      	b.n	800d228 <__gethex+0xdc>
 800d286:	4629      	mov	r1, r5
 800d288:	e7e0      	b.n	800d24c <__gethex+0x100>
 800d28a:	eba5 0308 	sub.w	r3, r5, r8
 800d28e:	3b01      	subs	r3, #1
 800d290:	4621      	mov	r1, r4
 800d292:	2b07      	cmp	r3, #7
 800d294:	dc0a      	bgt.n	800d2ac <__gethex+0x160>
 800d296:	4648      	mov	r0, r9
 800d298:	f000 fb0e 	bl	800d8b8 <_Balloc>
 800d29c:	4604      	mov	r4, r0
 800d29e:	b940      	cbnz	r0, 800d2b2 <__gethex+0x166>
 800d2a0:	4b61      	ldr	r3, [pc, #388]	; (800d428 <__gethex+0x2dc>)
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	21e4      	movs	r1, #228	; 0xe4
 800d2a6:	4861      	ldr	r0, [pc, #388]	; (800d42c <__gethex+0x2e0>)
 800d2a8:	f001 f9f0 	bl	800e68c <__assert_func>
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	105b      	asrs	r3, r3, #1
 800d2b0:	e7ef      	b.n	800d292 <__gethex+0x146>
 800d2b2:	f100 0a14 	add.w	sl, r0, #20
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	495a      	ldr	r1, [pc, #360]	; (800d424 <__gethex+0x2d8>)
 800d2ba:	f8cd a004 	str.w	sl, [sp, #4]
 800d2be:	469b      	mov	fp, r3
 800d2c0:	45a8      	cmp	r8, r5
 800d2c2:	d342      	bcc.n	800d34a <__gethex+0x1fe>
 800d2c4:	9801      	ldr	r0, [sp, #4]
 800d2c6:	f840 bb04 	str.w	fp, [r0], #4
 800d2ca:	eba0 000a 	sub.w	r0, r0, sl
 800d2ce:	1080      	asrs	r0, r0, #2
 800d2d0:	6120      	str	r0, [r4, #16]
 800d2d2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d2d6:	4658      	mov	r0, fp
 800d2d8:	f000 fbe0 	bl	800da9c <__hi0bits>
 800d2dc:	683d      	ldr	r5, [r7, #0]
 800d2de:	eba8 0000 	sub.w	r0, r8, r0
 800d2e2:	42a8      	cmp	r0, r5
 800d2e4:	dd59      	ble.n	800d39a <__gethex+0x24e>
 800d2e6:	eba0 0805 	sub.w	r8, r0, r5
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 ff6f 	bl	800e1d0 <__any_on>
 800d2f2:	4683      	mov	fp, r0
 800d2f4:	b1b8      	cbz	r0, 800d326 <__gethex+0x1da>
 800d2f6:	f108 33ff 	add.w	r3, r8, #4294967295
 800d2fa:	1159      	asrs	r1, r3, #5
 800d2fc:	f003 021f 	and.w	r2, r3, #31
 800d300:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d304:	f04f 0b01 	mov.w	fp, #1
 800d308:	fa0b f202 	lsl.w	r2, fp, r2
 800d30c:	420a      	tst	r2, r1
 800d30e:	d00a      	beq.n	800d326 <__gethex+0x1da>
 800d310:	455b      	cmp	r3, fp
 800d312:	dd06      	ble.n	800d322 <__gethex+0x1d6>
 800d314:	f1a8 0102 	sub.w	r1, r8, #2
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 ff59 	bl	800e1d0 <__any_on>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d138      	bne.n	800d394 <__gethex+0x248>
 800d322:	f04f 0b02 	mov.w	fp, #2
 800d326:	4641      	mov	r1, r8
 800d328:	4620      	mov	r0, r4
 800d32a:	f7ff fea7 	bl	800d07c <rshift>
 800d32e:	4446      	add	r6, r8
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	42b3      	cmp	r3, r6
 800d334:	da41      	bge.n	800d3ba <__gethex+0x26e>
 800d336:	4621      	mov	r1, r4
 800d338:	4648      	mov	r0, r9
 800d33a:	f000 fafd 	bl	800d938 <_Bfree>
 800d33e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d340:	2300      	movs	r3, #0
 800d342:	6013      	str	r3, [r2, #0]
 800d344:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d348:	e78a      	b.n	800d260 <__gethex+0x114>
 800d34a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d34e:	2a2e      	cmp	r2, #46	; 0x2e
 800d350:	d014      	beq.n	800d37c <__gethex+0x230>
 800d352:	2b20      	cmp	r3, #32
 800d354:	d106      	bne.n	800d364 <__gethex+0x218>
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	f843 bb04 	str.w	fp, [r3], #4
 800d35c:	f04f 0b00 	mov.w	fp, #0
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	465b      	mov	r3, fp
 800d364:	7828      	ldrb	r0, [r5, #0]
 800d366:	9303      	str	r3, [sp, #12]
 800d368:	f7ff feda 	bl	800d120 <__hexdig_fun>
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	f000 000f 	and.w	r0, r0, #15
 800d372:	4098      	lsls	r0, r3
 800d374:	ea4b 0b00 	orr.w	fp, fp, r0
 800d378:	3304      	adds	r3, #4
 800d37a:	e7a1      	b.n	800d2c0 <__gethex+0x174>
 800d37c:	45a8      	cmp	r8, r5
 800d37e:	d8e8      	bhi.n	800d352 <__gethex+0x206>
 800d380:	2201      	movs	r2, #1
 800d382:	4628      	mov	r0, r5
 800d384:	9303      	str	r3, [sp, #12]
 800d386:	f7fe fefc 	bl	800c182 <strncmp>
 800d38a:	4926      	ldr	r1, [pc, #152]	; (800d424 <__gethex+0x2d8>)
 800d38c:	9b03      	ldr	r3, [sp, #12]
 800d38e:	2800      	cmp	r0, #0
 800d390:	d1df      	bne.n	800d352 <__gethex+0x206>
 800d392:	e795      	b.n	800d2c0 <__gethex+0x174>
 800d394:	f04f 0b03 	mov.w	fp, #3
 800d398:	e7c5      	b.n	800d326 <__gethex+0x1da>
 800d39a:	da0b      	bge.n	800d3b4 <__gethex+0x268>
 800d39c:	eba5 0800 	sub.w	r8, r5, r0
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4642      	mov	r2, r8
 800d3a4:	4648      	mov	r0, r9
 800d3a6:	f000 fce1 	bl	800dd6c <__lshift>
 800d3aa:	eba6 0608 	sub.w	r6, r6, r8
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	f100 0a14 	add.w	sl, r0, #20
 800d3b4:	f04f 0b00 	mov.w	fp, #0
 800d3b8:	e7ba      	b.n	800d330 <__gethex+0x1e4>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	42b3      	cmp	r3, r6
 800d3be:	dd73      	ble.n	800d4a8 <__gethex+0x35c>
 800d3c0:	1b9e      	subs	r6, r3, r6
 800d3c2:	42b5      	cmp	r5, r6
 800d3c4:	dc34      	bgt.n	800d430 <__gethex+0x2e4>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d023      	beq.n	800d414 <__gethex+0x2c8>
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d025      	beq.n	800d41c <__gethex+0x2d0>
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d115      	bne.n	800d400 <__gethex+0x2b4>
 800d3d4:	42b5      	cmp	r5, r6
 800d3d6:	d113      	bne.n	800d400 <__gethex+0x2b4>
 800d3d8:	2d01      	cmp	r5, #1
 800d3da:	d10b      	bne.n	800d3f4 <__gethex+0x2a8>
 800d3dc:	9a02      	ldr	r2, [sp, #8]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6013      	str	r3, [r2, #0]
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	f8ca 3000 	str.w	r3, [sl]
 800d3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3ec:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d3f0:	601c      	str	r4, [r3, #0]
 800d3f2:	e735      	b.n	800d260 <__gethex+0x114>
 800d3f4:	1e69      	subs	r1, r5, #1
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 feea 	bl	800e1d0 <__any_on>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d1ed      	bne.n	800d3dc <__gethex+0x290>
 800d400:	4621      	mov	r1, r4
 800d402:	4648      	mov	r0, r9
 800d404:	f000 fa98 	bl	800d938 <_Bfree>
 800d408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d40a:	2300      	movs	r3, #0
 800d40c:	6013      	str	r3, [r2, #0]
 800d40e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d412:	e725      	b.n	800d260 <__gethex+0x114>
 800d414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1f2      	bne.n	800d400 <__gethex+0x2b4>
 800d41a:	e7df      	b.n	800d3dc <__gethex+0x290>
 800d41c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1dc      	bne.n	800d3dc <__gethex+0x290>
 800d422:	e7ed      	b.n	800d400 <__gethex+0x2b4>
 800d424:	0800ed88 	.word	0x0800ed88
 800d428:	0800ee98 	.word	0x0800ee98
 800d42c:	0800eea9 	.word	0x0800eea9
 800d430:	f106 38ff 	add.w	r8, r6, #4294967295
 800d434:	f1bb 0f00 	cmp.w	fp, #0
 800d438:	d133      	bne.n	800d4a2 <__gethex+0x356>
 800d43a:	f1b8 0f00 	cmp.w	r8, #0
 800d43e:	d004      	beq.n	800d44a <__gethex+0x2fe>
 800d440:	4641      	mov	r1, r8
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fec4 	bl	800e1d0 <__any_on>
 800d448:	4683      	mov	fp, r0
 800d44a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d44e:	2301      	movs	r3, #1
 800d450:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d454:	f008 081f 	and.w	r8, r8, #31
 800d458:	fa03 f308 	lsl.w	r3, r3, r8
 800d45c:	4213      	tst	r3, r2
 800d45e:	4631      	mov	r1, r6
 800d460:	4620      	mov	r0, r4
 800d462:	bf18      	it	ne
 800d464:	f04b 0b02 	orrne.w	fp, fp, #2
 800d468:	1bad      	subs	r5, r5, r6
 800d46a:	f7ff fe07 	bl	800d07c <rshift>
 800d46e:	687e      	ldr	r6, [r7, #4]
 800d470:	f04f 0802 	mov.w	r8, #2
 800d474:	f1bb 0f00 	cmp.w	fp, #0
 800d478:	d04a      	beq.n	800d510 <__gethex+0x3c4>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d016      	beq.n	800d4ae <__gethex+0x362>
 800d480:	2b03      	cmp	r3, #3
 800d482:	d018      	beq.n	800d4b6 <__gethex+0x36a>
 800d484:	2b01      	cmp	r3, #1
 800d486:	d109      	bne.n	800d49c <__gethex+0x350>
 800d488:	f01b 0f02 	tst.w	fp, #2
 800d48c:	d006      	beq.n	800d49c <__gethex+0x350>
 800d48e:	f8da 3000 	ldr.w	r3, [sl]
 800d492:	ea4b 0b03 	orr.w	fp, fp, r3
 800d496:	f01b 0f01 	tst.w	fp, #1
 800d49a:	d10f      	bne.n	800d4bc <__gethex+0x370>
 800d49c:	f048 0810 	orr.w	r8, r8, #16
 800d4a0:	e036      	b.n	800d510 <__gethex+0x3c4>
 800d4a2:	f04f 0b01 	mov.w	fp, #1
 800d4a6:	e7d0      	b.n	800d44a <__gethex+0x2fe>
 800d4a8:	f04f 0801 	mov.w	r8, #1
 800d4ac:	e7e2      	b.n	800d474 <__gethex+0x328>
 800d4ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b0:	f1c3 0301 	rsb	r3, r3, #1
 800d4b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d0ef      	beq.n	800d49c <__gethex+0x350>
 800d4bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d4c0:	f104 0214 	add.w	r2, r4, #20
 800d4c4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	4694      	mov	ip, r2
 800d4d2:	f852 1b04 	ldr.w	r1, [r2], #4
 800d4d6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d4da:	d01e      	beq.n	800d51a <__gethex+0x3ce>
 800d4dc:	3101      	adds	r1, #1
 800d4de:	f8cc 1000 	str.w	r1, [ip]
 800d4e2:	f1b8 0f02 	cmp.w	r8, #2
 800d4e6:	f104 0214 	add.w	r2, r4, #20
 800d4ea:	d13d      	bne.n	800d568 <__gethex+0x41c>
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	42ab      	cmp	r3, r5
 800d4f2:	d10b      	bne.n	800d50c <__gethex+0x3c0>
 800d4f4:	1169      	asrs	r1, r5, #5
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	f005 051f 	and.w	r5, r5, #31
 800d4fc:	fa03 f505 	lsl.w	r5, r3, r5
 800d500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d504:	421d      	tst	r5, r3
 800d506:	bf18      	it	ne
 800d508:	f04f 0801 	movne.w	r8, #1
 800d50c:	f048 0820 	orr.w	r8, r8, #32
 800d510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d512:	601c      	str	r4, [r3, #0]
 800d514:	9b02      	ldr	r3, [sp, #8]
 800d516:	601e      	str	r6, [r3, #0]
 800d518:	e6a2      	b.n	800d260 <__gethex+0x114>
 800d51a:	4290      	cmp	r0, r2
 800d51c:	f842 3c04 	str.w	r3, [r2, #-4]
 800d520:	d8d6      	bhi.n	800d4d0 <__gethex+0x384>
 800d522:	68a2      	ldr	r2, [r4, #8]
 800d524:	4593      	cmp	fp, r2
 800d526:	db17      	blt.n	800d558 <__gethex+0x40c>
 800d528:	6861      	ldr	r1, [r4, #4]
 800d52a:	4648      	mov	r0, r9
 800d52c:	3101      	adds	r1, #1
 800d52e:	f000 f9c3 	bl	800d8b8 <_Balloc>
 800d532:	4682      	mov	sl, r0
 800d534:	b918      	cbnz	r0, 800d53e <__gethex+0x3f2>
 800d536:	4b1b      	ldr	r3, [pc, #108]	; (800d5a4 <__gethex+0x458>)
 800d538:	4602      	mov	r2, r0
 800d53a:	2184      	movs	r1, #132	; 0x84
 800d53c:	e6b3      	b.n	800d2a6 <__gethex+0x15a>
 800d53e:	6922      	ldr	r2, [r4, #16]
 800d540:	3202      	adds	r2, #2
 800d542:	f104 010c 	add.w	r1, r4, #12
 800d546:	0092      	lsls	r2, r2, #2
 800d548:	300c      	adds	r0, #12
 800d54a:	f7fe feb9 	bl	800c2c0 <memcpy>
 800d54e:	4621      	mov	r1, r4
 800d550:	4648      	mov	r0, r9
 800d552:	f000 f9f1 	bl	800d938 <_Bfree>
 800d556:	4654      	mov	r4, sl
 800d558:	6922      	ldr	r2, [r4, #16]
 800d55a:	1c51      	adds	r1, r2, #1
 800d55c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d560:	6121      	str	r1, [r4, #16]
 800d562:	2101      	movs	r1, #1
 800d564:	6151      	str	r1, [r2, #20]
 800d566:	e7bc      	b.n	800d4e2 <__gethex+0x396>
 800d568:	6921      	ldr	r1, [r4, #16]
 800d56a:	4559      	cmp	r1, fp
 800d56c:	dd0b      	ble.n	800d586 <__gethex+0x43a>
 800d56e:	2101      	movs	r1, #1
 800d570:	4620      	mov	r0, r4
 800d572:	f7ff fd83 	bl	800d07c <rshift>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	3601      	adds	r6, #1
 800d57a:	42b3      	cmp	r3, r6
 800d57c:	f6ff aedb 	blt.w	800d336 <__gethex+0x1ea>
 800d580:	f04f 0801 	mov.w	r8, #1
 800d584:	e7c2      	b.n	800d50c <__gethex+0x3c0>
 800d586:	f015 051f 	ands.w	r5, r5, #31
 800d58a:	d0f9      	beq.n	800d580 <__gethex+0x434>
 800d58c:	9b01      	ldr	r3, [sp, #4]
 800d58e:	441a      	add	r2, r3
 800d590:	f1c5 0520 	rsb	r5, r5, #32
 800d594:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d598:	f000 fa80 	bl	800da9c <__hi0bits>
 800d59c:	42a8      	cmp	r0, r5
 800d59e:	dbe6      	blt.n	800d56e <__gethex+0x422>
 800d5a0:	e7ee      	b.n	800d580 <__gethex+0x434>
 800d5a2:	bf00      	nop
 800d5a4:	0800ee98 	.word	0x0800ee98

0800d5a8 <L_shift>:
 800d5a8:	f1c2 0208 	rsb	r2, r2, #8
 800d5ac:	0092      	lsls	r2, r2, #2
 800d5ae:	b570      	push	{r4, r5, r6, lr}
 800d5b0:	f1c2 0620 	rsb	r6, r2, #32
 800d5b4:	6843      	ldr	r3, [r0, #4]
 800d5b6:	6804      	ldr	r4, [r0, #0]
 800d5b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d5bc:	432c      	orrs	r4, r5
 800d5be:	40d3      	lsrs	r3, r2
 800d5c0:	6004      	str	r4, [r0, #0]
 800d5c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d5c6:	4288      	cmp	r0, r1
 800d5c8:	d3f4      	bcc.n	800d5b4 <L_shift+0xc>
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}

0800d5cc <__match>:
 800d5cc:	b530      	push	{r4, r5, lr}
 800d5ce:	6803      	ldr	r3, [r0, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5d6:	b914      	cbnz	r4, 800d5de <__match+0x12>
 800d5d8:	6003      	str	r3, [r0, #0]
 800d5da:	2001      	movs	r0, #1
 800d5dc:	bd30      	pop	{r4, r5, pc}
 800d5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d5e6:	2d19      	cmp	r5, #25
 800d5e8:	bf98      	it	ls
 800d5ea:	3220      	addls	r2, #32
 800d5ec:	42a2      	cmp	r2, r4
 800d5ee:	d0f0      	beq.n	800d5d2 <__match+0x6>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	e7f3      	b.n	800d5dc <__match+0x10>

0800d5f4 <__hexnan>:
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	680b      	ldr	r3, [r1, #0]
 800d5fa:	6801      	ldr	r1, [r0, #0]
 800d5fc:	115e      	asrs	r6, r3, #5
 800d5fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d602:	f013 031f 	ands.w	r3, r3, #31
 800d606:	b087      	sub	sp, #28
 800d608:	bf18      	it	ne
 800d60a:	3604      	addne	r6, #4
 800d60c:	2500      	movs	r5, #0
 800d60e:	1f37      	subs	r7, r6, #4
 800d610:	4682      	mov	sl, r0
 800d612:	4690      	mov	r8, r2
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	f846 5c04 	str.w	r5, [r6, #-4]
 800d61a:	46b9      	mov	r9, r7
 800d61c:	463c      	mov	r4, r7
 800d61e:	9502      	str	r5, [sp, #8]
 800d620:	46ab      	mov	fp, r5
 800d622:	784a      	ldrb	r2, [r1, #1]
 800d624:	1c4b      	adds	r3, r1, #1
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	b342      	cbz	r2, 800d67c <__hexnan+0x88>
 800d62a:	4610      	mov	r0, r2
 800d62c:	9105      	str	r1, [sp, #20]
 800d62e:	9204      	str	r2, [sp, #16]
 800d630:	f7ff fd76 	bl	800d120 <__hexdig_fun>
 800d634:	2800      	cmp	r0, #0
 800d636:	d14f      	bne.n	800d6d8 <__hexnan+0xe4>
 800d638:	9a04      	ldr	r2, [sp, #16]
 800d63a:	9905      	ldr	r1, [sp, #20]
 800d63c:	2a20      	cmp	r2, #32
 800d63e:	d818      	bhi.n	800d672 <__hexnan+0x7e>
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	459b      	cmp	fp, r3
 800d644:	dd13      	ble.n	800d66e <__hexnan+0x7a>
 800d646:	454c      	cmp	r4, r9
 800d648:	d206      	bcs.n	800d658 <__hexnan+0x64>
 800d64a:	2d07      	cmp	r5, #7
 800d64c:	dc04      	bgt.n	800d658 <__hexnan+0x64>
 800d64e:	462a      	mov	r2, r5
 800d650:	4649      	mov	r1, r9
 800d652:	4620      	mov	r0, r4
 800d654:	f7ff ffa8 	bl	800d5a8 <L_shift>
 800d658:	4544      	cmp	r4, r8
 800d65a:	d950      	bls.n	800d6fe <__hexnan+0x10a>
 800d65c:	2300      	movs	r3, #0
 800d65e:	f1a4 0904 	sub.w	r9, r4, #4
 800d662:	f844 3c04 	str.w	r3, [r4, #-4]
 800d666:	f8cd b008 	str.w	fp, [sp, #8]
 800d66a:	464c      	mov	r4, r9
 800d66c:	461d      	mov	r5, r3
 800d66e:	9903      	ldr	r1, [sp, #12]
 800d670:	e7d7      	b.n	800d622 <__hexnan+0x2e>
 800d672:	2a29      	cmp	r2, #41	; 0x29
 800d674:	d155      	bne.n	800d722 <__hexnan+0x12e>
 800d676:	3102      	adds	r1, #2
 800d678:	f8ca 1000 	str.w	r1, [sl]
 800d67c:	f1bb 0f00 	cmp.w	fp, #0
 800d680:	d04f      	beq.n	800d722 <__hexnan+0x12e>
 800d682:	454c      	cmp	r4, r9
 800d684:	d206      	bcs.n	800d694 <__hexnan+0xa0>
 800d686:	2d07      	cmp	r5, #7
 800d688:	dc04      	bgt.n	800d694 <__hexnan+0xa0>
 800d68a:	462a      	mov	r2, r5
 800d68c:	4649      	mov	r1, r9
 800d68e:	4620      	mov	r0, r4
 800d690:	f7ff ff8a 	bl	800d5a8 <L_shift>
 800d694:	4544      	cmp	r4, r8
 800d696:	d934      	bls.n	800d702 <__hexnan+0x10e>
 800d698:	f1a8 0204 	sub.w	r2, r8, #4
 800d69c:	4623      	mov	r3, r4
 800d69e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6a6:	429f      	cmp	r7, r3
 800d6a8:	d2f9      	bcs.n	800d69e <__hexnan+0xaa>
 800d6aa:	1b3b      	subs	r3, r7, r4
 800d6ac:	f023 0303 	bic.w	r3, r3, #3
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	3e03      	subs	r6, #3
 800d6b4:	3401      	adds	r4, #1
 800d6b6:	42a6      	cmp	r6, r4
 800d6b8:	bf38      	it	cc
 800d6ba:	2304      	movcc	r3, #4
 800d6bc:	4443      	add	r3, r8
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f843 2b04 	str.w	r2, [r3], #4
 800d6c4:	429f      	cmp	r7, r3
 800d6c6:	d2fb      	bcs.n	800d6c0 <__hexnan+0xcc>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	b91b      	cbnz	r3, 800d6d4 <__hexnan+0xe0>
 800d6cc:	4547      	cmp	r7, r8
 800d6ce:	d126      	bne.n	800d71e <__hexnan+0x12a>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	2005      	movs	r0, #5
 800d6d6:	e025      	b.n	800d724 <__hexnan+0x130>
 800d6d8:	3501      	adds	r5, #1
 800d6da:	2d08      	cmp	r5, #8
 800d6dc:	f10b 0b01 	add.w	fp, fp, #1
 800d6e0:	dd06      	ble.n	800d6f0 <__hexnan+0xfc>
 800d6e2:	4544      	cmp	r4, r8
 800d6e4:	d9c3      	bls.n	800d66e <__hexnan+0x7a>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6ec:	2501      	movs	r5, #1
 800d6ee:	3c04      	subs	r4, #4
 800d6f0:	6822      	ldr	r2, [r4, #0]
 800d6f2:	f000 000f 	and.w	r0, r0, #15
 800d6f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6fa:	6020      	str	r0, [r4, #0]
 800d6fc:	e7b7      	b.n	800d66e <__hexnan+0x7a>
 800d6fe:	2508      	movs	r5, #8
 800d700:	e7b5      	b.n	800d66e <__hexnan+0x7a>
 800d702:	9b01      	ldr	r3, [sp, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d0df      	beq.n	800d6c8 <__hexnan+0xd4>
 800d708:	f1c3 0320 	rsb	r3, r3, #32
 800d70c:	f04f 32ff 	mov.w	r2, #4294967295
 800d710:	40da      	lsrs	r2, r3
 800d712:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d716:	4013      	ands	r3, r2
 800d718:	f846 3c04 	str.w	r3, [r6, #-4]
 800d71c:	e7d4      	b.n	800d6c8 <__hexnan+0xd4>
 800d71e:	3f04      	subs	r7, #4
 800d720:	e7d2      	b.n	800d6c8 <__hexnan+0xd4>
 800d722:	2004      	movs	r0, #4
 800d724:	b007      	add	sp, #28
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d72c <malloc>:
 800d72c:	4b02      	ldr	r3, [pc, #8]	; (800d738 <malloc+0xc>)
 800d72e:	4601      	mov	r1, r0
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	f000 b823 	b.w	800d77c <_malloc_r>
 800d736:	bf00      	nop
 800d738:	200001d0 	.word	0x200001d0

0800d73c <sbrk_aligned>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	4e0e      	ldr	r6, [pc, #56]	; (800d778 <sbrk_aligned+0x3c>)
 800d740:	460c      	mov	r4, r1
 800d742:	6831      	ldr	r1, [r6, #0]
 800d744:	4605      	mov	r5, r0
 800d746:	b911      	cbnz	r1, 800d74e <sbrk_aligned+0x12>
 800d748:	f000 ff90 	bl	800e66c <_sbrk_r>
 800d74c:	6030      	str	r0, [r6, #0]
 800d74e:	4621      	mov	r1, r4
 800d750:	4628      	mov	r0, r5
 800d752:	f000 ff8b 	bl	800e66c <_sbrk_r>
 800d756:	1c43      	adds	r3, r0, #1
 800d758:	d00a      	beq.n	800d770 <sbrk_aligned+0x34>
 800d75a:	1cc4      	adds	r4, r0, #3
 800d75c:	f024 0403 	bic.w	r4, r4, #3
 800d760:	42a0      	cmp	r0, r4
 800d762:	d007      	beq.n	800d774 <sbrk_aligned+0x38>
 800d764:	1a21      	subs	r1, r4, r0
 800d766:	4628      	mov	r0, r5
 800d768:	f000 ff80 	bl	800e66c <_sbrk_r>
 800d76c:	3001      	adds	r0, #1
 800d76e:	d101      	bne.n	800d774 <sbrk_aligned+0x38>
 800d770:	f04f 34ff 	mov.w	r4, #4294967295
 800d774:	4620      	mov	r0, r4
 800d776:	bd70      	pop	{r4, r5, r6, pc}
 800d778:	20000b48 	.word	0x20000b48

0800d77c <_malloc_r>:
 800d77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d780:	1ccd      	adds	r5, r1, #3
 800d782:	f025 0503 	bic.w	r5, r5, #3
 800d786:	3508      	adds	r5, #8
 800d788:	2d0c      	cmp	r5, #12
 800d78a:	bf38      	it	cc
 800d78c:	250c      	movcc	r5, #12
 800d78e:	2d00      	cmp	r5, #0
 800d790:	4607      	mov	r7, r0
 800d792:	db01      	blt.n	800d798 <_malloc_r+0x1c>
 800d794:	42a9      	cmp	r1, r5
 800d796:	d905      	bls.n	800d7a4 <_malloc_r+0x28>
 800d798:	230c      	movs	r3, #12
 800d79a:	603b      	str	r3, [r7, #0]
 800d79c:	2600      	movs	r6, #0
 800d79e:	4630      	mov	r0, r6
 800d7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d878 <_malloc_r+0xfc>
 800d7a8:	f000 f87a 	bl	800d8a0 <__malloc_lock>
 800d7ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b0:	461c      	mov	r4, r3
 800d7b2:	bb5c      	cbnz	r4, 800d80c <_malloc_r+0x90>
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	f7ff ffc0 	bl	800d73c <sbrk_aligned>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	4604      	mov	r4, r0
 800d7c0:	d155      	bne.n	800d86e <_malloc_r+0xf2>
 800d7c2:	f8d8 4000 	ldr.w	r4, [r8]
 800d7c6:	4626      	mov	r6, r4
 800d7c8:	2e00      	cmp	r6, #0
 800d7ca:	d145      	bne.n	800d858 <_malloc_r+0xdc>
 800d7cc:	2c00      	cmp	r4, #0
 800d7ce:	d048      	beq.n	800d862 <_malloc_r+0xe6>
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	eb04 0903 	add.w	r9, r4, r3
 800d7da:	f000 ff47 	bl	800e66c <_sbrk_r>
 800d7de:	4581      	cmp	r9, r0
 800d7e0:	d13f      	bne.n	800d862 <_malloc_r+0xe6>
 800d7e2:	6821      	ldr	r1, [r4, #0]
 800d7e4:	1a6d      	subs	r5, r5, r1
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	f7ff ffa7 	bl	800d73c <sbrk_aligned>
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d037      	beq.n	800d862 <_malloc_r+0xe6>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	442b      	add	r3, r5
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d038      	beq.n	800d872 <_malloc_r+0xf6>
 800d800:	685a      	ldr	r2, [r3, #4]
 800d802:	42a2      	cmp	r2, r4
 800d804:	d12b      	bne.n	800d85e <_malloc_r+0xe2>
 800d806:	2200      	movs	r2, #0
 800d808:	605a      	str	r2, [r3, #4]
 800d80a:	e00f      	b.n	800d82c <_malloc_r+0xb0>
 800d80c:	6822      	ldr	r2, [r4, #0]
 800d80e:	1b52      	subs	r2, r2, r5
 800d810:	d41f      	bmi.n	800d852 <_malloc_r+0xd6>
 800d812:	2a0b      	cmp	r2, #11
 800d814:	d917      	bls.n	800d846 <_malloc_r+0xca>
 800d816:	1961      	adds	r1, r4, r5
 800d818:	42a3      	cmp	r3, r4
 800d81a:	6025      	str	r5, [r4, #0]
 800d81c:	bf18      	it	ne
 800d81e:	6059      	strne	r1, [r3, #4]
 800d820:	6863      	ldr	r3, [r4, #4]
 800d822:	bf08      	it	eq
 800d824:	f8c8 1000 	streq.w	r1, [r8]
 800d828:	5162      	str	r2, [r4, r5]
 800d82a:	604b      	str	r3, [r1, #4]
 800d82c:	4638      	mov	r0, r7
 800d82e:	f104 060b 	add.w	r6, r4, #11
 800d832:	f000 f83b 	bl	800d8ac <__malloc_unlock>
 800d836:	f026 0607 	bic.w	r6, r6, #7
 800d83a:	1d23      	adds	r3, r4, #4
 800d83c:	1af2      	subs	r2, r6, r3
 800d83e:	d0ae      	beq.n	800d79e <_malloc_r+0x22>
 800d840:	1b9b      	subs	r3, r3, r6
 800d842:	50a3      	str	r3, [r4, r2]
 800d844:	e7ab      	b.n	800d79e <_malloc_r+0x22>
 800d846:	42a3      	cmp	r3, r4
 800d848:	6862      	ldr	r2, [r4, #4]
 800d84a:	d1dd      	bne.n	800d808 <_malloc_r+0x8c>
 800d84c:	f8c8 2000 	str.w	r2, [r8]
 800d850:	e7ec      	b.n	800d82c <_malloc_r+0xb0>
 800d852:	4623      	mov	r3, r4
 800d854:	6864      	ldr	r4, [r4, #4]
 800d856:	e7ac      	b.n	800d7b2 <_malloc_r+0x36>
 800d858:	4634      	mov	r4, r6
 800d85a:	6876      	ldr	r6, [r6, #4]
 800d85c:	e7b4      	b.n	800d7c8 <_malloc_r+0x4c>
 800d85e:	4613      	mov	r3, r2
 800d860:	e7cc      	b.n	800d7fc <_malloc_r+0x80>
 800d862:	230c      	movs	r3, #12
 800d864:	603b      	str	r3, [r7, #0]
 800d866:	4638      	mov	r0, r7
 800d868:	f000 f820 	bl	800d8ac <__malloc_unlock>
 800d86c:	e797      	b.n	800d79e <_malloc_r+0x22>
 800d86e:	6025      	str	r5, [r4, #0]
 800d870:	e7dc      	b.n	800d82c <_malloc_r+0xb0>
 800d872:	605b      	str	r3, [r3, #4]
 800d874:	deff      	udf	#255	; 0xff
 800d876:	bf00      	nop
 800d878:	20000b44 	.word	0x20000b44

0800d87c <__ascii_mbtowc>:
 800d87c:	b082      	sub	sp, #8
 800d87e:	b901      	cbnz	r1, 800d882 <__ascii_mbtowc+0x6>
 800d880:	a901      	add	r1, sp, #4
 800d882:	b142      	cbz	r2, 800d896 <__ascii_mbtowc+0x1a>
 800d884:	b14b      	cbz	r3, 800d89a <__ascii_mbtowc+0x1e>
 800d886:	7813      	ldrb	r3, [r2, #0]
 800d888:	600b      	str	r3, [r1, #0]
 800d88a:	7812      	ldrb	r2, [r2, #0]
 800d88c:	1e10      	subs	r0, r2, #0
 800d88e:	bf18      	it	ne
 800d890:	2001      	movne	r0, #1
 800d892:	b002      	add	sp, #8
 800d894:	4770      	bx	lr
 800d896:	4610      	mov	r0, r2
 800d898:	e7fb      	b.n	800d892 <__ascii_mbtowc+0x16>
 800d89a:	f06f 0001 	mvn.w	r0, #1
 800d89e:	e7f8      	b.n	800d892 <__ascii_mbtowc+0x16>

0800d8a0 <__malloc_lock>:
 800d8a0:	4801      	ldr	r0, [pc, #4]	; (800d8a8 <__malloc_lock+0x8>)
 800d8a2:	f7fe bd0b 	b.w	800c2bc <__retarget_lock_acquire_recursive>
 800d8a6:	bf00      	nop
 800d8a8:	20000b40 	.word	0x20000b40

0800d8ac <__malloc_unlock>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	; (800d8b4 <__malloc_unlock+0x8>)
 800d8ae:	f7fe bd06 	b.w	800c2be <__retarget_lock_release_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	20000b40 	.word	0x20000b40

0800d8b8 <_Balloc>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	69c6      	ldr	r6, [r0, #28]
 800d8bc:	4604      	mov	r4, r0
 800d8be:	460d      	mov	r5, r1
 800d8c0:	b976      	cbnz	r6, 800d8e0 <_Balloc+0x28>
 800d8c2:	2010      	movs	r0, #16
 800d8c4:	f7ff ff32 	bl	800d72c <malloc>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	61e0      	str	r0, [r4, #28]
 800d8cc:	b920      	cbnz	r0, 800d8d8 <_Balloc+0x20>
 800d8ce:	4b18      	ldr	r3, [pc, #96]	; (800d930 <_Balloc+0x78>)
 800d8d0:	4818      	ldr	r0, [pc, #96]	; (800d934 <_Balloc+0x7c>)
 800d8d2:	216b      	movs	r1, #107	; 0x6b
 800d8d4:	f000 feda 	bl	800e68c <__assert_func>
 800d8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8dc:	6006      	str	r6, [r0, #0]
 800d8de:	60c6      	str	r6, [r0, #12]
 800d8e0:	69e6      	ldr	r6, [r4, #28]
 800d8e2:	68f3      	ldr	r3, [r6, #12]
 800d8e4:	b183      	cbz	r3, 800d908 <_Balloc+0x50>
 800d8e6:	69e3      	ldr	r3, [r4, #28]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8ee:	b9b8      	cbnz	r0, 800d920 <_Balloc+0x68>
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d8f6:	1d72      	adds	r2, r6, #5
 800d8f8:	0092      	lsls	r2, r2, #2
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fee4 	bl	800e6c8 <_calloc_r>
 800d900:	b160      	cbz	r0, 800d91c <_Balloc+0x64>
 800d902:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d906:	e00e      	b.n	800d926 <_Balloc+0x6e>
 800d908:	2221      	movs	r2, #33	; 0x21
 800d90a:	2104      	movs	r1, #4
 800d90c:	4620      	mov	r0, r4
 800d90e:	f000 fedb 	bl	800e6c8 <_calloc_r>
 800d912:	69e3      	ldr	r3, [r4, #28]
 800d914:	60f0      	str	r0, [r6, #12]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1e4      	bne.n	800d8e6 <_Balloc+0x2e>
 800d91c:	2000      	movs	r0, #0
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	6802      	ldr	r2, [r0, #0]
 800d922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d926:	2300      	movs	r3, #0
 800d928:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d92c:	e7f7      	b.n	800d91e <_Balloc+0x66>
 800d92e:	bf00      	nop
 800d930:	0800ee29 	.word	0x0800ee29
 800d934:	0800ef09 	.word	0x0800ef09

0800d938 <_Bfree>:
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	69c6      	ldr	r6, [r0, #28]
 800d93c:	4605      	mov	r5, r0
 800d93e:	460c      	mov	r4, r1
 800d940:	b976      	cbnz	r6, 800d960 <_Bfree+0x28>
 800d942:	2010      	movs	r0, #16
 800d944:	f7ff fef2 	bl	800d72c <malloc>
 800d948:	4602      	mov	r2, r0
 800d94a:	61e8      	str	r0, [r5, #28]
 800d94c:	b920      	cbnz	r0, 800d958 <_Bfree+0x20>
 800d94e:	4b09      	ldr	r3, [pc, #36]	; (800d974 <_Bfree+0x3c>)
 800d950:	4809      	ldr	r0, [pc, #36]	; (800d978 <_Bfree+0x40>)
 800d952:	218f      	movs	r1, #143	; 0x8f
 800d954:	f000 fe9a 	bl	800e68c <__assert_func>
 800d958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d95c:	6006      	str	r6, [r0, #0]
 800d95e:	60c6      	str	r6, [r0, #12]
 800d960:	b13c      	cbz	r4, 800d972 <_Bfree+0x3a>
 800d962:	69eb      	ldr	r3, [r5, #28]
 800d964:	6862      	ldr	r2, [r4, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d96c:	6021      	str	r1, [r4, #0]
 800d96e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d972:	bd70      	pop	{r4, r5, r6, pc}
 800d974:	0800ee29 	.word	0x0800ee29
 800d978:	0800ef09 	.word	0x0800ef09

0800d97c <__multadd>:
 800d97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d980:	690d      	ldr	r5, [r1, #16]
 800d982:	4607      	mov	r7, r0
 800d984:	460c      	mov	r4, r1
 800d986:	461e      	mov	r6, r3
 800d988:	f101 0c14 	add.w	ip, r1, #20
 800d98c:	2000      	movs	r0, #0
 800d98e:	f8dc 3000 	ldr.w	r3, [ip]
 800d992:	b299      	uxth	r1, r3
 800d994:	fb02 6101 	mla	r1, r2, r1, r6
 800d998:	0c1e      	lsrs	r6, r3, #16
 800d99a:	0c0b      	lsrs	r3, r1, #16
 800d99c:	fb02 3306 	mla	r3, r2, r6, r3
 800d9a0:	b289      	uxth	r1, r1
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9a8:	4285      	cmp	r5, r0
 800d9aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d9ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9b2:	dcec      	bgt.n	800d98e <__multadd+0x12>
 800d9b4:	b30e      	cbz	r6, 800d9fa <__multadd+0x7e>
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	42ab      	cmp	r3, r5
 800d9ba:	dc19      	bgt.n	800d9f0 <__multadd+0x74>
 800d9bc:	6861      	ldr	r1, [r4, #4]
 800d9be:	4638      	mov	r0, r7
 800d9c0:	3101      	adds	r1, #1
 800d9c2:	f7ff ff79 	bl	800d8b8 <_Balloc>
 800d9c6:	4680      	mov	r8, r0
 800d9c8:	b928      	cbnz	r0, 800d9d6 <__multadd+0x5a>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <__multadd+0x84>)
 800d9ce:	480d      	ldr	r0, [pc, #52]	; (800da04 <__multadd+0x88>)
 800d9d0:	21ba      	movs	r1, #186	; 0xba
 800d9d2:	f000 fe5b 	bl	800e68c <__assert_func>
 800d9d6:	6922      	ldr	r2, [r4, #16]
 800d9d8:	3202      	adds	r2, #2
 800d9da:	f104 010c 	add.w	r1, r4, #12
 800d9de:	0092      	lsls	r2, r2, #2
 800d9e0:	300c      	adds	r0, #12
 800d9e2:	f7fe fc6d 	bl	800c2c0 <memcpy>
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ffa5 	bl	800d938 <_Bfree>
 800d9ee:	4644      	mov	r4, r8
 800d9f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9f4:	3501      	adds	r5, #1
 800d9f6:	615e      	str	r6, [r3, #20]
 800d9f8:	6125      	str	r5, [r4, #16]
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da00:	0800ee98 	.word	0x0800ee98
 800da04:	0800ef09 	.word	0x0800ef09

0800da08 <__s2b>:
 800da08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da0c:	460c      	mov	r4, r1
 800da0e:	4615      	mov	r5, r2
 800da10:	461f      	mov	r7, r3
 800da12:	2209      	movs	r2, #9
 800da14:	3308      	adds	r3, #8
 800da16:	4606      	mov	r6, r0
 800da18:	fb93 f3f2 	sdiv	r3, r3, r2
 800da1c:	2100      	movs	r1, #0
 800da1e:	2201      	movs	r2, #1
 800da20:	429a      	cmp	r2, r3
 800da22:	db09      	blt.n	800da38 <__s2b+0x30>
 800da24:	4630      	mov	r0, r6
 800da26:	f7ff ff47 	bl	800d8b8 <_Balloc>
 800da2a:	b940      	cbnz	r0, 800da3e <__s2b+0x36>
 800da2c:	4602      	mov	r2, r0
 800da2e:	4b19      	ldr	r3, [pc, #100]	; (800da94 <__s2b+0x8c>)
 800da30:	4819      	ldr	r0, [pc, #100]	; (800da98 <__s2b+0x90>)
 800da32:	21d3      	movs	r1, #211	; 0xd3
 800da34:	f000 fe2a 	bl	800e68c <__assert_func>
 800da38:	0052      	lsls	r2, r2, #1
 800da3a:	3101      	adds	r1, #1
 800da3c:	e7f0      	b.n	800da20 <__s2b+0x18>
 800da3e:	9b08      	ldr	r3, [sp, #32]
 800da40:	6143      	str	r3, [r0, #20]
 800da42:	2d09      	cmp	r5, #9
 800da44:	f04f 0301 	mov.w	r3, #1
 800da48:	6103      	str	r3, [r0, #16]
 800da4a:	dd16      	ble.n	800da7a <__s2b+0x72>
 800da4c:	f104 0909 	add.w	r9, r4, #9
 800da50:	46c8      	mov	r8, r9
 800da52:	442c      	add	r4, r5
 800da54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da58:	4601      	mov	r1, r0
 800da5a:	3b30      	subs	r3, #48	; 0x30
 800da5c:	220a      	movs	r2, #10
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff ff8c 	bl	800d97c <__multadd>
 800da64:	45a0      	cmp	r8, r4
 800da66:	d1f5      	bne.n	800da54 <__s2b+0x4c>
 800da68:	f1a5 0408 	sub.w	r4, r5, #8
 800da6c:	444c      	add	r4, r9
 800da6e:	1b2d      	subs	r5, r5, r4
 800da70:	1963      	adds	r3, r4, r5
 800da72:	42bb      	cmp	r3, r7
 800da74:	db04      	blt.n	800da80 <__s2b+0x78>
 800da76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7a:	340a      	adds	r4, #10
 800da7c:	2509      	movs	r5, #9
 800da7e:	e7f6      	b.n	800da6e <__s2b+0x66>
 800da80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da84:	4601      	mov	r1, r0
 800da86:	3b30      	subs	r3, #48	; 0x30
 800da88:	220a      	movs	r2, #10
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ff76 	bl	800d97c <__multadd>
 800da90:	e7ee      	b.n	800da70 <__s2b+0x68>
 800da92:	bf00      	nop
 800da94:	0800ee98 	.word	0x0800ee98
 800da98:	0800ef09 	.word	0x0800ef09

0800da9c <__hi0bits>:
 800da9c:	0c03      	lsrs	r3, r0, #16
 800da9e:	041b      	lsls	r3, r3, #16
 800daa0:	b9d3      	cbnz	r3, 800dad8 <__hi0bits+0x3c>
 800daa2:	0400      	lsls	r0, r0, #16
 800daa4:	2310      	movs	r3, #16
 800daa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daaa:	bf04      	itt	eq
 800daac:	0200      	lsleq	r0, r0, #8
 800daae:	3308      	addeq	r3, #8
 800dab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dab4:	bf04      	itt	eq
 800dab6:	0100      	lsleq	r0, r0, #4
 800dab8:	3304      	addeq	r3, #4
 800daba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dabe:	bf04      	itt	eq
 800dac0:	0080      	lsleq	r0, r0, #2
 800dac2:	3302      	addeq	r3, #2
 800dac4:	2800      	cmp	r0, #0
 800dac6:	db05      	blt.n	800dad4 <__hi0bits+0x38>
 800dac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dacc:	f103 0301 	add.w	r3, r3, #1
 800dad0:	bf08      	it	eq
 800dad2:	2320      	moveq	r3, #32
 800dad4:	4618      	mov	r0, r3
 800dad6:	4770      	bx	lr
 800dad8:	2300      	movs	r3, #0
 800dada:	e7e4      	b.n	800daa6 <__hi0bits+0xa>

0800dadc <__lo0bits>:
 800dadc:	6803      	ldr	r3, [r0, #0]
 800dade:	f013 0207 	ands.w	r2, r3, #7
 800dae2:	d00c      	beq.n	800dafe <__lo0bits+0x22>
 800dae4:	07d9      	lsls	r1, r3, #31
 800dae6:	d422      	bmi.n	800db2e <__lo0bits+0x52>
 800dae8:	079a      	lsls	r2, r3, #30
 800daea:	bf49      	itett	mi
 800daec:	085b      	lsrmi	r3, r3, #1
 800daee:	089b      	lsrpl	r3, r3, #2
 800daf0:	6003      	strmi	r3, [r0, #0]
 800daf2:	2201      	movmi	r2, #1
 800daf4:	bf5c      	itt	pl
 800daf6:	6003      	strpl	r3, [r0, #0]
 800daf8:	2202      	movpl	r2, #2
 800dafa:	4610      	mov	r0, r2
 800dafc:	4770      	bx	lr
 800dafe:	b299      	uxth	r1, r3
 800db00:	b909      	cbnz	r1, 800db06 <__lo0bits+0x2a>
 800db02:	0c1b      	lsrs	r3, r3, #16
 800db04:	2210      	movs	r2, #16
 800db06:	b2d9      	uxtb	r1, r3
 800db08:	b909      	cbnz	r1, 800db0e <__lo0bits+0x32>
 800db0a:	3208      	adds	r2, #8
 800db0c:	0a1b      	lsrs	r3, r3, #8
 800db0e:	0719      	lsls	r1, r3, #28
 800db10:	bf04      	itt	eq
 800db12:	091b      	lsreq	r3, r3, #4
 800db14:	3204      	addeq	r2, #4
 800db16:	0799      	lsls	r1, r3, #30
 800db18:	bf04      	itt	eq
 800db1a:	089b      	lsreq	r3, r3, #2
 800db1c:	3202      	addeq	r2, #2
 800db1e:	07d9      	lsls	r1, r3, #31
 800db20:	d403      	bmi.n	800db2a <__lo0bits+0x4e>
 800db22:	085b      	lsrs	r3, r3, #1
 800db24:	f102 0201 	add.w	r2, r2, #1
 800db28:	d003      	beq.n	800db32 <__lo0bits+0x56>
 800db2a:	6003      	str	r3, [r0, #0]
 800db2c:	e7e5      	b.n	800dafa <__lo0bits+0x1e>
 800db2e:	2200      	movs	r2, #0
 800db30:	e7e3      	b.n	800dafa <__lo0bits+0x1e>
 800db32:	2220      	movs	r2, #32
 800db34:	e7e1      	b.n	800dafa <__lo0bits+0x1e>
	...

0800db38 <__i2b>:
 800db38:	b510      	push	{r4, lr}
 800db3a:	460c      	mov	r4, r1
 800db3c:	2101      	movs	r1, #1
 800db3e:	f7ff febb 	bl	800d8b8 <_Balloc>
 800db42:	4602      	mov	r2, r0
 800db44:	b928      	cbnz	r0, 800db52 <__i2b+0x1a>
 800db46:	4b05      	ldr	r3, [pc, #20]	; (800db5c <__i2b+0x24>)
 800db48:	4805      	ldr	r0, [pc, #20]	; (800db60 <__i2b+0x28>)
 800db4a:	f240 1145 	movw	r1, #325	; 0x145
 800db4e:	f000 fd9d 	bl	800e68c <__assert_func>
 800db52:	2301      	movs	r3, #1
 800db54:	6144      	str	r4, [r0, #20]
 800db56:	6103      	str	r3, [r0, #16]
 800db58:	bd10      	pop	{r4, pc}
 800db5a:	bf00      	nop
 800db5c:	0800ee98 	.word	0x0800ee98
 800db60:	0800ef09 	.word	0x0800ef09

0800db64 <__multiply>:
 800db64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db68:	4691      	mov	r9, r2
 800db6a:	690a      	ldr	r2, [r1, #16]
 800db6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db70:	429a      	cmp	r2, r3
 800db72:	bfb8      	it	lt
 800db74:	460b      	movlt	r3, r1
 800db76:	460c      	mov	r4, r1
 800db78:	bfbc      	itt	lt
 800db7a:	464c      	movlt	r4, r9
 800db7c:	4699      	movlt	r9, r3
 800db7e:	6927      	ldr	r7, [r4, #16]
 800db80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db84:	68a3      	ldr	r3, [r4, #8]
 800db86:	6861      	ldr	r1, [r4, #4]
 800db88:	eb07 060a 	add.w	r6, r7, sl
 800db8c:	42b3      	cmp	r3, r6
 800db8e:	b085      	sub	sp, #20
 800db90:	bfb8      	it	lt
 800db92:	3101      	addlt	r1, #1
 800db94:	f7ff fe90 	bl	800d8b8 <_Balloc>
 800db98:	b930      	cbnz	r0, 800dba8 <__multiply+0x44>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4b44      	ldr	r3, [pc, #272]	; (800dcb0 <__multiply+0x14c>)
 800db9e:	4845      	ldr	r0, [pc, #276]	; (800dcb4 <__multiply+0x150>)
 800dba0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dba4:	f000 fd72 	bl	800e68c <__assert_func>
 800dba8:	f100 0514 	add.w	r5, r0, #20
 800dbac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbb0:	462b      	mov	r3, r5
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4543      	cmp	r3, r8
 800dbb6:	d321      	bcc.n	800dbfc <__multiply+0x98>
 800dbb8:	f104 0314 	add.w	r3, r4, #20
 800dbbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbc0:	f109 0314 	add.w	r3, r9, #20
 800dbc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbc8:	9202      	str	r2, [sp, #8]
 800dbca:	1b3a      	subs	r2, r7, r4
 800dbcc:	3a15      	subs	r2, #21
 800dbce:	f022 0203 	bic.w	r2, r2, #3
 800dbd2:	3204      	adds	r2, #4
 800dbd4:	f104 0115 	add.w	r1, r4, #21
 800dbd8:	428f      	cmp	r7, r1
 800dbda:	bf38      	it	cc
 800dbdc:	2204      	movcc	r2, #4
 800dbde:	9201      	str	r2, [sp, #4]
 800dbe0:	9a02      	ldr	r2, [sp, #8]
 800dbe2:	9303      	str	r3, [sp, #12]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d80c      	bhi.n	800dc02 <__multiply+0x9e>
 800dbe8:	2e00      	cmp	r6, #0
 800dbea:	dd03      	ble.n	800dbf4 <__multiply+0x90>
 800dbec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d05b      	beq.n	800dcac <__multiply+0x148>
 800dbf4:	6106      	str	r6, [r0, #16]
 800dbf6:	b005      	add	sp, #20
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	f843 2b04 	str.w	r2, [r3], #4
 800dc00:	e7d8      	b.n	800dbb4 <__multiply+0x50>
 800dc02:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc06:	f1ba 0f00 	cmp.w	sl, #0
 800dc0a:	d024      	beq.n	800dc56 <__multiply+0xf2>
 800dc0c:	f104 0e14 	add.w	lr, r4, #20
 800dc10:	46a9      	mov	r9, r5
 800dc12:	f04f 0c00 	mov.w	ip, #0
 800dc16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc1a:	f8d9 1000 	ldr.w	r1, [r9]
 800dc1e:	fa1f fb82 	uxth.w	fp, r2
 800dc22:	b289      	uxth	r1, r1
 800dc24:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc2c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc30:	4461      	add	r1, ip
 800dc32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc36:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc3e:	b289      	uxth	r1, r1
 800dc40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc44:	4577      	cmp	r7, lr
 800dc46:	f849 1b04 	str.w	r1, [r9], #4
 800dc4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc4e:	d8e2      	bhi.n	800dc16 <__multiply+0xb2>
 800dc50:	9a01      	ldr	r2, [sp, #4]
 800dc52:	f845 c002 	str.w	ip, [r5, r2]
 800dc56:	9a03      	ldr	r2, [sp, #12]
 800dc58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	f1b9 0f00 	cmp.w	r9, #0
 800dc62:	d021      	beq.n	800dca8 <__multiply+0x144>
 800dc64:	6829      	ldr	r1, [r5, #0]
 800dc66:	f104 0c14 	add.w	ip, r4, #20
 800dc6a:	46ae      	mov	lr, r5
 800dc6c:	f04f 0a00 	mov.w	sl, #0
 800dc70:	f8bc b000 	ldrh.w	fp, [ip]
 800dc74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc78:	fb09 220b 	mla	r2, r9, fp, r2
 800dc7c:	4452      	add	r2, sl
 800dc7e:	b289      	uxth	r1, r1
 800dc80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc84:	f84e 1b04 	str.w	r1, [lr], #4
 800dc88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc90:	f8be 1000 	ldrh.w	r1, [lr]
 800dc94:	fb09 110a 	mla	r1, r9, sl, r1
 800dc98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc9c:	4567      	cmp	r7, ip
 800dc9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dca2:	d8e5      	bhi.n	800dc70 <__multiply+0x10c>
 800dca4:	9a01      	ldr	r2, [sp, #4]
 800dca6:	50a9      	str	r1, [r5, r2]
 800dca8:	3504      	adds	r5, #4
 800dcaa:	e799      	b.n	800dbe0 <__multiply+0x7c>
 800dcac:	3e01      	subs	r6, #1
 800dcae:	e79b      	b.n	800dbe8 <__multiply+0x84>
 800dcb0:	0800ee98 	.word	0x0800ee98
 800dcb4:	0800ef09 	.word	0x0800ef09

0800dcb8 <__pow5mult>:
 800dcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcbc:	4615      	mov	r5, r2
 800dcbe:	f012 0203 	ands.w	r2, r2, #3
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460f      	mov	r7, r1
 800dcc6:	d007      	beq.n	800dcd8 <__pow5mult+0x20>
 800dcc8:	4c25      	ldr	r4, [pc, #148]	; (800dd60 <__pow5mult+0xa8>)
 800dcca:	3a01      	subs	r2, #1
 800dccc:	2300      	movs	r3, #0
 800dcce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcd2:	f7ff fe53 	bl	800d97c <__multadd>
 800dcd6:	4607      	mov	r7, r0
 800dcd8:	10ad      	asrs	r5, r5, #2
 800dcda:	d03d      	beq.n	800dd58 <__pow5mult+0xa0>
 800dcdc:	69f4      	ldr	r4, [r6, #28]
 800dcde:	b97c      	cbnz	r4, 800dd00 <__pow5mult+0x48>
 800dce0:	2010      	movs	r0, #16
 800dce2:	f7ff fd23 	bl	800d72c <malloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	61f0      	str	r0, [r6, #28]
 800dcea:	b928      	cbnz	r0, 800dcf8 <__pow5mult+0x40>
 800dcec:	4b1d      	ldr	r3, [pc, #116]	; (800dd64 <__pow5mult+0xac>)
 800dcee:	481e      	ldr	r0, [pc, #120]	; (800dd68 <__pow5mult+0xb0>)
 800dcf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dcf4:	f000 fcca 	bl	800e68c <__assert_func>
 800dcf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcfc:	6004      	str	r4, [r0, #0]
 800dcfe:	60c4      	str	r4, [r0, #12]
 800dd00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd08:	b94c      	cbnz	r4, 800dd1e <__pow5mult+0x66>
 800dd0a:	f240 2171 	movw	r1, #625	; 0x271
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f7ff ff12 	bl	800db38 <__i2b>
 800dd14:	2300      	movs	r3, #0
 800dd16:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	6003      	str	r3, [r0, #0]
 800dd1e:	f04f 0900 	mov.w	r9, #0
 800dd22:	07eb      	lsls	r3, r5, #31
 800dd24:	d50a      	bpl.n	800dd3c <__pow5mult+0x84>
 800dd26:	4639      	mov	r1, r7
 800dd28:	4622      	mov	r2, r4
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f7ff ff1a 	bl	800db64 <__multiply>
 800dd30:	4639      	mov	r1, r7
 800dd32:	4680      	mov	r8, r0
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7ff fdff 	bl	800d938 <_Bfree>
 800dd3a:	4647      	mov	r7, r8
 800dd3c:	106d      	asrs	r5, r5, #1
 800dd3e:	d00b      	beq.n	800dd58 <__pow5mult+0xa0>
 800dd40:	6820      	ldr	r0, [r4, #0]
 800dd42:	b938      	cbnz	r0, 800dd54 <__pow5mult+0x9c>
 800dd44:	4622      	mov	r2, r4
 800dd46:	4621      	mov	r1, r4
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f7ff ff0b 	bl	800db64 <__multiply>
 800dd4e:	6020      	str	r0, [r4, #0]
 800dd50:	f8c0 9000 	str.w	r9, [r0]
 800dd54:	4604      	mov	r4, r0
 800dd56:	e7e4      	b.n	800dd22 <__pow5mult+0x6a>
 800dd58:	4638      	mov	r0, r7
 800dd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd5e:	bf00      	nop
 800dd60:	0800f058 	.word	0x0800f058
 800dd64:	0800ee29 	.word	0x0800ee29
 800dd68:	0800ef09 	.word	0x0800ef09

0800dd6c <__lshift>:
 800dd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd70:	460c      	mov	r4, r1
 800dd72:	6849      	ldr	r1, [r1, #4]
 800dd74:	6923      	ldr	r3, [r4, #16]
 800dd76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	4691      	mov	r9, r2
 800dd80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd84:	f108 0601 	add.w	r6, r8, #1
 800dd88:	42b3      	cmp	r3, r6
 800dd8a:	db0b      	blt.n	800dda4 <__lshift+0x38>
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff fd93 	bl	800d8b8 <_Balloc>
 800dd92:	4605      	mov	r5, r0
 800dd94:	b948      	cbnz	r0, 800ddaa <__lshift+0x3e>
 800dd96:	4602      	mov	r2, r0
 800dd98:	4b28      	ldr	r3, [pc, #160]	; (800de3c <__lshift+0xd0>)
 800dd9a:	4829      	ldr	r0, [pc, #164]	; (800de40 <__lshift+0xd4>)
 800dd9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dda0:	f000 fc74 	bl	800e68c <__assert_func>
 800dda4:	3101      	adds	r1, #1
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	e7ee      	b.n	800dd88 <__lshift+0x1c>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f100 0114 	add.w	r1, r0, #20
 800ddb0:	f100 0210 	add.w	r2, r0, #16
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	4553      	cmp	r3, sl
 800ddb8:	db33      	blt.n	800de22 <__lshift+0xb6>
 800ddba:	6920      	ldr	r0, [r4, #16]
 800ddbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddc0:	f104 0314 	add.w	r3, r4, #20
 800ddc4:	f019 091f 	ands.w	r9, r9, #31
 800ddc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddd0:	d02b      	beq.n	800de2a <__lshift+0xbe>
 800ddd2:	f1c9 0e20 	rsb	lr, r9, #32
 800ddd6:	468a      	mov	sl, r1
 800ddd8:	2200      	movs	r2, #0
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	fa00 f009 	lsl.w	r0, r0, r9
 800dde0:	4310      	orrs	r0, r2
 800dde2:	f84a 0b04 	str.w	r0, [sl], #4
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	459c      	cmp	ip, r3
 800ddec:	fa22 f20e 	lsr.w	r2, r2, lr
 800ddf0:	d8f3      	bhi.n	800ddda <__lshift+0x6e>
 800ddf2:	ebac 0304 	sub.w	r3, ip, r4
 800ddf6:	3b15      	subs	r3, #21
 800ddf8:	f023 0303 	bic.w	r3, r3, #3
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	f104 0015 	add.w	r0, r4, #21
 800de02:	4584      	cmp	ip, r0
 800de04:	bf38      	it	cc
 800de06:	2304      	movcc	r3, #4
 800de08:	50ca      	str	r2, [r1, r3]
 800de0a:	b10a      	cbz	r2, 800de10 <__lshift+0xa4>
 800de0c:	f108 0602 	add.w	r6, r8, #2
 800de10:	3e01      	subs	r6, #1
 800de12:	4638      	mov	r0, r7
 800de14:	612e      	str	r6, [r5, #16]
 800de16:	4621      	mov	r1, r4
 800de18:	f7ff fd8e 	bl	800d938 <_Bfree>
 800de1c:	4628      	mov	r0, r5
 800de1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de22:	f842 0f04 	str.w	r0, [r2, #4]!
 800de26:	3301      	adds	r3, #1
 800de28:	e7c5      	b.n	800ddb6 <__lshift+0x4a>
 800de2a:	3904      	subs	r1, #4
 800de2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800de30:	f841 2f04 	str.w	r2, [r1, #4]!
 800de34:	459c      	cmp	ip, r3
 800de36:	d8f9      	bhi.n	800de2c <__lshift+0xc0>
 800de38:	e7ea      	b.n	800de10 <__lshift+0xa4>
 800de3a:	bf00      	nop
 800de3c:	0800ee98 	.word	0x0800ee98
 800de40:	0800ef09 	.word	0x0800ef09

0800de44 <__mcmp>:
 800de44:	b530      	push	{r4, r5, lr}
 800de46:	6902      	ldr	r2, [r0, #16]
 800de48:	690c      	ldr	r4, [r1, #16]
 800de4a:	1b12      	subs	r2, r2, r4
 800de4c:	d10e      	bne.n	800de6c <__mcmp+0x28>
 800de4e:	f100 0314 	add.w	r3, r0, #20
 800de52:	3114      	adds	r1, #20
 800de54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de64:	42a5      	cmp	r5, r4
 800de66:	d003      	beq.n	800de70 <__mcmp+0x2c>
 800de68:	d305      	bcc.n	800de76 <__mcmp+0x32>
 800de6a:	2201      	movs	r2, #1
 800de6c:	4610      	mov	r0, r2
 800de6e:	bd30      	pop	{r4, r5, pc}
 800de70:	4283      	cmp	r3, r0
 800de72:	d3f3      	bcc.n	800de5c <__mcmp+0x18>
 800de74:	e7fa      	b.n	800de6c <__mcmp+0x28>
 800de76:	f04f 32ff 	mov.w	r2, #4294967295
 800de7a:	e7f7      	b.n	800de6c <__mcmp+0x28>

0800de7c <__mdiff>:
 800de7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	460c      	mov	r4, r1
 800de82:	4606      	mov	r6, r0
 800de84:	4611      	mov	r1, r2
 800de86:	4620      	mov	r0, r4
 800de88:	4690      	mov	r8, r2
 800de8a:	f7ff ffdb 	bl	800de44 <__mcmp>
 800de8e:	1e05      	subs	r5, r0, #0
 800de90:	d110      	bne.n	800deb4 <__mdiff+0x38>
 800de92:	4629      	mov	r1, r5
 800de94:	4630      	mov	r0, r6
 800de96:	f7ff fd0f 	bl	800d8b8 <_Balloc>
 800de9a:	b930      	cbnz	r0, 800deaa <__mdiff+0x2e>
 800de9c:	4b3a      	ldr	r3, [pc, #232]	; (800df88 <__mdiff+0x10c>)
 800de9e:	4602      	mov	r2, r0
 800dea0:	f240 2137 	movw	r1, #567	; 0x237
 800dea4:	4839      	ldr	r0, [pc, #228]	; (800df8c <__mdiff+0x110>)
 800dea6:	f000 fbf1 	bl	800e68c <__assert_func>
 800deaa:	2301      	movs	r3, #1
 800deac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800deb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb4:	bfa4      	itt	ge
 800deb6:	4643      	movge	r3, r8
 800deb8:	46a0      	movge	r8, r4
 800deba:	4630      	mov	r0, r6
 800debc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dec0:	bfa6      	itte	ge
 800dec2:	461c      	movge	r4, r3
 800dec4:	2500      	movge	r5, #0
 800dec6:	2501      	movlt	r5, #1
 800dec8:	f7ff fcf6 	bl	800d8b8 <_Balloc>
 800decc:	b920      	cbnz	r0, 800ded8 <__mdiff+0x5c>
 800dece:	4b2e      	ldr	r3, [pc, #184]	; (800df88 <__mdiff+0x10c>)
 800ded0:	4602      	mov	r2, r0
 800ded2:	f240 2145 	movw	r1, #581	; 0x245
 800ded6:	e7e5      	b.n	800dea4 <__mdiff+0x28>
 800ded8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dedc:	6926      	ldr	r6, [r4, #16]
 800dede:	60c5      	str	r5, [r0, #12]
 800dee0:	f104 0914 	add.w	r9, r4, #20
 800dee4:	f108 0514 	add.w	r5, r8, #20
 800dee8:	f100 0e14 	add.w	lr, r0, #20
 800deec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800def0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800def4:	f108 0210 	add.w	r2, r8, #16
 800def8:	46f2      	mov	sl, lr
 800defa:	2100      	movs	r1, #0
 800defc:	f859 3b04 	ldr.w	r3, [r9], #4
 800df00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df04:	fa11 f88b 	uxtah	r8, r1, fp
 800df08:	b299      	uxth	r1, r3
 800df0a:	0c1b      	lsrs	r3, r3, #16
 800df0c:	eba8 0801 	sub.w	r8, r8, r1
 800df10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df18:	fa1f f888 	uxth.w	r8, r8
 800df1c:	1419      	asrs	r1, r3, #16
 800df1e:	454e      	cmp	r6, r9
 800df20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df24:	f84a 3b04 	str.w	r3, [sl], #4
 800df28:	d8e8      	bhi.n	800defc <__mdiff+0x80>
 800df2a:	1b33      	subs	r3, r6, r4
 800df2c:	3b15      	subs	r3, #21
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	3304      	adds	r3, #4
 800df34:	3415      	adds	r4, #21
 800df36:	42a6      	cmp	r6, r4
 800df38:	bf38      	it	cc
 800df3a:	2304      	movcc	r3, #4
 800df3c:	441d      	add	r5, r3
 800df3e:	4473      	add	r3, lr
 800df40:	469e      	mov	lr, r3
 800df42:	462e      	mov	r6, r5
 800df44:	4566      	cmp	r6, ip
 800df46:	d30e      	bcc.n	800df66 <__mdiff+0xea>
 800df48:	f10c 0203 	add.w	r2, ip, #3
 800df4c:	1b52      	subs	r2, r2, r5
 800df4e:	f022 0203 	bic.w	r2, r2, #3
 800df52:	3d03      	subs	r5, #3
 800df54:	45ac      	cmp	ip, r5
 800df56:	bf38      	it	cc
 800df58:	2200      	movcc	r2, #0
 800df5a:	4413      	add	r3, r2
 800df5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df60:	b17a      	cbz	r2, 800df82 <__mdiff+0x106>
 800df62:	6107      	str	r7, [r0, #16]
 800df64:	e7a4      	b.n	800deb0 <__mdiff+0x34>
 800df66:	f856 8b04 	ldr.w	r8, [r6], #4
 800df6a:	fa11 f288 	uxtah	r2, r1, r8
 800df6e:	1414      	asrs	r4, r2, #16
 800df70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df74:	b292      	uxth	r2, r2
 800df76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df7a:	f84e 2b04 	str.w	r2, [lr], #4
 800df7e:	1421      	asrs	r1, r4, #16
 800df80:	e7e0      	b.n	800df44 <__mdiff+0xc8>
 800df82:	3f01      	subs	r7, #1
 800df84:	e7ea      	b.n	800df5c <__mdiff+0xe0>
 800df86:	bf00      	nop
 800df88:	0800ee98 	.word	0x0800ee98
 800df8c:	0800ef09 	.word	0x0800ef09

0800df90 <__ulp>:
 800df90:	b082      	sub	sp, #8
 800df92:	ed8d 0b00 	vstr	d0, [sp]
 800df96:	9a01      	ldr	r2, [sp, #4]
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <__ulp+0x48>)
 800df9a:	4013      	ands	r3, r2
 800df9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	dc08      	bgt.n	800dfb6 <__ulp+0x26>
 800dfa4:	425b      	negs	r3, r3
 800dfa6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dfaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfae:	da04      	bge.n	800dfba <__ulp+0x2a>
 800dfb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfb4:	4113      	asrs	r3, r2
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	e008      	b.n	800dfcc <__ulp+0x3c>
 800dfba:	f1a2 0314 	sub.w	r3, r2, #20
 800dfbe:	2b1e      	cmp	r3, #30
 800dfc0:	bfda      	itte	le
 800dfc2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dfc6:	40da      	lsrle	r2, r3
 800dfc8:	2201      	movgt	r2, #1
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4610      	mov	r0, r2
 800dfd0:	ec41 0b10 	vmov	d0, r0, r1
 800dfd4:	b002      	add	sp, #8
 800dfd6:	4770      	bx	lr
 800dfd8:	7ff00000 	.word	0x7ff00000

0800dfdc <__b2d>:
 800dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe0:	6906      	ldr	r6, [r0, #16]
 800dfe2:	f100 0814 	add.w	r8, r0, #20
 800dfe6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dfea:	1f37      	subs	r7, r6, #4
 800dfec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dff0:	4610      	mov	r0, r2
 800dff2:	f7ff fd53 	bl	800da9c <__hi0bits>
 800dff6:	f1c0 0320 	rsb	r3, r0, #32
 800dffa:	280a      	cmp	r0, #10
 800dffc:	600b      	str	r3, [r1, #0]
 800dffe:	491b      	ldr	r1, [pc, #108]	; (800e06c <__b2d+0x90>)
 800e000:	dc15      	bgt.n	800e02e <__b2d+0x52>
 800e002:	f1c0 0c0b 	rsb	ip, r0, #11
 800e006:	fa22 f30c 	lsr.w	r3, r2, ip
 800e00a:	45b8      	cmp	r8, r7
 800e00c:	ea43 0501 	orr.w	r5, r3, r1
 800e010:	bf34      	ite	cc
 800e012:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e016:	2300      	movcs	r3, #0
 800e018:	3015      	adds	r0, #21
 800e01a:	fa02 f000 	lsl.w	r0, r2, r0
 800e01e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e022:	4303      	orrs	r3, r0
 800e024:	461c      	mov	r4, r3
 800e026:	ec45 4b10 	vmov	d0, r4, r5
 800e02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e02e:	45b8      	cmp	r8, r7
 800e030:	bf3a      	itte	cc
 800e032:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e036:	f1a6 0708 	subcc.w	r7, r6, #8
 800e03a:	2300      	movcs	r3, #0
 800e03c:	380b      	subs	r0, #11
 800e03e:	d012      	beq.n	800e066 <__b2d+0x8a>
 800e040:	f1c0 0120 	rsb	r1, r0, #32
 800e044:	fa23 f401 	lsr.w	r4, r3, r1
 800e048:	4082      	lsls	r2, r0
 800e04a:	4322      	orrs	r2, r4
 800e04c:	4547      	cmp	r7, r8
 800e04e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e052:	bf8c      	ite	hi
 800e054:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e058:	2200      	movls	r2, #0
 800e05a:	4083      	lsls	r3, r0
 800e05c:	40ca      	lsrs	r2, r1
 800e05e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e062:	4313      	orrs	r3, r2
 800e064:	e7de      	b.n	800e024 <__b2d+0x48>
 800e066:	ea42 0501 	orr.w	r5, r2, r1
 800e06a:	e7db      	b.n	800e024 <__b2d+0x48>
 800e06c:	3ff00000 	.word	0x3ff00000

0800e070 <__d2b>:
 800e070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e074:	460f      	mov	r7, r1
 800e076:	2101      	movs	r1, #1
 800e078:	ec59 8b10 	vmov	r8, r9, d0
 800e07c:	4616      	mov	r6, r2
 800e07e:	f7ff fc1b 	bl	800d8b8 <_Balloc>
 800e082:	4604      	mov	r4, r0
 800e084:	b930      	cbnz	r0, 800e094 <__d2b+0x24>
 800e086:	4602      	mov	r2, r0
 800e088:	4b24      	ldr	r3, [pc, #144]	; (800e11c <__d2b+0xac>)
 800e08a:	4825      	ldr	r0, [pc, #148]	; (800e120 <__d2b+0xb0>)
 800e08c:	f240 310f 	movw	r1, #783	; 0x30f
 800e090:	f000 fafc 	bl	800e68c <__assert_func>
 800e094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e09c:	bb2d      	cbnz	r5, 800e0ea <__d2b+0x7a>
 800e09e:	9301      	str	r3, [sp, #4]
 800e0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0a4:	d026      	beq.n	800e0f4 <__d2b+0x84>
 800e0a6:	4668      	mov	r0, sp
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	f7ff fd17 	bl	800dadc <__lo0bits>
 800e0ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0b2:	b1e8      	cbz	r0, 800e0f0 <__d2b+0x80>
 800e0b4:	f1c0 0320 	rsb	r3, r0, #32
 800e0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0bc:	430b      	orrs	r3, r1
 800e0be:	40c2      	lsrs	r2, r0
 800e0c0:	6163      	str	r3, [r4, #20]
 800e0c2:	9201      	str	r2, [sp, #4]
 800e0c4:	9b01      	ldr	r3, [sp, #4]
 800e0c6:	61a3      	str	r3, [r4, #24]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	bf14      	ite	ne
 800e0cc:	2202      	movne	r2, #2
 800e0ce:	2201      	moveq	r2, #1
 800e0d0:	6122      	str	r2, [r4, #16]
 800e0d2:	b1bd      	cbz	r5, 800e104 <__d2b+0x94>
 800e0d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0d8:	4405      	add	r5, r0
 800e0da:	603d      	str	r5, [r7, #0]
 800e0dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0e0:	6030      	str	r0, [r6, #0]
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	b003      	add	sp, #12
 800e0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0ee:	e7d6      	b.n	800e09e <__d2b+0x2e>
 800e0f0:	6161      	str	r1, [r4, #20]
 800e0f2:	e7e7      	b.n	800e0c4 <__d2b+0x54>
 800e0f4:	a801      	add	r0, sp, #4
 800e0f6:	f7ff fcf1 	bl	800dadc <__lo0bits>
 800e0fa:	9b01      	ldr	r3, [sp, #4]
 800e0fc:	6163      	str	r3, [r4, #20]
 800e0fe:	3020      	adds	r0, #32
 800e100:	2201      	movs	r2, #1
 800e102:	e7e5      	b.n	800e0d0 <__d2b+0x60>
 800e104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e10c:	6038      	str	r0, [r7, #0]
 800e10e:	6918      	ldr	r0, [r3, #16]
 800e110:	f7ff fcc4 	bl	800da9c <__hi0bits>
 800e114:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e118:	e7e2      	b.n	800e0e0 <__d2b+0x70>
 800e11a:	bf00      	nop
 800e11c:	0800ee98 	.word	0x0800ee98
 800e120:	0800ef09 	.word	0x0800ef09

0800e124 <__ratio>:
 800e124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	4688      	mov	r8, r1
 800e12a:	4669      	mov	r1, sp
 800e12c:	4681      	mov	r9, r0
 800e12e:	f7ff ff55 	bl	800dfdc <__b2d>
 800e132:	a901      	add	r1, sp, #4
 800e134:	4640      	mov	r0, r8
 800e136:	ec55 4b10 	vmov	r4, r5, d0
 800e13a:	f7ff ff4f 	bl	800dfdc <__b2d>
 800e13e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e142:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e146:	eba3 0c02 	sub.w	ip, r3, r2
 800e14a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e14e:	1a9b      	subs	r3, r3, r2
 800e150:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e154:	ec51 0b10 	vmov	r0, r1, d0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfd6      	itet	le
 800e15c:	460a      	movle	r2, r1
 800e15e:	462a      	movgt	r2, r5
 800e160:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e164:	468b      	mov	fp, r1
 800e166:	462f      	mov	r7, r5
 800e168:	bfd4      	ite	le
 800e16a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e16e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e172:	4620      	mov	r0, r4
 800e174:	ee10 2a10 	vmov	r2, s0
 800e178:	465b      	mov	r3, fp
 800e17a:	4639      	mov	r1, r7
 800e17c:	f7f2 fb66 	bl	800084c <__aeabi_ddiv>
 800e180:	ec41 0b10 	vmov	d0, r0, r1
 800e184:	b003      	add	sp, #12
 800e186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e18a <__copybits>:
 800e18a:	3901      	subs	r1, #1
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	1149      	asrs	r1, r1, #5
 800e190:	6914      	ldr	r4, [r2, #16]
 800e192:	3101      	adds	r1, #1
 800e194:	f102 0314 	add.w	r3, r2, #20
 800e198:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e19c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1a0:	1f05      	subs	r5, r0, #4
 800e1a2:	42a3      	cmp	r3, r4
 800e1a4:	d30c      	bcc.n	800e1c0 <__copybits+0x36>
 800e1a6:	1aa3      	subs	r3, r4, r2
 800e1a8:	3b11      	subs	r3, #17
 800e1aa:	f023 0303 	bic.w	r3, r3, #3
 800e1ae:	3211      	adds	r2, #17
 800e1b0:	42a2      	cmp	r2, r4
 800e1b2:	bf88      	it	hi
 800e1b4:	2300      	movhi	r3, #0
 800e1b6:	4418      	add	r0, r3
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	4288      	cmp	r0, r1
 800e1bc:	d305      	bcc.n	800e1ca <__copybits+0x40>
 800e1be:	bd70      	pop	{r4, r5, r6, pc}
 800e1c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1c8:	e7eb      	b.n	800e1a2 <__copybits+0x18>
 800e1ca:	f840 3b04 	str.w	r3, [r0], #4
 800e1ce:	e7f4      	b.n	800e1ba <__copybits+0x30>

0800e1d0 <__any_on>:
 800e1d0:	f100 0214 	add.w	r2, r0, #20
 800e1d4:	6900      	ldr	r0, [r0, #16]
 800e1d6:	114b      	asrs	r3, r1, #5
 800e1d8:	4298      	cmp	r0, r3
 800e1da:	b510      	push	{r4, lr}
 800e1dc:	db11      	blt.n	800e202 <__any_on+0x32>
 800e1de:	dd0a      	ble.n	800e1f6 <__any_on+0x26>
 800e1e0:	f011 011f 	ands.w	r1, r1, #31
 800e1e4:	d007      	beq.n	800e1f6 <__any_on+0x26>
 800e1e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1ea:	fa24 f001 	lsr.w	r0, r4, r1
 800e1ee:	fa00 f101 	lsl.w	r1, r0, r1
 800e1f2:	428c      	cmp	r4, r1
 800e1f4:	d10b      	bne.n	800e20e <__any_on+0x3e>
 800e1f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d803      	bhi.n	800e206 <__any_on+0x36>
 800e1fe:	2000      	movs	r0, #0
 800e200:	bd10      	pop	{r4, pc}
 800e202:	4603      	mov	r3, r0
 800e204:	e7f7      	b.n	800e1f6 <__any_on+0x26>
 800e206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e20a:	2900      	cmp	r1, #0
 800e20c:	d0f5      	beq.n	800e1fa <__any_on+0x2a>
 800e20e:	2001      	movs	r0, #1
 800e210:	e7f6      	b.n	800e200 <__any_on+0x30>

0800e212 <__ascii_wctomb>:
 800e212:	b149      	cbz	r1, 800e228 <__ascii_wctomb+0x16>
 800e214:	2aff      	cmp	r2, #255	; 0xff
 800e216:	bf85      	ittet	hi
 800e218:	238a      	movhi	r3, #138	; 0x8a
 800e21a:	6003      	strhi	r3, [r0, #0]
 800e21c:	700a      	strbls	r2, [r1, #0]
 800e21e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e222:	bf98      	it	ls
 800e224:	2001      	movls	r0, #1
 800e226:	4770      	bx	lr
 800e228:	4608      	mov	r0, r1
 800e22a:	4770      	bx	lr

0800e22c <__ssputs_r>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	688e      	ldr	r6, [r1, #8]
 800e232:	461f      	mov	r7, r3
 800e234:	42be      	cmp	r6, r7
 800e236:	680b      	ldr	r3, [r1, #0]
 800e238:	4682      	mov	sl, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	4690      	mov	r8, r2
 800e23e:	d82c      	bhi.n	800e29a <__ssputs_r+0x6e>
 800e240:	898a      	ldrh	r2, [r1, #12]
 800e242:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e246:	d026      	beq.n	800e296 <__ssputs_r+0x6a>
 800e248:	6965      	ldr	r5, [r4, #20]
 800e24a:	6909      	ldr	r1, [r1, #16]
 800e24c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e250:	eba3 0901 	sub.w	r9, r3, r1
 800e254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e258:	1c7b      	adds	r3, r7, #1
 800e25a:	444b      	add	r3, r9
 800e25c:	106d      	asrs	r5, r5, #1
 800e25e:	429d      	cmp	r5, r3
 800e260:	bf38      	it	cc
 800e262:	461d      	movcc	r5, r3
 800e264:	0553      	lsls	r3, r2, #21
 800e266:	d527      	bpl.n	800e2b8 <__ssputs_r+0x8c>
 800e268:	4629      	mov	r1, r5
 800e26a:	f7ff fa87 	bl	800d77c <_malloc_r>
 800e26e:	4606      	mov	r6, r0
 800e270:	b360      	cbz	r0, 800e2cc <__ssputs_r+0xa0>
 800e272:	6921      	ldr	r1, [r4, #16]
 800e274:	464a      	mov	r2, r9
 800e276:	f7fe f823 	bl	800c2c0 <memcpy>
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e284:	81a3      	strh	r3, [r4, #12]
 800e286:	6126      	str	r6, [r4, #16]
 800e288:	6165      	str	r5, [r4, #20]
 800e28a:	444e      	add	r6, r9
 800e28c:	eba5 0509 	sub.w	r5, r5, r9
 800e290:	6026      	str	r6, [r4, #0]
 800e292:	60a5      	str	r5, [r4, #8]
 800e294:	463e      	mov	r6, r7
 800e296:	42be      	cmp	r6, r7
 800e298:	d900      	bls.n	800e29c <__ssputs_r+0x70>
 800e29a:	463e      	mov	r6, r7
 800e29c:	6820      	ldr	r0, [r4, #0]
 800e29e:	4632      	mov	r2, r6
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	f000 f9c9 	bl	800e638 <memmove>
 800e2a6:	68a3      	ldr	r3, [r4, #8]
 800e2a8:	1b9b      	subs	r3, r3, r6
 800e2aa:	60a3      	str	r3, [r4, #8]
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	4433      	add	r3, r6
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	f000 fa1b 	bl	800e6f4 <_realloc_r>
 800e2be:	4606      	mov	r6, r0
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d1e0      	bne.n	800e286 <__ssputs_r+0x5a>
 800e2c4:	6921      	ldr	r1, [r4, #16]
 800e2c6:	4650      	mov	r0, sl
 800e2c8:	f7fe fe8c 	bl	800cfe4 <_free_r>
 800e2cc:	230c      	movs	r3, #12
 800e2ce:	f8ca 3000 	str.w	r3, [sl]
 800e2d2:	89a3      	ldrh	r3, [r4, #12]
 800e2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d8:	81a3      	strh	r3, [r4, #12]
 800e2da:	f04f 30ff 	mov.w	r0, #4294967295
 800e2de:	e7e9      	b.n	800e2b4 <__ssputs_r+0x88>

0800e2e0 <_svfiprintf_r>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	4698      	mov	r8, r3
 800e2e6:	898b      	ldrh	r3, [r1, #12]
 800e2e8:	061b      	lsls	r3, r3, #24
 800e2ea:	b09d      	sub	sp, #116	; 0x74
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	d50e      	bpl.n	800e312 <_svfiprintf_r+0x32>
 800e2f4:	690b      	ldr	r3, [r1, #16]
 800e2f6:	b963      	cbnz	r3, 800e312 <_svfiprintf_r+0x32>
 800e2f8:	2140      	movs	r1, #64	; 0x40
 800e2fa:	f7ff fa3f 	bl	800d77c <_malloc_r>
 800e2fe:	6028      	str	r0, [r5, #0]
 800e300:	6128      	str	r0, [r5, #16]
 800e302:	b920      	cbnz	r0, 800e30e <_svfiprintf_r+0x2e>
 800e304:	230c      	movs	r3, #12
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	f04f 30ff 	mov.w	r0, #4294967295
 800e30c:	e0d0      	b.n	800e4b0 <_svfiprintf_r+0x1d0>
 800e30e:	2340      	movs	r3, #64	; 0x40
 800e310:	616b      	str	r3, [r5, #20]
 800e312:	2300      	movs	r3, #0
 800e314:	9309      	str	r3, [sp, #36]	; 0x24
 800e316:	2320      	movs	r3, #32
 800e318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e320:	2330      	movs	r3, #48	; 0x30
 800e322:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4c8 <_svfiprintf_r+0x1e8>
 800e326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e32a:	f04f 0901 	mov.w	r9, #1
 800e32e:	4623      	mov	r3, r4
 800e330:	469a      	mov	sl, r3
 800e332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e336:	b10a      	cbz	r2, 800e33c <_svfiprintf_r+0x5c>
 800e338:	2a25      	cmp	r2, #37	; 0x25
 800e33a:	d1f9      	bne.n	800e330 <_svfiprintf_r+0x50>
 800e33c:	ebba 0b04 	subs.w	fp, sl, r4
 800e340:	d00b      	beq.n	800e35a <_svfiprintf_r+0x7a>
 800e342:	465b      	mov	r3, fp
 800e344:	4622      	mov	r2, r4
 800e346:	4629      	mov	r1, r5
 800e348:	4638      	mov	r0, r7
 800e34a:	f7ff ff6f 	bl	800e22c <__ssputs_r>
 800e34e:	3001      	adds	r0, #1
 800e350:	f000 80a9 	beq.w	800e4a6 <_svfiprintf_r+0x1c6>
 800e354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e356:	445a      	add	r2, fp
 800e358:	9209      	str	r2, [sp, #36]	; 0x24
 800e35a:	f89a 3000 	ldrb.w	r3, [sl]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f000 80a1 	beq.w	800e4a6 <_svfiprintf_r+0x1c6>
 800e364:	2300      	movs	r3, #0
 800e366:	f04f 32ff 	mov.w	r2, #4294967295
 800e36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e36e:	f10a 0a01 	add.w	sl, sl, #1
 800e372:	9304      	str	r3, [sp, #16]
 800e374:	9307      	str	r3, [sp, #28]
 800e376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e37a:	931a      	str	r3, [sp, #104]	; 0x68
 800e37c:	4654      	mov	r4, sl
 800e37e:	2205      	movs	r2, #5
 800e380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e384:	4850      	ldr	r0, [pc, #320]	; (800e4c8 <_svfiprintf_r+0x1e8>)
 800e386:	f7f1 ff23 	bl	80001d0 <memchr>
 800e38a:	9a04      	ldr	r2, [sp, #16]
 800e38c:	b9d8      	cbnz	r0, 800e3c6 <_svfiprintf_r+0xe6>
 800e38e:	06d0      	lsls	r0, r2, #27
 800e390:	bf44      	itt	mi
 800e392:	2320      	movmi	r3, #32
 800e394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e398:	0711      	lsls	r1, r2, #28
 800e39a:	bf44      	itt	mi
 800e39c:	232b      	movmi	r3, #43	; 0x2b
 800e39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3a8:	d015      	beq.n	800e3d6 <_svfiprintf_r+0xf6>
 800e3aa:	9a07      	ldr	r2, [sp, #28]
 800e3ac:	4654      	mov	r4, sl
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	f04f 0c0a 	mov.w	ip, #10
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3ba:	3b30      	subs	r3, #48	; 0x30
 800e3bc:	2b09      	cmp	r3, #9
 800e3be:	d94d      	bls.n	800e45c <_svfiprintf_r+0x17c>
 800e3c0:	b1b0      	cbz	r0, 800e3f0 <_svfiprintf_r+0x110>
 800e3c2:	9207      	str	r2, [sp, #28]
 800e3c4:	e014      	b.n	800e3f0 <_svfiprintf_r+0x110>
 800e3c6:	eba0 0308 	sub.w	r3, r0, r8
 800e3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	46a2      	mov	sl, r4
 800e3d4:	e7d2      	b.n	800e37c <_svfiprintf_r+0x9c>
 800e3d6:	9b03      	ldr	r3, [sp, #12]
 800e3d8:	1d19      	adds	r1, r3, #4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	9103      	str	r1, [sp, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	bfbb      	ittet	lt
 800e3e2:	425b      	neglt	r3, r3
 800e3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e3e8:	9307      	strge	r3, [sp, #28]
 800e3ea:	9307      	strlt	r3, [sp, #28]
 800e3ec:	bfb8      	it	lt
 800e3ee:	9204      	strlt	r2, [sp, #16]
 800e3f0:	7823      	ldrb	r3, [r4, #0]
 800e3f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f4:	d10c      	bne.n	800e410 <_svfiprintf_r+0x130>
 800e3f6:	7863      	ldrb	r3, [r4, #1]
 800e3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3fa:	d134      	bne.n	800e466 <_svfiprintf_r+0x186>
 800e3fc:	9b03      	ldr	r3, [sp, #12]
 800e3fe:	1d1a      	adds	r2, r3, #4
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	9203      	str	r2, [sp, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	bfb8      	it	lt
 800e408:	f04f 33ff 	movlt.w	r3, #4294967295
 800e40c:	3402      	adds	r4, #2
 800e40e:	9305      	str	r3, [sp, #20]
 800e410:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4d8 <_svfiprintf_r+0x1f8>
 800e414:	7821      	ldrb	r1, [r4, #0]
 800e416:	2203      	movs	r2, #3
 800e418:	4650      	mov	r0, sl
 800e41a:	f7f1 fed9 	bl	80001d0 <memchr>
 800e41e:	b138      	cbz	r0, 800e430 <_svfiprintf_r+0x150>
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	eba0 000a 	sub.w	r0, r0, sl
 800e426:	2240      	movs	r2, #64	; 0x40
 800e428:	4082      	lsls	r2, r0
 800e42a:	4313      	orrs	r3, r2
 800e42c:	3401      	adds	r4, #1
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e434:	4825      	ldr	r0, [pc, #148]	; (800e4cc <_svfiprintf_r+0x1ec>)
 800e436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e43a:	2206      	movs	r2, #6
 800e43c:	f7f1 fec8 	bl	80001d0 <memchr>
 800e440:	2800      	cmp	r0, #0
 800e442:	d038      	beq.n	800e4b6 <_svfiprintf_r+0x1d6>
 800e444:	4b22      	ldr	r3, [pc, #136]	; (800e4d0 <_svfiprintf_r+0x1f0>)
 800e446:	bb1b      	cbnz	r3, 800e490 <_svfiprintf_r+0x1b0>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	3307      	adds	r3, #7
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	3308      	adds	r3, #8
 800e452:	9303      	str	r3, [sp, #12]
 800e454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e456:	4433      	add	r3, r6
 800e458:	9309      	str	r3, [sp, #36]	; 0x24
 800e45a:	e768      	b.n	800e32e <_svfiprintf_r+0x4e>
 800e45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e460:	460c      	mov	r4, r1
 800e462:	2001      	movs	r0, #1
 800e464:	e7a6      	b.n	800e3b4 <_svfiprintf_r+0xd4>
 800e466:	2300      	movs	r3, #0
 800e468:	3401      	adds	r4, #1
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	4619      	mov	r1, r3
 800e46e:	f04f 0c0a 	mov.w	ip, #10
 800e472:	4620      	mov	r0, r4
 800e474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e478:	3a30      	subs	r2, #48	; 0x30
 800e47a:	2a09      	cmp	r2, #9
 800e47c:	d903      	bls.n	800e486 <_svfiprintf_r+0x1a6>
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d0c6      	beq.n	800e410 <_svfiprintf_r+0x130>
 800e482:	9105      	str	r1, [sp, #20]
 800e484:	e7c4      	b.n	800e410 <_svfiprintf_r+0x130>
 800e486:	fb0c 2101 	mla	r1, ip, r1, r2
 800e48a:	4604      	mov	r4, r0
 800e48c:	2301      	movs	r3, #1
 800e48e:	e7f0      	b.n	800e472 <_svfiprintf_r+0x192>
 800e490:	ab03      	add	r3, sp, #12
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	462a      	mov	r2, r5
 800e496:	4b0f      	ldr	r3, [pc, #60]	; (800e4d4 <_svfiprintf_r+0x1f4>)
 800e498:	a904      	add	r1, sp, #16
 800e49a:	4638      	mov	r0, r7
 800e49c:	f7fd f990 	bl	800b7c0 <_printf_float>
 800e4a0:	1c42      	adds	r2, r0, #1
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	d1d6      	bne.n	800e454 <_svfiprintf_r+0x174>
 800e4a6:	89ab      	ldrh	r3, [r5, #12]
 800e4a8:	065b      	lsls	r3, r3, #25
 800e4aa:	f53f af2d 	bmi.w	800e308 <_svfiprintf_r+0x28>
 800e4ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b0:	b01d      	add	sp, #116	; 0x74
 800e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b6:	ab03      	add	r3, sp, #12
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	462a      	mov	r2, r5
 800e4bc:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <_svfiprintf_r+0x1f4>)
 800e4be:	a904      	add	r1, sp, #16
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f7fd fc21 	bl	800bd08 <_printf_i>
 800e4c6:	e7eb      	b.n	800e4a0 <_svfiprintf_r+0x1c0>
 800e4c8:	0800f165 	.word	0x0800f165
 800e4cc:	0800f16f 	.word	0x0800f16f
 800e4d0:	0800b7c1 	.word	0x0800b7c1
 800e4d4:	0800e22d 	.word	0x0800e22d
 800e4d8:	0800f16b 	.word	0x0800f16b

0800e4dc <__sflush_r>:
 800e4dc:	898a      	ldrh	r2, [r1, #12]
 800e4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	0710      	lsls	r0, r2, #28
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	d458      	bmi.n	800e59c <__sflush_r+0xc0>
 800e4ea:	684b      	ldr	r3, [r1, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	dc05      	bgt.n	800e4fc <__sflush_r+0x20>
 800e4f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dc02      	bgt.n	800e4fc <__sflush_r+0x20>
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4fe:	2e00      	cmp	r6, #0
 800e500:	d0f9      	beq.n	800e4f6 <__sflush_r+0x1a>
 800e502:	2300      	movs	r3, #0
 800e504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e508:	682f      	ldr	r7, [r5, #0]
 800e50a:	6a21      	ldr	r1, [r4, #32]
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	d032      	beq.n	800e576 <__sflush_r+0x9a>
 800e510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e512:	89a3      	ldrh	r3, [r4, #12]
 800e514:	075a      	lsls	r2, r3, #29
 800e516:	d505      	bpl.n	800e524 <__sflush_r+0x48>
 800e518:	6863      	ldr	r3, [r4, #4]
 800e51a:	1ac0      	subs	r0, r0, r3
 800e51c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e51e:	b10b      	cbz	r3, 800e524 <__sflush_r+0x48>
 800e520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e522:	1ac0      	subs	r0, r0, r3
 800e524:	2300      	movs	r3, #0
 800e526:	4602      	mov	r2, r0
 800e528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e52a:	6a21      	ldr	r1, [r4, #32]
 800e52c:	4628      	mov	r0, r5
 800e52e:	47b0      	blx	r6
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	d106      	bne.n	800e544 <__sflush_r+0x68>
 800e536:	6829      	ldr	r1, [r5, #0]
 800e538:	291d      	cmp	r1, #29
 800e53a:	d82b      	bhi.n	800e594 <__sflush_r+0xb8>
 800e53c:	4a29      	ldr	r2, [pc, #164]	; (800e5e4 <__sflush_r+0x108>)
 800e53e:	410a      	asrs	r2, r1
 800e540:	07d6      	lsls	r6, r2, #31
 800e542:	d427      	bmi.n	800e594 <__sflush_r+0xb8>
 800e544:	2200      	movs	r2, #0
 800e546:	6062      	str	r2, [r4, #4]
 800e548:	04d9      	lsls	r1, r3, #19
 800e54a:	6922      	ldr	r2, [r4, #16]
 800e54c:	6022      	str	r2, [r4, #0]
 800e54e:	d504      	bpl.n	800e55a <__sflush_r+0x7e>
 800e550:	1c42      	adds	r2, r0, #1
 800e552:	d101      	bne.n	800e558 <__sflush_r+0x7c>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	b903      	cbnz	r3, 800e55a <__sflush_r+0x7e>
 800e558:	6560      	str	r0, [r4, #84]	; 0x54
 800e55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e55c:	602f      	str	r7, [r5, #0]
 800e55e:	2900      	cmp	r1, #0
 800e560:	d0c9      	beq.n	800e4f6 <__sflush_r+0x1a>
 800e562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e566:	4299      	cmp	r1, r3
 800e568:	d002      	beq.n	800e570 <__sflush_r+0x94>
 800e56a:	4628      	mov	r0, r5
 800e56c:	f7fe fd3a 	bl	800cfe4 <_free_r>
 800e570:	2000      	movs	r0, #0
 800e572:	6360      	str	r0, [r4, #52]	; 0x34
 800e574:	e7c0      	b.n	800e4f8 <__sflush_r+0x1c>
 800e576:	2301      	movs	r3, #1
 800e578:	4628      	mov	r0, r5
 800e57a:	47b0      	blx	r6
 800e57c:	1c41      	adds	r1, r0, #1
 800e57e:	d1c8      	bne.n	800e512 <__sflush_r+0x36>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0c5      	beq.n	800e512 <__sflush_r+0x36>
 800e586:	2b1d      	cmp	r3, #29
 800e588:	d001      	beq.n	800e58e <__sflush_r+0xb2>
 800e58a:	2b16      	cmp	r3, #22
 800e58c:	d101      	bne.n	800e592 <__sflush_r+0xb6>
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	e7b1      	b.n	800e4f6 <__sflush_r+0x1a>
 800e592:	89a3      	ldrh	r3, [r4, #12]
 800e594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e598:	81a3      	strh	r3, [r4, #12]
 800e59a:	e7ad      	b.n	800e4f8 <__sflush_r+0x1c>
 800e59c:	690f      	ldr	r7, [r1, #16]
 800e59e:	2f00      	cmp	r7, #0
 800e5a0:	d0a9      	beq.n	800e4f6 <__sflush_r+0x1a>
 800e5a2:	0793      	lsls	r3, r2, #30
 800e5a4:	680e      	ldr	r6, [r1, #0]
 800e5a6:	bf08      	it	eq
 800e5a8:	694b      	ldreq	r3, [r1, #20]
 800e5aa:	600f      	str	r7, [r1, #0]
 800e5ac:	bf18      	it	ne
 800e5ae:	2300      	movne	r3, #0
 800e5b0:	eba6 0807 	sub.w	r8, r6, r7
 800e5b4:	608b      	str	r3, [r1, #8]
 800e5b6:	f1b8 0f00 	cmp.w	r8, #0
 800e5ba:	dd9c      	ble.n	800e4f6 <__sflush_r+0x1a>
 800e5bc:	6a21      	ldr	r1, [r4, #32]
 800e5be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5c0:	4643      	mov	r3, r8
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	47b0      	blx	r6
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	dc06      	bgt.n	800e5da <__sflush_r+0xfe>
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d2:	81a3      	strh	r3, [r4, #12]
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d8:	e78e      	b.n	800e4f8 <__sflush_r+0x1c>
 800e5da:	4407      	add	r7, r0
 800e5dc:	eba8 0800 	sub.w	r8, r8, r0
 800e5e0:	e7e9      	b.n	800e5b6 <__sflush_r+0xda>
 800e5e2:	bf00      	nop
 800e5e4:	dfbffffe 	.word	0xdfbffffe

0800e5e8 <_fflush_r>:
 800e5e8:	b538      	push	{r3, r4, r5, lr}
 800e5ea:	690b      	ldr	r3, [r1, #16]
 800e5ec:	4605      	mov	r5, r0
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	b913      	cbnz	r3, 800e5f8 <_fflush_r+0x10>
 800e5f2:	2500      	movs	r5, #0
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	b118      	cbz	r0, 800e602 <_fflush_r+0x1a>
 800e5fa:	6a03      	ldr	r3, [r0, #32]
 800e5fc:	b90b      	cbnz	r3, 800e602 <_fflush_r+0x1a>
 800e5fe:	f7fd fd1f 	bl	800c040 <__sinit>
 800e602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d0f3      	beq.n	800e5f2 <_fflush_r+0xa>
 800e60a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e60c:	07d0      	lsls	r0, r2, #31
 800e60e:	d404      	bmi.n	800e61a <_fflush_r+0x32>
 800e610:	0599      	lsls	r1, r3, #22
 800e612:	d402      	bmi.n	800e61a <_fflush_r+0x32>
 800e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e616:	f7fd fe51 	bl	800c2bc <__retarget_lock_acquire_recursive>
 800e61a:	4628      	mov	r0, r5
 800e61c:	4621      	mov	r1, r4
 800e61e:	f7ff ff5d 	bl	800e4dc <__sflush_r>
 800e622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e624:	07da      	lsls	r2, r3, #31
 800e626:	4605      	mov	r5, r0
 800e628:	d4e4      	bmi.n	800e5f4 <_fflush_r+0xc>
 800e62a:	89a3      	ldrh	r3, [r4, #12]
 800e62c:	059b      	lsls	r3, r3, #22
 800e62e:	d4e1      	bmi.n	800e5f4 <_fflush_r+0xc>
 800e630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e632:	f7fd fe44 	bl	800c2be <__retarget_lock_release_recursive>
 800e636:	e7dd      	b.n	800e5f4 <_fflush_r+0xc>

0800e638 <memmove>:
 800e638:	4288      	cmp	r0, r1
 800e63a:	b510      	push	{r4, lr}
 800e63c:	eb01 0402 	add.w	r4, r1, r2
 800e640:	d902      	bls.n	800e648 <memmove+0x10>
 800e642:	4284      	cmp	r4, r0
 800e644:	4623      	mov	r3, r4
 800e646:	d807      	bhi.n	800e658 <memmove+0x20>
 800e648:	1e43      	subs	r3, r0, #1
 800e64a:	42a1      	cmp	r1, r4
 800e64c:	d008      	beq.n	800e660 <memmove+0x28>
 800e64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e652:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e656:	e7f8      	b.n	800e64a <memmove+0x12>
 800e658:	4402      	add	r2, r0
 800e65a:	4601      	mov	r1, r0
 800e65c:	428a      	cmp	r2, r1
 800e65e:	d100      	bne.n	800e662 <memmove+0x2a>
 800e660:	bd10      	pop	{r4, pc}
 800e662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e66a:	e7f7      	b.n	800e65c <memmove+0x24>

0800e66c <_sbrk_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d06      	ldr	r5, [pc, #24]	; (800e688 <_sbrk_r+0x1c>)
 800e670:	2300      	movs	r3, #0
 800e672:	4604      	mov	r4, r0
 800e674:	4608      	mov	r0, r1
 800e676:	602b      	str	r3, [r5, #0]
 800e678:	f7f4 fa2e 	bl	8002ad8 <_sbrk>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d102      	bne.n	800e686 <_sbrk_r+0x1a>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	b103      	cbz	r3, 800e686 <_sbrk_r+0x1a>
 800e684:	6023      	str	r3, [r4, #0]
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	20000b3c 	.word	0x20000b3c

0800e68c <__assert_func>:
 800e68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e68e:	4614      	mov	r4, r2
 800e690:	461a      	mov	r2, r3
 800e692:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <__assert_func+0x2c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4605      	mov	r5, r0
 800e698:	68d8      	ldr	r0, [r3, #12]
 800e69a:	b14c      	cbz	r4, 800e6b0 <__assert_func+0x24>
 800e69c:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <__assert_func+0x30>)
 800e69e:	9100      	str	r1, [sp, #0]
 800e6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6a4:	4906      	ldr	r1, [pc, #24]	; (800e6c0 <__assert_func+0x34>)
 800e6a6:	462b      	mov	r3, r5
 800e6a8:	f000 f854 	bl	800e754 <fiprintf>
 800e6ac:	f000 f864 	bl	800e778 <abort>
 800e6b0:	4b04      	ldr	r3, [pc, #16]	; (800e6c4 <__assert_func+0x38>)
 800e6b2:	461c      	mov	r4, r3
 800e6b4:	e7f3      	b.n	800e69e <__assert_func+0x12>
 800e6b6:	bf00      	nop
 800e6b8:	200001d0 	.word	0x200001d0
 800e6bc:	0800f176 	.word	0x0800f176
 800e6c0:	0800f183 	.word	0x0800f183
 800e6c4:	0800f1b1 	.word	0x0800f1b1

0800e6c8 <_calloc_r>:
 800e6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6ca:	fba1 2402 	umull	r2, r4, r1, r2
 800e6ce:	b94c      	cbnz	r4, 800e6e4 <_calloc_r+0x1c>
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	9201      	str	r2, [sp, #4]
 800e6d4:	f7ff f852 	bl	800d77c <_malloc_r>
 800e6d8:	9a01      	ldr	r2, [sp, #4]
 800e6da:	4605      	mov	r5, r0
 800e6dc:	b930      	cbnz	r0, 800e6ec <_calloc_r+0x24>
 800e6de:	4628      	mov	r0, r5
 800e6e0:	b003      	add	sp, #12
 800e6e2:	bd30      	pop	{r4, r5, pc}
 800e6e4:	220c      	movs	r2, #12
 800e6e6:	6002      	str	r2, [r0, #0]
 800e6e8:	2500      	movs	r5, #0
 800e6ea:	e7f8      	b.n	800e6de <_calloc_r+0x16>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	f7fd fd40 	bl	800c172 <memset>
 800e6f2:	e7f4      	b.n	800e6de <_calloc_r+0x16>

0800e6f4 <_realloc_r>:
 800e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f8:	4680      	mov	r8, r0
 800e6fa:	4614      	mov	r4, r2
 800e6fc:	460e      	mov	r6, r1
 800e6fe:	b921      	cbnz	r1, 800e70a <_realloc_r+0x16>
 800e700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e704:	4611      	mov	r1, r2
 800e706:	f7ff b839 	b.w	800d77c <_malloc_r>
 800e70a:	b92a      	cbnz	r2, 800e718 <_realloc_r+0x24>
 800e70c:	f7fe fc6a 	bl	800cfe4 <_free_r>
 800e710:	4625      	mov	r5, r4
 800e712:	4628      	mov	r0, r5
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e718:	f000 f835 	bl	800e786 <_malloc_usable_size_r>
 800e71c:	4284      	cmp	r4, r0
 800e71e:	4607      	mov	r7, r0
 800e720:	d802      	bhi.n	800e728 <_realloc_r+0x34>
 800e722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e726:	d812      	bhi.n	800e74e <_realloc_r+0x5a>
 800e728:	4621      	mov	r1, r4
 800e72a:	4640      	mov	r0, r8
 800e72c:	f7ff f826 	bl	800d77c <_malloc_r>
 800e730:	4605      	mov	r5, r0
 800e732:	2800      	cmp	r0, #0
 800e734:	d0ed      	beq.n	800e712 <_realloc_r+0x1e>
 800e736:	42bc      	cmp	r4, r7
 800e738:	4622      	mov	r2, r4
 800e73a:	4631      	mov	r1, r6
 800e73c:	bf28      	it	cs
 800e73e:	463a      	movcs	r2, r7
 800e740:	f7fd fdbe 	bl	800c2c0 <memcpy>
 800e744:	4631      	mov	r1, r6
 800e746:	4640      	mov	r0, r8
 800e748:	f7fe fc4c 	bl	800cfe4 <_free_r>
 800e74c:	e7e1      	b.n	800e712 <_realloc_r+0x1e>
 800e74e:	4635      	mov	r5, r6
 800e750:	e7df      	b.n	800e712 <_realloc_r+0x1e>
	...

0800e754 <fiprintf>:
 800e754:	b40e      	push	{r1, r2, r3}
 800e756:	b503      	push	{r0, r1, lr}
 800e758:	4601      	mov	r1, r0
 800e75a:	ab03      	add	r3, sp, #12
 800e75c:	4805      	ldr	r0, [pc, #20]	; (800e774 <fiprintf+0x20>)
 800e75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e762:	6800      	ldr	r0, [r0, #0]
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	f000 f83f 	bl	800e7e8 <_vfiprintf_r>
 800e76a:	b002      	add	sp, #8
 800e76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e770:	b003      	add	sp, #12
 800e772:	4770      	bx	lr
 800e774:	200001d0 	.word	0x200001d0

0800e778 <abort>:
 800e778:	b508      	push	{r3, lr}
 800e77a:	2006      	movs	r0, #6
 800e77c:	f000 fa0c 	bl	800eb98 <raise>
 800e780:	2001      	movs	r0, #1
 800e782:	f7f4 f931 	bl	80029e8 <_exit>

0800e786 <_malloc_usable_size_r>:
 800e786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e78a:	1f18      	subs	r0, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfbc      	itt	lt
 800e790:	580b      	ldrlt	r3, [r1, r0]
 800e792:	18c0      	addlt	r0, r0, r3
 800e794:	4770      	bx	lr

0800e796 <__sfputc_r>:
 800e796:	6893      	ldr	r3, [r2, #8]
 800e798:	3b01      	subs	r3, #1
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	b410      	push	{r4}
 800e79e:	6093      	str	r3, [r2, #8]
 800e7a0:	da08      	bge.n	800e7b4 <__sfputc_r+0x1e>
 800e7a2:	6994      	ldr	r4, [r2, #24]
 800e7a4:	42a3      	cmp	r3, r4
 800e7a6:	db01      	blt.n	800e7ac <__sfputc_r+0x16>
 800e7a8:	290a      	cmp	r1, #10
 800e7aa:	d103      	bne.n	800e7b4 <__sfputc_r+0x1e>
 800e7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b0:	f000 b934 	b.w	800ea1c <__swbuf_r>
 800e7b4:	6813      	ldr	r3, [r2, #0]
 800e7b6:	1c58      	adds	r0, r3, #1
 800e7b8:	6010      	str	r0, [r2, #0]
 800e7ba:	7019      	strb	r1, [r3, #0]
 800e7bc:	4608      	mov	r0, r1
 800e7be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <__sfputs_r>:
 800e7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	460f      	mov	r7, r1
 800e7ca:	4614      	mov	r4, r2
 800e7cc:	18d5      	adds	r5, r2, r3
 800e7ce:	42ac      	cmp	r4, r5
 800e7d0:	d101      	bne.n	800e7d6 <__sfputs_r+0x12>
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	e007      	b.n	800e7e6 <__sfputs_r+0x22>
 800e7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7da:	463a      	mov	r2, r7
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f7ff ffda 	bl	800e796 <__sfputc_r>
 800e7e2:	1c43      	adds	r3, r0, #1
 800e7e4:	d1f3      	bne.n	800e7ce <__sfputs_r+0xa>
 800e7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7e8 <_vfiprintf_r>:
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	460d      	mov	r5, r1
 800e7ee:	b09d      	sub	sp, #116	; 0x74
 800e7f0:	4614      	mov	r4, r2
 800e7f2:	4698      	mov	r8, r3
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	b118      	cbz	r0, 800e800 <_vfiprintf_r+0x18>
 800e7f8:	6a03      	ldr	r3, [r0, #32]
 800e7fa:	b90b      	cbnz	r3, 800e800 <_vfiprintf_r+0x18>
 800e7fc:	f7fd fc20 	bl	800c040 <__sinit>
 800e800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e802:	07d9      	lsls	r1, r3, #31
 800e804:	d405      	bmi.n	800e812 <_vfiprintf_r+0x2a>
 800e806:	89ab      	ldrh	r3, [r5, #12]
 800e808:	059a      	lsls	r2, r3, #22
 800e80a:	d402      	bmi.n	800e812 <_vfiprintf_r+0x2a>
 800e80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e80e:	f7fd fd55 	bl	800c2bc <__retarget_lock_acquire_recursive>
 800e812:	89ab      	ldrh	r3, [r5, #12]
 800e814:	071b      	lsls	r3, r3, #28
 800e816:	d501      	bpl.n	800e81c <_vfiprintf_r+0x34>
 800e818:	692b      	ldr	r3, [r5, #16]
 800e81a:	b99b      	cbnz	r3, 800e844 <_vfiprintf_r+0x5c>
 800e81c:	4629      	mov	r1, r5
 800e81e:	4630      	mov	r0, r6
 800e820:	f000 f93a 	bl	800ea98 <__swsetup_r>
 800e824:	b170      	cbz	r0, 800e844 <_vfiprintf_r+0x5c>
 800e826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e828:	07dc      	lsls	r4, r3, #31
 800e82a:	d504      	bpl.n	800e836 <_vfiprintf_r+0x4e>
 800e82c:	f04f 30ff 	mov.w	r0, #4294967295
 800e830:	b01d      	add	sp, #116	; 0x74
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e836:	89ab      	ldrh	r3, [r5, #12]
 800e838:	0598      	lsls	r0, r3, #22
 800e83a:	d4f7      	bmi.n	800e82c <_vfiprintf_r+0x44>
 800e83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83e:	f7fd fd3e 	bl	800c2be <__retarget_lock_release_recursive>
 800e842:	e7f3      	b.n	800e82c <_vfiprintf_r+0x44>
 800e844:	2300      	movs	r3, #0
 800e846:	9309      	str	r3, [sp, #36]	; 0x24
 800e848:	2320      	movs	r3, #32
 800e84a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e84e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e852:	2330      	movs	r3, #48	; 0x30
 800e854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ea08 <_vfiprintf_r+0x220>
 800e858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e85c:	f04f 0901 	mov.w	r9, #1
 800e860:	4623      	mov	r3, r4
 800e862:	469a      	mov	sl, r3
 800e864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e868:	b10a      	cbz	r2, 800e86e <_vfiprintf_r+0x86>
 800e86a:	2a25      	cmp	r2, #37	; 0x25
 800e86c:	d1f9      	bne.n	800e862 <_vfiprintf_r+0x7a>
 800e86e:	ebba 0b04 	subs.w	fp, sl, r4
 800e872:	d00b      	beq.n	800e88c <_vfiprintf_r+0xa4>
 800e874:	465b      	mov	r3, fp
 800e876:	4622      	mov	r2, r4
 800e878:	4629      	mov	r1, r5
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7ff ffa2 	bl	800e7c4 <__sfputs_r>
 800e880:	3001      	adds	r0, #1
 800e882:	f000 80a9 	beq.w	800e9d8 <_vfiprintf_r+0x1f0>
 800e886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e888:	445a      	add	r2, fp
 800e88a:	9209      	str	r2, [sp, #36]	; 0x24
 800e88c:	f89a 3000 	ldrb.w	r3, [sl]
 800e890:	2b00      	cmp	r3, #0
 800e892:	f000 80a1 	beq.w	800e9d8 <_vfiprintf_r+0x1f0>
 800e896:	2300      	movs	r3, #0
 800e898:	f04f 32ff 	mov.w	r2, #4294967295
 800e89c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8a0:	f10a 0a01 	add.w	sl, sl, #1
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	9307      	str	r3, [sp, #28]
 800e8a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800e8ae:	4654      	mov	r4, sl
 800e8b0:	2205      	movs	r2, #5
 800e8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b6:	4854      	ldr	r0, [pc, #336]	; (800ea08 <_vfiprintf_r+0x220>)
 800e8b8:	f7f1 fc8a 	bl	80001d0 <memchr>
 800e8bc:	9a04      	ldr	r2, [sp, #16]
 800e8be:	b9d8      	cbnz	r0, 800e8f8 <_vfiprintf_r+0x110>
 800e8c0:	06d1      	lsls	r1, r2, #27
 800e8c2:	bf44      	itt	mi
 800e8c4:	2320      	movmi	r3, #32
 800e8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ca:	0713      	lsls	r3, r2, #28
 800e8cc:	bf44      	itt	mi
 800e8ce:	232b      	movmi	r3, #43	; 0x2b
 800e8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e8da:	d015      	beq.n	800e908 <_vfiprintf_r+0x120>
 800e8dc:	9a07      	ldr	r2, [sp, #28]
 800e8de:	4654      	mov	r4, sl
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	f04f 0c0a 	mov.w	ip, #10
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8ec:	3b30      	subs	r3, #48	; 0x30
 800e8ee:	2b09      	cmp	r3, #9
 800e8f0:	d94d      	bls.n	800e98e <_vfiprintf_r+0x1a6>
 800e8f2:	b1b0      	cbz	r0, 800e922 <_vfiprintf_r+0x13a>
 800e8f4:	9207      	str	r2, [sp, #28]
 800e8f6:	e014      	b.n	800e922 <_vfiprintf_r+0x13a>
 800e8f8:	eba0 0308 	sub.w	r3, r0, r8
 800e8fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e900:	4313      	orrs	r3, r2
 800e902:	9304      	str	r3, [sp, #16]
 800e904:	46a2      	mov	sl, r4
 800e906:	e7d2      	b.n	800e8ae <_vfiprintf_r+0xc6>
 800e908:	9b03      	ldr	r3, [sp, #12]
 800e90a:	1d19      	adds	r1, r3, #4
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	9103      	str	r1, [sp, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	bfbb      	ittet	lt
 800e914:	425b      	neglt	r3, r3
 800e916:	f042 0202 	orrlt.w	r2, r2, #2
 800e91a:	9307      	strge	r3, [sp, #28]
 800e91c:	9307      	strlt	r3, [sp, #28]
 800e91e:	bfb8      	it	lt
 800e920:	9204      	strlt	r2, [sp, #16]
 800e922:	7823      	ldrb	r3, [r4, #0]
 800e924:	2b2e      	cmp	r3, #46	; 0x2e
 800e926:	d10c      	bne.n	800e942 <_vfiprintf_r+0x15a>
 800e928:	7863      	ldrb	r3, [r4, #1]
 800e92a:	2b2a      	cmp	r3, #42	; 0x2a
 800e92c:	d134      	bne.n	800e998 <_vfiprintf_r+0x1b0>
 800e92e:	9b03      	ldr	r3, [sp, #12]
 800e930:	1d1a      	adds	r2, r3, #4
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	9203      	str	r2, [sp, #12]
 800e936:	2b00      	cmp	r3, #0
 800e938:	bfb8      	it	lt
 800e93a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e93e:	3402      	adds	r4, #2
 800e940:	9305      	str	r3, [sp, #20]
 800e942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ea18 <_vfiprintf_r+0x230>
 800e946:	7821      	ldrb	r1, [r4, #0]
 800e948:	2203      	movs	r2, #3
 800e94a:	4650      	mov	r0, sl
 800e94c:	f7f1 fc40 	bl	80001d0 <memchr>
 800e950:	b138      	cbz	r0, 800e962 <_vfiprintf_r+0x17a>
 800e952:	9b04      	ldr	r3, [sp, #16]
 800e954:	eba0 000a 	sub.w	r0, r0, sl
 800e958:	2240      	movs	r2, #64	; 0x40
 800e95a:	4082      	lsls	r2, r0
 800e95c:	4313      	orrs	r3, r2
 800e95e:	3401      	adds	r4, #1
 800e960:	9304      	str	r3, [sp, #16]
 800e962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e966:	4829      	ldr	r0, [pc, #164]	; (800ea0c <_vfiprintf_r+0x224>)
 800e968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e96c:	2206      	movs	r2, #6
 800e96e:	f7f1 fc2f 	bl	80001d0 <memchr>
 800e972:	2800      	cmp	r0, #0
 800e974:	d03f      	beq.n	800e9f6 <_vfiprintf_r+0x20e>
 800e976:	4b26      	ldr	r3, [pc, #152]	; (800ea10 <_vfiprintf_r+0x228>)
 800e978:	bb1b      	cbnz	r3, 800e9c2 <_vfiprintf_r+0x1da>
 800e97a:	9b03      	ldr	r3, [sp, #12]
 800e97c:	3307      	adds	r3, #7
 800e97e:	f023 0307 	bic.w	r3, r3, #7
 800e982:	3308      	adds	r3, #8
 800e984:	9303      	str	r3, [sp, #12]
 800e986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e988:	443b      	add	r3, r7
 800e98a:	9309      	str	r3, [sp, #36]	; 0x24
 800e98c:	e768      	b.n	800e860 <_vfiprintf_r+0x78>
 800e98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e992:	460c      	mov	r4, r1
 800e994:	2001      	movs	r0, #1
 800e996:	e7a6      	b.n	800e8e6 <_vfiprintf_r+0xfe>
 800e998:	2300      	movs	r3, #0
 800e99a:	3401      	adds	r4, #1
 800e99c:	9305      	str	r3, [sp, #20]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	f04f 0c0a 	mov.w	ip, #10
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9aa:	3a30      	subs	r2, #48	; 0x30
 800e9ac:	2a09      	cmp	r2, #9
 800e9ae:	d903      	bls.n	800e9b8 <_vfiprintf_r+0x1d0>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d0c6      	beq.n	800e942 <_vfiprintf_r+0x15a>
 800e9b4:	9105      	str	r1, [sp, #20]
 800e9b6:	e7c4      	b.n	800e942 <_vfiprintf_r+0x15a>
 800e9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9bc:	4604      	mov	r4, r0
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e7f0      	b.n	800e9a4 <_vfiprintf_r+0x1bc>
 800e9c2:	ab03      	add	r3, sp, #12
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	462a      	mov	r2, r5
 800e9c8:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <_vfiprintf_r+0x22c>)
 800e9ca:	a904      	add	r1, sp, #16
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7fc fef7 	bl	800b7c0 <_printf_float>
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	1c78      	adds	r0, r7, #1
 800e9d6:	d1d6      	bne.n	800e986 <_vfiprintf_r+0x19e>
 800e9d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9da:	07d9      	lsls	r1, r3, #31
 800e9dc:	d405      	bmi.n	800e9ea <_vfiprintf_r+0x202>
 800e9de:	89ab      	ldrh	r3, [r5, #12]
 800e9e0:	059a      	lsls	r2, r3, #22
 800e9e2:	d402      	bmi.n	800e9ea <_vfiprintf_r+0x202>
 800e9e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9e6:	f7fd fc6a 	bl	800c2be <__retarget_lock_release_recursive>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	065b      	lsls	r3, r3, #25
 800e9ee:	f53f af1d 	bmi.w	800e82c <_vfiprintf_r+0x44>
 800e9f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9f4:	e71c      	b.n	800e830 <_vfiprintf_r+0x48>
 800e9f6:	ab03      	add	r3, sp, #12
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <_vfiprintf_r+0x22c>)
 800e9fe:	a904      	add	r1, sp, #16
 800ea00:	4630      	mov	r0, r6
 800ea02:	f7fd f981 	bl	800bd08 <_printf_i>
 800ea06:	e7e4      	b.n	800e9d2 <_vfiprintf_r+0x1ea>
 800ea08:	0800f165 	.word	0x0800f165
 800ea0c:	0800f16f 	.word	0x0800f16f
 800ea10:	0800b7c1 	.word	0x0800b7c1
 800ea14:	0800e7c5 	.word	0x0800e7c5
 800ea18:	0800f16b 	.word	0x0800f16b

0800ea1c <__swbuf_r>:
 800ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1e:	460e      	mov	r6, r1
 800ea20:	4614      	mov	r4, r2
 800ea22:	4605      	mov	r5, r0
 800ea24:	b118      	cbz	r0, 800ea2e <__swbuf_r+0x12>
 800ea26:	6a03      	ldr	r3, [r0, #32]
 800ea28:	b90b      	cbnz	r3, 800ea2e <__swbuf_r+0x12>
 800ea2a:	f7fd fb09 	bl	800c040 <__sinit>
 800ea2e:	69a3      	ldr	r3, [r4, #24]
 800ea30:	60a3      	str	r3, [r4, #8]
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	071a      	lsls	r2, r3, #28
 800ea36:	d525      	bpl.n	800ea84 <__swbuf_r+0x68>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	b31b      	cbz	r3, 800ea84 <__swbuf_r+0x68>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	6922      	ldr	r2, [r4, #16]
 800ea40:	1a98      	subs	r0, r3, r2
 800ea42:	6963      	ldr	r3, [r4, #20]
 800ea44:	b2f6      	uxtb	r6, r6
 800ea46:	4283      	cmp	r3, r0
 800ea48:	4637      	mov	r7, r6
 800ea4a:	dc04      	bgt.n	800ea56 <__swbuf_r+0x3a>
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f7ff fdca 	bl	800e5e8 <_fflush_r>
 800ea54:	b9e0      	cbnz	r0, 800ea90 <__swbuf_r+0x74>
 800ea56:	68a3      	ldr	r3, [r4, #8]
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	60a3      	str	r3, [r4, #8]
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	6022      	str	r2, [r4, #0]
 800ea62:	701e      	strb	r6, [r3, #0]
 800ea64:	6962      	ldr	r2, [r4, #20]
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d004      	beq.n	800ea76 <__swbuf_r+0x5a>
 800ea6c:	89a3      	ldrh	r3, [r4, #12]
 800ea6e:	07db      	lsls	r3, r3, #31
 800ea70:	d506      	bpl.n	800ea80 <__swbuf_r+0x64>
 800ea72:	2e0a      	cmp	r6, #10
 800ea74:	d104      	bne.n	800ea80 <__swbuf_r+0x64>
 800ea76:	4621      	mov	r1, r4
 800ea78:	4628      	mov	r0, r5
 800ea7a:	f7ff fdb5 	bl	800e5e8 <_fflush_r>
 800ea7e:	b938      	cbnz	r0, 800ea90 <__swbuf_r+0x74>
 800ea80:	4638      	mov	r0, r7
 800ea82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea84:	4621      	mov	r1, r4
 800ea86:	4628      	mov	r0, r5
 800ea88:	f000 f806 	bl	800ea98 <__swsetup_r>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d0d5      	beq.n	800ea3c <__swbuf_r+0x20>
 800ea90:	f04f 37ff 	mov.w	r7, #4294967295
 800ea94:	e7f4      	b.n	800ea80 <__swbuf_r+0x64>
	...

0800ea98 <__swsetup_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	4b2a      	ldr	r3, [pc, #168]	; (800eb44 <__swsetup_r+0xac>)
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	6818      	ldr	r0, [r3, #0]
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	b118      	cbz	r0, 800eaac <__swsetup_r+0x14>
 800eaa4:	6a03      	ldr	r3, [r0, #32]
 800eaa6:	b90b      	cbnz	r3, 800eaac <__swsetup_r+0x14>
 800eaa8:	f7fd faca 	bl	800c040 <__sinit>
 800eaac:	89a3      	ldrh	r3, [r4, #12]
 800eaae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eab2:	0718      	lsls	r0, r3, #28
 800eab4:	d422      	bmi.n	800eafc <__swsetup_r+0x64>
 800eab6:	06d9      	lsls	r1, r3, #27
 800eab8:	d407      	bmi.n	800eaca <__swsetup_r+0x32>
 800eaba:	2309      	movs	r3, #9
 800eabc:	602b      	str	r3, [r5, #0]
 800eabe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eac2:	81a3      	strh	r3, [r4, #12]
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295
 800eac8:	e034      	b.n	800eb34 <__swsetup_r+0x9c>
 800eaca:	0758      	lsls	r0, r3, #29
 800eacc:	d512      	bpl.n	800eaf4 <__swsetup_r+0x5c>
 800eace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ead0:	b141      	cbz	r1, 800eae4 <__swsetup_r+0x4c>
 800ead2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ead6:	4299      	cmp	r1, r3
 800ead8:	d002      	beq.n	800eae0 <__swsetup_r+0x48>
 800eada:	4628      	mov	r0, r5
 800eadc:	f7fe fa82 	bl	800cfe4 <_free_r>
 800eae0:	2300      	movs	r3, #0
 800eae2:	6363      	str	r3, [r4, #52]	; 0x34
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eaea:	81a3      	strh	r3, [r4, #12]
 800eaec:	2300      	movs	r3, #0
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	6023      	str	r3, [r4, #0]
 800eaf4:	89a3      	ldrh	r3, [r4, #12]
 800eaf6:	f043 0308 	orr.w	r3, r3, #8
 800eafa:	81a3      	strh	r3, [r4, #12]
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	b94b      	cbnz	r3, 800eb14 <__swsetup_r+0x7c>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb0a:	d003      	beq.n	800eb14 <__swsetup_r+0x7c>
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f000 f884 	bl	800ec1c <__smakebuf_r>
 800eb14:	89a0      	ldrh	r0, [r4, #12]
 800eb16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb1a:	f010 0301 	ands.w	r3, r0, #1
 800eb1e:	d00a      	beq.n	800eb36 <__swsetup_r+0x9e>
 800eb20:	2300      	movs	r3, #0
 800eb22:	60a3      	str	r3, [r4, #8]
 800eb24:	6963      	ldr	r3, [r4, #20]
 800eb26:	425b      	negs	r3, r3
 800eb28:	61a3      	str	r3, [r4, #24]
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	b943      	cbnz	r3, 800eb40 <__swsetup_r+0xa8>
 800eb2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb32:	d1c4      	bne.n	800eabe <__swsetup_r+0x26>
 800eb34:	bd38      	pop	{r3, r4, r5, pc}
 800eb36:	0781      	lsls	r1, r0, #30
 800eb38:	bf58      	it	pl
 800eb3a:	6963      	ldrpl	r3, [r4, #20]
 800eb3c:	60a3      	str	r3, [r4, #8]
 800eb3e:	e7f4      	b.n	800eb2a <__swsetup_r+0x92>
 800eb40:	2000      	movs	r0, #0
 800eb42:	e7f7      	b.n	800eb34 <__swsetup_r+0x9c>
 800eb44:	200001d0 	.word	0x200001d0

0800eb48 <_raise_r>:
 800eb48:	291f      	cmp	r1, #31
 800eb4a:	b538      	push	{r3, r4, r5, lr}
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	460d      	mov	r5, r1
 800eb50:	d904      	bls.n	800eb5c <_raise_r+0x14>
 800eb52:	2316      	movs	r3, #22
 800eb54:	6003      	str	r3, [r0, #0]
 800eb56:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5a:	bd38      	pop	{r3, r4, r5, pc}
 800eb5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eb5e:	b112      	cbz	r2, 800eb66 <_raise_r+0x1e>
 800eb60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb64:	b94b      	cbnz	r3, 800eb7a <_raise_r+0x32>
 800eb66:	4620      	mov	r0, r4
 800eb68:	f000 f830 	bl	800ebcc <_getpid_r>
 800eb6c:	462a      	mov	r2, r5
 800eb6e:	4601      	mov	r1, r0
 800eb70:	4620      	mov	r0, r4
 800eb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb76:	f000 b817 	b.w	800eba8 <_kill_r>
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d00a      	beq.n	800eb94 <_raise_r+0x4c>
 800eb7e:	1c59      	adds	r1, r3, #1
 800eb80:	d103      	bne.n	800eb8a <_raise_r+0x42>
 800eb82:	2316      	movs	r3, #22
 800eb84:	6003      	str	r3, [r0, #0]
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7e7      	b.n	800eb5a <_raise_r+0x12>
 800eb8a:	2400      	movs	r4, #0
 800eb8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb90:	4628      	mov	r0, r5
 800eb92:	4798      	blx	r3
 800eb94:	2000      	movs	r0, #0
 800eb96:	e7e0      	b.n	800eb5a <_raise_r+0x12>

0800eb98 <raise>:
 800eb98:	4b02      	ldr	r3, [pc, #8]	; (800eba4 <raise+0xc>)
 800eb9a:	4601      	mov	r1, r0
 800eb9c:	6818      	ldr	r0, [r3, #0]
 800eb9e:	f7ff bfd3 	b.w	800eb48 <_raise_r>
 800eba2:	bf00      	nop
 800eba4:	200001d0 	.word	0x200001d0

0800eba8 <_kill_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d07      	ldr	r5, [pc, #28]	; (800ebc8 <_kill_r+0x20>)
 800ebac:	2300      	movs	r3, #0
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4608      	mov	r0, r1
 800ebb2:	4611      	mov	r1, r2
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	f7f3 ff07 	bl	80029c8 <_kill>
 800ebba:	1c43      	adds	r3, r0, #1
 800ebbc:	d102      	bne.n	800ebc4 <_kill_r+0x1c>
 800ebbe:	682b      	ldr	r3, [r5, #0]
 800ebc0:	b103      	cbz	r3, 800ebc4 <_kill_r+0x1c>
 800ebc2:	6023      	str	r3, [r4, #0]
 800ebc4:	bd38      	pop	{r3, r4, r5, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000b3c 	.word	0x20000b3c

0800ebcc <_getpid_r>:
 800ebcc:	f7f3 bef4 	b.w	80029b8 <_getpid>

0800ebd0 <__swhatbuf_r>:
 800ebd0:	b570      	push	{r4, r5, r6, lr}
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd8:	2900      	cmp	r1, #0
 800ebda:	b096      	sub	sp, #88	; 0x58
 800ebdc:	4615      	mov	r5, r2
 800ebde:	461e      	mov	r6, r3
 800ebe0:	da0d      	bge.n	800ebfe <__swhatbuf_r+0x2e>
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ebe8:	f04f 0100 	mov.w	r1, #0
 800ebec:	bf0c      	ite	eq
 800ebee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ebf2:	2340      	movne	r3, #64	; 0x40
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	6031      	str	r1, [r6, #0]
 800ebf8:	602b      	str	r3, [r5, #0]
 800ebfa:	b016      	add	sp, #88	; 0x58
 800ebfc:	bd70      	pop	{r4, r5, r6, pc}
 800ebfe:	466a      	mov	r2, sp
 800ec00:	f000 f848 	bl	800ec94 <_fstat_r>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	dbec      	blt.n	800ebe2 <__swhatbuf_r+0x12>
 800ec08:	9901      	ldr	r1, [sp, #4]
 800ec0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec12:	4259      	negs	r1, r3
 800ec14:	4159      	adcs	r1, r3
 800ec16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec1a:	e7eb      	b.n	800ebf4 <__swhatbuf_r+0x24>

0800ec1c <__smakebuf_r>:
 800ec1c:	898b      	ldrh	r3, [r1, #12]
 800ec1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec20:	079d      	lsls	r5, r3, #30
 800ec22:	4606      	mov	r6, r0
 800ec24:	460c      	mov	r4, r1
 800ec26:	d507      	bpl.n	800ec38 <__smakebuf_r+0x1c>
 800ec28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	2301      	movs	r3, #1
 800ec32:	6163      	str	r3, [r4, #20]
 800ec34:	b002      	add	sp, #8
 800ec36:	bd70      	pop	{r4, r5, r6, pc}
 800ec38:	ab01      	add	r3, sp, #4
 800ec3a:	466a      	mov	r2, sp
 800ec3c:	f7ff ffc8 	bl	800ebd0 <__swhatbuf_r>
 800ec40:	9900      	ldr	r1, [sp, #0]
 800ec42:	4605      	mov	r5, r0
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7fe fd99 	bl	800d77c <_malloc_r>
 800ec4a:	b948      	cbnz	r0, 800ec60 <__smakebuf_r+0x44>
 800ec4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec50:	059a      	lsls	r2, r3, #22
 800ec52:	d4ef      	bmi.n	800ec34 <__smakebuf_r+0x18>
 800ec54:	f023 0303 	bic.w	r3, r3, #3
 800ec58:	f043 0302 	orr.w	r3, r3, #2
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	e7e3      	b.n	800ec28 <__smakebuf_r+0xc>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	9b00      	ldr	r3, [sp, #0]
 800ec6c:	6163      	str	r3, [r4, #20]
 800ec6e:	9b01      	ldr	r3, [sp, #4]
 800ec70:	6120      	str	r0, [r4, #16]
 800ec72:	b15b      	cbz	r3, 800ec8c <__smakebuf_r+0x70>
 800ec74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 f81d 	bl	800ecb8 <_isatty_r>
 800ec7e:	b128      	cbz	r0, 800ec8c <__smakebuf_r+0x70>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f023 0303 	bic.w	r3, r3, #3
 800ec86:	f043 0301 	orr.w	r3, r3, #1
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	431d      	orrs	r5, r3
 800ec90:	81a5      	strh	r5, [r4, #12]
 800ec92:	e7cf      	b.n	800ec34 <__smakebuf_r+0x18>

0800ec94 <_fstat_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d07      	ldr	r5, [pc, #28]	; (800ecb4 <_fstat_r+0x20>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	4611      	mov	r1, r2
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	f7f3 fef0 	bl	8002a86 <_fstat>
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	d102      	bne.n	800ecb0 <_fstat_r+0x1c>
 800ecaa:	682b      	ldr	r3, [r5, #0]
 800ecac:	b103      	cbz	r3, 800ecb0 <_fstat_r+0x1c>
 800ecae:	6023      	str	r3, [r4, #0]
 800ecb0:	bd38      	pop	{r3, r4, r5, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20000b3c 	.word	0x20000b3c

0800ecb8 <_isatty_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4d06      	ldr	r5, [pc, #24]	; (800ecd4 <_isatty_r+0x1c>)
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	4608      	mov	r0, r1
 800ecc2:	602b      	str	r3, [r5, #0]
 800ecc4:	f7f3 feef 	bl	8002aa6 <_isatty>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d102      	bne.n	800ecd2 <_isatty_r+0x1a>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	b103      	cbz	r3, 800ecd2 <_isatty_r+0x1a>
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	bd38      	pop	{r3, r4, r5, pc}
 800ecd4:	20000b3c 	.word	0x20000b3c

0800ecd8 <_init>:
 800ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecda:	bf00      	nop
 800ecdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecde:	bc08      	pop	{r3}
 800ece0:	469e      	mov	lr, r3
 800ece2:	4770      	bx	lr

0800ece4 <_fini>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	bf00      	nop
 800ece8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecea:	bc08      	pop	{r3}
 800ecec:	469e      	mov	lr, r3
 800ecee:	4770      	bx	lr
