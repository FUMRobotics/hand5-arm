
Hand_Lmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08010020  08010020  00020020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010624  08010624  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010624  08010624  00020624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801062c  0801062c  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801062c  0801062c  0002062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010630  08010630  00020630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08010634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb4  200001d8  0801080c  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000318c  0801080c  0003318c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a41  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005582  00000000  00000000  00057c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f38  00000000  00000000  0005d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000181b  00000000  00000000  0005f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df16  00000000  00000000  00060963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000265d3  00000000  00000000  0008e879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001162b5  00000000  00000000  000b4e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009764  00000000  00000000  001cb104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001d4868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010008 	.word	0x08010008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08010008 	.word	0x08010008

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ProcessUartData>:

/*
 * Function1--------------------------
 */
void ProcessUartData(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	if(strstr(uartRecieveBuffer,"{S"))
 8000ff6:	4946      	ldr	r1, [pc, #280]	; (8001110 <ProcessUartData+0x120>)
 8000ff8:	4846      	ldr	r0, [pc, #280]	; (8001114 <ProcessUartData+0x124>)
 8000ffa:	f00c fa18 	bl	800d42e <strstr>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <ProcessUartData+0x1c>
		control_mode=speed_mode;
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <ProcessUartData+0x128>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <ProcessUartData+0x22>
	else
		control_mode=position_mode;
 800100c:	4b42      	ldr	r3, [pc, #264]	; (8001118 <ProcessUartData+0x128>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
	char* result;
	result= memchr(uartRecieveBuffer, 'P', strlen(uartRecieveBuffer));
 8001012:	4840      	ldr	r0, [pc, #256]	; (8001114 <ProcessUartData+0x124>)
 8001014:	f7ff f92c 	bl	8000270 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	2150      	movs	r1, #80	; 0x50
 800101e:	483d      	ldr	r0, [pc, #244]	; (8001114 <ProcessUartData+0x124>)
 8001020:	f7ff f8d6 	bl	80001d0 <memchr>
 8001024:	6078      	str	r0, [r7, #4]
	Fingers_Status.Pinky.SetPoint = atof(result+2);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3302      	adds	r3, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f00a fe4e 	bl	800bccc <atof>
 8001030:	ec53 2b10 	vmov	r2, r3, d0
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdd6 	bl	8000be8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <ProcessUartData+0x12c>)
 8001040:	6513      	str	r3, [r2, #80]	; 0x50
	result= memchr(uartRecieveBuffer, 'R', strlen(uartRecieveBuffer));
 8001042:	4834      	ldr	r0, [pc, #208]	; (8001114 <ProcessUartData+0x124>)
 8001044:	f7ff f914 	bl	8000270 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	2152      	movs	r1, #82	; 0x52
 800104e:	4831      	ldr	r0, [pc, #196]	; (8001114 <ProcessUartData+0x124>)
 8001050:	f7ff f8be 	bl	80001d0 <memchr>
 8001054:	6078      	str	r0, [r7, #4]
	Fingers_Status.Ring.SetPoint = atof(result+2);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3302      	adds	r3, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f00a fe36 	bl	800bccc <atof>
 8001060:	ec53 2b10 	vmov	r2, r3, d0
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fdbe 	bl	8000be8 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	4a2b      	ldr	r2, [pc, #172]	; (800111c <ProcessUartData+0x12c>)
 8001070:	63d3      	str	r3, [r2, #60]	; 0x3c
	result= memchr(uartRecieveBuffer, 'M', strlen(uartRecieveBuffer));
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <ProcessUartData+0x124>)
 8001074:	f7ff f8fc 	bl	8000270 <strlen>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	214d      	movs	r1, #77	; 0x4d
 800107e:	4825      	ldr	r0, [pc, #148]	; (8001114 <ProcessUartData+0x124>)
 8001080:	f7ff f8a6 	bl	80001d0 <memchr>
 8001084:	6078      	str	r0, [r7, #4]
	Fingers_Status.Middle.SetPoint= atof(result+2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3302      	adds	r3, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f00a fe1e 	bl	800bccc <atof>
 8001090:	ec53 2b10 	vmov	r2, r3, d0
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fda6 	bl	8000be8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <ProcessUartData+0x12c>)
 80010a0:	6293      	str	r3, [r2, #40]	; 0x28
	result= memchr(uartRecieveBuffer, 'I', strlen(uartRecieveBuffer));
 80010a2:	481c      	ldr	r0, [pc, #112]	; (8001114 <ProcessUartData+0x124>)
 80010a4:	f7ff f8e4 	bl	8000270 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	2149      	movs	r1, #73	; 0x49
 80010ae:	4819      	ldr	r0, [pc, #100]	; (8001114 <ProcessUartData+0x124>)
 80010b0:	f7ff f88e 	bl	80001d0 <memchr>
 80010b4:	6078      	str	r0, [r7, #4]
	Fingers_Status.Index.SetPoint= atof(result+2);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3302      	adds	r3, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00a fe06 	bl	800bccc <atof>
 80010c0:	ec53 2b10 	vmov	r2, r3, d0
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd8e 	bl	8000be8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <ProcessUartData+0x12c>)
 80010d0:	6153      	str	r3, [r2, #20]
	result= memchr(uartRecieveBuffer, 'T', strlen(uartRecieveBuffer));
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <ProcessUartData+0x124>)
 80010d4:	f7ff f8cc 	bl	8000270 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	2154      	movs	r1, #84	; 0x54
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <ProcessUartData+0x124>)
 80010e0:	f7ff f876 	bl	80001d0 <memchr>
 80010e4:	6078      	str	r0, [r7, #4]
	Fingers_Status.Thumb.SetPoint= atof(result+2);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3302      	adds	r3, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a fdee 	bl	800bccc <atof>
 80010f0:	ec53 2b10 	vmov	r2, r3, d0
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd76 	bl	8000be8 <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <ProcessUartData+0x12c>)
 8001100:	6013      	str	r3, [r2, #0]
	send_data_UART=1;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <ProcessUartData+0x130>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	08010020 	.word	0x08010020
 8001114:	200001f8 	.word	0x200001f8
 8001118:	20000291 	.word	0x20000291
 800111c:	200015e4 	.word	0x200015e4
 8001120:	20000290 	.word	0x20000290

08001124 <HAL_UART_RxCpltCallback>:
/*
 * Function2--------------------------
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_UART_RxCpltCallback+0x9c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d140      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x94>
		uartRecieveBuffer[uartCounter]=RXuart;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_UART_RxCpltCallback+0xa4>)
 800113e:	7819      	ldrb	r1, [r3, #0]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001142:	5499      	strb	r1, [r3, r2]
		if(uartCounter>1)
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d92a      	bls.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
		{
			if (uartRecieveBuffer[uartCounter] == '\n'&&uartRecieveBuffer[uartCounter-1] == '\r'&& uartRecieveBuffer[uartCounter-2] == '}') {
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d123      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	2b0d      	cmp	r3, #13
 8001166:	d11c      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3b02      	subs	r3, #2
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	2b7d      	cmp	r3, #125	; 0x7d
 8001174:	d115      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x7e>
				ProcessUartData();
 8001176:	f7ff ff3b 	bl	8000ff0 <ProcessUartData>
				ManualControl=1;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_RxCpltCallback+0xac>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
				uartCounter=-1;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	801a      	strh	r2, [r3, #0]

				for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001188:	2300      	movs	r3, #0
 800118a:	81fb      	strh	r3, [r7, #14]
 800118c:	e006      	b.n	800119c <HAL_UART_RxCpltCallback+0x78>
					uartRecieveBuffer[cleanCounter]=0;
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_UART_RxCpltCallback+0xa8>)
 8001192:	2100      	movs	r1, #0
 8001194:	54d1      	strb	r1, [r2, r3]
				for(uint16_t cleanCounter=0;cleanCounter<150;cleanCounter++)
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	3301      	adds	r3, #1
 800119a:	81fb      	strh	r3, [r7, #14]
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	2b95      	cmp	r3, #149	; 0x95
 80011a0:	d9f5      	bls.n	800118e <HAL_UART_RxCpltCallback+0x6a>
			}
		}
		uartCounter++;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_UART_RxCpltCallback+0xa0>)
 80011ac:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4905      	ldr	r1, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0xa4>)
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <HAL_UART_RxCpltCallback+0xb0>)
 80011b4:	f006 fce2 	bl	8007b7c <HAL_UART_Receive_IT>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004c00 	.word	0x40004c00
 80011c4:	200001f4 	.word	0x200001f4
 80011c8:	2000028e 	.word	0x2000028e
 80011cc:	200001f8 	.word	0x200001f8
 80011d0:	20001698 	.word	0x20001698
 80011d4:	2000155c 	.word	0x2000155c

080011d8 <HAL_UART_TxCpltCallback>:
/*
 * Function2--------------------------
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_UART_TxCpltCallback+0x24>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d102      	bne.n	80011f0 <HAL_UART_TxCpltCallback+0x18>
	{
		TX_State=idel;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_UART_TxCpltCallback+0x28>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	}
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40013800 	.word	0x40013800
 8001200:	2000028f 	.word	0x2000028f

08001204 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001228:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <MX_ADC1_Init+0xe4>)
 800122a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001246:	2204      	movs	r2, #4
 8001248:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800124c:	2200      	movs	r2, #0
 800124e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001252:	2201      	movs	r2, #1
 8001254:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001258:	2201      	movs	r2, #1
 800125a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800126c:	2200      	movs	r2, #0
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC1_Init+0xe0>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_ADC1_Init+0xe0>)
 8001288:	f002 f978 	bl	800357c <HAL_ADC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001292:	f000 ff27 	bl	80020e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <MX_ADC1_Init+0xe0>)
 80012a2:	f003 fa49 	bl	8004738 <HAL_ADCEx_MultiModeConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012ac:	f000 ff1a 	bl	80020e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_ADC1_Init+0xe8>)
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2306      	movs	r3, #6
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80012b8:	2306      	movs	r3, #6
 80012ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012bc:	237f      	movs	r3, #127	; 0x7f
 80012be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c0:	2304      	movs	r3, #4
 80012c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_ADC1_Init+0xe0>)
 80012ce:	f002 fc79 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012d8:	f000 ff04 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000294 	.word	0x20000294
 80012e8:	50040000 	.word	0x50040000
 80012ec:	0c900008 	.word	0x0c900008

080012f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001308:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_ADC2_Init+0xc0>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_ADC2_Init+0xbc>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_ADC2_Init+0xbc>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001326:	2204      	movs	r2, #4
 8001328:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_ADC2_Init+0xbc>)
 800132c:	2200      	movs	r2, #0
 800132e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001338:	2201      	movs	r2, #1
 800133a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_ADC2_Init+0xbc>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_ADC2_Init+0xbc>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_ADC2_Init+0xbc>)
 800135a:	2200      	movs	r2, #0
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001368:	f002 f908 	bl	800357c <HAL_ADC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001372:	f000 feb7 	bl	80020e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_ADC2_Init+0xc4>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	237f      	movs	r3, #127	; 0x7f
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001386:	2304      	movs	r3, #4
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_ADC2_Init+0xbc>)
 8001394:	f002 fc16 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800139e:	f000 fea1 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002f8 	.word	0x200002f8
 80013b0:	50040100 	.word	0x50040100
 80013b4:	21800100 	.word	0x21800100

080013b8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_ADC_MspInit+0x150>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d146      	bne.n	8001468 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_ADC_MspInit+0x154>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_ADC_MspInit+0x154>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013e4:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_ADC_MspInit+0x154>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013ec:	4b48      	ldr	r3, [pc, #288]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80013f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_ADC_MspInit+0x158>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a41      	ldr	r2, [pc, #260]	; (8001510 <HAL_ADC_MspInit+0x158>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_ADC_MspInit+0x158>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_ADC_MspInit+0x158>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	4a3b      	ldr	r2, [pc, #236]	; (8001510 <HAL_ADC_MspInit+0x158>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_ADC_MspInit+0x158>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> ADC1_IN4
    PA2     ------> ADC1_IN7
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Iprop_Motor4_Pin|Iprop_Motor5_Pin;
 8001434:	230c      	movs	r3, #12
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001438:	230b      	movs	r3, #11
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4833      	ldr	r0, [pc, #204]	; (8001514 <HAL_ADC_MspInit+0x15c>)
 8001448:	f003 fc84 	bl	8004d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Iprop_Motor3_Pin|Iprop_Motor2_Pin|Iprop_Motor1_Pin;
 800144c:	2334      	movs	r3, #52	; 0x34
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001450:	230b      	movs	r3, #11
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f003 fc77 	bl	8004d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001466:	e04a      	b.n	80014fe <HAL_ADC_MspInit+0x146>
  else if(adcHandle->Instance==ADC2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_ADC_MspInit+0x160>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d145      	bne.n	80014fe <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_ADC_MspInit+0x154>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_ADC_MspInit+0x154>)
 800147a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_ADC_MspInit+0x154>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10b      	bne.n	800149c <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_ADC_MspInit+0x158>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_ADC_MspInit+0x158>)
 800148a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800148e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_ADC_MspInit+0x158>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_ADC_MspInit+0x158>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_MspInit+0x158>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACS_Motor5_Pin|ACS_Motor4_Pin;
 80014cc:	2303      	movs	r3, #3
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014d0:	230b      	movs	r3, #11
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <HAL_ADC_MspInit+0x15c>)
 80014e0:	f003 fc38 	bl	8004d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ACS_Motor3_Pin|ACS_Motor2_Pin|ACS_Motor1_Pin|battery_Pin;
 80014e4:	23ca      	movs	r3, #202	; 0xca
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014e8:	230b      	movs	r3, #11
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f003 fc2b 	bl	8004d54 <HAL_GPIO_Init>
}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	; 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	50040000 	.word	0x50040000
 800150c:	2000035c 	.word	0x2000035c
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800
 8001518:	50040100 	.word	0x50040100

0800151c <ADC_Select_Pinky_CH>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Select_Pinky_CH (void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <ADC_Select_Pinky_CH+0x48>)
 8001534:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001536:	2306      	movs	r3, #6
 8001538:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800153a:	2306      	movs	r3, #6
 800153c:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153e:	b672      	cpsid	i
}
 8001540:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <ADC_Select_Pinky_CH+0x4c>)
 8001548:	f002 fb3c 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <ADC_Select_Pinky_CH+0x3a>
	  {
	    Error_Handler();
 8001552:	f000 fdc7 	bl	80020e4 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001556:	b662      	cpsie	i
}
 8001558:	bf00      	nop
	  }
	  __enable_irq();
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2e300800 	.word	0x2e300800
 8001568:	200002f8 	.word	0x200002f8
 800156c:	00000000 	.word	0x00000000

08001570 <ADC_ReadCurrent_Pinky>:
void ADC_ReadCurrent_Pinky()
{
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	af00      	add	r7, sp, #0
	ADC_Select_Pinky_CH();
 8001574:	f7ff ffd2 	bl	800151c <ADC_Select_Pinky_CH>
	HAL_ADC_Start(&hadc2);
 8001578:	4831      	ldr	r0, [pc, #196]	; (8001640 <ADC_ReadCurrent_Pinky+0xd0>)
 800157a:	f002 f94f 	bl	800381c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800157e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001582:	482f      	ldr	r0, [pc, #188]	; (8001640 <ADC_ReadCurrent_Pinky+0xd0>)
 8001584:	f002 fa38 	bl	80039f8 <HAL_ADC_PollForConversion>
	Current_motor[1] = HAL_ADC_GetValue(&hadc2);
 8001588:	482d      	ldr	r0, [pc, #180]	; (8001640 <ADC_ReadCurrent_Pinky+0xd0>)
 800158a:	f002 fb0d 	bl	8003ba8 <HAL_ADC_GetValue>
 800158e:	4603      	mov	r3, r0
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <ADC_ReadCurrent_Pinky+0xd4>)
 8001592:	6053      	str	r3, [r2, #4]
	HAL_ADC_Stop(&hadc2);
 8001594:	482a      	ldr	r0, [pc, #168]	; (8001640 <ADC_ReadCurrent_Pinky+0xd0>)
 8001596:	f002 f9fb 	bl	8003990 <HAL_ADC_Stop>
	Fingers_Status.Pinky.Current=(Fingers_Status.Pinky.Current+(0.05*Current_motor[1]))/1.05;
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 800159c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffbf 	bl	8000524 <__aeabi_i2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <ADC_ReadCurrent_Pinky+0xd4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffa8 	bl	8000504 <__aeabi_ui2d>
 80015b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001630 <ADC_ReadCurrent_Pinky+0xc0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f81d 	bl	80005f8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fe61 	bl	800028c <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a319      	add	r3, pc, #100	; (adr r3, 8001638 <ADC_ReadCurrent_Pinky+0xc8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f938 	bl	800084c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fae0 	bl	8000ba8 <__aeabi_d2uiz>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 80015ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Current_motor[1]=Fingers_Status.Pinky.Current;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 80015f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <ADC_ReadCurrent_Pinky+0xd4>)
 80015fc:	605a      	str	r2, [r3, #4]
	if(Fingers_Status.Pinky.Current>3800 || Fingers_Status.Pinky.Current<800)
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 8001600:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001604:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001608:	4293      	cmp	r3, r2
 800160a:	d805      	bhi.n	8001618 <ADC_ReadCurrent_Pinky+0xa8>
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 800160e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001612:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001616:	d204      	bcs.n	8001622 <ADC_ReadCurrent_Pinky+0xb2>
		Fingers_Status.Pinky.Stuck_Finger=1;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 800161a:	2201      	movs	r2, #1
 800161c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001620:	e004      	b.n	800162c <ADC_ReadCurrent_Pinky+0xbc>
	else
		Fingers_Status.Pinky.Stuck_Finger=0;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <ADC_ReadCurrent_Pinky+0xd8>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	bdb0      	pop	{r4, r5, r7, pc}
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fa99999 	.word	0x3fa99999
 8001638:	cccccccd 	.word	0xcccccccd
 800163c:	3ff0cccc 	.word	0x3ff0cccc
 8001640:	200002f8 	.word	0x200002f8
 8001644:	20001648 	.word	0x20001648
 8001648:	200015e4 	.word	0x200015e4

0800164c <ADC_Select_Ring_CH>:
void ADC_Select_Ring_CH (void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <ADC_Select_Ring_CH+0x48>)
 8001664:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001666:	2306      	movs	r3, #6
 8001668:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800166a:	2306      	movs	r3, #6
 800166c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800166e:	b672      	cpsid	i
}
 8001670:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <ADC_Select_Ring_CH+0x4c>)
 8001678:	f002 faa4 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <ADC_Select_Ring_CH+0x3a>
	  {
	    Error_Handler();
 8001682:	f000 fd2f 	bl	80020e4 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001686:	b662      	cpsie	i
}
 8001688:	bf00      	nop
	  }
	  __enable_irq();
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	21800100 	.word	0x21800100
 8001698:	200002f8 	.word	0x200002f8
 800169c:	00000000 	.word	0x00000000

080016a0 <ADC_ReadCurrent_Ring>:
void ADC_ReadCurrent_Ring()
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	ADC_Select_Ring_CH();
 80016a4:	f7ff ffd2 	bl	800164c <ADC_Select_Ring_CH>
	HAL_ADC_Start(&hadc2);
 80016a8:	4831      	ldr	r0, [pc, #196]	; (8001770 <ADC_ReadCurrent_Ring+0xd0>)
 80016aa:	f002 f8b7 	bl	800381c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80016ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b2:	482f      	ldr	r0, [pc, #188]	; (8001770 <ADC_ReadCurrent_Ring+0xd0>)
 80016b4:	f002 f9a0 	bl	80039f8 <HAL_ADC_PollForConversion>
	Current_motor[2] = HAL_ADC_GetValue(&hadc2);
 80016b8:	482d      	ldr	r0, [pc, #180]	; (8001770 <ADC_ReadCurrent_Ring+0xd0>)
 80016ba:	f002 fa75 	bl	8003ba8 <HAL_ADC_GetValue>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <ADC_ReadCurrent_Ring+0xd4>)
 80016c2:	6093      	str	r3, [r2, #8]
	HAL_ADC_Stop(&hadc2);
 80016c4:	482a      	ldr	r0, [pc, #168]	; (8001770 <ADC_ReadCurrent_Ring+0xd0>)
 80016c6:	f002 f963 	bl	8003990 <HAL_ADC_Stop>
	Fingers_Status.Ring.Current=(Fingers_Status.Ring.Current+(0.05*Current_motor[2]))/1.05;
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 80016cc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff27 	bl	8000524 <__aeabi_i2d>
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <ADC_ReadCurrent_Ring+0xd4>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff10 	bl	8000504 <__aeabi_ui2d>
 80016e4:	a31e      	add	r3, pc, #120	; (adr r3, 8001760 <ADC_ReadCurrent_Ring+0xc0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff85 	bl	80005f8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fdc9 	bl	800028c <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a319      	add	r3, pc, #100	; (adr r3, 8001768 <ADC_ReadCurrent_Ring+0xc8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f8a0 	bl	800084c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa48 	bl	8000ba8 <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 800171e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Current_motor[2]=Fingers_Status.Ring.Current;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 8001724:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001728:	461a      	mov	r2, r3
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <ADC_ReadCurrent_Ring+0xd4>)
 800172c:	609a      	str	r2, [r3, #8]
	if(Fingers_Status.Ring.Current>3800 || Fingers_Status.Ring.Current<800)
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 8001730:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001734:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001738:	4293      	cmp	r3, r2
 800173a:	d805      	bhi.n	8001748 <ADC_ReadCurrent_Ring+0xa8>
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 800173e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001742:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001746:	d204      	bcs.n	8001752 <ADC_ReadCurrent_Ring+0xb2>
		Fingers_Status.Ring.Stuck_Finger=1;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001750:	e004      	b.n	800175c <ADC_ReadCurrent_Ring+0xbc>
	else
		Fingers_Status.Ring.Stuck_Finger=0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <ADC_ReadCurrent_Ring+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	bdb0      	pop	{r4, r5, r7, pc}
 8001760:	9999999a 	.word	0x9999999a
 8001764:	3fa99999 	.word	0x3fa99999
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	3ff0cccc 	.word	0x3ff0cccc
 8001770:	200002f8 	.word	0x200002f8
 8001774:	20001648 	.word	0x20001648
 8001778:	200015e4 	.word	0x200015e4

0800177c <ADC_Select_Middle_CH>:
void ADC_Select_Middle_CH (void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <ADC_Select_Middle_CH+0x48>)
 8001794:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001796:	2306      	movs	r3, #6
 8001798:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800179a:	2306      	movs	r3, #6
 800179c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
}
 80017a0:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <ADC_Select_Middle_CH+0x4c>)
 80017a8:	f002 fa0c 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <ADC_Select_Middle_CH+0x3a>
	  {
	    Error_Handler();
 80017b2:	f000 fc97 	bl	80020e4 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80017b6:	b662      	cpsie	i
}
 80017b8:	bf00      	nop
	  }
	  __enable_irq();
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	19200040 	.word	0x19200040
 80017c8:	200002f8 	.word	0x200002f8
 80017cc:	00000000 	.word	0x00000000

080017d0 <ADC_ReadCurrent_Middle>:
void ADC_ReadCurrent_Middle()
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	ADC_Select_Middle_CH();
 80017d4:	f7ff ffd2 	bl	800177c <ADC_Select_Middle_CH>
	HAL_ADC_Start(&hadc2);
 80017d8:	482f      	ldr	r0, [pc, #188]	; (8001898 <ADC_ReadCurrent_Middle+0xc8>)
 80017da:	f002 f81f 	bl	800381c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 80017de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e2:	482d      	ldr	r0, [pc, #180]	; (8001898 <ADC_ReadCurrent_Middle+0xc8>)
 80017e4:	f002 f908 	bl	80039f8 <HAL_ADC_PollForConversion>
	Current_motor[3] = HAL_ADC_GetValue(&hadc2);
 80017e8:	482b      	ldr	r0, [pc, #172]	; (8001898 <ADC_ReadCurrent_Middle+0xc8>)
 80017ea:	f002 f9dd 	bl	8003ba8 <HAL_ADC_GetValue>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <ADC_ReadCurrent_Middle+0xcc>)
 80017f2:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Stop(&hadc2);
 80017f4:	4828      	ldr	r0, [pc, #160]	; (8001898 <ADC_ReadCurrent_Middle+0xc8>)
 80017f6:	f002 f8cb 	bl	8003990 <HAL_ADC_Stop>
	Fingers_Status.Middle.Current=(Fingers_Status.Middle.Current+(0.05*Current_motor[3]))/1.05;
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 80017fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe90 	bl	8000524 <__aeabi_i2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <ADC_ReadCurrent_Middle+0xcc>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe79 	bl	8000504 <__aeabi_ui2d>
 8001812:	a31d      	add	r3, pc, #116	; (adr r3, 8001888 <ADC_ReadCurrent_Middle+0xb8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe feee 	bl	80005f8 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4620      	mov	r0, r4
 8001822:	4629      	mov	r1, r5
 8001824:	f7fe fd32 	bl	800028c <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	a317      	add	r3, pc, #92	; (adr r3, 8001890 <ADC_ReadCurrent_Middle+0xc0>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f809 	bl	800084c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9b1 	bl	8000ba8 <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 800184c:	871a      	strh	r2, [r3, #56]	; 0x38
	Current_motor[3]=Fingers_Status.Middle.Current;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 8001850:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001852:	461a      	mov	r2, r3
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <ADC_ReadCurrent_Middle+0xcc>)
 8001856:	60da      	str	r2, [r3, #12]
	if(Fingers_Status.Middle.Current>3800 || Fingers_Status.Middle.Current<800)
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 800185a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800185c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001860:	4293      	cmp	r3, r2
 8001862:	d804      	bhi.n	800186e <ADC_ReadCurrent_Middle+0x9e>
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 8001866:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001868:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800186c:	d204      	bcs.n	8001878 <ADC_ReadCurrent_Middle+0xa8>
		Fingers_Status.Middle.Stuck_Finger=1;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001876:	e004      	b.n	8001882 <ADC_ReadCurrent_Middle+0xb2>
	else
		Fingers_Status.Middle.Stuck_Finger=0;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <ADC_ReadCurrent_Middle+0xd0>)
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	bf00      	nop
 8001888:	9999999a 	.word	0x9999999a
 800188c:	3fa99999 	.word	0x3fa99999
 8001890:	cccccccd 	.word	0xcccccccd
 8001894:	3ff0cccc 	.word	0x3ff0cccc
 8001898:	200002f8 	.word	0x200002f8
 800189c:	20001648 	.word	0x20001648
 80018a0:	200015e4 	.word	0x200015e4

080018a4 <ADC_Select_Index_CH>:
void ADC_Select_Index_CH (void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <ADC_Select_Index_CH+0x48>)
 80018bc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018be:	2306      	movs	r3, #6
 80018c0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80018c2:	2306      	movs	r3, #6
 80018c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80018c6:	b672      	cpsid	i
}
 80018c8:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <ADC_Select_Index_CH+0x4c>)
 80018d0:	f002 f978 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <ADC_Select_Index_CH+0x3a>
	  {
	    Error_Handler();
 80018da:	f000 fc03 	bl	80020e4 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80018de:	b662      	cpsie	i
}
 80018e0:	bf00      	nop
	  }
	  __enable_irq();
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08600004 	.word	0x08600004
 80018f0:	200002f8 	.word	0x200002f8
 80018f4:	00000000 	.word	0x00000000

080018f8 <ADC_ReadCurrent_Index>:
void ADC_ReadCurrent_Index()
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	ADC_Select_Index_CH();
 80018fc:	f7ff ffd2 	bl	80018a4 <ADC_Select_Index_CH>
	HAL_ADC_Start(&hadc2);
 8001900:	482f      	ldr	r0, [pc, #188]	; (80019c0 <ADC_ReadCurrent_Index+0xc8>)
 8001902:	f001 ff8b 	bl	800381c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8001906:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <ADC_ReadCurrent_Index+0xc8>)
 800190c:	f002 f874 	bl	80039f8 <HAL_ADC_PollForConversion>
	Current_motor[4] = HAL_ADC_GetValue(&hadc2);
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <ADC_ReadCurrent_Index+0xc8>)
 8001912:	f002 f949 	bl	8003ba8 <HAL_ADC_GetValue>
 8001916:	4603      	mov	r3, r0
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <ADC_ReadCurrent_Index+0xcc>)
 800191a:	6113      	str	r3, [r2, #16]
	HAL_ADC_Stop(&hadc2);
 800191c:	4828      	ldr	r0, [pc, #160]	; (80019c0 <ADC_ReadCurrent_Index+0xc8>)
 800191e:	f002 f837 	bl	8003990 <HAL_ADC_Stop>
	Fingers_Status.Index.Current=(Fingers_Status.Index.Current+(0.05*Current_motor[4]))/1.05;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 8001924:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdfc 	bl	8000524 <__aeabi_i2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <ADC_ReadCurrent_Index+0xcc>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fde5 	bl	8000504 <__aeabi_ui2d>
 800193a:	a31d      	add	r3, pc, #116	; (adr r3, 80019b0 <ADC_ReadCurrent_Index+0xb8>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fe5a 	bl	80005f8 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fc9e 	bl	800028c <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a317      	add	r3, pc, #92	; (adr r3, 80019b8 <ADC_ReadCurrent_Index+0xc0>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe ff75 	bl	800084c <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f91d 	bl	8000ba8 <__aeabi_d2uiz>
 800196e:	4603      	mov	r3, r0
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 8001974:	849a      	strh	r2, [r3, #36]	; 0x24
	Current_motor[4]=Fingers_Status.Index.Current;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 8001978:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800197a:	461a      	mov	r2, r3
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <ADC_ReadCurrent_Index+0xcc>)
 800197e:	611a      	str	r2, [r3, #16]
	if(Fingers_Status.Index.Current>3800 || Fingers_Status.Index.Current<800)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 8001982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001984:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001988:	4293      	cmp	r3, r2
 800198a:	d804      	bhi.n	8001996 <ADC_ReadCurrent_Index+0x9e>
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 800198e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001990:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001994:	d204      	bcs.n	80019a0 <ADC_ReadCurrent_Index+0xa8>
		Fingers_Status.Index.Stuck_Finger=1;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800199e:	e004      	b.n	80019aa <ADC_ReadCurrent_Index+0xb2>
	else
		Fingers_Status.Index.Stuck_Finger=0;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <ADC_ReadCurrent_Index+0xd0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	bdb0      	pop	{r4, r5, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	9999999a 	.word	0x9999999a
 80019b4:	3fa99999 	.word	0x3fa99999
 80019b8:	cccccccd 	.word	0xcccccccd
 80019bc:	3ff0cccc 	.word	0x3ff0cccc
 80019c0:	200002f8 	.word	0x200002f8
 80019c4:	20001648 	.word	0x20001648
 80019c8:	200015e4 	.word	0x200015e4

080019cc <ADC_Select_Thumb_CH>:
void ADC_Select_Thumb_CH (void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <ADC_Select_Thumb_CH+0x48>)
 80019e4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019e6:	2306      	movs	r3, #6
 80019e8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80019ea:	2306      	movs	r3, #6
 80019ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ee:	b672      	cpsid	i
}
 80019f0:	bf00      	nop
	  __disable_irq();
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4808      	ldr	r0, [pc, #32]	; (8001a18 <ADC_Select_Thumb_CH+0x4c>)
 80019f8:	f002 f8e4 	bl	8003bc4 <HAL_ADC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <ADC_Select_Thumb_CH+0x3a>
	  {
	    Error_Handler();
 8001a02:	f000 fb6f 	bl	80020e4 <Error_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a06:	b662      	cpsie	i
}
 8001a08:	bf00      	nop
	  }
	  __enable_irq();
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	04300002 	.word	0x04300002
 8001a18:	200002f8 	.word	0x200002f8
 8001a1c:	00000000 	.word	0x00000000

08001a20 <ADC_ReadCurrent_Thumb>:
void ADC_ReadCurrent_Thumb()
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	ADC_Select_Thumb_CH();
 8001a24:	f7ff ffd2 	bl	80019cc <ADC_Select_Thumb_CH>
	HAL_ADC_Start(&hadc2);
 8001a28:	482f      	ldr	r0, [pc, #188]	; (8001ae8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001a2a:	f001 fef7 	bl	800381c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8001a2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a32:	482d      	ldr	r0, [pc, #180]	; (8001ae8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001a34:	f001 ffe0 	bl	80039f8 <HAL_ADC_PollForConversion>
	Current_motor[5] = HAL_ADC_GetValue(&hadc2);
 8001a38:	482b      	ldr	r0, [pc, #172]	; (8001ae8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001a3a:	f002 f8b5 	bl	8003ba8 <HAL_ADC_GetValue>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <ADC_ReadCurrent_Thumb+0xcc>)
 8001a42:	6153      	str	r3, [r2, #20]
	HAL_ADC_Stop(&hadc2);
 8001a44:	4828      	ldr	r0, [pc, #160]	; (8001ae8 <ADC_ReadCurrent_Thumb+0xc8>)
 8001a46:	f001 ffa3 	bl	8003990 <HAL_ADC_Stop>
	Fingers_Status.Thumb.Current=(Fingers_Status.Thumb.Current+(0.05*Current_motor[5]))/1.05;
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a4c:	8a1b      	ldrh	r3, [r3, #16]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd68 	bl	8000524 <__aeabi_i2d>
 8001a54:	4604      	mov	r4, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <ADC_ReadCurrent_Thumb+0xcc>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd51 	bl	8000504 <__aeabi_ui2d>
 8001a62:	a31d      	add	r3, pc, #116	; (adr r3, 8001ad8 <ADC_ReadCurrent_Thumb+0xb8>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fc0a 	bl	800028c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	a317      	add	r3, pc, #92	; (adr r3, 8001ae0 <ADC_ReadCurrent_Thumb+0xc0>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fee1 	bl	800084c <__aeabi_ddiv>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f889 	bl	8000ba8 <__aeabi_d2uiz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001a9c:	821a      	strh	r2, [r3, #16]
	Current_motor[5]=Fingers_Status.Thumb.Current;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001aa0:	8a1b      	ldrh	r3, [r3, #16]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <ADC_ReadCurrent_Thumb+0xcc>)
 8001aa6:	615a      	str	r2, [r3, #20]
	if(Fingers_Status.Thumb.Current>3800 || Fingers_Status.Thumb.Current<800)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001aaa:	8a1b      	ldrh	r3, [r3, #16]
 8001aac:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d804      	bhi.n	8001abe <ADC_ReadCurrent_Thumb+0x9e>
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001ab6:	8a1b      	ldrh	r3, [r3, #16]
 8001ab8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001abc:	d203      	bcs.n	8001ac6 <ADC_ReadCurrent_Thumb+0xa6>
		Fingers_Status.Thumb.Stuck_Finger=1;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	735a      	strb	r2, [r3, #13]
 8001ac4:	e003      	b.n	8001ace <ADC_ReadCurrent_Thumb+0xae>
	else
		Fingers_Status.Thumb.Stuck_Finger=0;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <ADC_ReadCurrent_Thumb+0xd0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	735a      	strb	r2, [r3, #13]
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	9999999a 	.word	0x9999999a
 8001adc:	3fa99999 	.word	0x3fa99999
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	3ff0cccc 	.word	0x3ff0cccc
 8001ae8:	200002f8 	.word	0x200002f8
 8001aec:	20001648 	.word	0x20001648
 8001af0:	200015e4 	.word	0x200015e4

08001af4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <MX_CAN1_Init+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b00:	2210      	movs	r2, #16
 8001b02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b44:	f002 fea8 	bl	8004898 <HAL_CAN_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b4e:	f000 fac9 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000360 	.word	0x20000360
 8001b5c:	40006400 	.word	0x40006400

08001b60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_CAN_MspInit+0x80>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d129      	bne.n	8001bd6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_CAN_MspInit+0x84>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f003 f8bf 	bl	8004d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40006400 	.word	0x40006400
 8001be4:	40021000 	.word	0x40021000

08001be8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThumbFinger_T */
  ThumbFinger_THandle = osThreadNew(ThumbFinger, NULL, &ThumbFinger_T_attributes);
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <MX_FREERTOS_Init+0x68>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4818      	ldr	r0, [pc, #96]	; (8001c54 <MX_FREERTOS_Init+0x6c>)
 8001bf2:	f007 fb37 	bl	8009264 <osThreadNew>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <MX_FREERTOS_Init+0x70>)
 8001bfa:	6013      	str	r3, [r2, #0]

  /* creation of IndexFinger_T */
  IndexFinger_THandle = osThreadNew(IndexFinger, NULL, &IndexFinger_T_attributes);
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <MX_FREERTOS_Init+0x74>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4817      	ldr	r0, [pc, #92]	; (8001c60 <MX_FREERTOS_Init+0x78>)
 8001c02:	f007 fb2f 	bl	8009264 <osThreadNew>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <MX_FREERTOS_Init+0x7c>)
 8001c0a:	6013      	str	r3, [r2, #0]

  /* creation of MiddleFinger_T */
  MiddleFinger_THandle = osThreadNew(MiddleFinger, NULL, &MiddleFinger_T_attributes);
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <MX_FREERTOS_Init+0x80>)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <MX_FREERTOS_Init+0x84>)
 8001c12:	f007 fb27 	bl	8009264 <osThreadNew>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_FREERTOS_Init+0x88>)
 8001c1a:	6013      	str	r3, [r2, #0]

  /* creation of RingFinger_T */
  RingFinger_THandle = osThreadNew(RingFinger, NULL, &RingFinger_T_attributes);
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <MX_FREERTOS_Init+0x8c>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4815      	ldr	r0, [pc, #84]	; (8001c78 <MX_FREERTOS_Init+0x90>)
 8001c22:	f007 fb1f 	bl	8009264 <osThreadNew>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <MX_FREERTOS_Init+0x94>)
 8001c2a:	6013      	str	r3, [r2, #0]

  /* creation of PinkyFinger_T */
  PinkyFinger_THandle = osThreadNew(PinkyFinger, NULL, &PinkyFinger_T_attributes);
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <MX_FREERTOS_Init+0x98>)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <MX_FREERTOS_Init+0x9c>)
 8001c32:	f007 fb17 	bl	8009264 <osThreadNew>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <MX_FREERTOS_Init+0xa0>)
 8001c3a:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001c3c:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <MX_FREERTOS_Init+0xa4>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4813      	ldr	r0, [pc, #76]	; (8001c90 <MX_FREERTOS_Init+0xa8>)
 8001c42:	f007 fb0f 	bl	8009264 <osThreadNew>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_FREERTOS_Init+0xac>)
 8001c4a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	080100dc 	.word	0x080100dc
 8001c54:	08001c99 	.word	0x08001c99
 8001c58:	20000388 	.word	0x20000388
 8001c5c:	08010100 	.word	0x08010100
 8001c60:	08001cb9 	.word	0x08001cb9
 8001c64:	20000634 	.word	0x20000634
 8001c68:	08010124 	.word	0x08010124
 8001c6c:	08001cd9 	.word	0x08001cd9
 8001c70:	200008e0 	.word	0x200008e0
 8001c74:	08010148 	.word	0x08010148
 8001c78:	08001cf9 	.word	0x08001cf9
 8001c7c:	20000b8c 	.word	0x20000b8c
 8001c80:	0801016c 	.word	0x0801016c
 8001c84:	08001d19 	.word	0x08001d19
 8001c88:	20000e38 	.word	0x20000e38
 8001c8c:	08010190 	.word	0x08010190
 8001c90:	08001d39 	.word	0x08001d39
 8001c94:	200010e4 	.word	0x200010e4

08001c98 <ThumbFinger>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ThumbFinger */
void ThumbFinger(void *argument)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Thumb.Stuck_Finger)
//			Fingers_Status.Thumb.Direction=Stop;
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <ThumbFinger+0x1c>)
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f001 f814 	bl	8002cd0 <SetMotor>
		ADC_ReadCurrent_Thumb();
 8001ca8:	f7ff feba 	bl	8001a20 <ADC_ReadCurrent_Thumb>
		osDelay(1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f007 fb6b 	bl	8009388 <osDelay>
		SetMotor(Thumb, &Fingers_Status.Thumb);
 8001cb2:	e7f5      	b.n	8001ca0 <ThumbFinger+0x8>
 8001cb4:	200015e4 	.word	0x200015e4

08001cb8 <IndexFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IndexFinger */
void IndexFinger(void *argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Index.Stuck_Finger)
//			Fingers_Status.Index.Direction=Stop;
		SetMotor(Index, &Fingers_Status.Index);
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <IndexFinger+0x1c>)
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f001 f804 	bl	8002cd0 <SetMotor>
		ADC_ReadCurrent_Index();
 8001cc8:	f7ff fe16 	bl	80018f8 <ADC_ReadCurrent_Index>
		osDelay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f007 fb5b 	bl	8009388 <osDelay>
		SetMotor(Index, &Fingers_Status.Index);
 8001cd2:	e7f5      	b.n	8001cc0 <IndexFinger+0x8>
 8001cd4:	200015f8 	.word	0x200015f8

08001cd8 <MiddleFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MiddleFinger */
void MiddleFinger(void *argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Middle.Stuck_Finger)
//			Fingers_Status.Middle.Direction=Stop;
		SetMotor(Middle, &Fingers_Status.Middle);
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <MiddleFinger+0x1c>)
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f000 fff4 	bl	8002cd0 <SetMotor>
		ADC_ReadCurrent_Middle();
 8001ce8:	f7ff fd72 	bl	80017d0 <ADC_ReadCurrent_Middle>
		osDelay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f007 fb4b 	bl	8009388 <osDelay>
		SetMotor(Middle, &Fingers_Status.Middle);
 8001cf2:	e7f5      	b.n	8001ce0 <MiddleFinger+0x8>
 8001cf4:	2000160c 	.word	0x2000160c

08001cf8 <RingFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RingFinger */
void RingFinger(void *argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Ring.Stuck_Finger)
//			Fingers_Status.Ring.Direction=Stop;
		SetMotor(Ring, &Fingers_Status.Ring);
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <RingFinger+0x1c>)
 8001d02:	2003      	movs	r0, #3
 8001d04:	f000 ffe4 	bl	8002cd0 <SetMotor>
		ADC_ReadCurrent_Ring();
 8001d08:	f7ff fcca 	bl	80016a0 <ADC_ReadCurrent_Ring>
		osDelay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f007 fb3b 	bl	8009388 <osDelay>
		SetMotor(Ring, &Fingers_Status.Ring);
 8001d12:	e7f5      	b.n	8001d00 <RingFinger+0x8>
 8001d14:	20001620 	.word	0x20001620

08001d18 <PinkyFinger>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PinkyFinger */
void PinkyFinger(void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		////if(Fingers_Status.Pinky.Stuck_Finger)
//			Fingers_Status.Pinky.Direction=Stop;
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001d20:	4904      	ldr	r1, [pc, #16]	; (8001d34 <PinkyFinger+0x1c>)
 8001d22:	2004      	movs	r0, #4
 8001d24:	f000 ffd4 	bl	8002cd0 <SetMotor>
		ADC_ReadCurrent_Pinky();
 8001d28:	f7ff fc22 	bl	8001570 <ADC_ReadCurrent_Pinky>
		osDelay(1);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f007 fb2b 	bl	8009388 <osDelay>
		SetMotor(Pinky, &Fingers_Status.Pinky);
 8001d32:	e7f5      	b.n	8001d20 <PinkyFinger+0x8>
 8001d34:	20001634 	.word	0x20001634

08001d38 <CommunicationTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b094      	sub	sp, #80	; 0x50
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommunicationTask */
	char uartTX[50];
	/* Infinite loop */
	for(;;)
	{
		if(send_data_UART)
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <CommunicationTask+0x124>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8084 	beq.w	8001e52 <CommunicationTask+0x11a>
		{
			send_data_UART=0;
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <CommunicationTask+0x124>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			sprintf(uartTX,"{CP:%dCR:%dCM:%dCI:%dCT:%d}\n",Fingers_Status.Pinky.Current,Fingers_Status.Ring.Current,Fingers_Status.Middle.Current,Fingers_Status.Index.Current,Fingers_Status.Thumb.Current);
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <CommunicationTask+0x128>)
 8001d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001d56:	461c      	mov	r4, r3
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <CommunicationTask+0x128>)
 8001d5a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <CommunicationTask+0x128>)
 8001d62:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <CommunicationTask+0x128>)
 8001d68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <CommunicationTask+0x128>)
 8001d6e:	8a1b      	ldrh	r3, [r3, #16]
 8001d70:	f107 000c 	add.w	r0, r7, #12
 8001d74:	9302      	str	r3, [sp, #8]
 8001d76:	9101      	str	r1, [sp, #4]
 8001d78:	9200      	str	r2, [sp, #0]
 8001d7a:	462b      	mov	r3, r5
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4939      	ldr	r1, [pc, #228]	; (8001e64 <CommunicationTask+0x12c>)
 8001d80:	f00b fad8 	bl	800d334 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa71 	bl	8000270 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	2305      	movs	r3, #5
 8001d98:	4833      	ldr	r0, [pc, #204]	; (8001e68 <CommunicationTask+0x130>)
 8001d9a:	f005 fe65 	bl	8007a68 <HAL_UART_Transmit>
			osDelay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f007 faf2 	bl	8009388 <osDelay>
			sprintf(uartTX,"{PP:%dPR:%dPM:%dPI:%dPT:%d}\n",((uint16_t)(Fingers_Status.Pinky.position*100)),((uint16_t)(Fingers_Status.Ring.position*100)),((uint16_t)(Fingers_Status.Middle.position*100)),((uint16_t)(Fingers_Status.Index.position*100)),((uint16_t)(Fingers_Status.Thumb.position*100)));
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <CommunicationTask+0x128>)
 8001da6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001daa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001e6c <CommunicationTask+0x134>
 8001dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db6:	ee17 3a90 	vmov	r3, s15
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461c      	mov	r4, r3
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <CommunicationTask+0x128>)
 8001dc0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001dc4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e6c <CommunicationTask+0x134>
 8001dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd0:	ee17 3a90 	vmov	r3, s15
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <CommunicationTask+0x128>)
 8001dda:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dde:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e6c <CommunicationTask+0x134>
 8001de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dea:	ee17 3a90 	vmov	r3, s15
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <CommunicationTask+0x128>)
 8001df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001df8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e6c <CommunicationTask+0x134>
 8001dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e04:	ee17 3a90 	vmov	r3, s15
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <CommunicationTask+0x128>)
 8001e0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e12:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001e6c <CommunicationTask+0x134>
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f107 000c 	add.w	r0, r7, #12
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	9101      	str	r1, [sp, #4]
 8001e2c:	9200      	str	r2, [sp, #0]
 8001e2e:	462b      	mov	r3, r5
 8001e30:	4622      	mov	r2, r4
 8001e32:	490f      	ldr	r1, [pc, #60]	; (8001e70 <CommunicationTask+0x138>)
 8001e34:	f00b fa7e 	bl	800d334 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)uartTX, strlen(uartTX), 5);
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fa17 	bl	8000270 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f107 010c 	add.w	r1, r7, #12
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	4806      	ldr	r0, [pc, #24]	; (8001e68 <CommunicationTask+0x130>)
 8001e4e:	f005 fe0b 	bl	8007a68 <HAL_UART_Transmit>
		}
		osDelay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f007 fa98 	bl	8009388 <osDelay>
		if(send_data_UART)
 8001e58:	e772      	b.n	8001d40 <CommunicationTask+0x8>
 8001e5a:	bf00      	nop
 8001e5c:	20000290 	.word	0x20000290
 8001e60:	200015e4 	.word	0x200015e4
 8001e64:	08010084 	.word	0x08010084
 8001e68:	2000155c 	.word	0x2000155c
 8001e6c:	42c80000 	.word	0x42c80000
 8001e70:	080100a4 	.word	0x080100a4

08001e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a37      	ldr	r2, [pc, #220]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <MX_GPIO_Init+0xf8>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ef0:	481f      	ldr	r0, [pc, #124]	; (8001f70 <MX_GPIO_Init+0xfc>)
 8001ef2:	f003 f8d9 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001ef6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4818      	ldr	r0, [pc, #96]	; (8001f70 <MX_GPIO_Init+0xfc>)
 8001f10:	f002 ff20 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Motor3_Encoder2_Pin|Motor3_Encoder1_Pin;
 8001f14:	2330      	movs	r3, #48	; 0x30
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4812      	ldr	r0, [pc, #72]	; (8001f70 <MX_GPIO_Init+0xfc>)
 8001f28:	f002 ff14 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor4_Encoder1_Pin|Motor4_Encoder2_Pin|Motor5_Encoder1_Pin|Motor1_Encoder2_Pin
 8001f2c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001f30:	617b      	str	r3, [r7, #20]
                          |Motor1_Encoder1_Pin|Motor2_Encoder1_Pin|Motor2_Encoder2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_GPIO_Init+0x100>)
 8001f42:	f002 ff07 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor5_Encoder2_Pin;
 8001f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor5_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f002 fef9 	bl	8004d54 <HAL_GPIO_Init>

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48000800 	.word	0x48000800
 8001f74:	48000400 	.word	0x48000400

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7c:	f001 f893 	bl	80030a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f80:	f000 f824 	bl	8001fcc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f84:	f000 f871 	bl	800206a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f7ff ff74 	bl	8001e74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f8c:	f7ff f93a 	bl	8001204 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f90:	f7ff f9ae 	bl	80012f0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001f94:	f7ff fdae 	bl	8001af4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001f98:	f000 fa4e 	bl	8002438 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f9c:	f000 fae6 	bl	800256c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fa0:	f000 fb48 	bl	8002634 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fa4:	f000 fbaa 	bl	80026fc <MX_TIM4_Init>
  MX_TIM8_Init();
 8001fa8:	f000 fc0c 	bl	80027c4 <MX_TIM8_Init>
  MX_UART4_Init();
 8001fac:	f000 fddc 	bl	8002b68 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_MspInit(&huart4);
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <main+0x50>)
 8001fb2:	f000 fe09 	bl	8002bc8 <HAL_UART_MspInit>
  init_motor_controller();
 8001fb6:	f000 ffc9 	bl	8002f4c <init_motor_controller>
//  Fingers_Status.Pinky.Direction=Open;
//  Fingers_Status.Pinky.speed=50;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001fba:	f007 f909 	bl	80091d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001fbe:	f7ff fe13 	bl	8001be8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fc2:	f007 f929 	bl	8009218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <main+0x4e>
 8001fc8:	2000155c 	.word	0x2000155c

08001fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b096      	sub	sp, #88	; 0x58
 8001fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2244      	movs	r2, #68	; 0x44
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00b fa0d 	bl	800d3fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ff2:	f003 f87f 	bl	80050f4 <HAL_PWREx_ControlVoltageScaling>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ffc:	f000 f872 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002000:	2301      	movs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002004:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200a:	2302      	movs	r3, #2
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200e:	2303      	movs	r3, #3
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002016:	2314      	movs	r3, #20
 8002018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800201a:	2307      	movs	r3, #7
 800201c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002022:	2302      	movs	r3, #2
 8002024:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f8b8 	bl	80051a0 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002036:	f000 f855 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203a:	230f      	movs	r3, #15
 800203c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203e:	2303      	movs	r3, #3
 8002040:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	2104      	movs	r1, #4
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fc80 	bl	8005958 <HAL_RCC_ClockConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800205e:	f000 f841 	bl	80020e4 <Error_Handler>
  }
}
 8002062:	bf00      	nop
 8002064:	3758      	adds	r7, #88	; 0x58
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b0a2      	sub	sp, #136	; 0x88
 800206e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2288      	movs	r2, #136	; 0x88
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f00b f9bf 	bl	800d3fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800207c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002080:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002086:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002088:	2303      	movs	r3, #3
 800208a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002090:	2308      	movs	r3, #8
 8002092:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002094:	2307      	movs	r3, #7
 8002096:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002098:	2302      	movs	r3, #2
 800209a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80020a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 feab 	bl	8005e04 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80020b4:	f000 f816 	bl	80020e4 <Error_Handler>
  }
}
 80020b8:	bf00      	nop
 80020ba:	3788      	adds	r7, #136	; 0x88
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020d2:	f001 f801 	bl	80030d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40001400 	.word	0x40001400

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	e7fe      	b.n	80020ec <Error_Handler+0x8>
	...

080020f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_MspInit+0x4c>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_MspInit+0x4c>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6613      	str	r3, [r2, #96]	; 0x60
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_MspInit+0x4c>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_MspInit+0x4c>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_MspInit+0x4c>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_MspInit+0x4c>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	210f      	movs	r1, #15
 800212a:	f06f 0001 	mvn.w	r0, #1
 800212e:	f002 fd67 	bl	8004c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_InitTick+0xe0>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_InitTick+0xe0>)
 8002154:	f043 0320 	orr.w	r3, r3, #32
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_InitTick+0xe0>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002166:	f107 0210 	add.w	r2, r7, #16
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fdb5 	bl	8005ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002180:	f003 fd82 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8002184:	6378      	str	r0, [r7, #52]	; 0x34
 8002186:	e004      	b.n	8002192 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002188:	f003 fd7e 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_InitTick+0xe4>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9b      	lsrs	r3, r3, #18
 800219c:	3b01      	subs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_InitTick+0xe8>)
 80021a2:	4a22      	ldr	r2, [pc, #136]	; (800222c <HAL_InitTick+0xec>)
 80021a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_InitTick+0xe8>)
 80021a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ac:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_InitTick+0xe8>)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_InitTick+0xe8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_InitTick+0xe8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_InitTick+0xe8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80021c6:	4818      	ldr	r0, [pc, #96]	; (8002228 <HAL_InitTick+0xe8>)
 80021c8:	f004 fad8 	bl	800677c <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11b      	bne.n	8002212 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80021da:	4813      	ldr	r0, [pc, #76]	; (8002228 <HAL_InitTick+0xe8>)
 80021dc:	f004 fb30 	bl	8006840 <HAL_TIM_Base_Start_IT>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d111      	bne.n	8002212 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021ee:	2037      	movs	r0, #55	; 0x37
 80021f0:	f002 fd22 	bl	8004c38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	d808      	bhi.n	800220c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80021fa:	2200      	movs	r2, #0
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	2037      	movs	r0, #55	; 0x37
 8002200:	f002 fcfe 	bl	8004c00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_InitTick+0xf0>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e002      	b.n	8002212 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002216:	4618      	mov	r0, r3
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	431bde83 	.word	0x431bde83
 8002228:	20001390 	.word	0x20001390
 800222c:	40001400 	.word	0x40001400
 8002230:	20000004 	.word	0x20000004

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <NMI_Handler+0x4>

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <UART4_IRQHandler+0x10>)
 8002266:	f005 fcd5 	bl	8007c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000155c 	.word	0x2000155c

08002274 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <TIM7_IRQHandler+0x10>)
 800227a:	f004 fcaf 	bl	8006bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20001390 	.word	0x20001390

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022a2:	f00b f97b 	bl	800d59c <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
	return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ca:	e7fe      	b.n	80022ca <_exit+0x12>

080022cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e00a      	b.n	80022f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022de:	f3af 8000 	nop.w
 80022e2:	4601      	mov	r1, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf0      	blt.n	80022de <_read+0x12>
	}

return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e009      	b.n	800232c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf1      	blt.n	8002318 <_write+0x12>
	}
	return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_close>:

int _close(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	605a      	str	r2, [r3, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_isatty>:

int _isatty(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return 1;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
	return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f00b f8e0 	bl	800d59c <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20018000 	.word	0x20018000
 8002408:	00000400 	.word	0x00000400
 800240c:	200013dc 	.word	0x200013dc
 8002410:	20003190 	.word	0x20003190

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b096      	sub	sp, #88	; 0x58
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800244a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]
 800245a:	615a      	str	r2, [r3, #20]
 800245c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	222c      	movs	r2, #44	; 0x2c
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00a ffc8 	bl	800d3fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <MX_TIM1_Init+0x12c>)
 800246c:	4a3e      	ldr	r2, [pc, #248]	; (8002568 <MX_TIM1_Init+0x130>)
 800246e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8002470:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002472:	2218      	movs	r2, #24
 8002474:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <MX_TIM1_Init+0x12c>)
 800247e:	2263      	movs	r2, #99	; 0x63
 8002480:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <MX_TIM1_Init+0x12c>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002494:	4833      	ldr	r0, [pc, #204]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002496:	f004 fa43 	bl	8006920 <HAL_TIM_PWM_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80024a0:	f7ff fe20 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024b4:	4619      	mov	r1, r3
 80024b6:	482b      	ldr	r0, [pc, #172]	; (8002564 <MX_TIM1_Init+0x12c>)
 80024b8:	f005 f964 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80024c2:	f7ff fe0f 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024c6:	2360      	movs	r3, #96	; 0x60
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ce:	2300      	movs	r3, #0
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024d6:	2304      	movs	r3, #4
 80024d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	481e      	ldr	r0, [pc, #120]	; (8002564 <MX_TIM1_Init+0x12c>)
 80024ec:	f004 fc78 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80024f6:	f7ff fdf5 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024fe:	2204      	movs	r2, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4818      	ldr	r0, [pc, #96]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002504:	f004 fc6c 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800250e:	f7ff fde9 	bl	80020e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4807      	ldr	r0, [pc, #28]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002548:	f005 f9a4 	bl	8007894 <HAL_TIMEx_ConfigBreakDeadTime>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002552:	f7ff fdc7 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <MX_TIM1_Init+0x12c>)
 8002558:	f000 fa3c 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 800255c:	bf00      	nop
 800255e:	3758      	adds	r7, #88	; 0x58
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200013e0 	.word	0x200013e0
 8002568:	40012c00 	.word	0x40012c00

0800256c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257e:	463b      	mov	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	615a      	str	r2, [r3, #20]
 800258e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <MX_TIM2_Init+0xc4>)
 8002592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <MX_TIM2_Init+0xc4>)
 800259a:	2218      	movs	r2, #24
 800259c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025a6:	2263      	movs	r2, #99	; 0x63
 80025a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025b6:	481e      	ldr	r0, [pc, #120]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025b8:	f004 f9b2 	bl	8006920 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80025c2:	f7ff fd8f 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4816      	ldr	r0, [pc, #88]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025d6:	f005 f8d5 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80025e0:	f7ff fd80 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e4:	2360      	movs	r3, #96	; 0x60
 80025e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025f0:	2304      	movs	r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2208      	movs	r2, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	480d      	ldr	r0, [pc, #52]	; (8002630 <MX_TIM2_Init+0xc4>)
 80025fc:	f004 fbf0 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002606:	f7ff fd6d 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	220c      	movs	r2, #12
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	; (8002630 <MX_TIM2_Init+0xc4>)
 8002612:	f004 fbe5 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800261c:	f7ff fd62 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <MX_TIM2_Init+0xc4>)
 8002622:	f000 f9d7 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000142c 	.word	0x2000142c

08002634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	463b      	mov	r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <MX_TIM3_Init+0xc0>)
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <MX_TIM3_Init+0xc4>)
 800265c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <MX_TIM3_Init+0xc0>)
 8002660:	2218      	movs	r2, #24
 8002662:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <MX_TIM3_Init+0xc0>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <MX_TIM3_Init+0xc0>)
 800266c:	2263      	movs	r2, #99	; 0x63
 800266e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <MX_TIM3_Init+0xc0>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <MX_TIM3_Init+0xc0>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800267c:	481d      	ldr	r0, [pc, #116]	; (80026f4 <MX_TIM3_Init+0xc0>)
 800267e:	f004 f94f 	bl	8006920 <HAL_TIM_PWM_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002688:	f7ff fd2c 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4816      	ldr	r0, [pc, #88]	; (80026f4 <MX_TIM3_Init+0xc0>)
 800269c:	f005 f872 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80026a6:	f7ff fd1d 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026aa:	2360      	movs	r3, #96	; 0x60
 80026ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80026b6:	2304      	movs	r3, #4
 80026b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <MX_TIM3_Init+0xc0>)
 80026c2:	f004 fb8d 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80026cc:	f7ff fd0a 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	2204      	movs	r2, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	; (80026f4 <MX_TIM3_Init+0xc0>)
 80026d8:	f004 fb82 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026e2:	f7ff fcff 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026e6:	4803      	ldr	r0, [pc, #12]	; (80026f4 <MX_TIM3_Init+0xc0>)
 80026e8:	f000 f974 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20001478 	.word	0x20001478
 80026f8:	40000400 	.word	0x40000400

080026fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <MX_TIM4_Init+0xc4>)
 8002724:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002728:	2218      	movs	r2, #24
 800272a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <MX_TIM4_Init+0xc0>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002734:	2263      	movs	r2, #99	; 0x63
 8002736:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <MX_TIM4_Init+0xc0>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002744:	481d      	ldr	r0, [pc, #116]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002746:	f004 f8eb 	bl	8006920 <HAL_TIM_PWM_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002750:	f7ff fcc8 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4816      	ldr	r0, [pc, #88]	; (80027bc <MX_TIM4_Init+0xc0>)
 8002764:	f005 f80e 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800276e:	f7ff fcb9 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002772:	2360      	movs	r3, #96	; 0x60
 8002774:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800277e:	2304      	movs	r3, #4
 8002780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002782:	463b      	mov	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	; (80027bc <MX_TIM4_Init+0xc0>)
 800278a:	f004 fb29 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002794:	f7ff fca6 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	2204      	movs	r2, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4807      	ldr	r0, [pc, #28]	; (80027bc <MX_TIM4_Init+0xc0>)
 80027a0:	f004 fb1e 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027aa:	f7ff fc9b 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <MX_TIM4_Init+0xc0>)
 80027b0:	f000 f910 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200014c4 	.word	0x200014c4
 80027c0:	40000800 	.word	0x40000800

080027c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b096      	sub	sp, #88	; 0x58
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00a fe02 	bl	800d3fa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <MX_TIM8_Init+0x12c>)
 80027f8:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <MX_TIM8_Init+0x130>)
 80027fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 80027fc:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <MX_TIM8_Init+0x12c>)
 80027fe:	2218      	movs	r2, #24
 8002800:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <MX_TIM8_Init+0x12c>)
 800280a:	2263      	movs	r2, #99	; 0x63
 800280c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <MX_TIM8_Init+0x12c>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002820:	4833      	ldr	r0, [pc, #204]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002822:	f004 f87d 	bl	8006920 <HAL_TIM_PWM_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800282c:	f7ff fc5a 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800283c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002840:	4619      	mov	r1, r3
 8002842:	482b      	ldr	r0, [pc, #172]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002844:	f004 ff9e 	bl	8007784 <HAL_TIMEx_MasterConfigSynchronization>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800284e:	f7ff fc49 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002852:	2360      	movs	r3, #96	; 0x60
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800285a:	2300      	movs	r3, #0
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285e:	2300      	movs	r3, #0
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002862:	2304      	movs	r3, #4
 8002864:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	481e      	ldr	r0, [pc, #120]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002878:	f004 fab2 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002882:	f7ff fc2f 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800288a:	2204      	movs	r2, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4818      	ldr	r0, [pc, #96]	; (80028f0 <MX_TIM8_Init+0x12c>)
 8002890:	f004 faa6 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800289a:	f7ff fc23 	bl	80020e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <MX_TIM8_Init+0x12c>)
 80028d4:	f004 ffde 	bl	8007894 <HAL_TIMEx_ConfigBreakDeadTime>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80028de:	f7ff fc01 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028e2:	4803      	ldr	r0, [pc, #12]	; (80028f0 <MX_TIM8_Init+0x12c>)
 80028e4:	f000 f876 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 80028e8:	bf00      	nop
 80028ea:	3758      	adds	r7, #88	; 0x58
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20001510 	.word	0x20001510
 80028f4:	40013400 	.word	0x40013400

080028f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_TIM_PWM_MspInit+0xc8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10c      	bne.n	8002924 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	6613      	str	r3, [r2, #96]	; 0x60
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002922:	e046      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d10c      	bne.n	8002948 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292e:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	e034      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_TIM_PWM_MspInit+0xd0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10c      	bne.n	800296c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
}
 800296a:	e022      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_TIM_PWM_MspInit+0xd4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10c      	bne.n	8002990 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
}
 800298e:	e010      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0xba>
  else if(tim_pwmHandle->Instance==TIM8)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_TIM_PWM_MspInit+0xd8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10b      	bne.n	80029b2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 80029a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029a4:	6613      	str	r3, [r2, #96]	; 0x60
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_TIM_PWM_MspInit+0xcc>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	bf00      	nop
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40013400 	.word	0x40013400

080029d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_TIM_MspPostInit+0x178>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11e      	bne.n	8002a34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_Motor1_Pin|IN1_Motor1_Pin;
 8002a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f002 f991 	bl	8004d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a32:	e087      	b.n	8002b44 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d11d      	bne.n	8002a7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN1_Motor3_Pin|IN2_Motor3_Pin;
 8002a56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4838      	ldr	r0, [pc, #224]	; (8002b54 <HAL_TIM_MspPostInit+0x180>)
 8002a74:	f002 f96e 	bl	8004d54 <HAL_GPIO_Init>
}
 8002a78:	e064      	b.n	8002b44 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a36      	ldr	r2, [pc, #216]	; (8002b58 <HAL_TIM_MspPostInit+0x184>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d11c      	bne.n	8002abe <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a88:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN2_Motor5_Pin|IN1_Motor5_Pin;
 8002a9c:	2330      	movs	r3, #48	; 0x30
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aac:	2302      	movs	r3, #2
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4827      	ldr	r0, [pc, #156]	; (8002b54 <HAL_TIM_MspPostInit+0x180>)
 8002ab8:	f002 f94c 	bl	8004d54 <HAL_GPIO_Init>
}
 8002abc:	e042      	b.n	8002b44 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM4)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <HAL_TIM_MspPostInit+0x188>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d11c      	bne.n	8002b02 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_Motor4_Pin|IN1_Motor4_Pin;
 8002ae0:	23c0      	movs	r3, #192	; 0xc0
 8002ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002af0:	2302      	movs	r3, #2
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	4619      	mov	r1, r3
 8002afa:	4816      	ldr	r0, [pc, #88]	; (8002b54 <HAL_TIM_MspPostInit+0x180>)
 8002afc:	f002 f92a 	bl	8004d54 <HAL_GPIO_Init>
}
 8002b00:	e020      	b.n	8002b44 <HAL_TIM_MspPostInit+0x170>
  else if(timHandle->Instance==TIM8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIM_MspPostInit+0x18c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_TIM_MspPostInit+0x17c>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_Motor2_Pin|IN1_Motor2_Pin;
 8002b24:	23c0      	movs	r3, #192	; 0xc0
 8002b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b34:	2303      	movs	r3, #3
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4809      	ldr	r0, [pc, #36]	; (8002b64 <HAL_TIM_MspPostInit+0x190>)
 8002b40:	f002 f908 	bl	8004d54 <HAL_GPIO_Init>
}
 8002b44:	bf00      	nop
 8002b46:	3730      	adds	r7, #48	; 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	48000400 	.word	0x48000400
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40013400 	.word	0x40013400
 8002b64:	48000800 	.word	0x48000800

08002b68 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b6e:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <MX_UART4_Init+0x5c>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <MX_UART4_Init+0x58>)
 8002bac:	f004 ff0e 	bl	80079cc <HAL_UART_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002bb6:	f7ff fa95 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000155c 	.word	0x2000155c
 8002bc4:	40004c00 	.word	0x40004c00

08002bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b0ac      	sub	sp, #176	; 0xb0
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2288      	movs	r2, #136	; 0x88
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00a fc06 	bl	800d3fa <memset>
  if(uartHandle->Instance==UART4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_UART_MspInit+0xc0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d143      	bne.n	8002c80 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 f8fd 	bl	8005e04 <HAL_RCCEx_PeriphCLKConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c10:	f7ff fa68 	bl	80020e4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_UART_MspInit+0xc4>)
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MCU_TX_ESP_RX_Pin|MCU_RX_ESP_TX_Pin;
 8002c44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c5e:	2308      	movs	r3, #8
 8002c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <HAL_UART_MspInit+0xc8>)
 8002c6c:	f002 f872 	bl	8004d54 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2105      	movs	r1, #5
 8002c74:	2034      	movs	r0, #52	; 0x34
 8002c76:	f001 ffc3 	bl	8004c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c7a:	2034      	movs	r0, #52	; 0x34
 8002c7c:	f001 ffdc 	bl	8004c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002c80:	bf00      	nop
 8002c82:	37b0      	adds	r7, #176	; 0xb0
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40004c00 	.word	0x40004c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800

08002c94 <qPID_Init>:
#include <stdio.h>
#include <math.h>
#include "PID.h"

void qPID_Init(qPID *q)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    q->ctx.Ui_old = 0.0;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    q->ctx.Ud_old = 0.0;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
    q->ctx.PV_old = 0.0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
    q->ctx.SP_old = 0.0;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
    q->Mode = OFF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SetMotor>:
	}
}
/*
 * motor control
 */
void SetMotor(Fingers_Name_Enum name,Finger_Struct* FingerStruct) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	71fb      	strb	r3, [r7, #7]
	switch (name) {
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	f200 8118 	bhi.w	8002f14 <SetMotor+0x244>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <SetMotor+0x1c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d01 	.word	0x08002d01
 8002cf0:	08002d65 	.word	0x08002d65
 8002cf4:	08002dd1 	.word	0x08002dd1
 8002cf8:	08002e3d 	.word	0x08002e3d
 8002cfc:	08002ea9 	.word	0x08002ea9
	case Thumb :
		if ( FingerStruct->Direction== Open) {
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	7a9b      	ldrb	r3, [r3, #10]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d109      	bne.n	8002d1c <SetMotor+0x4c>
			htim3.Instance->CCR1 = FingerStruct->speed;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	7b9a      	ldrb	r2, [r3, #14]
 8002d0c:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <SetMotor+0x254>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =0;
 8002d12:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <SetMotor+0x254>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
 8002d1a:	e015      	b.n	8002d48 <SetMotor+0x78>
		} else if (FingerStruct->Direction == Close) {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	7a9b      	ldrb	r3, [r3, #10]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d109      	bne.n	8002d38 <SetMotor+0x68>
			htim3.Instance->CCR2 = FingerStruct->speed;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7b9a      	ldrb	r2, [r3, #14]
 8002d28:	4b7e      	ldr	r3, [pc, #504]	; (8002f24 <SetMotor+0x254>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
			htim3.Instance->CCR1 =0;
 8002d2e:	4b7d      	ldr	r3, [pc, #500]	; (8002f24 <SetMotor+0x254>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
 8002d36:	e007      	b.n	8002d48 <SetMotor+0x78>
		} else {
			htim3.Instance->CCR1 =100;
 8002d38:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <SetMotor+0x254>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2264      	movs	r2, #100	; 0x64
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34
			htim3.Instance->CCR2 =100;
 8002d40:	4b78      	ldr	r3, [pc, #480]	; (8002f24 <SetMotor+0x254>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
		}
		//calculate position
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Thumb)*100;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	891b      	ldrh	r3, [r3, #8]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002f28 <SetMotor+0x258>
 8002d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002d62:	e0d8      	b.n	8002f16 <SetMotor+0x246>
	case Index :
		if ( FingerStruct->Direction== Open) {
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7a9b      	ldrb	r3, [r3, #10]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d109      	bne.n	8002d80 <SetMotor+0xb0>
			htim4.Instance->CCR1 = FingerStruct->speed;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	7b9a      	ldrb	r2, [r3, #14]
 8002d70:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <SetMotor+0x25c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =0;
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <SetMotor+0x25c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7e:	e015      	b.n	8002dac <SetMotor+0xdc>
		} else if (FingerStruct->Direction == Close) {
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7a9b      	ldrb	r3, [r3, #10]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d109      	bne.n	8002d9c <SetMotor+0xcc>
			htim4.Instance->CCR2 = FingerStruct->speed;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	7b9a      	ldrb	r2, [r3, #14]
 8002d8c:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <SetMotor+0x25c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
			htim4.Instance->CCR1 =0;
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <SetMotor+0x25c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9a:	e007      	b.n	8002dac <SetMotor+0xdc>
		} else {
			htim4.Instance->CCR1 =100;
 8002d9c:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <SetMotor+0x25c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2264      	movs	r2, #100	; 0x64
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
			htim4.Instance->CCR2 =100;
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <SetMotor+0x25c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2264      	movs	r2, #100	; 0x64
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Index)*100;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	891b      	ldrh	r3, [r3, #8]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002db8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002f30 <SetMotor+0x260>
 8002dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002f28 <SetMotor+0x258>
 8002dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002dce:	e0a2      	b.n	8002f16 <SetMotor+0x246>
	case Middle :
		if ( FingerStruct->Direction== Open) {
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7a9b      	ldrb	r3, [r3, #10]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d109      	bne.n	8002dec <SetMotor+0x11c>
			htim2.Instance->CCR4 = FingerStruct->speed;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7b9a      	ldrb	r2, [r3, #14]
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <SetMotor+0x264>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR3 =0;
 8002de2:	4b54      	ldr	r3, [pc, #336]	; (8002f34 <SetMotor+0x264>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dea:	e015      	b.n	8002e18 <SetMotor+0x148>
		} else if (FingerStruct->Direction == Close) {
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	7a9b      	ldrb	r3, [r3, #10]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d109      	bne.n	8002e08 <SetMotor+0x138>
			htim2.Instance->CCR3 = FingerStruct->speed;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	7b9a      	ldrb	r2, [r3, #14]
 8002df8:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <SetMotor+0x264>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =0;
 8002dfe:	4b4d      	ldr	r3, [pc, #308]	; (8002f34 <SetMotor+0x264>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
 8002e06:	e007      	b.n	8002e18 <SetMotor+0x148>
		} else {
			htim2.Instance->CCR3 =100;
 8002e08:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <SetMotor+0x264>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2264      	movs	r2, #100	; 0x64
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
			htim2.Instance->CCR4 =100;
 8002e10:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <SetMotor+0x264>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2264      	movs	r2, #100	; 0x64
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Middle)*100;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	891b      	ldrh	r3, [r3, #8]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e24:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002f38 <SetMotor+0x268>
 8002e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002f28 <SetMotor+0x258>
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002e3a:	e06c      	b.n	8002f16 <SetMotor+0x246>
	case Ring :
		if ( FingerStruct->Direction== Open) {
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	7a9b      	ldrb	r3, [r3, #10]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d109      	bne.n	8002e58 <SetMotor+0x188>
			htim8.Instance->CCR1 = FingerStruct->speed;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	7b9a      	ldrb	r2, [r3, #14]
 8002e48:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <SetMotor+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =0;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <SetMotor+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
 8002e56:	e015      	b.n	8002e84 <SetMotor+0x1b4>
		} else if (FingerStruct->Direction == Close) {
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7a9b      	ldrb	r3, [r3, #10]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d109      	bne.n	8002e74 <SetMotor+0x1a4>
			htim8.Instance->CCR2 = FingerStruct->speed;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7b9a      	ldrb	r2, [r3, #14]
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <SetMotor+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
			htim8.Instance->CCR1 =0;
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <SetMotor+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	e007      	b.n	8002e84 <SetMotor+0x1b4>
		} else {
			htim8.Instance->CCR1 =100;
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <SetMotor+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2264      	movs	r2, #100	; 0x64
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34
			htim8.Instance->CCR2 =100;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <SetMotor+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2264      	movs	r2, #100	; 0x64
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Ring)*100;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	891b      	ldrh	r3, [r3, #8]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e90:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002f40 <SetMotor+0x270>
 8002e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e98:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f28 <SetMotor+0x258>
 8002e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002ea6:	e036      	b.n	8002f16 <SetMotor+0x246>
	case Pinky :
		if ( FingerStruct->Direction== Open) {
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	7a9b      	ldrb	r3, [r3, #10]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d109      	bne.n	8002ec4 <SetMotor+0x1f4>
			htim1.Instance->CCR1 = FingerStruct->speed;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7b9a      	ldrb	r2, [r3, #14]
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <SetMotor+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =0;
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <SetMotor+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec2:	e015      	b.n	8002ef0 <SetMotor+0x220>
		} else if (FingerStruct->Direction == Close) {
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	7a9b      	ldrb	r3, [r3, #10]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d109      	bne.n	8002ee0 <SetMotor+0x210>
			htim1.Instance->CCR2 = FingerStruct->speed;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7b9a      	ldrb	r2, [r3, #14]
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <SetMotor+0x274>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
			htim1.Instance->CCR1 =0;
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <SetMotor+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ede:	e007      	b.n	8002ef0 <SetMotor+0x220>
		} else {
			htim1.Instance->CCR1 =100;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <SetMotor+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2264      	movs	r2, #100	; 0x64
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
			htim1.Instance->CCR2 =100;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <SetMotor+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2264      	movs	r2, #100	; 0x64
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
		}
		FingerStruct->position=((float)FingerStruct->Encoder/Max_Encoder_Pinky)*100;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	891b      	ldrh	r3, [r3, #8]
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002efc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002f48 <SetMotor+0x278>
 8002f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f04:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f28 <SetMotor+0x258>
 8002f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 8002f12:	e000      	b.n	8002f16 <SetMotor+0x246>

	default:

		break;
 8002f14:	bf00      	nop
	}
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20001478 	.word	0x20001478
 8002f28:	42c80000 	.word	0x42c80000
 8002f2c:	200014c4 	.word	0x200014c4
 8002f30:	46d54800 	.word	0x46d54800
 8002f34:	2000142c 	.word	0x2000142c
 8002f38:	46e03800 	.word	0x46e03800
 8002f3c:	20001510 	.word	0x20001510
 8002f40:	46d7a000 	.word	0x46d7a000
 8002f44:	200013e0 	.word	0x200013e0
 8002f48:	46cbe800 	.word	0x46cbe800

08002f4c <init_motor_controller>:
/*
 *
 */
void init_motor_controller(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	//start read data from ADC
	//motor5->thumb
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002f50:	2100      	movs	r1, #0
 8002f52:	4832      	ldr	r0, [pc, #200]	; (800301c <init_motor_controller+0xd0>)
 8002f54:	f003 fd3c 	bl	80069d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4830      	ldr	r0, [pc, #192]	; (800301c <init_motor_controller+0xd0>)
 8002f5c:	f003 fd38 	bl	80069d0 <HAL_TIM_PWM_Start>
	//motor4->index
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002f60:	2100      	movs	r1, #0
 8002f62:	482f      	ldr	r0, [pc, #188]	; (8003020 <init_motor_controller+0xd4>)
 8002f64:	f003 fd34 	bl	80069d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002f68:	2104      	movs	r1, #4
 8002f6a:	482d      	ldr	r0, [pc, #180]	; (8003020 <init_motor_controller+0xd4>)
 8002f6c:	f003 fd30 	bl	80069d0 <HAL_TIM_PWM_Start>
	//motor3->middle
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002f70:	2108      	movs	r1, #8
 8002f72:	482c      	ldr	r0, [pc, #176]	; (8003024 <init_motor_controller+0xd8>)
 8002f74:	f003 fd2c 	bl	80069d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002f78:	210c      	movs	r1, #12
 8002f7a:	482a      	ldr	r0, [pc, #168]	; (8003024 <init_motor_controller+0xd8>)
 8002f7c:	f003 fd28 	bl	80069d0 <HAL_TIM_PWM_Start>
	//motor2->ring
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002f80:	2100      	movs	r1, #0
 8002f82:	4829      	ldr	r0, [pc, #164]	; (8003028 <init_motor_controller+0xdc>)
 8002f84:	f003 fd24 	bl	80069d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002f88:	2104      	movs	r1, #4
 8002f8a:	4827      	ldr	r0, [pc, #156]	; (8003028 <init_motor_controller+0xdc>)
 8002f8c:	f003 fd20 	bl	80069d0 <HAL_TIM_PWM_Start>
	//motor1->pinky
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f90:	2100      	movs	r1, #0
 8002f92:	4826      	ldr	r0, [pc, #152]	; (800302c <init_motor_controller+0xe0>)
 8002f94:	f003 fd1c 	bl	80069d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002f98:	2104      	movs	r1, #4
 8002f9a:	4824      	ldr	r0, [pc, #144]	; (800302c <init_motor_controller+0xe0>)
 8002f9c:	f003 fd18 	bl	80069d0 <HAL_TIM_PWM_Start>

	HAL_ADC_MspInit(&hadc1);
 8002fa0:	4823      	ldr	r0, [pc, #140]	; (8003030 <init_motor_controller+0xe4>)
 8002fa2:	f7fe fa09 	bl	80013b8 <HAL_ADC_MspInit>
	HAL_ADC_MspInit(&hadc2);
 8002fa6:	4823      	ldr	r0, [pc, #140]	; (8003034 <init_motor_controller+0xe8>)
 8002fa8:	f7fe fa06 	bl	80013b8 <HAL_ADC_MspInit>
	HAL_UART_Receive_IT(&huart4, &RXuart, 1);
 8002fac:	2201      	movs	r2, #1
 8002fae:	4922      	ldr	r1, [pc, #136]	; (8003038 <init_motor_controller+0xec>)
 8002fb0:	4822      	ldr	r0, [pc, #136]	; (800303c <init_motor_controller+0xf0>)
 8002fb2:	f004 fde3 	bl	8007b7c <HAL_UART_Receive_IT>
	TX_State=idel;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <init_motor_controller+0xf4>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
	// Configure settings
	controller.AntiWindup = ENABLED;
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <init_motor_controller+0xf8>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	controller.Bumpless = ENABLED;
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <init_motor_controller+0xf8>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// Configure de output limits for clamping
	controller.OutputMax = 50.0;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <init_motor_controller+0xf8>)
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <init_motor_controller+0xfc>)
 8002fd0:	60da      	str	r2, [r3, #12]
	controller.OutputMin = -50.0;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <init_motor_controller+0xf8>)
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <init_motor_controller+0x100>)
 8002fd6:	611a      	str	r2, [r3, #16]
	// Set the rate at the PID will run in seconds
	controller.Ts = 3;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <init_motor_controller+0xf8>)
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <init_motor_controller+0x104>)
 8002fdc:	621a      	str	r2, [r3, #32]
	// More settings
	controller.b = 1.0;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <init_motor_controller+0xf8>)
 8002fe0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002fe4:	619a      	str	r2, [r3, #24]
	controller.c = 1.0;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <init_motor_controller+0xf8>)
 8002fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002fec:	61da      	str	r2, [r3, #28]
	// Init de controller
	qPID_Init(&controller);
 8002fee:	4815      	ldr	r0, [pc, #84]	; (8003044 <init_motor_controller+0xf8>)
 8002ff0:	f7ff fe50 	bl	8002c94 <qPID_Init>
	// Set the tunning constants
	controller.K = 0.5;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <init_motor_controller+0xf8>)
 8002ff6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002ffa:	601a      	str	r2, [r3, #0]
	controller.Ti = 1/0.02;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <init_motor_controller+0xf8>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <init_motor_controller+0xfc>)
 8003000:	605a      	str	r2, [r3, #4]
	controller.Td = 1.0;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <init_motor_controller+0xf8>)
 8003004:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003008:	609a      	str	r2, [r3, #8]
	controller.Nd = 3.0;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <init_motor_controller+0xf8>)
 800300c:	4a10      	ldr	r2, [pc, #64]	; (8003050 <init_motor_controller+0x104>)
 800300e:	615a      	str	r2, [r3, #20]
	// Set mode to auotmatic (otherwise it will be in manual mode)
	controller.Mode = AUTOMATIC;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <init_motor_controller+0xf8>)
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20001478 	.word	0x20001478
 8003020:	200014c4 	.word	0x200014c4
 8003024:	2000142c 	.word	0x2000142c
 8003028:	20001510 	.word	0x20001510
 800302c:	200013e0 	.word	0x200013e0
 8003030:	20000294 	.word	0x20000294
 8003034:	200002f8 	.word	0x200002f8
 8003038:	2000028e 	.word	0x2000028e
 800303c:	2000155c 	.word	0x2000155c
 8003040:	2000028f 	.word	0x2000028f
 8003044:	20001660 	.word	0x20001660
 8003048:	42480000 	.word	0x42480000
 800304c:	c2480000 	.word	0xc2480000
 8003050:	40400000 	.word	0x40400000

08003054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800308c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003058:	f7ff f9dc 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <LoopForever+0x6>)
  ldr r1, =_edata
 800305e:	490d      	ldr	r1, [pc, #52]	; (8003094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <LoopForever+0xe>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <LoopForever+0x16>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f00a fa91 	bl	800d5a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003086:	f7fe ff77 	bl	8001f78 <main>

0800308a <LoopForever>:

LoopForever:
    b LoopForever
 800308a:	e7fe      	b.n	800308a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800308c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003094:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003098:	08010634 	.word	0x08010634
  ldr r2, =_sbss
 800309c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030a0:	2000318c 	.word	0x2000318c

080030a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC1_2_IRQHandler>

080030a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b0:	2003      	movs	r0, #3
 80030b2:	f001 fd9a 	bl	8004bea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b6:	200f      	movs	r0, #15
 80030b8:	f7ff f842 	bl	8002140 <HAL_InitTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	e001      	b.n	80030cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030c8:	f7ff f812 	bl	80020f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030cc:	79fb      	ldrb	r3, [r7, #7]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x20>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_IncTick+0x24>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000008 	.word	0x20000008
 80030fc:	2000169c 	.word	0x2000169c

08003100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return uwTick;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_GetTick+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	2000169c 	.word	0x2000169c

08003118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3360      	adds	r3, #96	; 0x60
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <LL_ADC_SetOffset+0x44>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	03fff000 	.word	0x03fff000

080031c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3360      	adds	r3, #96	; 0x60
 80031d6:	461a      	mov	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3360      	adds	r3, #96	; 0x60
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3330      	adds	r3, #48	; 0x30
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	4413      	add	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	211f      	movs	r1, #31
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	f003 011f 	and.w	r1, r3, #31
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	431a      	orrs	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3314      	adds	r3, #20
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0e5b      	lsrs	r3, r3, #25
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0d1b      	lsrs	r3, r3, #20
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2107      	movs	r1, #7
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	0d1b      	lsrs	r3, r3, #20
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	431a      	orrs	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0318 	and.w	r3, r3, #24
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003324:	40d9      	lsrs	r1, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	400b      	ands	r3, r1
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	0007ffff 	.word	0x0007ffff

08003348 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6093      	str	r3, [r2, #8]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d101      	bne.n	80033be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003408:	d101      	bne.n	800340e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800342c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003458:	f043 0202 	orr.w	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <LL_ADC_IsEnabled+0x18>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <LL_ADC_IsEnabled+0x1a>
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d101      	bne.n	80034aa <LL_ADC_IsDisableOngoing+0x18>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_ADC_IsDisableOngoing+0x1a>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034f4:	f043 0210 	orr.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d101      	bne.n	8003520 <LL_ADC_REG_IsConversionOngoing+0x18>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d101      	bne.n	800356e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e130      	b.n	80037f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd ff07 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fef1 	bl	80033a4 <LL_ADC_IsDeepPowerDownEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fed7 	bl	8003380 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff0c 	bl	80033f4 <LL_ADC_IsInternalRegulatorEnabled>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fef0 	bl	80033cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ec:	4b84      	ldr	r3, [pc, #528]	; (8003800 <HAL_ADC_Init+0x284>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	4a84      	ldr	r2, [pc, #528]	; (8003804 <HAL_ADC_Init+0x288>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003600:	e002      	b.n	8003608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f9      	bne.n	8003602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff feee 	bl	80033f4 <LL_ADC_IsInternalRegulatorEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff62 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8003644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80c9 	bne.w	80037e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 80c5 	bne.w	80037e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fefb 	bl	800346c <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d115      	bne.n	80036a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800367c:	4862      	ldr	r0, [pc, #392]	; (8003808 <HAL_ADC_Init+0x28c>)
 800367e:	f7ff fef5 	bl	800346c <LL_ADC_IsEnabled>
 8003682:	4604      	mov	r4, r0
 8003684:	4861      	ldr	r0, [pc, #388]	; (800380c <HAL_ADC_Init+0x290>)
 8003686:	f7ff fef1 	bl	800346c <LL_ADC_IsEnabled>
 800368a:	4603      	mov	r3, r0
 800368c:	431c      	orrs	r4, r3
 800368e:	4860      	ldr	r0, [pc, #384]	; (8003810 <HAL_ADC_Init+0x294>)
 8003690:	f7ff feec 	bl	800346c <LL_ADC_IsEnabled>
 8003694:	4603      	mov	r3, r0
 8003696:	4323      	orrs	r3, r4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4619      	mov	r1, r3
 80036a2:	485c      	ldr	r0, [pc, #368]	; (8003814 <HAL_ADC_Init+0x298>)
 80036a4:	f7ff fd38 	bl	8003118 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e5b      	ldrb	r3, [r3, #25]
 80036ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80036b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80036be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d106      	bne.n	80036e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	3b01      	subs	r3, #1
 80036dc:	045b      	lsls	r3, r3, #17
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <HAL_ADC_Init+0x29c>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	69b9      	ldr	r1, [r7, #24]
 8003710:	430b      	orrs	r3, r1
 8003712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff1c 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 800371e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d13d      	bne.n	80037a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13a      	bne.n	80037a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003730:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003738:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	430b      	orrs	r3, r1
 8003754:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800375c:	2b01      	cmp	r3, #1
 800375e:	d118      	bne.n	8003792 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003782:	430a      	orrs	r2, r1
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	611a      	str	r2, [r3, #16]
 8003790:	e007      	b.n	80037a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10c      	bne.n	80037c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f023 010f 	bic.w	r1, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
 80037c2:	e007      	b.n	80037d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020f 	bic.w	r2, r2, #15
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f023 0303 	bic.w	r3, r3, #3
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
 80037e4:	e007      	b.n	80037f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3724      	adds	r7, #36	; 0x24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	20000000 	.word	0x20000000
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	50040000 	.word	0x50040000
 800380c:	50040100 	.word	0x50040100
 8003810:	50040200 	.word	0x50040200
 8003814:	50040300 	.word	0x50040300
 8003818:	fff0c007 	.word	0xfff0c007

0800381c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003824:	4857      	ldr	r0, [pc, #348]	; (8003984 <HAL_ADC_Start+0x168>)
 8003826:	f7ff fd8f 	bl	8003348 <LL_ADC_GetMultimode>
 800382a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe69 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 809c 	bne.w	8003976 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_ADC_Start+0x30>
 8003848:	2302      	movs	r3, #2
 800384a:	e097      	b.n	800397c <HAL_ADC_Start+0x160>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe63 	bl	8004520 <ADC_Enable>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 8083 	bne.w	800396c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_ADC_Start+0x16c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d002      	beq.n	800388a <HAL_ADC_Start+0x6e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e000      	b.n	800388c <HAL_ADC_Start+0x70>
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_ADC_Start+0x170>)
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	4293      	cmp	r3, r2
 8003892:	d002      	beq.n	800389a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d106      	bne.n	80038c2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f023 0206 	bic.w	r2, r3, #6
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	659a      	str	r2, [r3, #88]	; 0x58
 80038c0:	e002      	b.n	80038c8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	221c      	movs	r2, #28
 80038ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <HAL_ADC_Start+0x16c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d002      	beq.n	80038e8 <HAL_ADC_Start+0xcc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e000      	b.n	80038ea <HAL_ADC_Start+0xce>
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_ADC_Start+0x170>)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d008      	beq.n	8003904 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d002      	beq.n	8003904 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b09      	cmp	r3, #9
 8003902:	d114      	bne.n	800392e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800391a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fdc6 	bl	80034b8 <LL_ADC_REG_StartConversion>
 800392c:	e025      	b.n	800397a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_ADC_Start+0x16c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d002      	beq.n	800394a <HAL_ADC_Start+0x12e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e000      	b.n	800394c <HAL_ADC_Start+0x130>
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_ADC_Start+0x170>)
 800394c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
 800396a:	e006      	b.n	800397a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003974:	e001      	b.n	800397a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	50040300 	.word	0x50040300
 8003988:	50040100 	.word	0x50040100
 800398c:	50040000 	.word	0x50040000

08003990 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Stop+0x16>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e023      	b.n	80039ee <HAL_ADC_Stop+0x5e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039ae:	2103      	movs	r1, #3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fcf9 	bl	80043a8 <ADC_ConversionStop>
 80039b6:	4603      	mov	r3, r0
 80039b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fe33 	bl	800462c <ADC_Disable>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a02:	4866      	ldr	r0, [pc, #408]	; (8003b9c <HAL_ADC_PollForConversion+0x1a4>)
 8003a04:	f7ff fca0 	bl	8003348 <LL_ADC_GetMultimode>
 8003a08:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d102      	bne.n	8003a18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a12:	2308      	movs	r3, #8
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e02a      	b.n	8003a6e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d002      	beq.n	8003a2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d111      	bne.n	8003a4e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0a4      	b.n	8003b92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a48:	2304      	movs	r3, #4
 8003a4a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a4c:	e00f      	b.n	8003a6e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a4e:	4853      	ldr	r0, [pc, #332]	; (8003b9c <HAL_ADC_PollForConversion+0x1a4>)
 8003a50:	f7ff fc88 	bl	8003364 <LL_ADC_GetMultiDMATransfer>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e093      	b.n	8003b92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a6e:	f7ff fb47 	bl	8003100 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a74:	e021      	b.n	8003aba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d01d      	beq.n	8003aba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a7e:	f7ff fb3f 	bl	8003100 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <HAL_ADC_PollForConversion+0x9c>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d112      	bne.n	8003aba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	f043 0204 	orr.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e06b      	b.n	8003b92 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0d6      	beq.n	8003a76 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fba6 	bl	800322a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7e5b      	ldrb	r3, [r3, #25]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d118      	bne.n	8003b1e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d111      	bne.n	8003b1e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_ADC_PollForConversion+0x1a8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d002      	beq.n	8003b2e <HAL_ADC_PollForConversion+0x136>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	e000      	b.n	8003b30 <HAL_ADC_PollForConversion+0x138>
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_ADC_PollForConversion+0x1ac>)
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d008      	beq.n	8003b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d002      	beq.n	8003b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d104      	bne.n	8003b54 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e00c      	b.n	8003b6e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_ADC_PollForConversion+0x1a8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d002      	beq.n	8003b64 <HAL_ADC_PollForConversion+0x16c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	e000      	b.n	8003b66 <HAL_ADC_PollForConversion+0x16e>
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_ADC_PollForConversion+0x1ac>)
 8003b66:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d104      	bne.n	8003b7e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e008      	b.n	8003b90 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	220c      	movs	r2, #12
 8003b8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	50040300 	.word	0x50040300
 8003ba0:	50040100 	.word	0x50040100
 8003ba4:	50040000 	.word	0x50040000

08003ba8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0b6      	sub	sp, #216	; 0xd8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x22>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e3c9      	b.n	800437a <HAL_ADC_ConfigChannel+0x7b6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fc88 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 83aa 	bne.w	8004354 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d824      	bhi.n	8003c5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	3b02      	subs	r3, #2
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d81b      	bhi.n	8003c52 <HAL_ADC_ConfigChannel+0x8e>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_ADC_ConfigChannel+0x5c>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c39 	.word	0x08003c39
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003c49 	.word	0x08003c49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c30:	230c      	movs	r3, #12
 8003c32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c36:	e010      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003c38:	2312      	movs	r3, #18
 8003c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c3e:	e00c      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003c40:	2318      	movs	r3, #24
 8003c42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c46:	e008      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c50:	e003      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c52:	2306      	movs	r3, #6
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003c58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003c68:	f7ff faf2 	bl	8003250 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fc49 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8003c76:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fc69 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 8003c84:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 81a4 	bne.w	8003fda <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 819f 	bne.w	8003fda <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f7ff fafd 	bl	80032a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d00a      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6919      	ldr	r1, [r3, #16]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce0:	f7ff fa4e 	bl	8003180 <LL_ADC_SetOffset>
 8003ce4:	e179      	b.n	8003fda <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fa6b 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x14e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fa60 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0e9b      	lsrs	r3, r3, #26
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	e01e      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x18c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fa55 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e004      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1a4>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	e018      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x1d6>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003d90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fa24 	bl	80031f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fa08 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x214>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff f9fd 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	e01e      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x252>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f9f2 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003e06:	2320      	movs	r3, #32
 8003e08:	e004      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x26a>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	e018      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x29c>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f9c1 	bl	80031f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f9a5 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x2da>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f99a 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	e01e      	b.n	8003edc <HAL_ADC_ConfigChannel+0x318>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff f98f 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e004      	b.n	8003eda <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x330>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	e014      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x35a>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003f10:	2320      	movs	r3, #32
 8003f12:	e004      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d106      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f962 	bl	80031f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2103      	movs	r1, #3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f946 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x398>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2103      	movs	r1, #3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff f93b 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003f52:	4603      	mov	r3, r0
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	f003 021f 	and.w	r2, r3, #31
 8003f5a:	e017      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x3c8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2103      	movs	r1, #3
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f930 	bl	80031c8 <LL_ADC_GetOffsetChannel>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x3e0>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	0e9b      	lsrs	r3, r3, #26
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	e011      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x404>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e003      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f90d 	bl	80031f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fa44 	bl	800346c <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 8140 	bne.w	800426c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f7ff f981 	bl	8003300 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4a8f      	ldr	r2, [pc, #572]	; (8004240 <HAL_ADC_ConfigChannel+0x67c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f040 8131 	bne.w	800426c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x46e>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0e9b      	lsrs	r3, r3, #26
 8004020:	3301      	adds	r3, #1
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2b09      	cmp	r3, #9
 8004028:	bf94      	ite	ls
 800402a:	2301      	movls	r3, #1
 800402c:	2300      	movhi	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e019      	b.n	8004066 <HAL_ADC_ConfigChannel+0x4a2>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800404a:	2320      	movs	r3, #32
 800404c:	e003      	b.n	8004056 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2b09      	cmp	r3, #9
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004066:	2b00      	cmp	r3, #0
 8004068:	d079      	beq.n	800415e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x4c2>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	0e9b      	lsrs	r3, r3, #26
 800407c:	3301      	adds	r3, #1
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004084:	e015      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x4ee>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800409e:	2320      	movs	r3, #32
 80040a0:	e003      	b.n	80040aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80040a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	069b      	lsls	r3, r3, #26
 80040ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x50e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	e017      	b.n	8004102 <HAL_ADC_ConfigChannel+0x53e>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80040e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80040ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x564>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0e9b      	lsrs	r3, r3, #26
 8004118:	3301      	adds	r3, #1
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	051b      	lsls	r3, r3, #20
 8004126:	e018      	b.n	800415a <HAL_ADC_ConfigChannel+0x596>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e003      	b.n	800414c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3301      	adds	r3, #1
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415a:	430b      	orrs	r3, r1
 800415c:	e081      	b.n	8004262 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_ADC_ConfigChannel+0x5b6>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0e9b      	lsrs	r3, r3, #26
 8004170:	3301      	adds	r3, #1
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004178:	e015      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x5e2>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e003      	b.n	800419e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	069b      	lsls	r3, r3, #26
 80041a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x602>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0e9b      	lsrs	r3, r3, #26
 80041b8:	3301      	adds	r3, #1
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	e017      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x632>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	61bb      	str	r3, [r7, #24]
  return result;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	ea42 0103 	orr.w	r1, r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x65e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	0e9b      	lsrs	r3, r3, #26
 800420c:	3301      	adds	r3, #1
 800420e:	f003 021f 	and.w	r2, r3, #31
 8004212:	4613      	mov	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4413      	add	r3, r2
 8004218:	3b1e      	subs	r3, #30
 800421a:	051b      	lsls	r3, r3, #20
 800421c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004220:	e01e      	b.n	8004260 <HAL_ADC_ConfigChannel+0x69c>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	60fb      	str	r3, [r7, #12]
  return result;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800423a:	2320      	movs	r3, #32
 800423c:	e006      	b.n	800424c <HAL_ADC_ConfigChannel+0x688>
 800423e:	bf00      	nop
 8004240:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f003 021f 	and.w	r2, r3, #31
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	3b1e      	subs	r3, #30
 800425a:	051b      	lsls	r3, r3, #20
 800425c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004260:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004266:	4619      	mov	r1, r3
 8004268:	f7ff f81e 	bl	80032a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b44      	ldr	r3, [pc, #272]	; (8004384 <HAL_ADC_ConfigChannel+0x7c0>)
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d07a      	beq.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004278:	4843      	ldr	r0, [pc, #268]	; (8004388 <HAL_ADC_ConfigChannel+0x7c4>)
 800427a:	f7fe ff73 	bl	8003164 <LL_ADC_GetCommonPathInternalCh>
 800427e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a41      	ldr	r2, [pc, #260]	; (800438c <HAL_ADC_ConfigChannel+0x7c8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d12c      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800428c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d126      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_ADC_ConfigChannel+0x7cc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_ADC_ConfigChannel+0x6e8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <HAL_ADC_ConfigChannel+0x7d0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d15d      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b4:	4619      	mov	r1, r3
 80042b6:	4834      	ldr	r0, [pc, #208]	; (8004388 <HAL_ADC_ConfigChannel+0x7c4>)
 80042b8:	f7fe ff41 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_ADC_ConfigChannel+0x7d4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	4a36      	ldr	r2, [pc, #216]	; (800439c <HAL_ADC_ConfigChannel+0x7d8>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042d6:	e002      	b.n	80042de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3b01      	subs	r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f9      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e4:	e040      	b.n	8004368 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2d      	ldr	r2, [pc, #180]	; (80043a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d118      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d112      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_ADC_ConfigChannel+0x7cc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_ADC_ConfigChannel+0x74c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_ADC_ConfigChannel+0x7d0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d12d      	bne.n	800436c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004318:	4619      	mov	r1, r3
 800431a:	481b      	ldr	r0, [pc, #108]	; (8004388 <HAL_ADC_ConfigChannel+0x7c4>)
 800431c:	f7fe ff0f 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004320:	e024      	b.n	800436c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d120      	bne.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800432c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11a      	bne.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_ADC_ConfigChannel+0x7cc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d115      	bne.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004346:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800434a:	4619      	mov	r1, r3
 800434c:	480e      	ldr	r0, [pc, #56]	; (8004388 <HAL_ADC_ConfigChannel+0x7c4>)
 800434e:	f7fe fef6 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
 8004352:	e00c      	b.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004366:	e002      	b.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004368:	bf00      	nop
 800436a:	e000      	b.n	800436e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004376:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800437a:	4618      	mov	r0, r3
 800437c:	37d8      	adds	r7, #216	; 0xd8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	80080000 	.word	0x80080000
 8004388:	50040300 	.word	0x50040300
 800438c:	c7520000 	.word	0xc7520000
 8004390:	50040000 	.word	0x50040000
 8004394:	50040200 	.word	0x50040200
 8004398:	20000000 	.word	0x20000000
 800439c:	053e2d63 	.word	0x053e2d63
 80043a0:	cb840000 	.word	0xcb840000
 80043a4:	80000001 	.word	0x80000001

080043a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f8a2 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 80043c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff f8c3 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 80043d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8098 	beq.w	8004510 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02a      	beq.n	8004444 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7e5b      	ldrb	r3, [r3, #25]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d126      	bne.n	8004444 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7e1b      	ldrb	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d122      	bne.n	8004444 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80043fe:	2301      	movs	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004402:	e014      	b.n	800442e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4a45      	ldr	r2, [pc, #276]	; (800451c <ADC_ConversionStop+0x174>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d90d      	bls.n	8004428 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f043 0201 	orr.w	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e074      	b.n	8004512 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3301      	adds	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d1e3      	bne.n	8004404 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2240      	movs	r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d014      	beq.n	8004474 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f85a 	bl	8003508 <LL_ADC_REG_IsConversionOngoing>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f817 	bl	8003492 <LL_ADC_IsDisableOngoing>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f836 	bl	80034e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d014      	beq.n	80044a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f869 	bl	8003556 <LL_ADC_INJ_IsConversionOngoing>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ffff 	bl	8003492 <LL_ADC_IsDisableOngoing>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d104      	bne.n	80044a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f845 	bl	800352e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d005      	beq.n	80044b6 <ADC_ConversionStop+0x10e>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d105      	bne.n	80044bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80044b0:	230c      	movs	r3, #12
 80044b2:	617b      	str	r3, [r7, #20]
        break;
 80044b4:	e005      	b.n	80044c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80044b6:	2308      	movs	r3, #8
 80044b8:	617b      	str	r3, [r7, #20]
        break;
 80044ba:	e002      	b.n	80044c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80044bc:	2304      	movs	r3, #4
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80044c2:	f7fe fe1d 	bl	8003100 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044c8:	e01b      	b.n	8004502 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044ca:	f7fe fe19 	bl	8003100 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d914      	bls.n	8004502 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1dc      	bne.n	80044ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	a33fffff 	.word	0xa33fffff

08004520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe ff9b 	bl	800346c <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d169      	bne.n	8004610 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <ADC_Enable+0xfc>)
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 0210 	orr.w	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e055      	b.n	8004612 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe ff56 	bl	800341c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004570:	482b      	ldr	r0, [pc, #172]	; (8004620 <ADC_Enable+0x100>)
 8004572:	f7fe fdf7 	bl	8003164 <LL_ADC_GetCommonPathInternalCh>
 8004576:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <ADC_Enable+0x104>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	099b      	lsrs	r3, r3, #6
 8004586:	4a28      	ldr	r2, [pc, #160]	; (8004628 <ADC_Enable+0x108>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800459a:	e002      	b.n	80045a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f9      	bne.n	800459c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045a8:	f7fe fdaa 	bl	8003100 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ae:	e028      	b.n	8004602 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe ff59 	bl	800346c <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe ff29 	bl	800341c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045ca:	f7fe fd99 	bl	8003100 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d914      	bls.n	8004602 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d00d      	beq.n	8004602 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d1cf      	bne.n	80045b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	8000003f 	.word	0x8000003f
 8004620:	50040300 	.word	0x50040300
 8004624:	20000000 	.word	0x20000000
 8004628:	053e2d63 	.word	0x053e2d63

0800462c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe ff2a 	bl	8003492 <LL_ADC_IsDisableOngoing>
 800463e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ff11 	bl	800346c <LL_ADC_IsEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d047      	beq.n	80046e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d144      	bne.n	80046e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030d 	and.w	r3, r3, #13
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10c      	bne.n	800467e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe feeb 	bl	8003444 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2203      	movs	r2, #3
 8004674:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004676:	f7fe fd43 	bl	8003100 <HAL_GetTick>
 800467a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800467c:	e029      	b.n	80046d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e023      	b.n	80046e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800469a:	f7fe fd31 	bl	8003100 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d914      	bls.n	80046d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f043 0210 	orr.w	r2, r3, #16
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e007      	b.n	80046e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1dc      	bne.n	800469a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <LL_ADC_IsEnabled>:
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <LL_ADC_IsEnabled+0x18>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <LL_ADC_IsEnabled+0x1a>
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_ADC_REG_IsConversionOngoing>:
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d101      	bne.n	8004728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b09f      	sub	sp, #124	; 0x7c
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e093      	b.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800475e:	2300      	movs	r3, #0
 8004760:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004762:	2300      	movs	r3, #0
 8004764:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d102      	bne.n	8004776 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004770:	4b46      	ldr	r3, [pc, #280]	; (800488c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	e001      	b.n	800477a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e072      	b.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ffb8 	bl	8004710 <LL_ADC_REG_IsConversionOngoing>
 80047a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ffb2 	bl	8004710 <LL_ADC_REG_IsConversionOngoing>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d154      	bne.n	800485c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d151      	bne.n	800485c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80047ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02c      	beq.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d6:	035b      	lsls	r3, r3, #13
 80047d8:	430b      	orrs	r3, r1
 80047da:	431a      	orrs	r2, r3
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e0:	4829      	ldr	r0, [pc, #164]	; (8004888 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047e2:	f7ff ff82 	bl	80046ea <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	4828      	ldr	r0, [pc, #160]	; (800488c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047ea:	f7ff ff7e 	bl	80046ea <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	431c      	orrs	r4, r3
 80047f2:	4828      	ldr	r0, [pc, #160]	; (8004894 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047f4:	f7ff ff79 	bl	80046ea <LL_ADC_IsEnabled>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4323      	orrs	r3, r4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d137      	bne.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004808:	f023 030f 	bic.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6811      	ldr	r1, [r2, #0]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	430a      	orrs	r2, r1
 8004816:	431a      	orrs	r2, r3
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800481c:	e028      	b.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004828:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800482a:	4817      	ldr	r0, [pc, #92]	; (8004888 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800482c:	f7ff ff5d 	bl	80046ea <LL_ADC_IsEnabled>
 8004830:	4604      	mov	r4, r0
 8004832:	4816      	ldr	r0, [pc, #88]	; (800488c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004834:	f7ff ff59 	bl	80046ea <LL_ADC_IsEnabled>
 8004838:	4603      	mov	r3, r0
 800483a:	431c      	orrs	r4, r3
 800483c:	4815      	ldr	r0, [pc, #84]	; (8004894 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800483e:	f7ff ff54 	bl	80046ea <LL_ADC_IsEnabled>
 8004842:	4603      	mov	r3, r0
 8004844:	4323      	orrs	r3, r4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d112      	bne.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004852:	f023 030f 	bic.w	r3, r3, #15
 8004856:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004858:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800485a:	e009      	b.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800486e:	e000      	b.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800487a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800487e:	4618      	mov	r0, r3
 8004880:	377c      	adds	r7, #124	; 0x7c
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	50040000 	.word	0x50040000
 800488c:	50040100 	.word	0x50040100
 8004890:	50040300 	.word	0x50040300
 8004894:	50040200 	.word	0x50040200

08004898 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0ed      	b.n	8004a86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd f952 	bl	8001b60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fe fc18 	bl	8003100 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048d2:	e012      	b.n	80048fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048d4:	f7fe fc14 	bl	8003100 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b0a      	cmp	r3, #10
 80048e0:	d90b      	bls.n	80048fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2205      	movs	r2, #5
 80048f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0c5      	b.n	8004a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0e5      	beq.n	80048d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0202 	bic.w	r2, r2, #2
 8004916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004918:	f7fe fbf2 	bl	8003100 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800491e:	e012      	b.n	8004946 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004920:	f7fe fbee 	bl	8003100 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b0a      	cmp	r3, #10
 800492c:	d90b      	bls.n	8004946 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2205      	movs	r2, #5
 800493e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e09f      	b.n	8004a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7e1b      	ldrb	r3, [r3, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d108      	bne.n	800496e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e007      	b.n	800497e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	7e5b      	ldrb	r3, [r3, #25]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e007      	b.n	80049a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7e9b      	ldrb	r3, [r3, #26]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0220 	orr.w	r2, r2, #32
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e007      	b.n	80049d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0220 	bic.w	r2, r2, #32
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7edb      	ldrb	r3, [r3, #27]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d108      	bne.n	80049ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0210 	bic.w	r2, r2, #16
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e007      	b.n	80049fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0210 	orr.w	r2, r2, #16
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7f1b      	ldrb	r3, [r3, #28]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d108      	bne.n	8004a16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0208 	orr.w	r2, r2, #8
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e007      	b.n	8004a26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0208 	bic.w	r2, r2, #8
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7f5b      	ldrb	r3, [r3, #29]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d108      	bne.n	8004a40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0204 	orr.w	r2, r2, #4
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e007      	b.n	8004a50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	60d3      	str	r3, [r2, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 0307 	and.w	r3, r3, #7
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	db0b      	blt.n	8004b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4907      	ldr	r1, [pc, #28]	; (8004b2c <__NVIC_EnableIRQ+0x38>)
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2001      	movs	r0, #1
 8004b16:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000e100 	.word	0xe000e100

08004b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db0a      	blt.n	8004b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	490c      	ldr	r1, [pc, #48]	; (8004b7c <__NVIC_SetPriority+0x4c>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	440b      	add	r3, r1
 8004b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b58:	e00a      	b.n	8004b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4908      	ldr	r1, [pc, #32]	; (8004b80 <__NVIC_SetPriority+0x50>)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3b04      	subs	r3, #4
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	761a      	strb	r2, [r3, #24]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	bf28      	it	cs
 8004ba2:	2304      	movcs	r3, #4
 8004ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d902      	bls.n	8004bb4 <NVIC_EncodePriority+0x30>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3b03      	subs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <NVIC_EncodePriority+0x32>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43d9      	mvns	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	4313      	orrs	r3, r2
         );
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff4c 	bl	8004a90 <__NVIC_SetPriorityGrouping>
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c12:	f7ff ff61 	bl	8004ad8 <__NVIC_GetPriorityGrouping>
 8004c16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f7ff ffb1 	bl	8004b84 <NVIC_EncodePriority>
 8004c22:	4602      	mov	r2, r0
 8004c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff80 	bl	8004b30 <__NVIC_SetPriority>
}
 8004c30:	bf00      	nop
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff54 	bl	8004af4 <__NVIC_EnableIRQ>
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d008      	beq.n	8004c7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e022      	b.n	8004cc4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 020e 	bic.w	r2, r2, #14
 8004c8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f003 021c 	and.w	r2, r3, #28
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2101      	movs	r1, #1
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d005      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
 8004cf2:	e029      	b.n	8004d48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 020e 	bic.w	r2, r2, #14
 8004d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d18:	f003 021c 	and.w	r2, r3, #28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
    }
  }
  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d62:	e17f      	b.n	8005064 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	2101      	movs	r1, #1
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8171 	beq.w	800505e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d005      	beq.n	8004d94 <HAL_GPIO_Init+0x40>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d130      	bne.n	8004df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	2203      	movs	r2, #3
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dca:	2201      	movs	r2, #1
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	f003 0201 	and.w	r2, r3, #1
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d118      	bne.n	8004e34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e08:	2201      	movs	r2, #1
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	43db      	mvns	r3, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0201 	and.w	r2, r3, #1
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d017      	beq.n	8004e70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d123      	bne.n	8004ec4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	08da      	lsrs	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3208      	adds	r2, #8
 8004e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	220f      	movs	r2, #15
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	08da      	lsrs	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3208      	adds	r2, #8
 8004ebe:	6939      	ldr	r1, [r7, #16]
 8004ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	2203      	movs	r2, #3
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f003 0203 	and.w	r2, r3, #3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80ac 	beq.w	800505e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f06:	4b5f      	ldr	r3, [pc, #380]	; (8005084 <HAL_GPIO_Init+0x330>)
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	4a5e      	ldr	r2, [pc, #376]	; (8005084 <HAL_GPIO_Init+0x330>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6613      	str	r3, [r2, #96]	; 0x60
 8004f12:	4b5c      	ldr	r3, [pc, #368]	; (8005084 <HAL_GPIO_Init+0x330>)
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f1e:	4a5a      	ldr	r2, [pc, #360]	; (8005088 <HAL_GPIO_Init+0x334>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	3302      	adds	r3, #2
 8004f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f48:	d025      	beq.n	8004f96 <HAL_GPIO_Init+0x242>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a4f      	ldr	r2, [pc, #316]	; (800508c <HAL_GPIO_Init+0x338>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <HAL_GPIO_Init+0x23e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4e      	ldr	r2, [pc, #312]	; (8005090 <HAL_GPIO_Init+0x33c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d019      	beq.n	8004f8e <HAL_GPIO_Init+0x23a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4d      	ldr	r2, [pc, #308]	; (8005094 <HAL_GPIO_Init+0x340>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_GPIO_Init+0x236>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a4c      	ldr	r2, [pc, #304]	; (8005098 <HAL_GPIO_Init+0x344>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00d      	beq.n	8004f86 <HAL_GPIO_Init+0x232>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	; (800509c <HAL_GPIO_Init+0x348>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <HAL_GPIO_Init+0x22e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a4a      	ldr	r2, [pc, #296]	; (80050a0 <HAL_GPIO_Init+0x34c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_GPIO_Init+0x22a>
 8004f7a:	2306      	movs	r3, #6
 8004f7c:	e00c      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f7e:	2307      	movs	r3, #7
 8004f80:	e00a      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f82:	2305      	movs	r3, #5
 8004f84:	e008      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f86:	2304      	movs	r3, #4
 8004f88:	e006      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e004      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_GPIO_Init+0x244>
 8004f96:	2300      	movs	r3, #0
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	f002 0203 	and.w	r2, r2, #3
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	4093      	lsls	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fa8:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_GPIO_Init+0x334>)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3302      	adds	r3, #2
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fda:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fe0:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4013      	ands	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_GPIO_Init+0x350>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	43db      	mvns	r3, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4013      	ands	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_GPIO_Init+0x350>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	43db      	mvns	r3, r3
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4013      	ands	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_GPIO_Init+0x350>)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3301      	adds	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	f47f ae78 	bne.w	8004d64 <HAL_GPIO_Init+0x10>
  }
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	40010000 	.word	0x40010000
 800508c:	48000400 	.word	0x48000400
 8005090:	48000800 	.word	0x48000800
 8005094:	48000c00 	.word	0x48000c00
 8005098:	48001000 	.word	0x48001000
 800509c:	48001400 	.word	0x48001400
 80050a0:	48001800 	.word	0x48001800
 80050a4:	40010400 	.word	0x40010400

080050a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
 80050b4:	4613      	mov	r3, r2
 80050b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b8:	787b      	ldrb	r3, [r7, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050c4:	e002      	b.n	80050cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40007000 	.word	0x40007000

080050f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005102:	d130      	bne.n	8005166 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d038      	beq.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800511c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005120:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2232      	movs	r2, #50	; 0x32
 8005128:	fb02 f303 	mul.w	r3, r2, r3
 800512c:	4a1b      	ldr	r2, [pc, #108]	; (800519c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0c9b      	lsrs	r3, r3, #18
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005138:	e002      	b.n	8005140 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3b01      	subs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d102      	bne.n	8005154 <HAL_PWREx_ControlVoltageScaling+0x60>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f2      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d110      	bne.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d007      	beq.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800517c:	4a05      	ldr	r2, [pc, #20]	; (8005194 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800517e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005182:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40007000 	.word	0x40007000
 8005198:	20000000 	.word	0x20000000
 800519c:	431bde83 	.word	0x431bde83

080051a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e3ca      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b97      	ldr	r3, [pc, #604]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b94      	ldr	r3, [pc, #592]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80e4 	beq.w	800539c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_RCC_OscConfig+0x4a>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	f040 808b 	bne.w	80052f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	f040 8087 	bne.w	80052f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051ea:	4b89      	ldr	r3, [pc, #548]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x62>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e3a2      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	4b82      	ldr	r3, [pc, #520]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_RCC_OscConfig+0x7c>
 8005212:	4b7f      	ldr	r3, [pc, #508]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	e005      	b.n	8005228 <HAL_RCC_OscConfig+0x88>
 800521c:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005228:	4293      	cmp	r3, r2
 800522a:	d223      	bcs.n	8005274 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fd87 	bl	8005d44 <RCC_SetFlashLatencyFromMSIRange>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e383      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005240:	4b73      	ldr	r3, [pc, #460]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a72      	ldr	r2, [pc, #456]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005246:	f043 0308 	orr.w	r3, r3, #8
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b70      	ldr	r3, [pc, #448]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	496d      	ldr	r1, [pc, #436]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800525e:	4b6c      	ldr	r3, [pc, #432]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	4968      	ldr	r1, [pc, #416]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800526e:	4313      	orrs	r3, r2
 8005270:	604b      	str	r3, [r1, #4]
 8005272:	e025      	b.n	80052c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005274:	4b66      	ldr	r3, [pc, #408]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a65      	ldr	r2, [pc, #404]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800527a:	f043 0308 	orr.w	r3, r3, #8
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4960      	ldr	r1, [pc, #384]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005292:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	495b      	ldr	r1, [pc, #364]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fd47 	bl	8005d44 <RCC_SetFlashLatencyFromMSIRange>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e343      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c0:	f000 fc4a 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b52      	ldr	r3, [pc, #328]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	4950      	ldr	r1, [pc, #320]	; (8005414 <HAL_RCC_OscConfig+0x274>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	4a4e      	ldr	r2, [pc, #312]	; (8005418 <HAL_RCC_OscConfig+0x278>)
 80052de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052e0:	4b4e      	ldr	r3, [pc, #312]	; (800541c <HAL_RCC_OscConfig+0x27c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fc ff2b 	bl	8002140 <HAL_InitTick>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d052      	beq.n	800539a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	e327      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d032      	beq.n	8005366 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005300:	4b43      	ldr	r3, [pc, #268]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a42      	ldr	r2, [pc, #264]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800530c:	f7fd fef8 	bl	8003100 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005314:	f7fd fef4 	bl	8003100 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e310      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005326:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a36      	ldr	r2, [pc, #216]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4931      	ldr	r1, [pc, #196]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800534c:	4313      	orrs	r3, r2
 800534e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	492c      	ldr	r1, [pc, #176]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
 8005364:	e01a      	b.n	800539c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005366:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a29      	ldr	r2, [pc, #164]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005372:	f7fd fec5 	bl	8003100 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800537a:	f7fd fec1 	bl	8003100 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e2dd      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800538c:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x1da>
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800539a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d074      	beq.n	8005492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x21a>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d10e      	bne.n	80053d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d10b      	bne.n	80053d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d064      	beq.n	8005490 <HAL_RCC_OscConfig+0x2f0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d160      	bne.n	8005490 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e2ba      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053da:	d106      	bne.n	80053ea <HAL_RCC_OscConfig+0x24a>
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0b      	ldr	r2, [pc, #44]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80053e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e026      	b.n	8005438 <HAL_RCC_OscConfig+0x298>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f2:	d115      	bne.n	8005420 <HAL_RCC_OscConfig+0x280>
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a05      	ldr	r2, [pc, #20]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 80053fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a02      	ldr	r2, [pc, #8]	; (8005410 <HAL_RCC_OscConfig+0x270>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e014      	b.n	8005438 <HAL_RCC_OscConfig+0x298>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	080101b4 	.word	0x080101b4
 8005418:	20000000 	.word	0x20000000
 800541c:	20000004 	.word	0x20000004
 8005420:	4ba0      	ldr	r3, [pc, #640]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a9f      	ldr	r2, [pc, #636]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b9d      	ldr	r3, [pc, #628]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a9c      	ldr	r2, [pc, #624]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd fe5e 	bl	8003100 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd fe5a 	bl	8003100 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e276      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545a:	4b92      	ldr	r3, [pc, #584]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0x2a8>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fe4a 	bl	8003100 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005470:	f7fd fe46 	bl	8003100 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e262      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005482:	4b88      	ldr	r3, [pc, #544]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x2d0>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d060      	beq.n	8005560 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x310>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d119      	bne.n	80054de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d116      	bne.n	80054de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b0:	4b7c      	ldr	r3, [pc, #496]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_OscConfig+0x328>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e23f      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	4b76      	ldr	r3, [pc, #472]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	4973      	ldr	r1, [pc, #460]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054dc:	e040      	b.n	8005560 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d023      	beq.n	800552e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e6:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a6e      	ldr	r2, [pc, #440]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80054ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fd fe05 	bl	8003100 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fa:	f7fd fe01 	bl	8003100 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e21d      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550c:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005518:	4b62      	ldr	r3, [pc, #392]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	495f      	ldr	r1, [pc, #380]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005528:	4313      	orrs	r3, r2
 800552a:	604b      	str	r3, [r1, #4]
 800552c:	e018      	b.n	8005560 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800552e:	4b5d      	ldr	r3, [pc, #372]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a5c      	ldr	r2, [pc, #368]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fd fde1 	bl	8003100 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005542:	f7fd fddd 	bl	8003100 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e1f9      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005554:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d03c      	beq.n	80055e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01c      	beq.n	80055ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fd fdbc 	bl	8003100 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558c:	f7fd fdb8 	bl	8003100 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1d4      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800559e:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80055a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ef      	beq.n	800558c <HAL_RCC_OscConfig+0x3ec>
 80055ac:	e01b      	b.n	80055e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ae:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80055b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b4:	4a3b      	ldr	r2, [pc, #236]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055be:	f7fd fd9f 	bl	8003100 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c6:	f7fd fd9b 	bl	8003100 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e1b7      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055d8:	4b32      	ldr	r3, [pc, #200]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ef      	bne.n	80055c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a6 	beq.w	8005740 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	6593      	str	r3, [r2, #88]	; 0x58
 8005610:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561c:	2301      	movs	r3, #1
 800561e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <HAL_RCC_OscConfig+0x508>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d118      	bne.n	800565e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800562c:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <HAL_RCC_OscConfig+0x508>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <HAL_RCC_OscConfig+0x508>)
 8005632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005638:	f7fd fd62 	bl	8003100 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005640:	f7fd fd5e 	bl	8003100 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e17a      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <HAL_RCC_OscConfig+0x508>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d108      	bne.n	8005678 <HAL_RCC_OscConfig+0x4d8>
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566c:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005676:	e029      	b.n	80056cc <HAL_RCC_OscConfig+0x52c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b05      	cmp	r3, #5
 800567e:	d115      	bne.n	80056ac <HAL_RCC_OscConfig+0x50c>
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	4a03      	ldr	r2, [pc, #12]	; (80056a4 <HAL_RCC_OscConfig+0x504>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a0:	e014      	b.n	80056cc <HAL_RCC_OscConfig+0x52c>
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40007000 	.word	0x40007000
 80056ac:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	4a9b      	ldr	r2, [pc, #620]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056bc:	4b98      	ldr	r3, [pc, #608]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	4a97      	ldr	r2, [pc, #604]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d016      	beq.n	8005702 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fd14 	bl	8003100 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd fd10 	bl	8003100 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e12a      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f2:	4b8b      	ldr	r3, [pc, #556]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ed      	beq.n	80056dc <HAL_RCC_OscConfig+0x53c>
 8005700:	e015      	b.n	800572e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005702:	f7fd fcfd 	bl	8003100 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fd fcf9 	bl	8003100 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	; 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e113      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005720:	4b7f      	ldr	r3, [pc, #508]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ed      	bne.n	800570a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800572e:	7ffb      	ldrb	r3, [r7, #31]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005734:	4b7a      	ldr	r3, [pc, #488]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	4a79      	ldr	r2, [pc, #484]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 800573a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80fe 	beq.w	8005946 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b02      	cmp	r3, #2
 8005750:	f040 80d0 	bne.w	80058f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005754:	4b72      	ldr	r3, [pc, #456]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	429a      	cmp	r2, r3
 8005766:	d130      	bne.n	80057ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	3b01      	subs	r3, #1
 8005774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d127      	bne.n	80057ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d11f      	bne.n	80057ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	2a07      	cmp	r2, #7
 8005796:	bf14      	ite	ne
 8005798:	2201      	movne	r2, #1
 800579a:	2200      	moveq	r2, #0
 800579c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800579e:	4293      	cmp	r3, r2
 80057a0:	d113      	bne.n	80057ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	3b01      	subs	r3, #1
 80057b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d109      	bne.n	80057ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	3b01      	subs	r3, #1
 80057c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d06e      	beq.n	80058a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d069      	beq.n	80058a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057d0:	4b53      	ldr	r3, [pc, #332]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057dc:	4b50      	ldr	r3, [pc, #320]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0ad      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a4b      	ldr	r2, [pc, #300]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80057f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057f8:	f7fd fc82 	bl	8003100 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd fc7e 	bl	8003100 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e09a      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005812:	4b43      	ldr	r3, [pc, #268]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800581e:	4b40      	ldr	r3, [pc, #256]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	4b40      	ldr	r3, [pc, #256]	; (8005924 <HAL_RCC_OscConfig+0x784>)
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800582e:	3a01      	subs	r2, #1
 8005830:	0112      	lsls	r2, r2, #4
 8005832:	4311      	orrs	r1, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005838:	0212      	lsls	r2, r2, #8
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005840:	0852      	lsrs	r2, r2, #1
 8005842:	3a01      	subs	r2, #1
 8005844:	0552      	lsls	r2, r2, #21
 8005846:	4311      	orrs	r1, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800584c:	0852      	lsrs	r2, r2, #1
 800584e:	3a01      	subs	r2, #1
 8005850:	0652      	lsls	r2, r2, #25
 8005852:	4311      	orrs	r1, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005858:	0912      	lsrs	r2, r2, #4
 800585a:	0452      	lsls	r2, r2, #17
 800585c:	430a      	orrs	r2, r1
 800585e:	4930      	ldr	r1, [pc, #192]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005860:	4313      	orrs	r3, r2
 8005862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005864:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 800586a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800586e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005870:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800587c:	f7fd fc40 	bl	8003100 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005884:	f7fd fc3c 	bl	8003100 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e058      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058a2:	e050      	b.n	8005946 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e04f      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d148      	bne.n	8005946 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a16      	ldr	r2, [pc, #88]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058cc:	f7fd fc18 	bl	8003100 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fd fc14 	bl	8003100 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e030      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x734>
 80058f2:	e028      	b.n	8005946 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d023      	beq.n	8005942 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <HAL_RCC_OscConfig+0x780>)
 8005900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fd fbfb 	bl	8003100 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	e00c      	b.n	8005928 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fd fbf7 	bl	8003100 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d905      	bls.n	8005928 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e013      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
 8005920:	40021000 	.word	0x40021000
 8005924:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_OscConfig+0x7b0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1ec      	bne.n	800590e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_RCC_OscConfig+0x7b0>)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4905      	ldr	r1, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x7b0>)
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_OscConfig+0x7b4>)
 800593c:	4013      	ands	r3, r2
 800593e:	60cb      	str	r3, [r1, #12]
 8005940:	e001      	b.n	8005946 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000
 8005954:	feeefffc 	.word	0xfeeefffc

08005958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0e7      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800596c:	4b75      	ldr	r3, [pc, #468]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d910      	bls.n	800599c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 0207 	bic.w	r2, r3, #7
 8005982:	4970      	ldr	r1, [pc, #448]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	4313      	orrs	r3, r2
 8005988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0cf      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d908      	bls.n	80059ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b63      	ldr	r3, [pc, #396]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4960      	ldr	r1, [pc, #384]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d04c      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d107      	bne.n	80059ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059de:	4b5a      	ldr	r3, [pc, #360]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d121      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0a6      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f6:	4b54      	ldr	r3, [pc, #336]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e09a      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a0e:	4b4e      	ldr	r3, [pc, #312]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e08e      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a1e:	4b4a      	ldr	r3, [pc, #296]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e086      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b46      	ldr	r3, [pc, #280]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4943      	ldr	r1, [pc, #268]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fd fb5e 	bl	8003100 <HAL_GetTick>
 8005a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fd fb5a 	bl	8003100 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e06e      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b3a      	ldr	r3, [pc, #232]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d208      	bcs.n	8005a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b2e      	ldr	r3, [pc, #184]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	492b      	ldr	r1, [pc, #172]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9e:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d210      	bcs.n	8005ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 0207 	bic.w	r2, r3, #7
 8005ab4:	4923      	ldr	r1, [pc, #140]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abc:	4b21      	ldr	r3, [pc, #132]	; (8005b44 <HAL_RCC_ClockConfig+0x1ec>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d001      	beq.n	8005ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e036      	b.n	8005b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4918      	ldr	r1, [pc, #96]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005af8:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4910      	ldr	r1, [pc, #64]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b0c:	f000 f824 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <HAL_RCC_ClockConfig+0x1f0>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	490b      	ldr	r1, [pc, #44]	; (8005b4c <HAL_RCC_ClockConfig+0x1f4>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <HAL_RCC_ClockConfig+0x1f8>)
 8005b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <HAL_RCC_ClockConfig+0x1fc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fc fb05 	bl	8002140 <HAL_InitTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40022000 	.word	0x40022000
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	080101b4 	.word	0x080101b4
 8005b50:	20000000 	.word	0x20000000
 8005b54:	20000004 	.word	0x20000004

08005b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b70:	4b3b      	ldr	r3, [pc, #236]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x34>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d121      	bne.n	8005bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d11e      	bne.n	8005bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b8c:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	e005      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ba8:	4b2d      	ldr	r3, [pc, #180]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bc8:	e00a      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bd0:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	e004      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d101      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8005bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d134      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005be6:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d003      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0xac>
 8005bfc:	e005      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c00:	617b      	str	r3, [r7, #20]
      break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c04:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8005c06:	617b      	str	r3, [r7, #20]
      break;
 8005c08:	e002      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	617b      	str	r3, [r7, #20]
      break;
 8005c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	0a1b      	lsrs	r3, r3, #8
 8005c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	fb03 f202 	mul.w	r2, r3, r2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	0e5b      	lsrs	r3, r3, #25
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	3301      	adds	r3, #1
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c50:	69bb      	ldr	r3, [r7, #24]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3724      	adds	r7, #36	; 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000
 8005c64:	080101cc 	.word	0x080101cc
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	007a1200 	.word	0x007a1200

08005c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000000 	.word	0x20000000

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	080101c4 	.word	0x080101c4

08005cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cb8:	f7ff ffda 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0adb      	lsrs	r3, r3, #11
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4904      	ldr	r1, [pc, #16]	; (8005cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	080101c4 	.word	0x080101c4

08005ce0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	220f      	movs	r2, #15
 8005cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0203 	and.w	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <HAL_RCC_GetClockConfig+0x5c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	08db      	lsrs	r3, r3, #3
 8005d1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_RCC_GetClockConfig+0x60>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0207 	and.w	r2, r3, #7
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	40022000 	.word	0x40022000

08005d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d50:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d5c:	f7ff f9bc 	bl	80050d8 <HAL_PWREx_GetVoltageRange>
 8005d60:	6178      	str	r0, [r7, #20]
 8005d62:	e014      	b.n	8005d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d64:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a24      	ldr	r2, [pc, #144]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d70:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d7c:	f7ff f9ac 	bl	80050d8 <HAL_PWREx_GetVoltageRange>
 8005d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d10b      	bne.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d919      	bls.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2ba0      	cmp	r3, #160	; 0xa0
 8005da0:	d902      	bls.n	8005da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005da2:	2302      	movs	r3, #2
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e013      	b.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005da8:	2301      	movs	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	e010      	b.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d902      	bls.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005db4:	2303      	movs	r3, #3
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	e00a      	b.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d102      	bne.n	8005dc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e004      	b.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b70      	cmp	r3, #112	; 0x70
 8005dca:	d101      	bne.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dcc:	2301      	movs	r3, #1
 8005dce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 0207 	bic.w	r2, r3, #7
 8005dd8:	4909      	ldr	r1, [pc, #36]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d001      	beq.n	8005df2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40022000 	.word	0x40022000

08005e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e10:	2300      	movs	r3, #0
 8005e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d041      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e28:	d02a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e2e:	d824      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e34:	d008      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e3a:	d81e      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e44:	d010      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e46:	e018      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e48:	4b86      	ldr	r3, [pc, #536]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a85      	ldr	r2, [pc, #532]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e54:	e015      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fabb 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e66:	e00c      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3320      	adds	r3, #32
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fba6 	bl	80065c0 <RCCEx_PLLSAI2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e82:	7cfb      	ldrb	r3, [r7, #19]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e88:	4b76      	ldr	r3, [pc, #472]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e96:	4973      	ldr	r1, [pc, #460]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e9e:	e001      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d041      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005eb8:	d02a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005eba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ebe:	d824      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec4:	d008      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eca:	d81e      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ed4:	d010      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ed6:	e018      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ed8:	4b62      	ldr	r3, [pc, #392]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a61      	ldr	r2, [pc, #388]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ee4:	e015      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fa73 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ef6:	e00c      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3320      	adds	r3, #32
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fb5e 	bl	80065c0 <RCCEx_PLLSAI2_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f08:	e003      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f18:	4b52      	ldr	r3, [pc, #328]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f26:	494f      	ldr	r1, [pc, #316]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f2e:	e001      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80a0 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f46:	4b47      	ldr	r3, [pc, #284]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5c:	4b41      	ldr	r3, [pc, #260]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f60:	4a40      	ldr	r2, [pc, #256]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6593      	str	r3, [r2, #88]	; 0x58
 8005f68:	4b3e      	ldr	r3, [pc, #248]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f74:	2301      	movs	r3, #1
 8005f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f78:	4b3b      	ldr	r3, [pc, #236]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3a      	ldr	r2, [pc, #232]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f84:	f7fd f8bc 	bl	8003100 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f8a:	e009      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fd f8b8 	bl	8003100 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d902      	bls.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8005f9e:	e005      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fa0:	4b31      	ldr	r3, [pc, #196]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0ef      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d15c      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d019      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fdc:	4b21      	ldr	r3, [pc, #132]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	4a20      	ldr	r2, [pc, #128]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fec:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff2:	4a1c      	ldr	r2, [pc, #112]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ffc:	4a19      	ldr	r2, [pc, #100]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d016      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600e:	f7fd f877 	bl	8003100 <HAL_GetTick>
 8006012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006014:	e00b      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fd f873 	bl	8003100 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	4293      	cmp	r3, r2
 8006026:	d902      	bls.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	74fb      	strb	r3, [r7, #19]
            break;
 800602c:	e006      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ec      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10c      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006052:	4904      	ldr	r1, [pc, #16]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800605a:	e009      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800605c:	7cfb      	ldrb	r3, [r7, #19]
 800605e:	74bb      	strb	r3, [r7, #18]
 8006060:	e006      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006070:	7c7b      	ldrb	r3, [r7, #17]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d105      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006076:	4b9e      	ldr	r3, [pc, #632]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4a9d      	ldr	r2, [pc, #628]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006080:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800608e:	4b98      	ldr	r3, [pc, #608]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f023 0203 	bic.w	r2, r3, #3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	4994      	ldr	r1, [pc, #592]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060b0:	4b8f      	ldr	r3, [pc, #572]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f023 020c 	bic.w	r2, r3, #12
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	498c      	ldr	r1, [pc, #560]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060d2:	4b87      	ldr	r3, [pc, #540]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	4983      	ldr	r1, [pc, #524]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060f4:	4b7e      	ldr	r3, [pc, #504]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	497b      	ldr	r1, [pc, #492]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006116:	4b76      	ldr	r3, [pc, #472]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	4972      	ldr	r1, [pc, #456]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006138:	4b6d      	ldr	r3, [pc, #436]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	496a      	ldr	r1, [pc, #424]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800615a:	4b65      	ldr	r3, [pc, #404]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	4961      	ldr	r1, [pc, #388]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800617c:	4b5c      	ldr	r3, [pc, #368]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	4959      	ldr	r1, [pc, #356]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800619e:	4b54      	ldr	r3, [pc, #336]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	4950      	ldr	r1, [pc, #320]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061c0:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	4948      	ldr	r1, [pc, #288]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	493f      	ldr	r1, [pc, #252]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d028      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006204:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006212:	4937      	ldr	r1, [pc, #220]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006222:	d106      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006224:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622e:	60d3      	str	r3, [r2, #12]
 8006230:	e011      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800623a:	d10c      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	2101      	movs	r1, #1
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f8c8 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d028      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006262:	4b23      	ldr	r3, [pc, #140]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	491f      	ldr	r1, [pc, #124]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006280:	d106      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006282:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800628c:	60d3      	str	r3, [r2, #12]
 800628e:	e011      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3304      	adds	r3, #4
 800629e:	2101      	movs	r1, #1
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f899 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02b      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	4908      	ldr	r1, [pc, #32]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062de:	d109      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e0:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a02      	ldr	r2, [pc, #8]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ea:	60d3      	str	r3, [r2, #12]
 80062ec:	e014      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062ee:	bf00      	nop
 80062f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062fc:	d10c      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	2101      	movs	r1, #1
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f867 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800630e:	7cfb      	ldrb	r3, [r7, #19]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006314:	7cfb      	ldrb	r3, [r7, #19]
 8006316:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02f      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006324:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006332:	4928      	ldr	r1, [pc, #160]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006342:	d10d      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f844 	bl	80063d8 <RCCEx_PLLSAI1_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d014      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800635a:	7cfb      	ldrb	r3, [r7, #19]
 800635c:	74bb      	strb	r3, [r7, #18]
 800635e:	e011      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006368:	d10c      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3320      	adds	r3, #32
 800636e:	2102      	movs	r1, #2
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f925 	bl	80065c0 <RCCEx_PLLSAI2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006380:	7cfb      	ldrb	r3, [r7, #19]
 8006382:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006390:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	490d      	ldr	r1, [pc, #52]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	4904      	ldr	r1, [pc, #16]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000

080063d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063e6:	4b75      	ldr	r3, [pc, #468]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d018      	beq.n	8006424 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063f2:	4b72      	ldr	r3, [pc, #456]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0203 	and.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d10d      	bne.n	800641e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
       ||
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800640a:	4b6c      	ldr	r3, [pc, #432]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
       ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d047      	beq.n	80064ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
 8006422:	e044      	b.n	80064ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d018      	beq.n	800645e <RCCEx_PLLSAI1_Config+0x86>
 800642c:	2b03      	cmp	r3, #3
 800642e:	d825      	bhi.n	800647c <RCCEx_PLLSAI1_Config+0xa4>
 8006430:	2b01      	cmp	r3, #1
 8006432:	d002      	beq.n	800643a <RCCEx_PLLSAI1_Config+0x62>
 8006434:	2b02      	cmp	r3, #2
 8006436:	d009      	beq.n	800644c <RCCEx_PLLSAI1_Config+0x74>
 8006438:	e020      	b.n	800647c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800643a:	4b60      	ldr	r3, [pc, #384]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d11d      	bne.n	8006482 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644a:	e01a      	b.n	8006482 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800644c:	4b5b      	ldr	r3, [pc, #364]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006454:	2b00      	cmp	r3, #0
 8006456:	d116      	bne.n	8006486 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645c:	e013      	b.n	8006486 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800645e:	4b57      	ldr	r3, [pc, #348]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800646a:	4b54      	ldr	r3, [pc, #336]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800647a:	e006      	b.n	800648a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e004      	b.n	800648c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006482:	bf00      	nop
 8006484:	e002      	b.n	800648c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800648a:	bf00      	nop
    }

    if(status == HAL_OK)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006492:	4b4a      	ldr	r3, [pc, #296]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6819      	ldr	r1, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	430b      	orrs	r3, r1
 80064a8:	4944      	ldr	r1, [pc, #272]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d17d      	bne.n	80065b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b4:	4b41      	ldr	r3, [pc, #260]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a40      	ldr	r2, [pc, #256]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c0:	f7fc fe1e 	bl	8003100 <HAL_GetTick>
 80064c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c6:	e009      	b.n	80064dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c8:	f7fc fe1a 	bl	8003100 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d902      	bls.n	80064dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	73fb      	strb	r3, [r7, #15]
        break;
 80064da:	e005      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064dc:	4b37      	ldr	r3, [pc, #220]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ef      	bne.n	80064c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d160      	bne.n	80065b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d111      	bne.n	8006518 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f4:	4b31      	ldr	r3, [pc, #196]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80064fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6892      	ldr	r2, [r2, #8]
 8006504:	0211      	lsls	r1, r2, #8
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	68d2      	ldr	r2, [r2, #12]
 800650a:	0912      	lsrs	r2, r2, #4
 800650c:	0452      	lsls	r2, r2, #17
 800650e:	430a      	orrs	r2, r1
 8006510:	492a      	ldr	r1, [pc, #168]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006512:	4313      	orrs	r3, r2
 8006514:	610b      	str	r3, [r1, #16]
 8006516:	e027      	b.n	8006568 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d112      	bne.n	8006544 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800651e:	4b27      	ldr	r3, [pc, #156]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	0211      	lsls	r1, r2, #8
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6912      	ldr	r2, [r2, #16]
 8006534:	0852      	lsrs	r2, r2, #1
 8006536:	3a01      	subs	r2, #1
 8006538:	0552      	lsls	r2, r2, #21
 800653a:	430a      	orrs	r2, r1
 800653c:	491f      	ldr	r1, [pc, #124]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800653e:	4313      	orrs	r3, r2
 8006540:	610b      	str	r3, [r1, #16]
 8006542:	e011      	b.n	8006568 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006544:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800654c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6892      	ldr	r2, [r2, #8]
 8006554:	0211      	lsls	r1, r2, #8
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6952      	ldr	r2, [r2, #20]
 800655a:	0852      	lsrs	r2, r2, #1
 800655c:	3a01      	subs	r2, #1
 800655e:	0652      	lsls	r2, r2, #25
 8006560:	430a      	orrs	r2, r1
 8006562:	4916      	ldr	r1, [pc, #88]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006564:	4313      	orrs	r3, r2
 8006566:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006568:	4b14      	ldr	r3, [pc, #80]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800656e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006574:	f7fc fdc4 	bl	8003100 <HAL_GetTick>
 8006578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800657a:	e009      	b.n	8006590 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800657c:	f7fc fdc0 	bl	8003100 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d902      	bls.n	8006590 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
          break;
 800658e:	e005      	b.n	800659c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ef      	beq.n	800657c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	4904      	ldr	r1, [pc, #16]	; (80065bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000

080065c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ce:	4b6a      	ldr	r3, [pc, #424]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0203 	and.w	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d10d      	bne.n	8006606 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
       ||
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065f2:	4b61      	ldr	r3, [pc, #388]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
       ||
 8006602:	429a      	cmp	r2, r3
 8006604:	d047      	beq.n	8006696 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	e044      	b.n	8006696 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d018      	beq.n	8006646 <RCCEx_PLLSAI2_Config+0x86>
 8006614:	2b03      	cmp	r3, #3
 8006616:	d825      	bhi.n	8006664 <RCCEx_PLLSAI2_Config+0xa4>
 8006618:	2b01      	cmp	r3, #1
 800661a:	d002      	beq.n	8006622 <RCCEx_PLLSAI2_Config+0x62>
 800661c:	2b02      	cmp	r3, #2
 800661e:	d009      	beq.n	8006634 <RCCEx_PLLSAI2_Config+0x74>
 8006620:	e020      	b.n	8006664 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006622:	4b55      	ldr	r3, [pc, #340]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d11d      	bne.n	800666a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006632:	e01a      	b.n	800666a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006634:	4b50      	ldr	r3, [pc, #320]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663c:	2b00      	cmp	r3, #0
 800663e:	d116      	bne.n	800666e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006644:	e013      	b.n	800666e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006646:	4b4c      	ldr	r3, [pc, #304]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006652:	4b49      	ldr	r3, [pc, #292]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006662:	e006      	b.n	8006672 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
      break;
 8006668:	e004      	b.n	8006674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006672:	bf00      	nop
    }

    if(status == HAL_OK)
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800667a:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	3b01      	subs	r3, #1
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	430b      	orrs	r3, r1
 8006690:	4939      	ldr	r1, [pc, #228]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006692:	4313      	orrs	r3, r2
 8006694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d167      	bne.n	800676c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800669c:	4b36      	ldr	r3, [pc, #216]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a35      	ldr	r2, [pc, #212]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a8:	f7fc fd2a 	bl	8003100 <HAL_GetTick>
 80066ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ae:	e009      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066b0:	f7fc fd26 	bl	8003100 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d902      	bls.n	80066c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	73fb      	strb	r3, [r7, #15]
        break;
 80066c2:	e005      	b.n	80066d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066c4:	4b2c      	ldr	r3, [pc, #176]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ef      	bne.n	80066b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d14a      	bne.n	800676c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d111      	bne.n	8006700 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066dc:	4b26      	ldr	r3, [pc, #152]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6892      	ldr	r2, [r2, #8]
 80066ec:	0211      	lsls	r1, r2, #8
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68d2      	ldr	r2, [r2, #12]
 80066f2:	0912      	lsrs	r2, r2, #4
 80066f4:	0452      	lsls	r2, r2, #17
 80066f6:	430a      	orrs	r2, r1
 80066f8:	491f      	ldr	r1, [pc, #124]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	614b      	str	r3, [r1, #20]
 80066fe:	e011      	b.n	8006724 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6892      	ldr	r2, [r2, #8]
 8006710:	0211      	lsls	r1, r2, #8
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6912      	ldr	r2, [r2, #16]
 8006716:	0852      	lsrs	r2, r2, #1
 8006718:	3a01      	subs	r2, #1
 800671a:	0652      	lsls	r2, r2, #25
 800671c:	430a      	orrs	r2, r1
 800671e:	4916      	ldr	r1, [pc, #88]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006720:	4313      	orrs	r3, r2
 8006722:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006724:	4b14      	ldr	r3, [pc, #80]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a13      	ldr	r2, [pc, #76]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006730:	f7fc fce6 	bl	8003100 <HAL_GetTick>
 8006734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006736:	e009      	b.n	800674c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006738:	f7fc fce2 	bl	8003100 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d902      	bls.n	800674c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	73fb      	strb	r3, [r7, #15]
          break;
 800674a:	e005      	b.n	8006758 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ef      	beq.n	8006738 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	4904      	ldr	r1, [pc, #16]	; (8006778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006768:	4313      	orrs	r3, r2
 800676a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000

0800677c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e049      	b.n	8006822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f841 	bl	800682a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f000 fc4c 	bl	8007058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e04f      	b.n	80068f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <HAL_TIM_Base_Start_IT+0xc4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01d      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006882:	d018      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_TIM_Base_Start_IT+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_TIM_Base_Start_IT+0xcc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <HAL_TIM_Base_Start_IT+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIM_Base_Start_IT+0xd4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_Base_Start_IT+0x76>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_TIM_Base_Start_IT+0xd8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d115      	bne.n	80068e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	4b17      	ldr	r3, [pc, #92]	; (800691c <HAL_TIM_Base_Start_IT+0xdc>)
 80068be:	4013      	ands	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d015      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ce:	d011      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e0:	e008      	b.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e000      	b.n	80068f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40013400 	.word	0x40013400
 8006918:	40014000 	.word	0x40014000
 800691c:	00010007 	.word	0x00010007

08006920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e049      	b.n	80069c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fb ffd6 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f000 fb7a 	bl	8007058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_TIM_PWM_Start+0x24>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e03c      	b.n	8006a6e <HAL_TIM_PWM_Start+0x9e>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d109      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x3e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	bf14      	ite	ne
 8006a06:	2301      	movne	r3, #1
 8006a08:	2300      	moveq	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	e02f      	b.n	8006a6e <HAL_TIM_PWM_Start+0x9e>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d109      	bne.n	8006a28 <HAL_TIM_PWM_Start+0x58>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	bf14      	ite	ne
 8006a20:	2301      	movne	r3, #1
 8006a22:	2300      	moveq	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	e022      	b.n	8006a6e <HAL_TIM_PWM_Start+0x9e>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b0c      	cmp	r3, #12
 8006a2c:	d109      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x72>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	bf14      	ite	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	e015      	b.n	8006a6e <HAL_TIM_PWM_Start+0x9e>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d109      	bne.n	8006a5c <HAL_TIM_PWM_Start+0x8c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	e008      	b.n	8006a6e <HAL_TIM_PWM_Start+0x9e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e09c      	b.n	8006bb0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start+0xb6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	e023      	b.n	8006ace <HAL_TIM_PWM_Start+0xfe>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xc6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a94:	e01b      	b.n	8006ace <HAL_TIM_PWM_Start+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	e013      	b.n	8006ace <HAL_TIM_PWM_Start+0xfe>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	d104      	bne.n	8006ab6 <HAL_TIM_PWM_Start+0xe6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ab4:	e00b      	b.n	8006ace <HAL_TIM_PWM_Start+0xfe>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0xf6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	e003      	b.n	8006ace <HAL_TIM_PWM_Start+0xfe>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fe2e 	bl	8007738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <HAL_TIM_PWM_Start+0x1e8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_TIM_PWM_Start+0x13e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a34      	ldr	r2, [pc, #208]	; (8006bbc <HAL_TIM_PWM_Start+0x1ec>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_TIM_PWM_Start+0x13e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a32      	ldr	r2, [pc, #200]	; (8006bc0 <HAL_TIM_PWM_Start+0x1f0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_TIM_PWM_Start+0x13e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a31      	ldr	r2, [pc, #196]	; (8006bc4 <HAL_TIM_PWM_Start+0x1f4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_TIM_PWM_Start+0x13e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <HAL_TIM_PWM_Start+0x1f8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x142>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_PWM_Start+0x144>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a22      	ldr	r2, [pc, #136]	; (8006bb8 <HAL_TIM_PWM_Start+0x1e8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d018      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <HAL_TIM_PWM_Start+0x1fc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <HAL_TIM_PWM_Start+0x200>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <HAL_TIM_PWM_Start+0x204>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_TIM_PWM_Start+0x1ec>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x19e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <HAL_TIM_PWM_Start+0x1f0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d115      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <HAL_TIM_PWM_Start+0x208>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d015      	beq.n	8006bac <HAL_TIM_PWM_Start+0x1dc>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b86:	d011      	beq.n	8006bac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	e008      	b.n	8006bac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e000      	b.n	8006bae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	00010007 	.word	0x00010007

08006bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d020      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0202 	mvn.w	r2, #2
 8006c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9f8 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006c2c:	e005      	b.n	8006c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f9ea 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9fb 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d020      	beq.n	8006c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0204 	mvn.w	r2, #4
 8006c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9d2 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006c78:	e005      	b.n	8006c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9c4 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9d5 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d020      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0208 	mvn.w	r2, #8
 8006ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2204      	movs	r2, #4
 8006cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9ac 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f99e 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f9af 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 0310 	and.w	r3, r3, #16
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d020      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01b      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0210 	mvn.w	r2, #16
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f986 	bl	800701c <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f978 	bl	8007008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f989 	bl	8007030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0201 	mvn.w	r2, #1
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fb f9bc 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00c      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fe1c 	bl	80079a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fe14 	bl	80079b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f948 	bl	8007044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0220 	mvn.w	r2, #32
 8006dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fddc 	bl	8007990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e0ff      	b.n	8006ffe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b14      	cmp	r3, #20
 8006e0a:	f200 80f0 	bhi.w	8006fee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006fef 	.word	0x08006fef
 8006e1c:	08006fef 	.word	0x08006fef
 8006e20:	08006fef 	.word	0x08006fef
 8006e24:	08006ea9 	.word	0x08006ea9
 8006e28:	08006fef 	.word	0x08006fef
 8006e2c:	08006fef 	.word	0x08006fef
 8006e30:	08006fef 	.word	0x08006fef
 8006e34:	08006eeb 	.word	0x08006eeb
 8006e38:	08006fef 	.word	0x08006fef
 8006e3c:	08006fef 	.word	0x08006fef
 8006e40:	08006fef 	.word	0x08006fef
 8006e44:	08006f2b 	.word	0x08006f2b
 8006e48:	08006fef 	.word	0x08006fef
 8006e4c:	08006fef 	.word	0x08006fef
 8006e50:	08006fef 	.word	0x08006fef
 8006e54:	08006f6d 	.word	0x08006f6d
 8006e58:	08006fef 	.word	0x08006fef
 8006e5c:	08006fef 	.word	0x08006fef
 8006e60:	08006fef 	.word	0x08006fef
 8006e64:	08006fad 	.word	0x08006fad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f98c 	bl	800718c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0208 	orr.w	r2, r2, #8
 8006e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0204 	bic.w	r2, r2, #4
 8006e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6999      	ldr	r1, [r3, #24]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691a      	ldr	r2, [r3, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	619a      	str	r2, [r3, #24]
      break;
 8006ea6:	e0a5      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f9fc 	bl	80072ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6999      	ldr	r1, [r3, #24]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	021a      	lsls	r2, r3, #8
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	619a      	str	r2, [r3, #24]
      break;
 8006ee8:	e084      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fa65 	bl	80073c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0208 	orr.w	r2, r2, #8
 8006f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0204 	bic.w	r2, r2, #4
 8006f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69d9      	ldr	r1, [r3, #28]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	61da      	str	r2, [r3, #28]
      break;
 8006f28:	e064      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 facd 	bl	80074d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69d9      	ldr	r1, [r3, #28]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	021a      	lsls	r2, r3, #8
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	61da      	str	r2, [r3, #28]
      break;
 8006f6a:	e043      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fb16 	bl	80075a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0208 	orr.w	r2, r2, #8
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0204 	bic.w	r2, r2, #4
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006faa:	e023      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fb5a 	bl	800766c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	021a      	lsls	r2, r3, #8
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fec:	e002      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop

08007008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a40      	ldr	r2, [pc, #256]	; (800716c <TIM_Base_SetConfig+0x114>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d00f      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a3d      	ldr	r2, [pc, #244]	; (8007170 <TIM_Base_SetConfig+0x118>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00b      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <TIM_Base_SetConfig+0x120>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a3a      	ldr	r2, [pc, #232]	; (800717c <TIM_Base_SetConfig+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d108      	bne.n	80070aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2f      	ldr	r2, [pc, #188]	; (800716c <TIM_Base_SetConfig+0x114>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01f      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d01b      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <TIM_Base_SetConfig+0x118>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d017      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2b      	ldr	r2, [pc, #172]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2a      	ldr	r2, [pc, #168]	; (8007178 <TIM_Base_SetConfig+0x120>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00f      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a29      	ldr	r2, [pc, #164]	; (800717c <TIM_Base_SetConfig+0x124>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00b      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a28      	ldr	r2, [pc, #160]	; (8007180 <TIM_Base_SetConfig+0x128>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a27      	ldr	r2, [pc, #156]	; (8007184 <TIM_Base_SetConfig+0x12c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <TIM_Base_SetConfig+0x130>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d108      	bne.n	8007104 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a10      	ldr	r2, [pc, #64]	; (800716c <TIM_Base_SetConfig+0x114>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00f      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a12      	ldr	r2, [pc, #72]	; (800717c <TIM_Base_SetConfig+0x124>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00b      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a11      	ldr	r2, [pc, #68]	; (8007180 <TIM_Base_SetConfig+0x128>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a10      	ldr	r2, [pc, #64]	; (8007184 <TIM_Base_SetConfig+0x12c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a0f      	ldr	r2, [pc, #60]	; (8007188 <TIM_Base_SetConfig+0x130>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	615a      	str	r2, [r3, #20]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f023 0201 	bic.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0303 	bic.w	r3, r3, #3
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 0302 	bic.w	r3, r3, #2
 80071d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <TIM_OC1_SetConfig+0x10c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00f      	beq.n	800720c <TIM_OC1_SetConfig+0x80>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a2b      	ldr	r2, [pc, #172]	; (800729c <TIM_OC1_SetConfig+0x110>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00b      	beq.n	800720c <TIM_OC1_SetConfig+0x80>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <TIM_OC1_SetConfig+0x114>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <TIM_OC1_SetConfig+0x80>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a29      	ldr	r2, [pc, #164]	; (80072a4 <TIM_OC1_SetConfig+0x118>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_OC1_SetConfig+0x80>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <TIM_OC1_SetConfig+0x11c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d10c      	bne.n	8007226 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 0308 	bic.w	r3, r3, #8
 8007212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f023 0304 	bic.w	r3, r3, #4
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <TIM_OC1_SetConfig+0x10c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00f      	beq.n	800724e <TIM_OC1_SetConfig+0xc2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a1a      	ldr	r2, [pc, #104]	; (800729c <TIM_OC1_SetConfig+0x110>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00b      	beq.n	800724e <TIM_OC1_SetConfig+0xc2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <TIM_OC1_SetConfig+0x114>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <TIM_OC1_SetConfig+0xc2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_OC1_SetConfig+0x118>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d003      	beq.n	800724e <TIM_OC1_SetConfig+0xc2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC1_SetConfig+0x11c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d111      	bne.n	8007272 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800725c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	621a      	str	r2, [r3, #32]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40013400 	.word	0x40013400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800

080072ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f023 0210 	bic.w	r2, r3, #16
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0320 	bic.w	r3, r3, #32
 80072fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a28      	ldr	r2, [pc, #160]	; (80073ac <TIM_OC2_SetConfig+0x100>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_OC2_SetConfig+0x6c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a27      	ldr	r2, [pc, #156]	; (80073b0 <TIM_OC2_SetConfig+0x104>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10d      	bne.n	8007334 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a1d      	ldr	r2, [pc, #116]	; (80073ac <TIM_OC2_SetConfig+0x100>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00f      	beq.n	800735c <TIM_OC2_SetConfig+0xb0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a1c      	ldr	r2, [pc, #112]	; (80073b0 <TIM_OC2_SetConfig+0x104>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00b      	beq.n	800735c <TIM_OC2_SetConfig+0xb0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <TIM_OC2_SetConfig+0x108>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_OC2_SetConfig+0xb0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a1a      	ldr	r2, [pc, #104]	; (80073b8 <TIM_OC2_SetConfig+0x10c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_OC2_SetConfig+0xb0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a19      	ldr	r2, [pc, #100]	; (80073bc <TIM_OC2_SetConfig+0x110>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d113      	bne.n	8007384 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800736a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40013400 	.word	0x40013400
 80073b4:	40014000 	.word	0x40014000
 80073b8:	40014400 	.word	0x40014400
 80073bc:	40014800 	.word	0x40014800

080073c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800740c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a27      	ldr	r2, [pc, #156]	; (80074bc <TIM_OC3_SetConfig+0xfc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_OC3_SetConfig+0x6a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <TIM_OC3_SetConfig+0x100>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d10d      	bne.n	8007446 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a1c      	ldr	r2, [pc, #112]	; (80074bc <TIM_OC3_SetConfig+0xfc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00f      	beq.n	800746e <TIM_OC3_SetConfig+0xae>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a1b      	ldr	r2, [pc, #108]	; (80074c0 <TIM_OC3_SetConfig+0x100>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00b      	beq.n	800746e <TIM_OC3_SetConfig+0xae>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1a      	ldr	r2, [pc, #104]	; (80074c4 <TIM_OC3_SetConfig+0x104>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <TIM_OC3_SetConfig+0xae>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <TIM_OC3_SetConfig+0x108>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_OC3_SetConfig+0xae>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a18      	ldr	r2, [pc, #96]	; (80074cc <TIM_OC3_SetConfig+0x10c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d113      	bne.n	8007496 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800747c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	621a      	str	r2, [r3, #32]
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40013400 	.word	0x40013400
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800

080074d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	031b      	lsls	r3, r3, #12
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a18      	ldr	r2, [pc, #96]	; (8007590 <TIM_OC4_SetConfig+0xc0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00f      	beq.n	8007554 <TIM_OC4_SetConfig+0x84>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a17      	ldr	r2, [pc, #92]	; (8007594 <TIM_OC4_SetConfig+0xc4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00b      	beq.n	8007554 <TIM_OC4_SetConfig+0x84>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a16      	ldr	r2, [pc, #88]	; (8007598 <TIM_OC4_SetConfig+0xc8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d007      	beq.n	8007554 <TIM_OC4_SetConfig+0x84>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a15      	ldr	r2, [pc, #84]	; (800759c <TIM_OC4_SetConfig+0xcc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_OC4_SetConfig+0x84>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a14      	ldr	r2, [pc, #80]	; (80075a0 <TIM_OC4_SetConfig+0xd0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d109      	bne.n	8007568 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	019b      	lsls	r3, r3, #6
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00
 8007594:	40013400 	.word	0x40013400
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800

080075a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a17      	ldr	r2, [pc, #92]	; (8007658 <TIM_OC5_SetConfig+0xb4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00f      	beq.n	800761e <TIM_OC5_SetConfig+0x7a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a16      	ldr	r2, [pc, #88]	; (800765c <TIM_OC5_SetConfig+0xb8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00b      	beq.n	800761e <TIM_OC5_SetConfig+0x7a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a15      	ldr	r2, [pc, #84]	; (8007660 <TIM_OC5_SetConfig+0xbc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d007      	beq.n	800761e <TIM_OC5_SetConfig+0x7a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a14      	ldr	r2, [pc, #80]	; (8007664 <TIM_OC5_SetConfig+0xc0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d003      	beq.n	800761e <TIM_OC5_SetConfig+0x7a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a13      	ldr	r2, [pc, #76]	; (8007668 <TIM_OC5_SetConfig+0xc4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d109      	bne.n	8007632 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007624:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	621a      	str	r2, [r3, #32]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	40012c00 	.word	0x40012c00
 800765c:	40013400 	.word	0x40013400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	051b      	lsls	r3, r3, #20
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <TIM_OC6_SetConfig+0xb8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_OC6_SetConfig+0x7c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <TIM_OC6_SetConfig+0xbc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <TIM_OC6_SetConfig+0x7c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a16      	ldr	r2, [pc, #88]	; (800772c <TIM_OC6_SetConfig+0xc0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_OC6_SetConfig+0x7c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a15      	ldr	r2, [pc, #84]	; (8007730 <TIM_OC6_SetConfig+0xc4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC6_SetConfig+0x7c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a14      	ldr	r2, [pc, #80]	; (8007734 <TIM_OC6_SetConfig+0xc8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d109      	bne.n	80076fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	029b      	lsls	r3, r3, #10
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800

08007738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2201      	movs	r2, #1
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	43db      	mvns	r3, r3
 800775a:	401a      	ands	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	fa01 f303 	lsl.w	r3, r1, r3
 8007770:	431a      	orrs	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007798:	2302      	movs	r3, #2
 800779a:	e068      	b.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2e      	ldr	r2, [pc, #184]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a2d      	ldr	r2, [pc, #180]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d108      	bne.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1e      	ldr	r2, [pc, #120]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01d      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780e:	d018      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00e      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d009      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a13      	ldr	r2, [pc, #76]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a14      	ldr	r2, [pc, #80]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10c      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4313      	orrs	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	40000400 	.word	0x40000400
 8007888:	40000800 	.word	0x40000800
 800788c:	40000c00 	.word	0x40000c00
 8007890:	40014000 	.word	0x40014000

08007894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e065      	b.n	800797c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a16      	ldr	r2, [pc, #88]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a14      	ldr	r2, [pc, #80]	; (800798c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d115      	bne.n	800796a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	051b      	lsls	r3, r3, #20
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40013400 	.word	0x40013400

08007990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e040      	b.n	8007a60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fb f8ea 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0201 	bic.w	r2, r2, #1
 8007a08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 feb6 	bl	8008784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fbfb 	bl	8008214 <UART_SetConfig>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e01b      	b.n	8007a60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 ff35 	bl	80088c8 <UART_CheckIdleState>
 8007a5e:	4603      	mov	r3, r0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d178      	bne.n	8007b72 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_UART_Transmit+0x24>
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e071      	b.n	8007b74 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2221      	movs	r2, #33	; 0x21
 8007a9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a9e:	f7fb fb2f 	bl	8003100 <HAL_GetTick>
 8007aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	88fa      	ldrh	r2, [r7, #6]
 8007ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abc:	d108      	bne.n	8007ad0 <HAL_UART_Transmit+0x68>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	e003      	b.n	8007ad8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ad8:	e030      	b.n	8007b3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2180      	movs	r1, #128	; 0x80
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 ff97 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e03c      	b.n	8007b74 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	881a      	ldrh	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b0c:	b292      	uxth	r2, r2
 8007b0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	3302      	adds	r3, #2
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e008      	b.n	8007b2a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	b292      	uxth	r2, r2
 8007b22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	3301      	adds	r3, #1
 8007b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1c8      	bne.n	8007ada <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2140      	movs	r1, #64	; 0x40
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 ff60 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2220      	movs	r2, #32
 8007b62:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e005      	b.n	8007b74 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e000      	b.n	8007b74 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
  }
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d137      	bne.n	8007c04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <HAL_UART_Receive_IT+0x24>
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e030      	b.n	8007c06 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a18      	ldr	r2, [pc, #96]	; (8007c10 <HAL_UART_Receive_IT+0x94>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01f      	beq.n	8007bf4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d018      	beq.n	8007bf4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	6a3a      	ldr	r2, [r7, #32]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e6      	bne.n	8007bc2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 ff74 	bl	8008ae8 <UART_Start_Receive_IT>
 8007c00:	4603      	mov	r3, r0
 8007c02:	e000      	b.n	8007c06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
  }
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3728      	adds	r7, #40	; 0x28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40008000 	.word	0x40008000

08007c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b0ba      	sub	sp, #232	; 0xe8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c42:	4013      	ands	r3, r2
 8007c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d115      	bne.n	8007c7c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00f      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 82ae 	beq.w	80081ce <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      }
      return;
 8007c7a:	e2a8      	b.n	80081ce <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8117 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c96:	4b85      	ldr	r3, [pc, #532]	; (8007eac <HAL_UART_IRQHandler+0x298>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 810a 	beq.w	8007eb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d011      	beq.n	8007cd0 <HAL_UART_IRQHandler+0xbc>
 8007cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc6:	f043 0201 	orr.w	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d011      	beq.n	8007d00 <HAL_UART_IRQHandler+0xec>
 8007cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2202      	movs	r2, #2
 8007cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf6:	f043 0204 	orr.w	r2, r3, #4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d011      	beq.n	8007d30 <HAL_UART_IRQHandler+0x11c>
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	f043 0202 	orr.w	r2, r3, #2
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d017      	beq.n	8007d6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d105      	bne.n	8007d54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d62:	f043 0208 	orr.w	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d012      	beq.n	8007d9e <HAL_UART_IRQHandler+0x18a>
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8214 	beq.w	80081d2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d005      	beq.n	8007df6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d04f      	beq.n	8007e96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 ff3c 	bl	8008c74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d141      	bne.n	8007e8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3308      	adds	r3, #8
 8007e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1d9      	bne.n	8007e0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d013      	beq.n	8007e86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e62:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <HAL_UART_IRQHandler+0x29c>)
 8007e64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc ff30 	bl	8004cd0 <HAL_DMA_Abort_IT>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d017      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e00f      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9ae 	bl	80081e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00b      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9aa 	bl	80081e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e007      	b.n	8007ea6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9a6 	bl	80081e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007ea4:	e195      	b.n	80081d2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea6:	bf00      	nop
    return;
 8007ea8:	e193      	b.n	80081d2 <HAL_UART_IRQHandler+0x5be>
 8007eaa:	bf00      	nop
 8007eac:	04000120 	.word	0x04000120
 8007eb0:	08008d3d 	.word	0x08008d3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 814e 	bne.w	800815a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8147 	beq.w	800815a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8140 	beq.w	800815a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2210      	movs	r2, #16
 8007ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	f040 80b8 	bne.w	8008062 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007efe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8167 	beq.w	80081d6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f080 815f 	bcs.w	80081d6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f040 8086 	bne.w	8008040 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1da      	bne.n	8007f34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e1      	bne.n	8007f7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fe0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e3      	bne.n	8007fba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800800e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008010:	f023 0310 	bic.w	r3, r3, #16
 8008014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008022:	65bb      	str	r3, [r7, #88]	; 0x58
 8008024:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e4      	bne.n	8008000 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800803a:	4618      	mov	r0, r3
 800803c:	f7fc fe0a 	bl	8004c54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008052:	b29b      	uxth	r3, r3
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8ce 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008060:	e0b9      	b.n	80081d6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800806e:	b29b      	uxth	r3, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80ab 	beq.w	80081da <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80a6 	beq.w	80081da <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b0:	647b      	str	r3, [r7, #68]	; 0x44
 80080b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e4      	bne.n	800808e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3308      	adds	r3, #8
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	623b      	str	r3, [r7, #32]
   return(result);
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	f023 0301 	bic.w	r3, r3, #1
 80080da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080e8:	633a      	str	r2, [r7, #48]	; 0x30
 80080ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e3      	bne.n	80080c4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	60fb      	str	r3, [r7, #12]
   return(result);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f023 0310 	bic.w	r3, r3, #16
 8008124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008132:	61fb      	str	r3, [r7, #28]
 8008134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	69b9      	ldr	r1, [r7, #24]
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	617b      	str	r3, [r7, #20]
   return(result);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e4      	bne.n	8008110 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800814c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f852 	bl	80081fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008158:	e03f      	b.n	80081da <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800815a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <HAL_UART_IRQHandler+0x570>
 8008166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800817a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 ffd9 	bl	8009134 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008182:	e02d      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01c      	beq.n	80081de <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
    }
    return;
 80081ac:	e017      	b.n	80081de <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d012      	beq.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
 80081ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00c      	beq.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fdce 	bl	8008d68 <UART_EndTransmit_IT>
    return;
 80081cc:	e008      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80081ce:	bf00      	nop
 80081d0:	e006      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80081d2:	bf00      	nop
 80081d4:	e004      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80081de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80081e0:	37e8      	adds	r7, #232	; 0xe8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop

080081e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008218:	b08a      	sub	sp, #40	; 0x28
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	431a      	orrs	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	431a      	orrs	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	4313      	orrs	r3, r2
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4ba4      	ldr	r3, [pc, #656]	; (80084d4 <UART_SetConfig+0x2c0>)
 8008244:	4013      	ands	r3, r2
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800824c:	430b      	orrs	r3, r1
 800824e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a99      	ldr	r2, [pc, #612]	; (80084d8 <UART_SetConfig+0x2c4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	4313      	orrs	r3, r2
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008290:	430a      	orrs	r2, r1
 8008292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a90      	ldr	r2, [pc, #576]	; (80084dc <UART_SetConfig+0x2c8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d126      	bne.n	80082ec <UART_SetConfig+0xd8>
 800829e:	4b90      	ldr	r3, [pc, #576]	; (80084e0 <UART_SetConfig+0x2cc>)
 80082a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d81b      	bhi.n	80082e4 <UART_SetConfig+0xd0>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0xa0>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082cd 	.word	0x080082cd
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ca:	e116      	b.n	80084fa <UART_SetConfig+0x2e6>
 80082cc:	2302      	movs	r3, #2
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d2:	e112      	b.n	80084fa <UART_SetConfig+0x2e6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082da:	e10e      	b.n	80084fa <UART_SetConfig+0x2e6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e2:	e10a      	b.n	80084fa <UART_SetConfig+0x2e6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ea:	e106      	b.n	80084fa <UART_SetConfig+0x2e6>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a7c      	ldr	r2, [pc, #496]	; (80084e4 <UART_SetConfig+0x2d0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d138      	bne.n	8008368 <UART_SetConfig+0x154>
 80082f6:	4b7a      	ldr	r3, [pc, #488]	; (80084e0 <UART_SetConfig+0x2cc>)
 80082f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fc:	f003 030c 	and.w	r3, r3, #12
 8008300:	2b0c      	cmp	r3, #12
 8008302:	d82d      	bhi.n	8008360 <UART_SetConfig+0x14c>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <UART_SetConfig+0xf8>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	08008341 	.word	0x08008341
 8008310:	08008361 	.word	0x08008361
 8008314:	08008361 	.word	0x08008361
 8008318:	08008361 	.word	0x08008361
 800831c:	08008351 	.word	0x08008351
 8008320:	08008361 	.word	0x08008361
 8008324:	08008361 	.word	0x08008361
 8008328:	08008361 	.word	0x08008361
 800832c:	08008349 	.word	0x08008349
 8008330:	08008361 	.word	0x08008361
 8008334:	08008361 	.word	0x08008361
 8008338:	08008361 	.word	0x08008361
 800833c:	08008359 	.word	0x08008359
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008346:	e0d8      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008348:	2302      	movs	r3, #2
 800834a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800834e:	e0d4      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008350:	2304      	movs	r3, #4
 8008352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008356:	e0d0      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008358:	2308      	movs	r3, #8
 800835a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800835e:	e0cc      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008360:	2310      	movs	r3, #16
 8008362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008366:	e0c8      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a5e      	ldr	r2, [pc, #376]	; (80084e8 <UART_SetConfig+0x2d4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d125      	bne.n	80083be <UART_SetConfig+0x1aa>
 8008372:	4b5b      	ldr	r3, [pc, #364]	; (80084e0 <UART_SetConfig+0x2cc>)
 8008374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d016      	beq.n	80083ae <UART_SetConfig+0x19a>
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d818      	bhi.n	80083b6 <UART_SetConfig+0x1a2>
 8008384:	2b20      	cmp	r3, #32
 8008386:	d00a      	beq.n	800839e <UART_SetConfig+0x18a>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d814      	bhi.n	80083b6 <UART_SetConfig+0x1a2>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <UART_SetConfig+0x182>
 8008390:	2b10      	cmp	r3, #16
 8008392:	d008      	beq.n	80083a6 <UART_SetConfig+0x192>
 8008394:	e00f      	b.n	80083b6 <UART_SetConfig+0x1a2>
 8008396:	2300      	movs	r3, #0
 8008398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800839c:	e0ad      	b.n	80084fa <UART_SetConfig+0x2e6>
 800839e:	2302      	movs	r3, #2
 80083a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083a4:	e0a9      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083a6:	2304      	movs	r3, #4
 80083a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ac:	e0a5      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083ae:	2308      	movs	r3, #8
 80083b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083b4:	e0a1      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083b6:	2310      	movs	r3, #16
 80083b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083bc:	e09d      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a4a      	ldr	r2, [pc, #296]	; (80084ec <UART_SetConfig+0x2d8>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d125      	bne.n	8008414 <UART_SetConfig+0x200>
 80083c8:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <UART_SetConfig+0x2cc>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083d2:	2bc0      	cmp	r3, #192	; 0xc0
 80083d4:	d016      	beq.n	8008404 <UART_SetConfig+0x1f0>
 80083d6:	2bc0      	cmp	r3, #192	; 0xc0
 80083d8:	d818      	bhi.n	800840c <UART_SetConfig+0x1f8>
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d00a      	beq.n	80083f4 <UART_SetConfig+0x1e0>
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d814      	bhi.n	800840c <UART_SetConfig+0x1f8>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <UART_SetConfig+0x1d8>
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d008      	beq.n	80083fc <UART_SetConfig+0x1e8>
 80083ea:	e00f      	b.n	800840c <UART_SetConfig+0x1f8>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f2:	e082      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083fa:	e07e      	b.n	80084fa <UART_SetConfig+0x2e6>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008402:	e07a      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800840a:	e076      	b.n	80084fa <UART_SetConfig+0x2e6>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008412:	e072      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a35      	ldr	r2, [pc, #212]	; (80084f0 <UART_SetConfig+0x2dc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d12a      	bne.n	8008474 <UART_SetConfig+0x260>
 800841e:	4b30      	ldr	r3, [pc, #192]	; (80084e0 <UART_SetConfig+0x2cc>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800842c:	d01a      	beq.n	8008464 <UART_SetConfig+0x250>
 800842e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008432:	d81b      	bhi.n	800846c <UART_SetConfig+0x258>
 8008434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008438:	d00c      	beq.n	8008454 <UART_SetConfig+0x240>
 800843a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800843e:	d815      	bhi.n	800846c <UART_SetConfig+0x258>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <UART_SetConfig+0x238>
 8008444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008448:	d008      	beq.n	800845c <UART_SetConfig+0x248>
 800844a:	e00f      	b.n	800846c <UART_SetConfig+0x258>
 800844c:	2300      	movs	r3, #0
 800844e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008452:	e052      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008454:	2302      	movs	r3, #2
 8008456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800845a:	e04e      	b.n	80084fa <UART_SetConfig+0x2e6>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008462:	e04a      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846a:	e046      	b.n	80084fa <UART_SetConfig+0x2e6>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008472:	e042      	b.n	80084fa <UART_SetConfig+0x2e6>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <UART_SetConfig+0x2c4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d13a      	bne.n	80084f4 <UART_SetConfig+0x2e0>
 800847e:	4b18      	ldr	r3, [pc, #96]	; (80084e0 <UART_SetConfig+0x2cc>)
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848c:	d01a      	beq.n	80084c4 <UART_SetConfig+0x2b0>
 800848e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008492:	d81b      	bhi.n	80084cc <UART_SetConfig+0x2b8>
 8008494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008498:	d00c      	beq.n	80084b4 <UART_SetConfig+0x2a0>
 800849a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849e:	d815      	bhi.n	80084cc <UART_SetConfig+0x2b8>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <UART_SetConfig+0x298>
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d008      	beq.n	80084bc <UART_SetConfig+0x2a8>
 80084aa:	e00f      	b.n	80084cc <UART_SetConfig+0x2b8>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b2:	e022      	b.n	80084fa <UART_SetConfig+0x2e6>
 80084b4:	2302      	movs	r3, #2
 80084b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ba:	e01e      	b.n	80084fa <UART_SetConfig+0x2e6>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084c2:	e01a      	b.n	80084fa <UART_SetConfig+0x2e6>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ca:	e016      	b.n	80084fa <UART_SetConfig+0x2e6>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084d2:	e012      	b.n	80084fa <UART_SetConfig+0x2e6>
 80084d4:	efff69f3 	.word	0xefff69f3
 80084d8:	40008000 	.word	0x40008000
 80084dc:	40013800 	.word	0x40013800
 80084e0:	40021000 	.word	0x40021000
 80084e4:	40004400 	.word	0x40004400
 80084e8:	40004800 	.word	0x40004800
 80084ec:	40004c00 	.word	0x40004c00
 80084f0:	40005000 	.word	0x40005000
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a9f      	ldr	r2, [pc, #636]	; (800877c <UART_SetConfig+0x568>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d17a      	bne.n	80085fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008508:	2b08      	cmp	r3, #8
 800850a:	d824      	bhi.n	8008556 <UART_SetConfig+0x342>
 800850c:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x300>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	08008539 	.word	0x08008539
 8008518:	08008557 	.word	0x08008557
 800851c:	08008541 	.word	0x08008541
 8008520:	08008557 	.word	0x08008557
 8008524:	08008547 	.word	0x08008547
 8008528:	08008557 	.word	0x08008557
 800852c:	08008557 	.word	0x08008557
 8008530:	08008557 	.word	0x08008557
 8008534:	0800854f 	.word	0x0800854f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008538:	f7fd fba6 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 800853c:	61f8      	str	r0, [r7, #28]
        break;
 800853e:	e010      	b.n	8008562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008540:	4b8f      	ldr	r3, [pc, #572]	; (8008780 <UART_SetConfig+0x56c>)
 8008542:	61fb      	str	r3, [r7, #28]
        break;
 8008544:	e00d      	b.n	8008562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008546:	f7fd fb07 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 800854a:	61f8      	str	r0, [r7, #28]
        break;
 800854c:	e009      	b.n	8008562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008552:	61fb      	str	r3, [r7, #28]
        break;
 8008554:	e005      	b.n	8008562 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80fb 	beq.w	8008760 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	4413      	add	r3, r2
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	429a      	cmp	r2, r3
 8008578:	d305      	bcc.n	8008586 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	429a      	cmp	r2, r3
 8008584:	d903      	bls.n	800858e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800858c:	e0e8      	b.n	8008760 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2200      	movs	r2, #0
 8008592:	461c      	mov	r4, r3
 8008594:	4615      	mov	r5, r2
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	022b      	lsls	r3, r5, #8
 80085a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80085a4:	0222      	lsls	r2, r4, #8
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	6849      	ldr	r1, [r1, #4]
 80085aa:	0849      	lsrs	r1, r1, #1
 80085ac:	2000      	movs	r0, #0
 80085ae:	4688      	mov	r8, r1
 80085b0:	4681      	mov	r9, r0
 80085b2:	eb12 0a08 	adds.w	sl, r2, r8
 80085b6:	eb43 0b09 	adc.w	fp, r3, r9
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	603b      	str	r3, [r7, #0]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c8:	4650      	mov	r0, sl
 80085ca:	4659      	mov	r1, fp
 80085cc:	f7f8 fb5c 	bl	8000c88 <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4613      	mov	r3, r2
 80085d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085de:	d308      	bcc.n	80085f2 <UART_SetConfig+0x3de>
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e6:	d204      	bcs.n	80085f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	60da      	str	r2, [r3, #12]
 80085f0:	e0b6      	b.n	8008760 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085f8:	e0b2      	b.n	8008760 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008602:	d15e      	bne.n	80086c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008608:	2b08      	cmp	r3, #8
 800860a:	d828      	bhi.n	800865e <UART_SetConfig+0x44a>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <UART_SetConfig+0x400>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008639 	.word	0x08008639
 8008618:	08008641 	.word	0x08008641
 800861c:	08008649 	.word	0x08008649
 8008620:	0800865f 	.word	0x0800865f
 8008624:	0800864f 	.word	0x0800864f
 8008628:	0800865f 	.word	0x0800865f
 800862c:	0800865f 	.word	0x0800865f
 8008630:	0800865f 	.word	0x0800865f
 8008634:	08008657 	.word	0x08008657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008638:	f7fd fb26 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 800863c:	61f8      	str	r0, [r7, #28]
        break;
 800863e:	e014      	b.n	800866a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008640:	f7fd fb38 	bl	8005cb4 <HAL_RCC_GetPCLK2Freq>
 8008644:	61f8      	str	r0, [r7, #28]
        break;
 8008646:	e010      	b.n	800866a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008648:	4b4d      	ldr	r3, [pc, #308]	; (8008780 <UART_SetConfig+0x56c>)
 800864a:	61fb      	str	r3, [r7, #28]
        break;
 800864c:	e00d      	b.n	800866a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800864e:	f7fd fa83 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8008652:	61f8      	str	r0, [r7, #28]
        break;
 8008654:	e009      	b.n	800866a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800865a:	61fb      	str	r3, [r7, #28]
        break;
 800865c:	e005      	b.n	800866a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d077      	beq.n	8008760 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005a      	lsls	r2, r3, #1
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	441a      	add	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b0f      	cmp	r3, #15
 800868a:	d916      	bls.n	80086ba <UART_SetConfig+0x4a6>
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008692:	d212      	bcs.n	80086ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f023 030f 	bic.w	r3, r3, #15
 800869c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	8afb      	ldrh	r3, [r7, #22]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	8afa      	ldrh	r2, [r7, #22]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	e052      	b.n	8008760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086c0:	e04e      	b.n	8008760 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d827      	bhi.n	800871a <UART_SetConfig+0x506>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <UART_SetConfig+0x4bc>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	08008705 	.word	0x08008705
 80086dc:	0800871b 	.word	0x0800871b
 80086e0:	0800870b 	.word	0x0800870b
 80086e4:	0800871b 	.word	0x0800871b
 80086e8:	0800871b 	.word	0x0800871b
 80086ec:	0800871b 	.word	0x0800871b
 80086f0:	08008713 	.word	0x08008713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f4:	f7fd fac8 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 80086f8:	61f8      	str	r0, [r7, #28]
        break;
 80086fa:	e014      	b.n	8008726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086fc:	f7fd fada 	bl	8005cb4 <HAL_RCC_GetPCLK2Freq>
 8008700:	61f8      	str	r0, [r7, #28]
        break;
 8008702:	e010      	b.n	8008726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008704:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <UART_SetConfig+0x56c>)
 8008706:	61fb      	str	r3, [r7, #28]
        break;
 8008708:	e00d      	b.n	8008726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800870a:	f7fd fa25 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 800870e:	61f8      	str	r0, [r7, #28]
        break;
 8008710:	e009      	b.n	8008726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008716:	61fb      	str	r3, [r7, #28]
        break;
 8008718:	e005      	b.n	8008726 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008724:	bf00      	nop
    }

    if (pclk != 0U)
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d019      	beq.n	8008760 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	085a      	lsrs	r2, r3, #1
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	441a      	add	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	fbb2 f3f3 	udiv	r3, r2, r3
 800873e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b0f      	cmp	r3, #15
 8008744:	d909      	bls.n	800875a <UART_SetConfig+0x546>
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d205      	bcs.n	800875a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	e002      	b.n	8008760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800876c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800877a:	bf00      	nop
 800877c:	40008000 	.word	0x40008000
 8008780:	00f42400 	.word	0x00f42400

08008784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00a      	beq.n	80087f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00a      	beq.n	8008836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01a      	beq.n	800889a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008882:	d10a      	bne.n	800889a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	605a      	str	r2, [r3, #4]
  }
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b098      	sub	sp, #96	; 0x60
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d8:	f7fa fc12 	bl	8003100 <HAL_GetTick>
 80088dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d12e      	bne.n	800894a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f4:	2200      	movs	r2, #0
 80088f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f88c 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d021      	beq.n	800894a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891a:	653b      	str	r3, [r7, #80]	; 0x50
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800892a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2220      	movs	r2, #32
 800893c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e062      	b.n	8008a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b04      	cmp	r3, #4
 8008956:	d149      	bne.n	80089ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008960:	2200      	movs	r2, #0
 8008962:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f856 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d03c      	beq.n	80089ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	623b      	str	r3, [r7, #32]
   return(result);
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008990:	633b      	str	r3, [r7, #48]	; 0x30
 8008992:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0301 	bic.w	r3, r3, #1
 80089ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c4:	61fa      	str	r2, [r7, #28]
 80089c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	69b9      	ldr	r1, [r7, #24]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	617b      	str	r3, [r7, #20]
   return(result);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e5      	bne.n	80089a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e011      	b.n	8008a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3758      	adds	r7, #88	; 0x58
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a28:	e049      	b.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d045      	beq.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7fa fb65 	bl	8003100 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e048      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d031      	beq.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d110      	bne.n	8008a8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f8ff 	bl	8008c74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e029      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a98:	d111      	bne.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f8e5 	bl	8008c74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e00f      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	bf0c      	ite	eq
 8008ace:	2301      	moveq	r3, #1
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d0a6      	beq.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b097      	sub	sp, #92	; 0x5c
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	d10e      	bne.n	8008b3a <UART_Start_Receive_IT+0x52>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <UART_Start_Receive_IT+0x48>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b2e:	e02d      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	22ff      	movs	r2, #255	; 0xff
 8008b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b38:	e028      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10d      	bne.n	8008b5e <UART_Start_Receive_IT+0x76>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <UART_Start_Receive_IT+0x6c>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b52:	e01b      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	227f      	movs	r2, #127	; 0x7f
 8008b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b5c:	e016      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b66:	d10d      	bne.n	8008b84 <UART_Start_Receive_IT+0x9c>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <UART_Start_Receive_IT+0x92>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	227f      	movs	r2, #127	; 0x7f
 8008b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b78:	e008      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	223f      	movs	r2, #63	; 0x3f
 8008b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b82:	e003      	b.n	8008b8c <UART_Start_Receive_IT+0xa4>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2222      	movs	r2, #34	; 0x22
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd8:	d107      	bne.n	8008bea <UART_Start_Receive_IT+0x102>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a21      	ldr	r2, [pc, #132]	; (8008c6c <UART_Start_Receive_IT+0x184>)
 8008be6:	669a      	str	r2, [r3, #104]	; 0x68
 8008be8:	e002      	b.n	8008bf0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a20      	ldr	r2, [pc, #128]	; (8008c70 <UART_Start_Receive_IT+0x188>)
 8008bee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d019      	beq.n	8008c2c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
 8008c18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e6      	bne.n	8008bf8 <UART_Start_Receive_IT+0x110>
 8008c2a:	e018      	b.n	8008c5e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f043 0320 	orr.w	r3, r3, #32
 8008c40:	653b      	str	r3, [r7, #80]	; 0x50
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c4a:	623b      	str	r3, [r7, #32]
 8008c4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	69f9      	ldr	r1, [r7, #28]
 8008c50:	6a3a      	ldr	r2, [r7, #32]
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e6      	bne.n	8008c2c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	375c      	adds	r7, #92	; 0x5c
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	08008f79 	.word	0x08008f79
 8008c70:	08008dbd 	.word	0x08008dbd

08008c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b095      	sub	sp, #84	; 0x54
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f023 0301 	bic.w	r3, r3, #1
 8008cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d118      	bne.n	8008d1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f023 0310 	bic.w	r3, r3, #16
 8008cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d30:	bf00      	nop
 8008d32:	3754      	adds	r7, #84	; 0x54
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff fa44 	bl	80081e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	61bb      	str	r3, [r7, #24]
 8008d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6979      	ldr	r1, [r7, #20]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7f8 fa12 	bl	80011d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db4:	bf00      	nop
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b09c      	sub	sp, #112	; 0x70
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd4:	2b22      	cmp	r3, #34	; 0x22
 8008dd6:	f040 80be 	bne.w	8008f56 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008de0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008de4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008de8:	b2d9      	uxtb	r1, r3
 8008dea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df4:	400a      	ands	r2, r1
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 80a3 	bne.w	8008f6a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e76:	647a      	str	r2, [r7, #68]	; 0x44
 8008e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a34      	ldr	r2, [pc, #208]	; (8008f74 <UART_RxISR_8BIT+0x1b8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d01f      	beq.n	8008ee8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d018      	beq.n	8008ee8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008eca:	663b      	str	r3, [r7, #96]	; 0x60
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d12e      	bne.n	8008f4e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
 8008f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	69b9      	ldr	r1, [r7, #24]
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	e841 2300 	strex	r3, r2, [r1]
 8008f20:	617b      	str	r3, [r7, #20]
   return(result);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e6      	bne.n	8008ef6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d103      	bne.n	8008f3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2210      	movs	r2, #16
 8008f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff f958 	bl	80081fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f4c:	e00d      	b.n	8008f6a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f8 f8e8 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 8008f54:	e009      	b.n	8008f6a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	8b1b      	ldrh	r3, [r3, #24]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0208 	orr.w	r2, r2, #8
 8008f66:	b292      	uxth	r2, r2
 8008f68:	831a      	strh	r2, [r3, #24]
}
 8008f6a:	bf00      	nop
 8008f6c:	3770      	adds	r7, #112	; 0x70
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	40008000 	.word	0x40008000

08008f78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b09c      	sub	sp, #112	; 0x70
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f90:	2b22      	cmp	r3, #34	; 0x22
 8008f92:	f040 80be 	bne.w	8009112 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fa6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008faa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008fae:	4013      	ands	r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fba:	1c9a      	adds	r2, r3, #2
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f040 80a3 	bne.w	8009126 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8009000:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800900c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e6      	bne.n	8008fe0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	663b      	str	r3, [r7, #96]	; 0x60
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3308      	adds	r3, #8
 8009030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009032:	643a      	str	r2, [r7, #64]	; 0x40
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e5      	bne.n	8009012 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a34      	ldr	r2, [pc, #208]	; (8009130 <UART_RxISR_16BIT+0x1b8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01f      	beq.n	80090a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009092:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d12e      	bne.n	800910a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	613b      	str	r3, [r7, #16]
   return(result);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f003 0310 	and.w	r3, r3, #16
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d103      	bne.n	80090fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2210      	movs	r2, #16
 80090f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff f87a 	bl	80081fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009108:	e00d      	b.n	8009126 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7f8 f80a 	bl	8001124 <HAL_UART_RxCpltCallback>
}
 8009110:	e009      	b.n	8009126 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	8b1b      	ldrh	r3, [r3, #24]
 8009118:	b29a      	uxth	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0208 	orr.w	r2, r2, #8
 8009122:	b292      	uxth	r2, r2
 8009124:	831a      	strh	r2, [r3, #24]
}
 8009126:	bf00      	nop
 8009128:	3770      	adds	r7, #112	; 0x70
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	40008000 	.word	0x40008000

08009134 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <__NVIC_SetPriority>:
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db0a      	blt.n	8009172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	b2da      	uxtb	r2, r3
 8009160:	490c      	ldr	r1, [pc, #48]	; (8009194 <__NVIC_SetPriority+0x4c>)
 8009162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009166:	0112      	lsls	r2, r2, #4
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	440b      	add	r3, r1
 800916c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009170:	e00a      	b.n	8009188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	b2da      	uxtb	r2, r3
 8009176:	4908      	ldr	r1, [pc, #32]	; (8009198 <__NVIC_SetPriority+0x50>)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	3b04      	subs	r3, #4
 8009180:	0112      	lsls	r2, r2, #4
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	440b      	add	r3, r1
 8009186:	761a      	strb	r2, [r3, #24]
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	e000e100 	.word	0xe000e100
 8009198:	e000ed00 	.word	0xe000ed00

0800919c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <SysTick_Handler+0x1c>)
 80091a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091a4:	f001 fd28 	bl	800abf8 <xTaskGetSchedulerState>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d001      	beq.n	80091b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091ae:	f002 fb13 	bl	800b7d8 <xPortSysTickHandler>
  }
}
 80091b2:	bf00      	nop
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	e000e010 	.word	0xe000e010

080091bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091c0:	2100      	movs	r1, #0
 80091c2:	f06f 0004 	mvn.w	r0, #4
 80091c6:	f7ff ffbf 	bl	8009148 <__NVIC_SetPriority>
#endif
}
 80091ca:	bf00      	nop
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091d6:	f3ef 8305 	mrs	r3, IPSR
 80091da:	603b      	str	r3, [r7, #0]
  return(result);
 80091dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80091e2:	f06f 0305 	mvn.w	r3, #5
 80091e6:	607b      	str	r3, [r7, #4]
 80091e8:	e00c      	b.n	8009204 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80091ea:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <osKernelInitialize+0x44>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80091f2:	4b08      	ldr	r3, [pc, #32]	; (8009214 <osKernelInitialize+0x44>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	607b      	str	r3, [r7, #4]
 80091fc:	e002      	b.n	8009204 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009204:	687b      	ldr	r3, [r7, #4]
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	200016a0 	.word	0x200016a0

08009218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800921e:	f3ef 8305 	mrs	r3, IPSR
 8009222:	603b      	str	r3, [r7, #0]
  return(result);
 8009224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <osKernelStart+0x1a>
    stat = osErrorISR;
 800922a:	f06f 0305 	mvn.w	r3, #5
 800922e:	607b      	str	r3, [r7, #4]
 8009230:	e010      	b.n	8009254 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <osKernelStart+0x48>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d109      	bne.n	800924e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800923a:	f7ff ffbf 	bl	80091bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800923e:	4b08      	ldr	r3, [pc, #32]	; (8009260 <osKernelStart+0x48>)
 8009240:	2202      	movs	r2, #2
 8009242:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009244:	f001 f87c 	bl	800a340 <vTaskStartScheduler>
      stat = osOK;
 8009248:	2300      	movs	r3, #0
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	e002      	b.n	8009254 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800924e:	f04f 33ff 	mov.w	r3, #4294967295
 8009252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009254:	687b      	ldr	r3, [r7, #4]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	200016a0 	.word	0x200016a0

08009264 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b08e      	sub	sp, #56	; 0x38
 8009268:	af04      	add	r7, sp, #16
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009274:	f3ef 8305 	mrs	r3, IPSR
 8009278:	617b      	str	r3, [r7, #20]
  return(result);
 800927a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800927c:	2b00      	cmp	r3, #0
 800927e:	d17e      	bne.n	800937e <osThreadNew+0x11a>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d07b      	beq.n	800937e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009286:	2380      	movs	r3, #128	; 0x80
 8009288:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800928a:	2318      	movs	r3, #24
 800928c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800928e:	2300      	movs	r3, #0
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009292:	f04f 33ff 	mov.w	r3, #4294967295
 8009296:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d045      	beq.n	800932a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <osThreadNew+0x48>
        name = attr->name;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d008      	beq.n	80092d2 <osThreadNew+0x6e>
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	2b38      	cmp	r3, #56	; 0x38
 80092c4:	d805      	bhi.n	80092d2 <osThreadNew+0x6e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <osThreadNew+0x72>
        return (NULL);
 80092d2:	2300      	movs	r3, #0
 80092d4:	e054      	b.n	8009380 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	089b      	lsrs	r3, r3, #2
 80092e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00e      	beq.n	800930c <osThreadNew+0xa8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2ba7      	cmp	r3, #167	; 0xa7
 80092f4:	d90a      	bls.n	800930c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d006      	beq.n	800930c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <osThreadNew+0xa8>
        mem = 1;
 8009306:	2301      	movs	r3, #1
 8009308:	61bb      	str	r3, [r7, #24]
 800930a:	e010      	b.n	800932e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10c      	bne.n	800932e <osThreadNew+0xca>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d108      	bne.n	800932e <osThreadNew+0xca>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <osThreadNew+0xca>
          mem = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	e001      	b.n	800932e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d110      	bne.n	8009356 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800933c:	9202      	str	r2, [sp, #8]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6a3a      	ldr	r2, [r7, #32]
 8009348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fe0c 	bl	8009f68 <xTaskCreateStatic>
 8009350:	4603      	mov	r3, r0
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	e013      	b.n	800937e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d110      	bne.n	800937e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	b29a      	uxth	r2, r3
 8009360:	f107 0310 	add.w	r3, r7, #16
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fe57 	bl	800a022 <xTaskCreate>
 8009374:	4603      	mov	r3, r0
 8009376:	2b01      	cmp	r3, #1
 8009378:	d001      	beq.n	800937e <osThreadNew+0x11a>
            hTask = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800937e:	693b      	ldr	r3, [r7, #16]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3728      	adds	r7, #40	; 0x28
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009390:	f3ef 8305 	mrs	r3, IPSR
 8009394:	60bb      	str	r3, [r7, #8]
  return(result);
 8009396:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <osDelay+0x1c>
    stat = osErrorISR;
 800939c:	f06f 0305 	mvn.w	r3, #5
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e007      	b.n	80093b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 ff92 	bl	800a2d8 <vTaskDelay>
    }
  }

  return (stat);
 80093b4:	68fb      	ldr	r3, [r7, #12]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a07      	ldr	r2, [pc, #28]	; (80093ec <vApplicationGetIdleTaskMemory+0x2c>)
 80093d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a06      	ldr	r2, [pc, #24]	; (80093f0 <vApplicationGetIdleTaskMemory+0x30>)
 80093d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2280      	movs	r2, #128	; 0x80
 80093dc:	601a      	str	r2, [r3, #0]
}
 80093de:	bf00      	nop
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	200016a4 	.word	0x200016a4
 80093f0:	2000174c 	.word	0x2000174c

080093f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a07      	ldr	r2, [pc, #28]	; (8009420 <vApplicationGetTimerTaskMemory+0x2c>)
 8009404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4a06      	ldr	r2, [pc, #24]	; (8009424 <vApplicationGetTimerTaskMemory+0x30>)
 800940a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009412:	601a      	str	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	2000194c 	.word	0x2000194c
 8009424:	200019f4 	.word	0x200019f4

08009428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f103 0208 	add.w	r2, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f103 0208 	add.w	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f103 0208 	add.w	r2, r3, #8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009482:	b480      	push	{r7}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d103      	bne.n	80094ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e00c      	b.n	8009504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3308      	adds	r3, #8
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e002      	b.n	80094f8 <vListInsert+0x2e>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	429a      	cmp	r2, r3
 8009502:	d2f6      	bcs.n	80094f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	601a      	str	r2, [r3, #0]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6892      	ldr	r2, [r2, #8]
 8009552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6852      	ldr	r2, [r2, #4]
 800955c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d103      	bne.n	8009570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	1e5a      	subs	r2, r3, #1
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095ba:	f002 f87b 	bl	800b6b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	441a      	add	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	3b01      	subs	r3, #1
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095f0:	fb01 f303 	mul.w	r3, r1, r3
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	22ff      	movs	r2, #255	; 0xff
 80095fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	22ff      	movs	r2, #255	; 0xff
 8009606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d114      	bne.n	800963a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01a      	beq.n	800964e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3310      	adds	r3, #16
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f929 	bl	800a874 <xTaskRemoveFromEventList>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d012      	beq.n	800964e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <xQueueGenericReset+0xcc>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	e009      	b.n	800964e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3310      	adds	r3, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fef2 	bl	8009428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3324      	adds	r3, #36	; 0x24
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff feed 	bl	8009428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800964e:	f002 f861 	bl	800b714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009652:	2301      	movs	r3, #1
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08e      	sub	sp, #56	; 0x38
 8009664:	af02      	add	r7, sp, #8
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <xQueueGenericCreateStatic+0x52>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <xQueueGenericCreateStatic+0x56>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <xQueueGenericCreateStatic+0x58>
 80096b6:	2300      	movs	r3, #0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	623b      	str	r3, [r7, #32]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <xQueueGenericCreateStatic+0x7e>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <xQueueGenericCreateStatic+0x82>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <xQueueGenericCreateStatic+0x84>
 80096e2:	2300      	movs	r3, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	61fb      	str	r3, [r7, #28]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096fe:	2350      	movs	r3, #80	; 0x50
 8009700:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b50      	cmp	r3, #80	; 0x50
 8009706:	d00a      	beq.n	800971e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	61bb      	str	r3, [r7, #24]
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800971e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009732:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	4613      	mov	r3, r2
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f805 	bl	8009750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009748:	4618      	mov	r0, r3
 800974a:	3730      	adds	r7, #48	; 0x30
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e002      	b.n	8009772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800977e:	2101      	movs	r1, #1
 8009780:	69b8      	ldr	r0, [r7, #24]
 8009782:	f7ff ff05 	bl	8009590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08e      	sub	sp, #56	; 0x38
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xQueueGenericSend+0x32>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <xQueueGenericSend+0x40>
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <xQueueGenericSend+0x44>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <xQueueGenericSend+0x46>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <xQueueGenericSend+0x60>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d103      	bne.n	8009806 <xQueueGenericSend+0x6e>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <xQueueGenericSend+0x72>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <xQueueGenericSend+0x74>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xQueueGenericSend+0x8e>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	623b      	str	r3, [r7, #32]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009826:	f001 f9e7 	bl	800abf8 <xTaskGetSchedulerState>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <xQueueGenericSend+0x9e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <xQueueGenericSend+0xa2>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSend+0xa4>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueGenericSend+0xbe>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	61fb      	str	r3, [r7, #28]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009856:	f001 ff2d 	bl	800b6b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009862:	429a      	cmp	r2, r3
 8009864:	d302      	bcc.n	800986c <xQueueGenericSend+0xd4>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d129      	bne.n	80098c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	68b9      	ldr	r1, [r7, #8]
 8009870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009872:	f000 fa0b 	bl	8009c8c <prvCopyDataToQueue>
 8009876:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b00      	cmp	r3, #0
 800987e:	d010      	beq.n	80098a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fff5 	bl	800a874 <xTaskRemoveFromEventList>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d013      	beq.n	80098b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009890:	4b3f      	ldr	r3, [pc, #252]	; (8009990 <xQueueGenericSend+0x1f8>)
 8009892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	e00a      	b.n	80098b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098a8:	4b39      	ldr	r3, [pc, #228]	; (8009990 <xQueueGenericSend+0x1f8>)
 80098aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098b8:	f001 ff2c 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 80098bc:	2301      	movs	r3, #1
 80098be:	e063      	b.n	8009988 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098c6:	f001 ff25 	bl	800b714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e05c      	b.n	8009988 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 f82f 	bl	800a93c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098de:	2301      	movs	r3, #1
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098e2:	f001 ff17 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098e6:	f000 fd9b 	bl	800a420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098ea:	f001 fee3 	bl	800b6b4 <vPortEnterCritical>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f4:	b25b      	sxtb	r3, r3
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fa:	d103      	bne.n	8009904 <xQueueGenericSend+0x16c>
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800990a:	b25b      	sxtb	r3, r3
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d103      	bne.n	800991a <xQueueGenericSend+0x182>
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991a:	f001 fefb 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800991e:	1d3a      	adds	r2, r7, #4
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f001 f81e 	bl	800a968 <xTaskCheckForTimeOut>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d124      	bne.n	800997c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009934:	f000 faa2 	bl	8009e7c <prvIsQueueFull>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	3310      	adds	r3, #16
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f000 ff44 	bl	800a7d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800994c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994e:	f000 fa2d 	bl	8009dac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009952:	f000 fd73 	bl	800a43c <xTaskResumeAll>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	f47f af7c 	bne.w	8009856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <xQueueGenericSend+0x1f8>)
 8009960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	e772      	b.n	8009856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009972:	f000 fa1b 	bl	8009dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009976:	f000 fd61 	bl	800a43c <xTaskResumeAll>
 800997a:	e76c      	b.n	8009856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800997c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800997e:	f000 fa15 	bl	8009dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009982:	f000 fd5b 	bl	800a43c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009988:	4618      	mov	r0, r3
 800998a:	3738      	adds	r7, #56	; 0x38
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b090      	sub	sp, #64	; 0x40
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d103      	bne.n	80099d0 <xQueueGenericSendFromISR+0x3c>
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <xQueueGenericSendFromISR+0x40>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e000      	b.n	80099d6 <xQueueGenericSendFromISR+0x42>
 80099d4:	2300      	movs	r3, #0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10a      	bne.n	80099f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d103      	bne.n	80099fe <xQueueGenericSendFromISR+0x6a>
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <xQueueGenericSendFromISR+0x6e>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <xQueueGenericSendFromISR+0x70>
 8009a02:	2300      	movs	r3, #0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	623b      	str	r3, [r7, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a1e:	f001 ff2b 	bl	800b878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a22:	f3ef 8211 	mrs	r2, BASEPRI
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	61fa      	str	r2, [r7, #28]
 8009a38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d302      	bcc.n	8009a50 <xQueueGenericSendFromISR+0xbc>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d12f      	bne.n	8009ab0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a66:	f000 f911 	bl	8009c8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a72:	d112      	bne.n	8009a9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d016      	beq.n	8009aaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	3324      	adds	r3, #36	; 0x24
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fef7 	bl	800a874 <xTaskRemoveFromEventList>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00e      	beq.n	8009aaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	e007      	b.n	8009aaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	b25a      	sxtb	r2, r3
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009aae:	e001      	b.n	8009ab4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009abe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3740      	adds	r7, #64	; 0x40
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08c      	sub	sp, #48	; 0x30
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <xQueueReceive+0x30>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	623b      	str	r3, [r7, #32]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d103      	bne.n	8009b0a <xQueueReceive+0x3e>
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <xQueueReceive+0x42>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <xQueueReceive+0x44>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <xQueueReceive+0x5e>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	61fb      	str	r3, [r7, #28]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b2a:	f001 f865 	bl	800abf8 <xTaskGetSchedulerState>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <xQueueReceive+0x6e>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <xQueueReceive+0x72>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <xQueueReceive+0x74>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <xQueueReceive+0x8e>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	61bb      	str	r3, [r7, #24]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b5a:	f001 fdab 	bl	800b6b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d01f      	beq.n	8009baa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6e:	f000 f8f7 	bl	8009d60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00f      	beq.n	8009ba2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	3310      	adds	r3, #16
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fe74 	bl	800a874 <xTaskRemoveFromEventList>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b92:	4b3d      	ldr	r3, [pc, #244]	; (8009c88 <xQueueReceive+0x1bc>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ba2:	f001 fdb7 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e069      	b.n	8009c7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d103      	bne.n	8009bb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bb0:	f001 fdb0 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e062      	b.n	8009c7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bbe:	f107 0310 	add.w	r3, r7, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 feba 	bl	800a93c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bcc:	f001 fda2 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bd0:	f000 fc26 	bl	800a420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bd4:	f001 fd6e 	bl	800b6b4 <vPortEnterCritical>
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bde:	b25b      	sxtb	r3, r3
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d103      	bne.n	8009bee <xQueueReceive+0x122>
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bf4:	b25b      	sxtb	r3, r3
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d103      	bne.n	8009c04 <xQueueReceive+0x138>
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c04:	f001 fd86 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c08:	1d3a      	adds	r2, r7, #4
 8009c0a:	f107 0310 	add.w	r3, r7, #16
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fea9 	bl	800a968 <xTaskCheckForTimeOut>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d123      	bne.n	8009c64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c1e:	f000 f917 	bl	8009e50 <prvIsQueueEmpty>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d017      	beq.n	8009c58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	3324      	adds	r3, #36	; 0x24
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	4611      	mov	r1, r2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fdcf 	bl	800a7d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c38:	f000 f8b8 	bl	8009dac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c3c:	f000 fbfe 	bl	800a43c <xTaskResumeAll>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d189      	bne.n	8009b5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <xQueueReceive+0x1bc>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	e780      	b.n	8009b5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c5a:	f000 f8a7 	bl	8009dac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5e:	f000 fbed 	bl	800a43c <xTaskResumeAll>
 8009c62:	e77a      	b.n	8009b5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c66:	f000 f8a1 	bl	8009dac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c6a:	f000 fbe7 	bl	800a43c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c70:	f000 f8ee 	bl	8009e50 <prvIsQueueEmpty>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f43f af6f 	beq.w	8009b5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3730      	adds	r7, #48	; 0x30
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10d      	bne.n	8009cc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d14d      	bne.n	8009d4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 ffbc 	bl	800ac34 <xTaskPriorityDisinherit>
 8009cbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	609a      	str	r2, [r3, #8]
 8009cc4:	e043      	b.n	8009d4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d119      	bne.n	8009d00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6858      	ldr	r0, [r3, #4]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	f003 fc8c 	bl	800d5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce4:	441a      	add	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d32b      	bcc.n	8009d4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	605a      	str	r2, [r3, #4]
 8009cfe:	e026      	b.n	8009d4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68d8      	ldr	r0, [r3, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d08:	461a      	mov	r2, r3
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	f003 fc72 	bl	800d5f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	425b      	negs	r3, r3
 8009d1a:	441a      	add	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d207      	bcs.n	8009d3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d34:	425b      	negs	r3, r3
 8009d36:	441a      	add	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d105      	bne.n	8009d4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d56:	697b      	ldr	r3, [r7, #20]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d018      	beq.n	8009da4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	441a      	add	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d303      	bcc.n	8009d94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68d9      	ldr	r1, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6838      	ldr	r0, [r7, #0]
 8009da0:	f003 fc28 	bl	800d5f4 <memcpy>
	}
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009db4:	f001 fc7e 	bl	800b6b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dc0:	e011      	b.n	8009de6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d012      	beq.n	8009df0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3324      	adds	r3, #36	; 0x24
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fd50 	bl	800a874 <xTaskRemoveFromEventList>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009dda:	f000 fe27 	bl	800aa2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	3b01      	subs	r3, #1
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	dce9      	bgt.n	8009dc2 <prvUnlockQueue+0x16>
 8009dee:	e000      	b.n	8009df2 <prvUnlockQueue+0x46>
					break;
 8009df0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009dfa:	f001 fc8b 	bl	800b714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009dfe:	f001 fc59 	bl	800b6b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e0a:	e011      	b.n	8009e30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d012      	beq.n	8009e3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3310      	adds	r3, #16
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fd2b 	bl	800a874 <xTaskRemoveFromEventList>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e24:	f000 fe02 	bl	800aa2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dce9      	bgt.n	8009e0c <prvUnlockQueue+0x60>
 8009e38:	e000      	b.n	8009e3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	22ff      	movs	r2, #255	; 0xff
 8009e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e44:	f001 fc66 	bl	800b714 <vPortExitCritical>
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e58:	f001 fc2c 	bl	800b6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e64:	2301      	movs	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e001      	b.n	8009e6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e6e:	f001 fc51 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e84:	f001 fc16 	bl	800b6b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d102      	bne.n	8009e9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e001      	b.n	8009e9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e9e:	f001 fc39 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e014      	b.n	8009ee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ebc:	4a0f      	ldr	r2, [pc, #60]	; (8009efc <vQueueAddToRegistry+0x50>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ec8:	490c      	ldr	r1, [pc, #48]	; (8009efc <vQueueAddToRegistry+0x50>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <vQueueAddToRegistry+0x50>)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	4413      	add	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ede:	e006      	b.n	8009eee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b07      	cmp	r3, #7
 8009eea:	d9e7      	bls.n	8009ebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20001df4 	.word	0x20001df4

08009f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f10:	f001 fbd0 	bl	800b6b4 <vPortEnterCritical>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d103      	bne.n	8009f2a <vQueueWaitForMessageRestricted+0x2a>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d103      	bne.n	8009f40 <vQueueWaitForMessageRestricted+0x40>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f40:	f001 fbe8 	bl	800b714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d106      	bne.n	8009f5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	3324      	adds	r3, #36	; 0x24
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 fc61 	bl	800a81c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f5a:	6978      	ldr	r0, [r7, #20]
 8009f5c:	f7ff ff26 	bl	8009dac <prvUnlockQueue>
	}
 8009f60:	bf00      	nop
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08e      	sub	sp, #56	; 0x38
 8009f6c:	af04      	add	r7, sp, #16
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	623b      	str	r3, [r7, #32]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xTaskCreateStatic+0x46>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	61fb      	str	r3, [r7, #28]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fae:	23a8      	movs	r3, #168	; 0xa8
 8009fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2ba8      	cmp	r3, #168	; 0xa8
 8009fb6:	d00a      	beq.n	8009fce <xTaskCreateStatic+0x66>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61bb      	str	r3, [r7, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009fce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01e      	beq.n	800a014 <xTaskCreateStatic+0xac>
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01b      	beq.n	800a014 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fee:	2300      	movs	r3, #0
 8009ff0:	9303      	str	r3, [sp, #12]
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	9302      	str	r3, [sp, #8]
 8009ff6:	f107 0314 	add.w	r3, r7, #20
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f850 	bl	800a0ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a00e:	f000 f8f3 	bl	800a1f8 <prvAddNewTaskToReadyList>
 800a012:	e001      	b.n	800a018 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a018:	697b      	ldr	r3, [r7, #20]
	}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3728      	adds	r7, #40	; 0x28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a022:	b580      	push	{r7, lr}
 800a024:	b08c      	sub	sp, #48	; 0x30
 800a026:	af04      	add	r7, sp, #16
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	603b      	str	r3, [r7, #0]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4618      	mov	r0, r3
 800a038:	f001 fc5e 	bl	800b8f8 <pvPortMalloc>
 800a03c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00e      	beq.n	800a062 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a044:	20a8      	movs	r0, #168	; 0xa8
 800a046:	f001 fc57 	bl	800b8f8 <pvPortMalloc>
 800a04a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
 800a058:	e005      	b.n	800a066 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a05a:	6978      	ldr	r0, [r7, #20]
 800a05c:	f001 fd18 	bl	800ba90 <vPortFree>
 800a060:	e001      	b.n	800a066 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d017      	beq.n	800a09c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	2300      	movs	r3, #0
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f80e 	bl	800a0ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a090:	69f8      	ldr	r0, [r7, #28]
 800a092:	f000 f8b1 	bl	800a1f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a096:	2301      	movs	r3, #1
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e002      	b.n	800a0a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	21a5      	movs	r1, #165	; 0xa5
 800a0c6:	f003 f998 	bl	800d3fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	f023 0307 	bic.w	r3, r3, #7
 800a0e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01f      	beq.n	800a14a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	e012      	b.n	800a136 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	7819      	ldrb	r1, [r3, #0]
 800a118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4413      	add	r3, r2
 800a11e:	3334      	adds	r3, #52	; 0x34
 800a120:	460a      	mov	r2, r1
 800a122:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	4413      	add	r3, r2
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	3301      	adds	r3, #1
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	2b0f      	cmp	r3, #15
 800a13a:	d9e9      	bls.n	800a110 <prvInitialiseNewTask+0x64>
 800a13c:	e000      	b.n	800a140 <prvInitialiseNewTask+0x94>
			{
				break;
 800a13e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a148:	e003      	b.n	800a152 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	2b37      	cmp	r3, #55	; 0x37
 800a156:	d901      	bls.n	800a15c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a158:	2337      	movs	r3, #55	; 0x37
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a160:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a166:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	2200      	movs	r2, #0
 800a16c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	3304      	adds	r3, #4
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff f978 	bl	8009468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	3318      	adds	r3, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff f973 	bl	8009468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	2200      	movs	r2, #0
 800a19c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	3354      	adds	r3, #84	; 0x54
 800a1ac:	224c      	movs	r2, #76	; 0x4c
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f003 f922 	bl	800d3fa <memset>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <prvInitialiseNewTask+0x140>)
 800a1ba:	659a      	str	r2, [r3, #88]	; 0x58
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	4a0c      	ldr	r2, [pc, #48]	; (800a1f0 <prvInitialiseNewTask+0x144>)
 800a1c0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	4a0b      	ldr	r2, [pc, #44]	; (800a1f4 <prvInitialiseNewTask+0x148>)
 800a1c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	68f9      	ldr	r1, [r7, #12]
 800a1cc:	69b8      	ldr	r0, [r7, #24]
 800a1ce:	f001 f941 	bl	800b454 <pxPortInitialiseStack>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1e4:	bf00      	nop
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20003040 	.word	0x20003040
 800a1f0:	200030a8 	.word	0x200030a8
 800a1f4:	20003110 	.word	0x20003110

0800a1f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a200:	f001 fa58 	bl	800b6b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a204:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <prvAddNewTaskToReadyList+0xc4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3301      	adds	r3, #1
 800a20a:	4a2c      	ldr	r2, [pc, #176]	; (800a2bc <prvAddNewTaskToReadyList+0xc4>)
 800a20c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a20e:	4b2c      	ldr	r3, [pc, #176]	; (800a2c0 <prvAddNewTaskToReadyList+0xc8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a216:	4a2a      	ldr	r2, [pc, #168]	; (800a2c0 <prvAddNewTaskToReadyList+0xc8>)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a21c:	4b27      	ldr	r3, [pc, #156]	; (800a2bc <prvAddNewTaskToReadyList+0xc4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d110      	bne.n	800a246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a224:	f000 fc26 	bl	800aa74 <prvInitialiseTaskLists>
 800a228:	e00d      	b.n	800a246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a22a:	4b26      	ldr	r3, [pc, #152]	; (800a2c4 <prvAddNewTaskToReadyList+0xcc>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a232:	4b23      	ldr	r3, [pc, #140]	; (800a2c0 <prvAddNewTaskToReadyList+0xc8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d802      	bhi.n	800a246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a240:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <prvAddNewTaskToReadyList+0xc8>)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a246:	4b20      	ldr	r3, [pc, #128]	; (800a2c8 <prvAddNewTaskToReadyList+0xd0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	4a1e      	ldr	r2, [pc, #120]	; (800a2c8 <prvAddNewTaskToReadyList+0xd0>)
 800a24e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a250:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <prvAddNewTaskToReadyList+0xd0>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25c:	4b1b      	ldr	r3, [pc, #108]	; (800a2cc <prvAddNewTaskToReadyList+0xd4>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d903      	bls.n	800a26c <prvAddNewTaskToReadyList+0x74>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	4a18      	ldr	r2, [pc, #96]	; (800a2cc <prvAddNewTaskToReadyList+0xd4>)
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4a15      	ldr	r2, [pc, #84]	; (800a2d0 <prvAddNewTaskToReadyList+0xd8>)
 800a27a:	441a      	add	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f7ff f8fd 	bl	8009482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a288:	f001 fa44 	bl	800b714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a28c:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <prvAddNewTaskToReadyList+0xcc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00e      	beq.n	800a2b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a294:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <prvAddNewTaskToReadyList+0xc8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d207      	bcs.n	800a2b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <prvAddNewTaskToReadyList+0xdc>)
 800a2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20002308 	.word	0x20002308
 800a2c0:	20001e34 	.word	0x20001e34
 800a2c4:	20002314 	.word	0x20002314
 800a2c8:	20002324 	.word	0x20002324
 800a2cc:	20002310 	.word	0x20002310
 800a2d0:	20001e38 	.word	0x20001e38
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d017      	beq.n	800a31a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <vTaskDelay+0x60>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00a      	beq.n	800a308 <vTaskDelay+0x30>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a308:	f000 f88a 	bl	800a420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a30c:	2100      	movs	r1, #0
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fcfe 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a314:	f000 f892 	bl	800a43c <xTaskResumeAll>
 800a318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d107      	bne.n	800a330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <vTaskDelay+0x64>)
 800a322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a330:	bf00      	nop
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20002330 	.word	0x20002330
 800a33c:	e000ed04 	.word	0xe000ed04

0800a340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08a      	sub	sp, #40	; 0x28
 800a344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a346:	2300      	movs	r3, #0
 800a348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a34e:	463a      	mov	r2, r7
 800a350:	1d39      	adds	r1, r7, #4
 800a352:	f107 0308 	add.w	r3, r7, #8
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff f832 	bl	80093c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	9202      	str	r2, [sp, #8]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	2300      	movs	r3, #0
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	2300      	movs	r3, #0
 800a36c:	460a      	mov	r2, r1
 800a36e:	4924      	ldr	r1, [pc, #144]	; (800a400 <vTaskStartScheduler+0xc0>)
 800a370:	4824      	ldr	r0, [pc, #144]	; (800a404 <vTaskStartScheduler+0xc4>)
 800a372:	f7ff fdf9 	bl	8009f68 <xTaskCreateStatic>
 800a376:	4603      	mov	r3, r0
 800a378:	4a23      	ldr	r2, [pc, #140]	; (800a408 <vTaskStartScheduler+0xc8>)
 800a37a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a37c:	4b22      	ldr	r3, [pc, #136]	; (800a408 <vTaskStartScheduler+0xc8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a384:	2301      	movs	r3, #1
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	e001      	b.n	800a38e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d102      	bne.n	800a39a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a394:	f000 fd10 	bl	800adb8 <xTimerCreateTimerTask>
 800a398:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d11b      	bne.n	800a3d8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
}
 800a3b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3b4:	4b15      	ldr	r3, [pc, #84]	; (800a40c <vTaskStartScheduler+0xcc>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3354      	adds	r3, #84	; 0x54
 800a3ba:	4a15      	ldr	r2, [pc, #84]	; (800a410 <vTaskStartScheduler+0xd0>)
 800a3bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3be:	4b15      	ldr	r3, [pc, #84]	; (800a414 <vTaskStartScheduler+0xd4>)
 800a3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <vTaskStartScheduler+0xd8>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3cc:	4b13      	ldr	r3, [pc, #76]	; (800a41c <vTaskStartScheduler+0xdc>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3d2:	f001 f8cd 	bl	800b570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3d6:	e00e      	b.n	800a3f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3de:	d10a      	bne.n	800a3f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <vTaskStartScheduler+0xb4>
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	080100c4 	.word	0x080100c4
 800a404:	0800aa45 	.word	0x0800aa45
 800a408:	2000232c 	.word	0x2000232c
 800a40c:	20001e34 	.word	0x20001e34
 800a410:	200001d4 	.word	0x200001d4
 800a414:	20002328 	.word	0x20002328
 800a418:	20002314 	.word	0x20002314
 800a41c:	2000230c 	.word	0x2000230c

0800a420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a424:	4b04      	ldr	r3, [pc, #16]	; (800a438 <vTaskSuspendAll+0x18>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a03      	ldr	r2, [pc, #12]	; (800a438 <vTaskSuspendAll+0x18>)
 800a42c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	20002330 	.word	0x20002330

0800a43c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a44a:	4b42      	ldr	r3, [pc, #264]	; (800a554 <xTaskResumeAll+0x118>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <xTaskResumeAll+0x2c>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	603b      	str	r3, [r7, #0]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a468:	f001 f924 	bl	800b6b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a46c:	4b39      	ldr	r3, [pc, #228]	; (800a554 <xTaskResumeAll+0x118>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3b01      	subs	r3, #1
 800a472:	4a38      	ldr	r2, [pc, #224]	; (800a554 <xTaskResumeAll+0x118>)
 800a474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a476:	4b37      	ldr	r3, [pc, #220]	; (800a554 <xTaskResumeAll+0x118>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d162      	bne.n	800a544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a47e:	4b36      	ldr	r3, [pc, #216]	; (800a558 <xTaskResumeAll+0x11c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d05e      	beq.n	800a544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a486:	e02f      	b.n	800a4e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a488:	4b34      	ldr	r3, [pc, #208]	; (800a55c <xTaskResumeAll+0x120>)
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3318      	adds	r3, #24
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff f851 	bl	800953c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff f84c 	bl	800953c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a8:	4b2d      	ldr	r3, [pc, #180]	; (800a560 <xTaskResumeAll+0x124>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d903      	bls.n	800a4b8 <xTaskResumeAll+0x7c>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	4a2a      	ldr	r2, [pc, #168]	; (800a560 <xTaskResumeAll+0x124>)
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4a27      	ldr	r2, [pc, #156]	; (800a564 <xTaskResumeAll+0x128>)
 800a4c6:	441a      	add	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	f7fe ffd7 	bl	8009482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	4b23      	ldr	r3, [pc, #140]	; (800a568 <xTaskResumeAll+0x12c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d302      	bcc.n	800a4e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a4e2:	4b22      	ldr	r3, [pc, #136]	; (800a56c <xTaskResumeAll+0x130>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4e8:	4b1c      	ldr	r3, [pc, #112]	; (800a55c <xTaskResumeAll+0x120>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1cb      	bne.n	800a488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4f6:	f000 fb5f 	bl	800abb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <xTaskResumeAll+0x134>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d010      	beq.n	800a528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a506:	f000 f847 	bl	800a598 <xTaskIncrementTick>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a510:	4b16      	ldr	r3, [pc, #88]	; (800a56c <xTaskResumeAll+0x130>)
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3b01      	subs	r3, #1
 800a51a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f1      	bne.n	800a506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a522:	4b13      	ldr	r3, [pc, #76]	; (800a570 <xTaskResumeAll+0x134>)
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a528:	4b10      	ldr	r3, [pc, #64]	; (800a56c <xTaskResumeAll+0x130>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a530:	2301      	movs	r3, #1
 800a532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a534:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <xTaskResumeAll+0x138>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a544:	f001 f8e6 	bl	800b714 <vPortExitCritical>

	return xAlreadyYielded;
 800a548:	68bb      	ldr	r3, [r7, #8]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20002330 	.word	0x20002330
 800a558:	20002308 	.word	0x20002308
 800a55c:	200022c8 	.word	0x200022c8
 800a560:	20002310 	.word	0x20002310
 800a564:	20001e38 	.word	0x20001e38
 800a568:	20001e34 	.word	0x20001e34
 800a56c:	2000231c 	.word	0x2000231c
 800a570:	20002318 	.word	0x20002318
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <xTaskGetTickCount+0x1c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a584:	687b      	ldr	r3, [r7, #4]
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	2000230c 	.word	0x2000230c

0800a598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5a2:	4b4f      	ldr	r3, [pc, #316]	; (800a6e0 <xTaskIncrementTick+0x148>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f040 808f 	bne.w	800a6ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5ac:	4b4d      	ldr	r3, [pc, #308]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5b4:	4a4b      	ldr	r2, [pc, #300]	; (800a6e4 <xTaskIncrementTick+0x14c>)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d120      	bne.n	800a602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5c0:	4b49      	ldr	r3, [pc, #292]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <xTaskIncrementTick+0x46>
 800a5e0:	4b41      	ldr	r3, [pc, #260]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	4b41      	ldr	r3, [pc, #260]	; (800a6ec <xTaskIncrementTick+0x154>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a3f      	ldr	r2, [pc, #252]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	4a3f      	ldr	r2, [pc, #252]	; (800a6ec <xTaskIncrementTick+0x154>)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	4b3e      	ldr	r3, [pc, #248]	; (800a6f0 <xTaskIncrementTick+0x158>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	4a3d      	ldr	r2, [pc, #244]	; (800a6f0 <xTaskIncrementTick+0x158>)
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	f000 fadb 	bl	800abb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a602:	4b3c      	ldr	r3, [pc, #240]	; (800a6f4 <xTaskIncrementTick+0x15c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d349      	bcc.n	800a6a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a60c:	4b36      	ldr	r3, [pc, #216]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d104      	bne.n	800a620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a616:	4b37      	ldr	r3, [pc, #220]	; (800a6f4 <xTaskIncrementTick+0x15c>)
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	601a      	str	r2, [r3, #0]
					break;
 800a61e:	e03f      	b.n	800a6a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a620:	4b31      	ldr	r3, [pc, #196]	; (800a6e8 <xTaskIncrementTick+0x150>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d203      	bcs.n	800a640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a638:	4a2e      	ldr	r2, [pc, #184]	; (800a6f4 <xTaskIncrementTick+0x15c>)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a63e:	e02f      	b.n	800a6a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3304      	adds	r3, #4
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe ff79 	bl	800953c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d004      	beq.n	800a65c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	3318      	adds	r3, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe ff70 	bl	800953c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a660:	4b25      	ldr	r3, [pc, #148]	; (800a6f8 <xTaskIncrementTick+0x160>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	429a      	cmp	r2, r3
 800a666:	d903      	bls.n	800a670 <xTaskIncrementTick+0xd8>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	4a22      	ldr	r2, [pc, #136]	; (800a6f8 <xTaskIncrementTick+0x160>)
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a674:	4613      	mov	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4a1f      	ldr	r2, [pc, #124]	; (800a6fc <xTaskIncrementTick+0x164>)
 800a67e:	441a      	add	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	3304      	adds	r3, #4
 800a684:	4619      	mov	r1, r3
 800a686:	4610      	mov	r0, r2
 800a688:	f7fe fefb 	bl	8009482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <xTaskIncrementTick+0x168>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	429a      	cmp	r2, r3
 800a698:	d3b8      	bcc.n	800a60c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a69a:	2301      	movs	r3, #1
 800a69c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69e:	e7b5      	b.n	800a60c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6a0:	4b17      	ldr	r3, [pc, #92]	; (800a700 <xTaskIncrementTick+0x168>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a6:	4915      	ldr	r1, [pc, #84]	; (800a6fc <xTaskIncrementTick+0x164>)
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d901      	bls.n	800a6bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6bc:	4b11      	ldr	r3, [pc, #68]	; (800a704 <xTaskIncrementTick+0x16c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d007      	beq.n	800a6d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e004      	b.n	800a6d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <xTaskIncrementTick+0x170>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	4a0d      	ldr	r2, [pc, #52]	; (800a708 <xTaskIncrementTick+0x170>)
 800a6d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6d4:	697b      	ldr	r3, [r7, #20]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20002330 	.word	0x20002330
 800a6e4:	2000230c 	.word	0x2000230c
 800a6e8:	200022c0 	.word	0x200022c0
 800a6ec:	200022c4 	.word	0x200022c4
 800a6f0:	20002320 	.word	0x20002320
 800a6f4:	20002328 	.word	0x20002328
 800a6f8:	20002310 	.word	0x20002310
 800a6fc:	20001e38 	.word	0x20001e38
 800a700:	20001e34 	.word	0x20001e34
 800a704:	2000231c 	.word	0x2000231c
 800a708:	20002318 	.word	0x20002318

0800a70c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a712:	4b2a      	ldr	r3, [pc, #168]	; (800a7bc <vTaskSwitchContext+0xb0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a71a:	4b29      	ldr	r3, [pc, #164]	; (800a7c0 <vTaskSwitchContext+0xb4>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a720:	e046      	b.n	800a7b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a722:	4b27      	ldr	r3, [pc, #156]	; (800a7c0 <vTaskSwitchContext+0xb4>)
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a728:	4b26      	ldr	r3, [pc, #152]	; (800a7c4 <vTaskSwitchContext+0xb8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	e010      	b.n	800a752 <vTaskSwitchContext+0x46>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <vTaskSwitchContext+0x40>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	607b      	str	r3, [r7, #4]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <vTaskSwitchContext+0x3e>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3b01      	subs	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	491d      	ldr	r1, [pc, #116]	; (800a7c8 <vTaskSwitchContext+0xbc>)
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0e4      	beq.n	800a730 <vTaskSwitchContext+0x24>
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4a15      	ldr	r2, [pc, #84]	; (800a7c8 <vTaskSwitchContext+0xbc>)
 800a772:	4413      	add	r3, r2
 800a774:	60bb      	str	r3, [r7, #8]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	605a      	str	r2, [r3, #4]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	3308      	adds	r3, #8
 800a788:	429a      	cmp	r2, r3
 800a78a:	d104      	bne.n	800a796 <vTaskSwitchContext+0x8a>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	605a      	str	r2, [r3, #4]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	4a0b      	ldr	r2, [pc, #44]	; (800a7cc <vTaskSwitchContext+0xc0>)
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	4a08      	ldr	r2, [pc, #32]	; (800a7c4 <vTaskSwitchContext+0xb8>)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <vTaskSwitchContext+0xc0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3354      	adds	r3, #84	; 0x54
 800a7ac:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <vTaskSwitchContext+0xc4>)
 800a7ae:	6013      	str	r3, [r2, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20002330 	.word	0x20002330
 800a7c0:	2000231c 	.word	0x2000231c
 800a7c4:	20002310 	.word	0x20002310
 800a7c8:	20001e38 	.word	0x20001e38
 800a7cc:	20001e34 	.word	0x20001e34
 800a7d0:	200001d4 	.word	0x200001d4

0800a7d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	60fb      	str	r3, [r7, #12]
}
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7fa:	4b07      	ldr	r3, [pc, #28]	; (800a818 <vTaskPlaceOnEventList+0x44>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3318      	adds	r3, #24
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7fe fe61 	bl	80094ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a808:	2101      	movs	r1, #1
 800a80a:	6838      	ldr	r0, [r7, #0]
 800a80c:	f000 fa80 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
}
 800a810:	bf00      	nop
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	20001e34 	.word	0x20001e34

0800a81c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10a      	bne.n	800a844 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <vTaskPlaceOnEventListRestricted+0x54>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3318      	adds	r3, #24
 800a84a:	4619      	mov	r1, r3
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7fe fe18 	bl	8009482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295
 800a85c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	68b8      	ldr	r0, [r7, #8]
 800a862:	f000 fa55 	bl	800ad10 <prvAddCurrentTaskToDelayedList>
	}
 800a866:	bf00      	nop
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20001e34 	.word	0x20001e34

0800a874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	60fb      	str	r3, [r7, #12]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3318      	adds	r3, #24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fe49 	bl	800953c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8aa:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <xTaskRemoveFromEventList+0xb0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d11d      	bne.n	800a8ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fe40 	bl	800953c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c0:	4b19      	ldr	r3, [pc, #100]	; (800a928 <xTaskRemoveFromEventList+0xb4>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d903      	bls.n	800a8d0 <xTaskRemoveFromEventList+0x5c>
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	4a16      	ldr	r2, [pc, #88]	; (800a928 <xTaskRemoveFromEventList+0xb4>)
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4a13      	ldr	r2, [pc, #76]	; (800a92c <xTaskRemoveFromEventList+0xb8>)
 800a8de:	441a      	add	r2, r3
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f7fe fdcb 	bl	8009482 <vListInsertEnd>
 800a8ec:	e005      	b.n	800a8fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3318      	adds	r3, #24
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	480e      	ldr	r0, [pc, #56]	; (800a930 <xTaskRemoveFromEventList+0xbc>)
 800a8f6:	f7fe fdc4 	bl	8009482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <xTaskRemoveFromEventList+0xc0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	429a      	cmp	r2, r3
 800a906:	d905      	bls.n	800a914 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a908:	2301      	movs	r3, #1
 800a90a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <xTaskRemoveFromEventList+0xc4>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	e001      	b.n	800a918 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a918:	697b      	ldr	r3, [r7, #20]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20002330 	.word	0x20002330
 800a928:	20002310 	.word	0x20002310
 800a92c:	20001e38 	.word	0x20001e38
 800a930:	200022c8 	.word	0x200022c8
 800a934:	20001e34 	.word	0x20001e34
 800a938:	2000231c 	.word	0x2000231c

0800a93c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a944:	4b06      	ldr	r3, [pc, #24]	; (800a960 <vTaskInternalSetTimeOutState+0x24>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <vTaskInternalSetTimeOutState+0x28>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	605a      	str	r2, [r3, #4]
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20002320 	.word	0x20002320
 800a964:	2000230c 	.word	0x2000230c

0800a968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10a      	bne.n	800a98e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	613b      	str	r3, [r7, #16]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60fb      	str	r3, [r7, #12]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9aa:	f000 fe83 	bl	800b6b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <xTaskCheckForTimeOut+0xbc>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	d102      	bne.n	800a9ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e023      	b.n	800aa16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <xTaskCheckForTimeOut+0xc0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d007      	beq.n	800a9ea <xTaskCheckForTimeOut+0x82>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d302      	bcc.n	800a9ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	61fb      	str	r3, [r7, #28]
 800a9e8:	e015      	b.n	800aa16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d20b      	bcs.n	800aa0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff ff9b 	bl	800a93c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa06:	2300      	movs	r3, #0
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	e004      	b.n	800aa16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa12:	2301      	movs	r3, #1
 800aa14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa16:	f000 fe7d 	bl	800b714 <vPortExitCritical>

	return xReturn;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	2000230c 	.word	0x2000230c
 800aa28:	20002320 	.word	0x20002320

0800aa2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa30:	4b03      	ldr	r3, [pc, #12]	; (800aa40 <vTaskMissedYield+0x14>)
 800aa32:	2201      	movs	r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
}
 800aa36:	bf00      	nop
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	2000231c 	.word	0x2000231c

0800aa44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa4c:	f000 f852 	bl	800aaf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <prvIdleTask+0x28>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d9f9      	bls.n	800aa4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <prvIdleTask+0x2c>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa68:	e7f0      	b.n	800aa4c <prvIdleTask+0x8>
 800aa6a:	bf00      	nop
 800aa6c:	20001e38 	.word	0x20001e38
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	607b      	str	r3, [r7, #4]
 800aa7e:	e00c      	b.n	800aa9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4a12      	ldr	r2, [pc, #72]	; (800aad4 <prvInitialiseTaskLists+0x60>)
 800aa8c:	4413      	add	r3, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fcca 	bl	8009428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3301      	adds	r3, #1
 800aa98:	607b      	str	r3, [r7, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b37      	cmp	r3, #55	; 0x37
 800aa9e:	d9ef      	bls.n	800aa80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaa0:	480d      	ldr	r0, [pc, #52]	; (800aad8 <prvInitialiseTaskLists+0x64>)
 800aaa2:	f7fe fcc1 	bl	8009428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aaa6:	480d      	ldr	r0, [pc, #52]	; (800aadc <prvInitialiseTaskLists+0x68>)
 800aaa8:	f7fe fcbe 	bl	8009428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aaac:	480c      	ldr	r0, [pc, #48]	; (800aae0 <prvInitialiseTaskLists+0x6c>)
 800aaae:	f7fe fcbb 	bl	8009428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aab2:	480c      	ldr	r0, [pc, #48]	; (800aae4 <prvInitialiseTaskLists+0x70>)
 800aab4:	f7fe fcb8 	bl	8009428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aab8:	480b      	ldr	r0, [pc, #44]	; (800aae8 <prvInitialiseTaskLists+0x74>)
 800aaba:	f7fe fcb5 	bl	8009428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aabe:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <prvInitialiseTaskLists+0x78>)
 800aac0:	4a05      	ldr	r2, [pc, #20]	; (800aad8 <prvInitialiseTaskLists+0x64>)
 800aac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <prvInitialiseTaskLists+0x7c>)
 800aac6:	4a05      	ldr	r2, [pc, #20]	; (800aadc <prvInitialiseTaskLists+0x68>)
 800aac8:	601a      	str	r2, [r3, #0]
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20001e38 	.word	0x20001e38
 800aad8:	20002298 	.word	0x20002298
 800aadc:	200022ac 	.word	0x200022ac
 800aae0:	200022c8 	.word	0x200022c8
 800aae4:	200022dc 	.word	0x200022dc
 800aae8:	200022f4 	.word	0x200022f4
 800aaec:	200022c0 	.word	0x200022c0
 800aaf0:	200022c4 	.word	0x200022c4

0800aaf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aafa:	e019      	b.n	800ab30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aafc:	f000 fdda 	bl	800b6b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab00:	4b10      	ldr	r3, [pc, #64]	; (800ab44 <prvCheckTasksWaitingTermination+0x50>)
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fd15 	bl	800953c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab12:	4b0d      	ldr	r3, [pc, #52]	; (800ab48 <prvCheckTasksWaitingTermination+0x54>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	4a0b      	ldr	r2, [pc, #44]	; (800ab48 <prvCheckTasksWaitingTermination+0x54>)
 800ab1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab1c:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <prvCheckTasksWaitingTermination+0x58>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <prvCheckTasksWaitingTermination+0x58>)
 800ab24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab26:	f000 fdf5 	bl	800b714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f810 	bl	800ab50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab30:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <prvCheckTasksWaitingTermination+0x58>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e1      	bne.n	800aafc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200022dc 	.word	0x200022dc
 800ab48:	20002308 	.word	0x20002308
 800ab4c:	200022f0 	.word	0x200022f0

0800ab50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3354      	adds	r3, #84	; 0x54
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 fc91 	bl	800d484 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d108      	bne.n	800ab7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 ff8d 	bl	800ba90 <vPortFree>
				vPortFree( pxTCB );
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 ff8a 	bl	800ba90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab7c:	e018      	b.n	800abb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d103      	bne.n	800ab90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 ff81 	bl	800ba90 <vPortFree>
	}
 800ab8e:	e00f      	b.n	800abb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d00a      	beq.n	800abb0 <prvDeleteTCB+0x60>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	60fb      	str	r3, [r7, #12]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <prvDeleteTCB+0x5e>
	}
 800abb0:	bf00      	nop
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abbe:	4b0c      	ldr	r3, [pc, #48]	; (800abf0 <prvResetNextTaskUnblockTime+0x38>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d104      	bne.n	800abd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <prvResetNextTaskUnblockTime+0x3c>)
 800abca:	f04f 32ff 	mov.w	r2, #4294967295
 800abce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abd0:	e008      	b.n	800abe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd2:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <prvResetNextTaskUnblockTime+0x38>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4a04      	ldr	r2, [pc, #16]	; (800abf4 <prvResetNextTaskUnblockTime+0x3c>)
 800abe2:	6013      	str	r3, [r2, #0]
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200022c0 	.word	0x200022c0
 800abf4:	20002328 	.word	0x20002328

0800abf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <xTaskGetSchedulerState+0x34>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d102      	bne.n	800ac0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac06:	2301      	movs	r3, #1
 800ac08:	607b      	str	r3, [r7, #4]
 800ac0a:	e008      	b.n	800ac1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac0c:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <xTaskGetSchedulerState+0x38>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac14:	2302      	movs	r3, #2
 800ac16:	607b      	str	r3, [r7, #4]
 800ac18:	e001      	b.n	800ac1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac1e:	687b      	ldr	r3, [r7, #4]
	}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20002314 	.word	0x20002314
 800ac30:	20002330 	.word	0x20002330

0800ac34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d056      	beq.n	800acf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac4a:	4b2e      	ldr	r3, [pc, #184]	; (800ad04 <xTaskPriorityDisinherit+0xd0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d00a      	beq.n	800ac6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	60fb      	str	r3, [r7, #12]
}
 800ac66:	bf00      	nop
 800ac68:	e7fe      	b.n	800ac68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10a      	bne.n	800ac88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	60bb      	str	r3, [r7, #8]
}
 800ac84:	bf00      	nop
 800ac86:	e7fe      	b.n	800ac86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d02c      	beq.n	800acf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d128      	bne.n	800acf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3304      	adds	r3, #4
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fc46 	bl	800953c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4b0f      	ldr	r3, [pc, #60]	; (800ad08 <xTaskPriorityDisinherit+0xd4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d903      	bls.n	800acd8 <xTaskPriorityDisinherit+0xa4>
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a0c      	ldr	r2, [pc, #48]	; (800ad08 <xTaskPriorityDisinherit+0xd4>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4a09      	ldr	r2, [pc, #36]	; (800ad0c <xTaskPriorityDisinherit+0xd8>)
 800ace6:	441a      	add	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fe fbc7 	bl	8009482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acf8:	697b      	ldr	r3, [r7, #20]
	}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20001e34 	.word	0x20001e34
 800ad08:	20002310 	.word	0x20002310
 800ad0c:	20001e38 	.word	0x20001e38

0800ad10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad1a:	4b21      	ldr	r3, [pc, #132]	; (800ada0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad20:	4b20      	ldr	r3, [pc, #128]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fc08 	bl	800953c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d10a      	bne.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d007      	beq.n	800ad4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad3a:	4b1a      	ldr	r3, [pc, #104]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4819      	ldr	r0, [pc, #100]	; (800ada8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad44:	f7fe fb9d 	bl	8009482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad48:	e026      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad52:	4b14      	ldr	r3, [pc, #80]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d209      	bcs.n	800ad76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad62:	4b12      	ldr	r3, [pc, #72]	; (800adac <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fe fbab 	bl	80094ca <vListInsert>
}
 800ad74:	e010      	b.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b0e      	ldr	r3, [pc, #56]	; (800adb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fba1 	bl	80094ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d202      	bcs.n	800ad98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad92:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	2000230c 	.word	0x2000230c
 800ada4:	20001e34 	.word	0x20001e34
 800ada8:	200022f4 	.word	0x200022f4
 800adac:	200022c4 	.word	0x200022c4
 800adb0:	200022c0 	.word	0x200022c0
 800adb4:	20002328 	.word	0x20002328

0800adb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	; 0x28
 800adbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adc2:	f000 fb07 	bl	800b3d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adc6:	4b1c      	ldr	r3, [pc, #112]	; (800ae38 <xTimerCreateTimerTask+0x80>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d021      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800add6:	1d3a      	adds	r2, r7, #4
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	f107 030c 	add.w	r3, r7, #12
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fb07 	bl	80093f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	9202      	str	r2, [sp, #8]
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	2302      	movs	r3, #2
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	2300      	movs	r3, #0
 800adf6:	460a      	mov	r2, r1
 800adf8:	4910      	ldr	r1, [pc, #64]	; (800ae3c <xTimerCreateTimerTask+0x84>)
 800adfa:	4811      	ldr	r0, [pc, #68]	; (800ae40 <xTimerCreateTimerTask+0x88>)
 800adfc:	f7ff f8b4 	bl	8009f68 <xTaskCreateStatic>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4a10      	ldr	r2, [pc, #64]	; (800ae44 <xTimerCreateTimerTask+0x8c>)
 800ae04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <xTimerCreateTimerTask+0x8c>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	613b      	str	r3, [r7, #16]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae2e:	697b      	ldr	r3, [r7, #20]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20002364 	.word	0x20002364
 800ae3c:	080100cc 	.word	0x080100cc
 800ae40:	0800af7d 	.word	0x0800af7d
 800ae44:	20002368 	.word	0x20002368

0800ae48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08a      	sub	sp, #40	; 0x28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae76:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <xTimerGenericCommand+0x98>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02a      	beq.n	800aed4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b05      	cmp	r3, #5
 800ae8e:	dc18      	bgt.n	800aec2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae90:	f7ff feb2 	bl	800abf8 <xTaskGetSchedulerState>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d109      	bne.n	800aeae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae9a:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <xTimerGenericCommand+0x98>)
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f107 0110 	add.w	r1, r7, #16
 800aea2:	2300      	movs	r3, #0
 800aea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea6:	f7fe fc77 	bl	8009798 <xQueueGenericSend>
 800aeaa:	6278      	str	r0, [r7, #36]	; 0x24
 800aeac:	e012      	b.n	800aed4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeae:	4b0c      	ldr	r3, [pc, #48]	; (800aee0 <xTimerGenericCommand+0x98>)
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	f107 0110 	add.w	r1, r7, #16
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7fe fc6d 	bl	8009798 <xQueueGenericSend>
 800aebe:	6278      	str	r0, [r7, #36]	; 0x24
 800aec0:	e008      	b.n	800aed4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aec2:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <xTimerGenericCommand+0x98>)
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	f107 0110 	add.w	r1, r7, #16
 800aeca:	2300      	movs	r3, #0
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	f7fe fd61 	bl	8009994 <xQueueGenericSendFromISR>
 800aed2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3728      	adds	r7, #40	; 0x28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20002364 	.word	0x20002364

0800aee4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeee:	4b22      	ldr	r3, [pc, #136]	; (800af78 <prvProcessExpiredTimer+0x94>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fb1d 	bl	800953c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d022      	beq.n	800af56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	18d1      	adds	r1, r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	6978      	ldr	r0, [r7, #20]
 800af1e:	f000 f8d1 	bl	800b0c4 <prvInsertTimerInActiveList>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01f      	beq.n	800af68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af28:	2300      	movs	r3, #0
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	2100      	movs	r1, #0
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	f7ff ff88 	bl	800ae48 <xTimerGenericCommand>
 800af38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d113      	bne.n	800af68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	60fb      	str	r3, [r7, #12]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f023 0301 	bic.w	r3, r3, #1
 800af60:	b2da      	uxtb	r2, r3
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	6978      	ldr	r0, [r7, #20]
 800af6e:	4798      	blx	r3
}
 800af70:	bf00      	nop
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	2000235c 	.word	0x2000235c

0800af7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f857 	bl	800b03c <prvGetNextExpireTime>
 800af8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f803 	bl	800afa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af9a:	f000 f8d5 	bl	800b148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af9e:	e7f1      	b.n	800af84 <prvTimerTask+0x8>

0800afa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afaa:	f7ff fa39 	bl	800a420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 f866 	bl	800b084 <prvSampleTimeNow>
 800afb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d130      	bne.n	800b022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d806      	bhi.n	800afdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afce:	f7ff fa35 	bl	800a43c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ff85 	bl	800aee4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afda:	e024      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afe2:	4b13      	ldr	r3, [pc, #76]	; (800b030 <prvProcessTimerOrBlockTask+0x90>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <prvProcessTimerOrBlockTask+0x50>
 800afec:	2301      	movs	r3, #1
 800afee:	e000      	b.n	800aff2 <prvProcessTimerOrBlockTask+0x52>
 800aff0:	2300      	movs	r3, #0
 800aff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aff4:	4b0f      	ldr	r3, [pc, #60]	; (800b034 <prvProcessTimerOrBlockTask+0x94>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	f7fe ff7d 	bl	8009f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b006:	f7ff fa19 	bl	800a43c <xTaskResumeAll>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b010:	4b09      	ldr	r3, [pc, #36]	; (800b038 <prvProcessTimerOrBlockTask+0x98>)
 800b012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	f3bf 8f6f 	isb	sy
}
 800b020:	e001      	b.n	800b026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b022:	f7ff fa0b 	bl	800a43c <xTaskResumeAll>
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20002360 	.word	0x20002360
 800b034:	20002364 	.word	0x20002364
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <prvGetNextExpireTime+0x44>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <prvGetNextExpireTime+0x16>
 800b04e:	2201      	movs	r2, #1
 800b050:	e000      	b.n	800b054 <prvGetNextExpireTime+0x18>
 800b052:	2200      	movs	r2, #0
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <prvGetNextExpireTime+0x44>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	e001      	b.n	800b070 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b070:	68fb      	ldr	r3, [r7, #12]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	2000235c 	.word	0x2000235c

0800b084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b08c:	f7ff fa74 	bl	800a578 <xTaskGetTickCount>
 800b090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b092:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <prvSampleTimeNow+0x3c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d205      	bcs.n	800b0a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b09c:	f000 f936 	bl	800b30c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e002      	b.n	800b0ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0ae:	4a04      	ldr	r2, [pc, #16]	; (800b0c0 <prvSampleTimeNow+0x3c>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000236c 	.word	0x2000236c

0800b0c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d812      	bhi.n	800b110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	e01b      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0fe:	4b10      	ldr	r3, [pc, #64]	; (800b140 <prvInsertTimerInActiveList+0x7c>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3304      	adds	r3, #4
 800b106:	4619      	mov	r1, r3
 800b108:	4610      	mov	r0, r2
 800b10a:	f7fe f9de 	bl	80094ca <vListInsert>
 800b10e:	e012      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	429a      	cmp	r2, r3
 800b116:	d206      	bcs.n	800b126 <prvInsertTimerInActiveList+0x62>
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d302      	bcc.n	800b126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e007      	b.n	800b136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <prvInsertTimerInActiveList+0x80>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe f9ca 	bl	80094ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b136:	697b      	ldr	r3, [r7, #20]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	20002360 	.word	0x20002360
 800b144:	2000235c 	.word	0x2000235c

0800b148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08e      	sub	sp, #56	; 0x38
 800b14c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b14e:	e0ca      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	da18      	bge.n	800b188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b156:	1d3b      	adds	r3, r7, #4
 800b158:	3304      	adds	r3, #4
 800b15a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61fb      	str	r3, [r7, #28]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b17e:	6850      	ldr	r0, [r2, #4]
 800b180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b182:	6892      	ldr	r2, [r2, #8]
 800b184:	4611      	mov	r1, r2
 800b186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f2c0 80ab 	blt.w	800b2e6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe f9cb 	bl	800953c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff ff6b 	bl	800b084 <prvSampleTimeNow>
 800b1ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	f200 8096 	bhi.w	800b2e4 <prvProcessReceivedCommands+0x19c>
 800b1b8:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <prvProcessReceivedCommands+0x78>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1e9 	.word	0x0800b1e9
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b25d 	.word	0x0800b25d
 800b1d0:	0800b271 	.word	0x0800b271
 800b1d4:	0800b2bb 	.word	0x0800b2bb
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b1e9 	.word	0x0800b1e9
 800b1e0:	0800b25d 	.word	0x0800b25d
 800b1e4:	0800b271 	.word	0x0800b271
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	18d1      	adds	r1, r2, r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b208:	f7ff ff5c 	bl	800b0c4 <prvInsertTimerInActiveList>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d069      	beq.n	800b2e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05e      	beq.n	800b2e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	441a      	add	r2, r3
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b23a:	f7ff fe05 	bl	800ae48 <xTimerGenericCommand>
 800b23e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d14f      	bne.n	800b2e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	61bb      	str	r3, [r7, #24]
}
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b262:	f023 0301 	bic.w	r3, r3, #1
 800b266:	b2da      	uxtb	r2, r3
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b26e:	e03a      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b276:	f043 0301 	orr.w	r3, r3, #1
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10a      	bne.n	800b2a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	617b      	str	r3, [r7, #20]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	18d1      	adds	r1, r2, r3
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b4:	f7ff ff06 	bl	800b0c4 <prvInsertTimerInActiveList>
					break;
 800b2b8:	e015      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c0:	f003 0302 	and.w	r3, r3, #2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d103      	bne.n	800b2d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ca:	f000 fbe1 	bl	800ba90 <vPortFree>
 800b2ce:	e00a      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2e2:	e000      	b.n	800b2e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b2e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2e6:	4b08      	ldr	r3, [pc, #32]	; (800b308 <prvProcessReceivedCommands+0x1c0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	1d39      	adds	r1, r7, #4
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fbec 	bl	8009acc <xQueueReceive>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f47f af2a 	bne.w	800b150 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20002364 	.word	0x20002364

0800b30c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b312:	e048      	b.n	800b3a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31e:	4b2b      	ldr	r3, [pc, #172]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe f905 	bl	800953c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d02e      	beq.n	800b3a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	429a      	cmp	r2, r3
 800b358:	d90e      	bls.n	800b378 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b366:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7fe f8aa 	bl	80094ca <vListInsert>
 800b376:	e016      	b.n	800b3a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b378:	2300      	movs	r3, #0
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	2100      	movs	r1, #0
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fd60 	bl	800ae48 <xTimerGenericCommand>
 800b388:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10a      	bne.n	800b3a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	603b      	str	r3, [r7, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1b1      	bne.n	800b314 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3b0:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvSwitchTimerLists+0xc4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a04      	ldr	r2, [pc, #16]	; (800b3cc <prvSwitchTimerLists+0xc0>)
 800b3bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3be:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <prvSwitchTimerLists+0xc4>)
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	6013      	str	r3, [r2, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	2000235c 	.word	0x2000235c
 800b3d0:	20002360 	.word	0x20002360

0800b3d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3da:	f000 f96b 	bl	800b6b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3de:	4b15      	ldr	r3, [pc, #84]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d120      	bne.n	800b428 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3e6:	4814      	ldr	r0, [pc, #80]	; (800b438 <prvCheckForValidListAndQueue+0x64>)
 800b3e8:	f7fe f81e 	bl	8009428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3ec:	4813      	ldr	r0, [pc, #76]	; (800b43c <prvCheckForValidListAndQueue+0x68>)
 800b3ee:	f7fe f81b 	bl	8009428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3f2:	4b13      	ldr	r3, [pc, #76]	; (800b440 <prvCheckForValidListAndQueue+0x6c>)
 800b3f4:	4a10      	ldr	r2, [pc, #64]	; (800b438 <prvCheckForValidListAndQueue+0x64>)
 800b3f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3f8:	4b12      	ldr	r3, [pc, #72]	; (800b444 <prvCheckForValidListAndQueue+0x70>)
 800b3fa:	4a10      	ldr	r2, [pc, #64]	; (800b43c <prvCheckForValidListAndQueue+0x68>)
 800b3fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3fe:	2300      	movs	r3, #0
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	4b11      	ldr	r3, [pc, #68]	; (800b448 <prvCheckForValidListAndQueue+0x74>)
 800b404:	4a11      	ldr	r2, [pc, #68]	; (800b44c <prvCheckForValidListAndQueue+0x78>)
 800b406:	2110      	movs	r1, #16
 800b408:	200a      	movs	r0, #10
 800b40a:	f7fe f929 	bl	8009660 <xQueueGenericCreateStatic>
 800b40e:	4603      	mov	r3, r0
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b412:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <prvCheckForValidListAndQueue+0x60>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	490b      	ldr	r1, [pc, #44]	; (800b450 <prvCheckForValidListAndQueue+0x7c>)
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fd42 	bl	8009eac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b428:	f000 f974 	bl	800b714 <vPortExitCritical>
}
 800b42c:	bf00      	nop
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20002364 	.word	0x20002364
 800b438:	20002334 	.word	0x20002334
 800b43c:	20002348 	.word	0x20002348
 800b440:	2000235c 	.word	0x2000235c
 800b444:	20002360 	.word	0x20002360
 800b448:	20002410 	.word	0x20002410
 800b44c:	20002370 	.word	0x20002370
 800b450:	080100d4 	.word	0x080100d4

0800b454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3b04      	subs	r3, #4
 800b464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3b04      	subs	r3, #4
 800b472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f023 0201 	bic.w	r2, r3, #1
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b04      	subs	r3, #4
 800b482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b484:	4a0c      	ldr	r2, [pc, #48]	; (800b4b8 <pxPortInitialiseStack+0x64>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3b14      	subs	r3, #20
 800b48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f06f 0202 	mvn.w	r2, #2
 800b4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3b20      	subs	r3, #32
 800b4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	0800b4bd 	.word	0x0800b4bd

0800b4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <prvTaskExitError+0x54>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d00a      	beq.n	800b4e6 <prvTaskExitError+0x2a>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <prvTaskExitError+0x28>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60bb      	str	r3, [r7, #8]
}
 800b4f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4fa:	bf00      	nop
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0fc      	beq.n	800b4fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b502:	bf00      	nop
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	2000000c 	.word	0x2000000c
	...

0800b520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <pxCurrentTCBConst2>)
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	6808      	ldr	r0, [r1, #0]
 800b526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52a:	f380 8809 	msr	PSP, r0
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f04f 0000 	mov.w	r0, #0
 800b536:	f380 8811 	msr	BASEPRI, r0
 800b53a:	4770      	bx	lr
 800b53c:	f3af 8000 	nop.w

0800b540 <pxCurrentTCBConst2>:
 800b540:	20001e34 	.word	0x20001e34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop

0800b548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b548:	4808      	ldr	r0, [pc, #32]	; (800b56c <prvPortStartFirstTask+0x24>)
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	6800      	ldr	r0, [r0, #0]
 800b54e:	f380 8808 	msr	MSP, r0
 800b552:	f04f 0000 	mov.w	r0, #0
 800b556:	f380 8814 	msr	CONTROL, r0
 800b55a:	b662      	cpsie	i
 800b55c:	b661      	cpsie	f
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	df00      	svc	0
 800b568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b56a:	bf00      	nop
 800b56c:	e000ed08 	.word	0xe000ed08

0800b570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b576:	4b46      	ldr	r3, [pc, #280]	; (800b690 <xPortStartScheduler+0x120>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a46      	ldr	r2, [pc, #280]	; (800b694 <xPortStartScheduler+0x124>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d10a      	bne.n	800b596 <xPortStartScheduler+0x26>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	613b      	str	r3, [r7, #16]
}
 800b592:	bf00      	nop
 800b594:	e7fe      	b.n	800b594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b596:	4b3e      	ldr	r3, [pc, #248]	; (800b690 <xPortStartScheduler+0x120>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a3f      	ldr	r2, [pc, #252]	; (800b698 <xPortStartScheduler+0x128>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10a      	bne.n	800b5b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60fb      	str	r3, [r7, #12]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5b6:	4b39      	ldr	r3, [pc, #228]	; (800b69c <xPortStartScheduler+0x12c>)
 800b5b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b31      	ldr	r3, [pc, #196]	; (800b6a0 <xPortStartScheduler+0x130>)
 800b5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5de:	4b31      	ldr	r3, [pc, #196]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5e4:	e009      	b.n	800b5fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b5e6:	4b2f      	ldr	r3, [pc, #188]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	4a2d      	ldr	r2, [pc, #180]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b602:	2b80      	cmp	r3, #128	; 0x80
 800b604:	d0ef      	beq.n	800b5e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b606:	4b27      	ldr	r3, [pc, #156]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1c3 0307 	rsb	r3, r3, #7
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d00a      	beq.n	800b628 <xPortStartScheduler+0xb8>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60bb      	str	r3, [r7, #8]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b628:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	021b      	lsls	r3, r3, #8
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b63a:	4a1a      	ldr	r2, [pc, #104]	; (800b6a4 <xPortStartScheduler+0x134>)
 800b63c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a17      	ldr	r2, [pc, #92]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b64c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a14      	ldr	r2, [pc, #80]	; (800b6a8 <xPortStartScheduler+0x138>)
 800b658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b65c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b65e:	f000 f8dd 	bl	800b81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b662:	4b12      	ldr	r3, [pc, #72]	; (800b6ac <xPortStartScheduler+0x13c>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b668:	f000 f8fc 	bl	800b864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b66c:	4b10      	ldr	r3, [pc, #64]	; (800b6b0 <xPortStartScheduler+0x140>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0f      	ldr	r2, [pc, #60]	; (800b6b0 <xPortStartScheduler+0x140>)
 800b672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b678:	f7ff ff66 	bl	800b548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b67c:	f7ff f846 	bl	800a70c <vTaskSwitchContext>
	prvTaskExitError();
 800b680:	f7ff ff1c 	bl	800b4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	e000ed00 	.word	0xe000ed00
 800b694:	410fc271 	.word	0x410fc271
 800b698:	410fc270 	.word	0x410fc270
 800b69c:	e000e400 	.word	0xe000e400
 800b6a0:	20002460 	.word	0x20002460
 800b6a4:	20002464 	.word	0x20002464
 800b6a8:	e000ed20 	.word	0xe000ed20
 800b6ac:	2000000c 	.word	0x2000000c
 800b6b0:	e000ef34 	.word	0xe000ef34

0800b6b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	607b      	str	r3, [r7, #4]
}
 800b6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <vPortEnterCritical+0x58>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <vPortEnterCritical+0x58>)
 800b6d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <vPortEnterCritical+0x58>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d10f      	bne.n	800b700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6e0:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <vPortEnterCritical+0x5c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	603b      	str	r3, [r7, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vPortEnterCritical+0x4a>
	}
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	2000000c 	.word	0x2000000c
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b71a:	4b12      	ldr	r3, [pc, #72]	; (800b764 <vPortExitCritical+0x50>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <vPortExitCritical+0x24>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	607b      	str	r3, [r7, #4]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b738:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <vPortExitCritical+0x50>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a09      	ldr	r2, [pc, #36]	; (800b764 <vPortExitCritical+0x50>)
 800b740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b742:	4b08      	ldr	r3, [pc, #32]	; (800b764 <vPortExitCritical+0x50>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <vPortExitCritical+0x42>
 800b74a:	2300      	movs	r3, #0
 800b74c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f383 8811 	msr	BASEPRI, r3
}
 800b754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	2000000c 	.word	0x2000000c
	...

0800b770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b770:	f3ef 8009 	mrs	r0, PSP
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <pxCurrentTCBConst>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f01e 0f10 	tst.w	lr, #16
 800b780:	bf08      	it	eq
 800b782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	6010      	str	r0, [r2, #0]
 800b78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b794:	f380 8811 	msr	BASEPRI, r0
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f7fe ffb4 	bl	800a70c <vTaskSwitchContext>
 800b7a4:	f04f 0000 	mov.w	r0, #0
 800b7a8:	f380 8811 	msr	BASEPRI, r0
 800b7ac:	bc09      	pop	{r0, r3}
 800b7ae:	6819      	ldr	r1, [r3, #0]
 800b7b0:	6808      	ldr	r0, [r1, #0]
 800b7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b6:	f01e 0f10 	tst.w	lr, #16
 800b7ba:	bf08      	it	eq
 800b7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7c0:	f380 8809 	msr	PSP, r0
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	f3af 8000 	nop.w

0800b7d0 <pxCurrentTCBConst>:
 800b7d0:	20001e34 	.word	0x20001e34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop

0800b7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	607b      	str	r3, [r7, #4]
}
 800b7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7f2:	f7fe fed1 	bl	800a598 <xTaskIncrementTick>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7fc:	4b06      	ldr	r3, [pc, #24]	; (800b818 <xPortSysTickHandler+0x40>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	2300      	movs	r3, #0
 800b806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	f383 8811 	msr	BASEPRI, r3
}
 800b80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <vPortSetupTimerInterrupt+0x38>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <vPortSetupTimerInterrupt+0x3c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0a      	ldr	r2, [pc, #40]	; (800b85c <vPortSetupTimerInterrupt+0x40>)
 800b832:	fba2 2303 	umull	r2, r3, r2, r3
 800b836:	099b      	lsrs	r3, r3, #6
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <vPortSetupTimerInterrupt+0x44>)
 800b83a:	3b01      	subs	r3, #1
 800b83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b840:	2207      	movs	r2, #7
 800b842:	601a      	str	r2, [r3, #0]
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	e000e010 	.word	0xe000e010
 800b854:	e000e018 	.word	0xe000e018
 800b858:	20000000 	.word	0x20000000
 800b85c:	10624dd3 	.word	0x10624dd3
 800b860:	e000e014 	.word	0xe000e014

0800b864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b874 <vPortEnableVFP+0x10>
 800b868:	6801      	ldr	r1, [r0, #0]
 800b86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b86e:	6001      	str	r1, [r0, #0]
 800b870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b872:	bf00      	nop
 800b874:	e000ed88 	.word	0xe000ed88

0800b878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b87e:	f3ef 8305 	mrs	r3, IPSR
 800b882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b0f      	cmp	r3, #15
 800b888:	d914      	bls.n	800b8b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b88a:	4a17      	ldr	r2, [pc, #92]	; (800b8e8 <vPortValidateInterruptPriority+0x70>)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b894:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <vPortValidateInterruptPriority+0x74>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	7afa      	ldrb	r2, [r7, #11]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d20a      	bcs.n	800b8b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	607b      	str	r3, [r7, #4]
}
 800b8b0:	bf00      	nop
 800b8b2:	e7fe      	b.n	800b8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <vPortValidateInterruptPriority+0x78>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <vPortValidateInterruptPriority+0x7c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d90a      	bls.n	800b8da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	603b      	str	r3, [r7, #0]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <vPortValidateInterruptPriority+0x60>
	}
 800b8da:	bf00      	nop
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	e000e3f0 	.word	0xe000e3f0
 800b8ec:	20002460 	.word	0x20002460
 800b8f0:	e000ed0c 	.word	0xe000ed0c
 800b8f4:	20002464 	.word	0x20002464

0800b8f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08a      	sub	sp, #40	; 0x28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b900:	2300      	movs	r3, #0
 800b902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b904:	f7fe fd8c 	bl	800a420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b908:	4b5b      	ldr	r3, [pc, #364]	; (800ba78 <pvPortMalloc+0x180>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b910:	f000 f920 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b914:	4b59      	ldr	r3, [pc, #356]	; (800ba7c <pvPortMalloc+0x184>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f040 8093 	bne.w	800ba48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01d      	beq.n	800b964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b928:	2208      	movs	r2, #8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f003 0307 	and.w	r3, r3, #7
 800b936:	2b00      	cmp	r3, #0
 800b938:	d014      	beq.n	800b964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f023 0307 	bic.w	r3, r3, #7
 800b940:	3308      	adds	r3, #8
 800b942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <pvPortMalloc+0x6c>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	617b      	str	r3, [r7, #20]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d06e      	beq.n	800ba48 <pvPortMalloc+0x150>
 800b96a:	4b45      	ldr	r3, [pc, #276]	; (800ba80 <pvPortMalloc+0x188>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	429a      	cmp	r2, r3
 800b972:	d869      	bhi.n	800ba48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b974:	4b43      	ldr	r3, [pc, #268]	; (800ba84 <pvPortMalloc+0x18c>)
 800b976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b978:	4b42      	ldr	r3, [pc, #264]	; (800ba84 <pvPortMalloc+0x18c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b97e:	e004      	b.n	800b98a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	429a      	cmp	r2, r3
 800b992:	d903      	bls.n	800b99c <pvPortMalloc+0xa4>
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1f1      	bne.n	800b980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b99c:	4b36      	ldr	r3, [pc, #216]	; (800ba78 <pvPortMalloc+0x180>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d050      	beq.n	800ba48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	4413      	add	r3, r2
 800b9ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d91f      	bls.n	800ba08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	613b      	str	r3, [r7, #16]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	1ad2      	subs	r2, r2, r3
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba02:	69b8      	ldr	r0, [r7, #24]
 800ba04:	f000 f908 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <pvPortMalloc+0x188>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	4a1b      	ldr	r2, [pc, #108]	; (800ba80 <pvPortMalloc+0x188>)
 800ba14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba16:	4b1a      	ldr	r3, [pc, #104]	; (800ba80 <pvPortMalloc+0x188>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	4b1b      	ldr	r3, [pc, #108]	; (800ba88 <pvPortMalloc+0x190>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d203      	bcs.n	800ba2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba22:	4b17      	ldr	r3, [pc, #92]	; (800ba80 <pvPortMalloc+0x188>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a18      	ldr	r2, [pc, #96]	; (800ba88 <pvPortMalloc+0x190>)
 800ba28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	4b13      	ldr	r3, [pc, #76]	; (800ba7c <pvPortMalloc+0x184>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	431a      	orrs	r2, r3
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <pvPortMalloc+0x194>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <pvPortMalloc+0x194>)
 800ba46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba48:	f7fe fcf8 	bl	800a43c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	f003 0307 	and.w	r3, r3, #7
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <pvPortMalloc+0x174>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60fb      	str	r3, [r7, #12]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <pvPortMalloc+0x172>
	return pvReturn;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3728      	adds	r7, #40	; 0x28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20003028 	.word	0x20003028
 800ba7c:	2000303c 	.word	0x2000303c
 800ba80:	2000302c 	.word	0x2000302c
 800ba84:	20003020 	.word	0x20003020
 800ba88:	20003030 	.word	0x20003030
 800ba8c:	20003034 	.word	0x20003034

0800ba90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d04d      	beq.n	800bb3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baa2:	2308      	movs	r3, #8
 800baa4:	425b      	negs	r3, r3
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4413      	add	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <vPortFree+0xb8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4013      	ands	r3, r2
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <vPortFree+0x44>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	60fb      	str	r3, [r7, #12]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00a      	beq.n	800baf2 <vPortFree+0x62>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60bb      	str	r3, [r7, #8]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <vPortFree+0xb8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4013      	ands	r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01e      	beq.n	800bb3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d11a      	bne.n	800bb3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <vPortFree+0xb8>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	43db      	mvns	r3, r3
 800bb12:	401a      	ands	r2, r3
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb18:	f7fe fc82 	bl	800a420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <vPortFree+0xbc>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4413      	add	r3, r2
 800bb26:	4a09      	ldr	r2, [pc, #36]	; (800bb4c <vPortFree+0xbc>)
 800bb28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb2a:	6938      	ldr	r0, [r7, #16]
 800bb2c:	f000 f874 	bl	800bc18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xc0>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xc0>)
 800bb38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb3a:	f7fe fc7f 	bl	800a43c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	2000303c 	.word	0x2000303c
 800bb4c:	2000302c 	.word	0x2000302c
 800bb50:	20003038 	.word	0x20003038

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20002468 	.word	0x20002468
 800bc04:	20003020 	.word	0x20003020
 800bc08:	20003028 	.word	0x20003028
 800bc0c:	20003030 	.word	0x20003030
 800bc10:	2000302c 	.word	0x2000302c
 800bc14:	2000303c 	.word	0x2000303c

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20003020 	.word	0x20003020
 800bcc8:	20003028 	.word	0x20003028

0800bccc <atof>:
 800bccc:	2100      	movs	r1, #0
 800bcce:	f000 be0f 	b.w	800c8f0 <strtod>

0800bcd2 <sulp>:
 800bcd2:	b570      	push	{r4, r5, r6, lr}
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	ec45 4b10 	vmov	d0, r4, r5
 800bcdc:	4616      	mov	r6, r2
 800bcde:	f003 faef 	bl	800f2c0 <__ulp>
 800bce2:	ec51 0b10 	vmov	r0, r1, d0
 800bce6:	b17e      	cbz	r6, 800bd08 <sulp+0x36>
 800bce8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bcec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dd09      	ble.n	800bd08 <sulp+0x36>
 800bcf4:	051b      	lsls	r3, r3, #20
 800bcf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd00:	4622      	mov	r2, r4
 800bd02:	462b      	mov	r3, r5
 800bd04:	f7f4 fc78 	bl	80005f8 <__aeabi_dmul>
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
 800bd0a:	0000      	movs	r0, r0
 800bd0c:	0000      	movs	r0, r0
	...

0800bd10 <_strtod_l>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	ed2d 8b02 	vpush	{d8}
 800bd18:	b09b      	sub	sp, #108	; 0x6c
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd1e:	2200      	movs	r2, #0
 800bd20:	9216      	str	r2, [sp, #88]	; 0x58
 800bd22:	460d      	mov	r5, r1
 800bd24:	f04f 0800 	mov.w	r8, #0
 800bd28:	f04f 0900 	mov.w	r9, #0
 800bd2c:	460a      	mov	r2, r1
 800bd2e:	9215      	str	r2, [sp, #84]	; 0x54
 800bd30:	7811      	ldrb	r1, [r2, #0]
 800bd32:	292b      	cmp	r1, #43	; 0x2b
 800bd34:	d04c      	beq.n	800bdd0 <_strtod_l+0xc0>
 800bd36:	d83a      	bhi.n	800bdae <_strtod_l+0x9e>
 800bd38:	290d      	cmp	r1, #13
 800bd3a:	d834      	bhi.n	800bda6 <_strtod_l+0x96>
 800bd3c:	2908      	cmp	r1, #8
 800bd3e:	d834      	bhi.n	800bdaa <_strtod_l+0x9a>
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d03d      	beq.n	800bdc0 <_strtod_l+0xb0>
 800bd44:	2200      	movs	r2, #0
 800bd46:	920a      	str	r2, [sp, #40]	; 0x28
 800bd48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bd4a:	7832      	ldrb	r2, [r6, #0]
 800bd4c:	2a30      	cmp	r2, #48	; 0x30
 800bd4e:	f040 80b4 	bne.w	800beba <_strtod_l+0x1aa>
 800bd52:	7872      	ldrb	r2, [r6, #1]
 800bd54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bd58:	2a58      	cmp	r2, #88	; 0x58
 800bd5a:	d170      	bne.n	800be3e <_strtod_l+0x12e>
 800bd5c:	9302      	str	r3, [sp, #8]
 800bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	ab16      	add	r3, sp, #88	; 0x58
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	4a8e      	ldr	r2, [pc, #568]	; (800bfa0 <_strtod_l+0x290>)
 800bd68:	ab17      	add	r3, sp, #92	; 0x5c
 800bd6a:	a915      	add	r1, sp, #84	; 0x54
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f002 fb85 	bl	800e47c <__gethex>
 800bd72:	f010 070f 	ands.w	r7, r0, #15
 800bd76:	4605      	mov	r5, r0
 800bd78:	d005      	beq.n	800bd86 <_strtod_l+0x76>
 800bd7a:	2f06      	cmp	r7, #6
 800bd7c:	d12a      	bne.n	800bdd4 <_strtod_l+0xc4>
 800bd7e:	3601      	adds	r6, #1
 800bd80:	2300      	movs	r3, #0
 800bd82:	9615      	str	r6, [sp, #84]	; 0x54
 800bd84:	930a      	str	r3, [sp, #40]	; 0x28
 800bd86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f040 857f 	bne.w	800c88c <_strtod_l+0xb7c>
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd90:	b1db      	cbz	r3, 800bdca <_strtod_l+0xba>
 800bd92:	4642      	mov	r2, r8
 800bd94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd98:	ec43 2b10 	vmov	d0, r2, r3
 800bd9c:	b01b      	add	sp, #108	; 0x6c
 800bd9e:	ecbd 8b02 	vpop	{d8}
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	2920      	cmp	r1, #32
 800bda8:	d1cc      	bne.n	800bd44 <_strtod_l+0x34>
 800bdaa:	3201      	adds	r2, #1
 800bdac:	e7bf      	b.n	800bd2e <_strtod_l+0x1e>
 800bdae:	292d      	cmp	r1, #45	; 0x2d
 800bdb0:	d1c8      	bne.n	800bd44 <_strtod_l+0x34>
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	910a      	str	r1, [sp, #40]	; 0x28
 800bdb6:	1c51      	adds	r1, r2, #1
 800bdb8:	9115      	str	r1, [sp, #84]	; 0x54
 800bdba:	7852      	ldrb	r2, [r2, #1]
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	d1c3      	bne.n	800bd48 <_strtod_l+0x38>
 800bdc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdc2:	9515      	str	r5, [sp, #84]	; 0x54
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f040 855f 	bne.w	800c888 <_strtod_l+0xb78>
 800bdca:	4642      	mov	r2, r8
 800bdcc:	464b      	mov	r3, r9
 800bdce:	e7e3      	b.n	800bd98 <_strtod_l+0x88>
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	e7ef      	b.n	800bdb4 <_strtod_l+0xa4>
 800bdd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bdd6:	b13a      	cbz	r2, 800bde8 <_strtod_l+0xd8>
 800bdd8:	2135      	movs	r1, #53	; 0x35
 800bdda:	a818      	add	r0, sp, #96	; 0x60
 800bddc:	f003 fb6d 	bl	800f4ba <__copybits>
 800bde0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bde2:	4620      	mov	r0, r4
 800bde4:	f002 ff40 	bl	800ec68 <_Bfree>
 800bde8:	3f01      	subs	r7, #1
 800bdea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bdec:	2f04      	cmp	r7, #4
 800bdee:	d806      	bhi.n	800bdfe <_strtod_l+0xee>
 800bdf0:	e8df f007 	tbb	[pc, r7]
 800bdf4:	201d0314 	.word	0x201d0314
 800bdf8:	14          	.byte	0x14
 800bdf9:	00          	.byte	0x00
 800bdfa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bdfe:	05e9      	lsls	r1, r5, #23
 800be00:	bf48      	it	mi
 800be02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800be06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be0a:	0d1b      	lsrs	r3, r3, #20
 800be0c:	051b      	lsls	r3, r3, #20
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1b9      	bne.n	800bd86 <_strtod_l+0x76>
 800be12:	f001 fbc3 	bl	800d59c <__errno>
 800be16:	2322      	movs	r3, #34	; 0x22
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	e7b4      	b.n	800bd86 <_strtod_l+0x76>
 800be1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800be20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be2c:	e7e7      	b.n	800bdfe <_strtod_l+0xee>
 800be2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bfa8 <_strtod_l+0x298>
 800be32:	e7e4      	b.n	800bdfe <_strtod_l+0xee>
 800be34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be38:	f04f 38ff 	mov.w	r8, #4294967295
 800be3c:	e7df      	b.n	800bdfe <_strtod_l+0xee>
 800be3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	9215      	str	r2, [sp, #84]	; 0x54
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2b30      	cmp	r3, #48	; 0x30
 800be48:	d0f9      	beq.n	800be3e <_strtod_l+0x12e>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d09b      	beq.n	800bd86 <_strtod_l+0x76>
 800be4e:	2301      	movs	r3, #1
 800be50:	f04f 0a00 	mov.w	sl, #0
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be58:	930b      	str	r3, [sp, #44]	; 0x2c
 800be5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800be5e:	46d3      	mov	fp, sl
 800be60:	220a      	movs	r2, #10
 800be62:	9815      	ldr	r0, [sp, #84]	; 0x54
 800be64:	7806      	ldrb	r6, [r0, #0]
 800be66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be6a:	b2d9      	uxtb	r1, r3
 800be6c:	2909      	cmp	r1, #9
 800be6e:	d926      	bls.n	800bebe <_strtod_l+0x1ae>
 800be70:	494c      	ldr	r1, [pc, #304]	; (800bfa4 <_strtod_l+0x294>)
 800be72:	2201      	movs	r2, #1
 800be74:	f001 fac9 	bl	800d40a <strncmp>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d030      	beq.n	800bede <_strtod_l+0x1ce>
 800be7c:	2000      	movs	r0, #0
 800be7e:	4632      	mov	r2, r6
 800be80:	9005      	str	r0, [sp, #20]
 800be82:	465e      	mov	r6, fp
 800be84:	4603      	mov	r3, r0
 800be86:	2a65      	cmp	r2, #101	; 0x65
 800be88:	d001      	beq.n	800be8e <_strtod_l+0x17e>
 800be8a:	2a45      	cmp	r2, #69	; 0x45
 800be8c:	d113      	bne.n	800beb6 <_strtod_l+0x1a6>
 800be8e:	b91e      	cbnz	r6, 800be98 <_strtod_l+0x188>
 800be90:	9a04      	ldr	r2, [sp, #16]
 800be92:	4302      	orrs	r2, r0
 800be94:	d094      	beq.n	800bdc0 <_strtod_l+0xb0>
 800be96:	2600      	movs	r6, #0
 800be98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800be9a:	1c6a      	adds	r2, r5, #1
 800be9c:	9215      	str	r2, [sp, #84]	; 0x54
 800be9e:	786a      	ldrb	r2, [r5, #1]
 800bea0:	2a2b      	cmp	r2, #43	; 0x2b
 800bea2:	d074      	beq.n	800bf8e <_strtod_l+0x27e>
 800bea4:	2a2d      	cmp	r2, #45	; 0x2d
 800bea6:	d078      	beq.n	800bf9a <_strtod_l+0x28a>
 800bea8:	f04f 0c00 	mov.w	ip, #0
 800beac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800beb0:	2909      	cmp	r1, #9
 800beb2:	d97f      	bls.n	800bfb4 <_strtod_l+0x2a4>
 800beb4:	9515      	str	r5, [sp, #84]	; 0x54
 800beb6:	2700      	movs	r7, #0
 800beb8:	e09e      	b.n	800bff8 <_strtod_l+0x2e8>
 800beba:	2300      	movs	r3, #0
 800bebc:	e7c8      	b.n	800be50 <_strtod_l+0x140>
 800bebe:	f1bb 0f08 	cmp.w	fp, #8
 800bec2:	bfd8      	it	le
 800bec4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bec6:	f100 0001 	add.w	r0, r0, #1
 800beca:	bfda      	itte	le
 800becc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bed0:	9309      	strle	r3, [sp, #36]	; 0x24
 800bed2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bed6:	f10b 0b01 	add.w	fp, fp, #1
 800beda:	9015      	str	r0, [sp, #84]	; 0x54
 800bedc:	e7c1      	b.n	800be62 <_strtod_l+0x152>
 800bede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	9215      	str	r2, [sp, #84]	; 0x54
 800bee4:	785a      	ldrb	r2, [r3, #1]
 800bee6:	f1bb 0f00 	cmp.w	fp, #0
 800beea:	d037      	beq.n	800bf5c <_strtod_l+0x24c>
 800beec:	9005      	str	r0, [sp, #20]
 800beee:	465e      	mov	r6, fp
 800bef0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d912      	bls.n	800bf1e <_strtod_l+0x20e>
 800bef8:	2301      	movs	r3, #1
 800befa:	e7c4      	b.n	800be86 <_strtod_l+0x176>
 800befc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	9215      	str	r2, [sp, #84]	; 0x54
 800bf02:	785a      	ldrb	r2, [r3, #1]
 800bf04:	3001      	adds	r0, #1
 800bf06:	2a30      	cmp	r2, #48	; 0x30
 800bf08:	d0f8      	beq.n	800befc <_strtod_l+0x1ec>
 800bf0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf0e:	2b08      	cmp	r3, #8
 800bf10:	f200 84c1 	bhi.w	800c896 <_strtod_l+0xb86>
 800bf14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf16:	9005      	str	r0, [sp, #20]
 800bf18:	2000      	movs	r0, #0
 800bf1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	3a30      	subs	r2, #48	; 0x30
 800bf20:	f100 0301 	add.w	r3, r0, #1
 800bf24:	d014      	beq.n	800bf50 <_strtod_l+0x240>
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	4419      	add	r1, r3
 800bf2a:	9105      	str	r1, [sp, #20]
 800bf2c:	4633      	mov	r3, r6
 800bf2e:	eb00 0c06 	add.w	ip, r0, r6
 800bf32:	210a      	movs	r1, #10
 800bf34:	4563      	cmp	r3, ip
 800bf36:	d113      	bne.n	800bf60 <_strtod_l+0x250>
 800bf38:	1833      	adds	r3, r6, r0
 800bf3a:	2b08      	cmp	r3, #8
 800bf3c:	f106 0601 	add.w	r6, r6, #1
 800bf40:	4406      	add	r6, r0
 800bf42:	dc1a      	bgt.n	800bf7a <_strtod_l+0x26a>
 800bf44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf46:	230a      	movs	r3, #10
 800bf48:	fb03 2301 	mla	r3, r3, r1, r2
 800bf4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf52:	1c51      	adds	r1, r2, #1
 800bf54:	9115      	str	r1, [sp, #84]	; 0x54
 800bf56:	7852      	ldrb	r2, [r2, #1]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	e7c9      	b.n	800bef0 <_strtod_l+0x1e0>
 800bf5c:	4658      	mov	r0, fp
 800bf5e:	e7d2      	b.n	800bf06 <_strtod_l+0x1f6>
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	f103 0301 	add.w	r3, r3, #1
 800bf66:	dc03      	bgt.n	800bf70 <_strtod_l+0x260>
 800bf68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf6a:	434f      	muls	r7, r1
 800bf6c:	9709      	str	r7, [sp, #36]	; 0x24
 800bf6e:	e7e1      	b.n	800bf34 <_strtod_l+0x224>
 800bf70:	2b10      	cmp	r3, #16
 800bf72:	bfd8      	it	le
 800bf74:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bf78:	e7dc      	b.n	800bf34 <_strtod_l+0x224>
 800bf7a:	2e10      	cmp	r6, #16
 800bf7c:	bfdc      	itt	le
 800bf7e:	230a      	movle	r3, #10
 800bf80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bf84:	e7e3      	b.n	800bf4e <_strtod_l+0x23e>
 800bf86:	2300      	movs	r3, #0
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e780      	b.n	800be90 <_strtod_l+0x180>
 800bf8e:	f04f 0c00 	mov.w	ip, #0
 800bf92:	1caa      	adds	r2, r5, #2
 800bf94:	9215      	str	r2, [sp, #84]	; 0x54
 800bf96:	78aa      	ldrb	r2, [r5, #2]
 800bf98:	e788      	b.n	800beac <_strtod_l+0x19c>
 800bf9a:	f04f 0c01 	mov.w	ip, #1
 800bf9e:	e7f8      	b.n	800bf92 <_strtod_l+0x282>
 800bfa0:	08010200 	.word	0x08010200
 800bfa4:	080101fc 	.word	0x080101fc
 800bfa8:	7ff00000 	.word	0x7ff00000
 800bfac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfae:	1c51      	adds	r1, r2, #1
 800bfb0:	9115      	str	r1, [sp, #84]	; 0x54
 800bfb2:	7852      	ldrb	r2, [r2, #1]
 800bfb4:	2a30      	cmp	r2, #48	; 0x30
 800bfb6:	d0f9      	beq.n	800bfac <_strtod_l+0x29c>
 800bfb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bfbc:	2908      	cmp	r1, #8
 800bfbe:	f63f af7a 	bhi.w	800beb6 <_strtod_l+0x1a6>
 800bfc2:	3a30      	subs	r2, #48	; 0x30
 800bfc4:	9208      	str	r2, [sp, #32]
 800bfc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfc8:	920c      	str	r2, [sp, #48]	; 0x30
 800bfca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfcc:	1c57      	adds	r7, r2, #1
 800bfce:	9715      	str	r7, [sp, #84]	; 0x54
 800bfd0:	7852      	ldrb	r2, [r2, #1]
 800bfd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bfd6:	f1be 0f09 	cmp.w	lr, #9
 800bfda:	d938      	bls.n	800c04e <_strtod_l+0x33e>
 800bfdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfde:	1a7f      	subs	r7, r7, r1
 800bfe0:	2f08      	cmp	r7, #8
 800bfe2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bfe6:	dc03      	bgt.n	800bff0 <_strtod_l+0x2e0>
 800bfe8:	9908      	ldr	r1, [sp, #32]
 800bfea:	428f      	cmp	r7, r1
 800bfec:	bfa8      	it	ge
 800bfee:	460f      	movge	r7, r1
 800bff0:	f1bc 0f00 	cmp.w	ip, #0
 800bff4:	d000      	beq.n	800bff8 <_strtod_l+0x2e8>
 800bff6:	427f      	negs	r7, r7
 800bff8:	2e00      	cmp	r6, #0
 800bffa:	d14f      	bne.n	800c09c <_strtod_l+0x38c>
 800bffc:	9904      	ldr	r1, [sp, #16]
 800bffe:	4301      	orrs	r1, r0
 800c000:	f47f aec1 	bne.w	800bd86 <_strtod_l+0x76>
 800c004:	2b00      	cmp	r3, #0
 800c006:	f47f aedb 	bne.w	800bdc0 <_strtod_l+0xb0>
 800c00a:	2a69      	cmp	r2, #105	; 0x69
 800c00c:	d029      	beq.n	800c062 <_strtod_l+0x352>
 800c00e:	dc26      	bgt.n	800c05e <_strtod_l+0x34e>
 800c010:	2a49      	cmp	r2, #73	; 0x49
 800c012:	d026      	beq.n	800c062 <_strtod_l+0x352>
 800c014:	2a4e      	cmp	r2, #78	; 0x4e
 800c016:	f47f aed3 	bne.w	800bdc0 <_strtod_l+0xb0>
 800c01a:	499b      	ldr	r1, [pc, #620]	; (800c288 <_strtod_l+0x578>)
 800c01c:	a815      	add	r0, sp, #84	; 0x54
 800c01e:	f002 fc6d 	bl	800e8fc <__match>
 800c022:	2800      	cmp	r0, #0
 800c024:	f43f aecc 	beq.w	800bdc0 <_strtod_l+0xb0>
 800c028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2b28      	cmp	r3, #40	; 0x28
 800c02e:	d12f      	bne.n	800c090 <_strtod_l+0x380>
 800c030:	4996      	ldr	r1, [pc, #600]	; (800c28c <_strtod_l+0x57c>)
 800c032:	aa18      	add	r2, sp, #96	; 0x60
 800c034:	a815      	add	r0, sp, #84	; 0x54
 800c036:	f002 fc75 	bl	800e924 <__hexnan>
 800c03a:	2805      	cmp	r0, #5
 800c03c:	d128      	bne.n	800c090 <_strtod_l+0x380>
 800c03e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c044:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c048:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c04c:	e69b      	b.n	800bd86 <_strtod_l+0x76>
 800c04e:	9f08      	ldr	r7, [sp, #32]
 800c050:	210a      	movs	r1, #10
 800c052:	fb01 2107 	mla	r1, r1, r7, r2
 800c056:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c05a:	9208      	str	r2, [sp, #32]
 800c05c:	e7b5      	b.n	800bfca <_strtod_l+0x2ba>
 800c05e:	2a6e      	cmp	r2, #110	; 0x6e
 800c060:	e7d9      	b.n	800c016 <_strtod_l+0x306>
 800c062:	498b      	ldr	r1, [pc, #556]	; (800c290 <_strtod_l+0x580>)
 800c064:	a815      	add	r0, sp, #84	; 0x54
 800c066:	f002 fc49 	bl	800e8fc <__match>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	f43f aea8 	beq.w	800bdc0 <_strtod_l+0xb0>
 800c070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c072:	4988      	ldr	r1, [pc, #544]	; (800c294 <_strtod_l+0x584>)
 800c074:	3b01      	subs	r3, #1
 800c076:	a815      	add	r0, sp, #84	; 0x54
 800c078:	9315      	str	r3, [sp, #84]	; 0x54
 800c07a:	f002 fc3f 	bl	800e8fc <__match>
 800c07e:	b910      	cbnz	r0, 800c086 <_strtod_l+0x376>
 800c080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c082:	3301      	adds	r3, #1
 800c084:	9315      	str	r3, [sp, #84]	; 0x54
 800c086:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c2a4 <_strtod_l+0x594>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	e67a      	b.n	800bd86 <_strtod_l+0x76>
 800c090:	4881      	ldr	r0, [pc, #516]	; (800c298 <_strtod_l+0x588>)
 800c092:	f001 fabd 	bl	800d610 <nan>
 800c096:	ec59 8b10 	vmov	r8, r9, d0
 800c09a:	e674      	b.n	800bd86 <_strtod_l+0x76>
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a0:	1afb      	subs	r3, r7, r3
 800c0a2:	f1bb 0f00 	cmp.w	fp, #0
 800c0a6:	bf08      	it	eq
 800c0a8:	46b3      	moveq	fp, r6
 800c0aa:	2e10      	cmp	r6, #16
 800c0ac:	9308      	str	r3, [sp, #32]
 800c0ae:	4635      	mov	r5, r6
 800c0b0:	bfa8      	it	ge
 800c0b2:	2510      	movge	r5, #16
 800c0b4:	f7f4 fa26 	bl	8000504 <__aeabi_ui2d>
 800c0b8:	2e09      	cmp	r6, #9
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	4689      	mov	r9, r1
 800c0be:	dd13      	ble.n	800c0e8 <_strtod_l+0x3d8>
 800c0c0:	4b76      	ldr	r3, [pc, #472]	; (800c29c <_strtod_l+0x58c>)
 800c0c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0ca:	f7f4 fa95 	bl	80005f8 <__aeabi_dmul>
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4689      	mov	r9, r1
 800c0d4:	f7f4 fa16 	bl	8000504 <__aeabi_ui2d>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4640      	mov	r0, r8
 800c0de:	4649      	mov	r1, r9
 800c0e0:	f7f4 f8d4 	bl	800028c <__adddf3>
 800c0e4:	4680      	mov	r8, r0
 800c0e6:	4689      	mov	r9, r1
 800c0e8:	2e0f      	cmp	r6, #15
 800c0ea:	dc38      	bgt.n	800c15e <_strtod_l+0x44e>
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f43f ae49 	beq.w	800bd86 <_strtod_l+0x76>
 800c0f4:	dd24      	ble.n	800c140 <_strtod_l+0x430>
 800c0f6:	2b16      	cmp	r3, #22
 800c0f8:	dc0b      	bgt.n	800c112 <_strtod_l+0x402>
 800c0fa:	4968      	ldr	r1, [pc, #416]	; (800c29c <_strtod_l+0x58c>)
 800c0fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c104:	4642      	mov	r2, r8
 800c106:	464b      	mov	r3, r9
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	e639      	b.n	800bd86 <_strtod_l+0x76>
 800c112:	9a08      	ldr	r2, [sp, #32]
 800c114:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c118:	4293      	cmp	r3, r2
 800c11a:	db20      	blt.n	800c15e <_strtod_l+0x44e>
 800c11c:	4c5f      	ldr	r4, [pc, #380]	; (800c29c <_strtod_l+0x58c>)
 800c11e:	f1c6 060f 	rsb	r6, r6, #15
 800c122:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c126:	4642      	mov	r2, r8
 800c128:	464b      	mov	r3, r9
 800c12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c12e:	f7f4 fa63 	bl	80005f8 <__aeabi_dmul>
 800c132:	9b08      	ldr	r3, [sp, #32]
 800c134:	1b9e      	subs	r6, r3, r6
 800c136:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c13a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c13e:	e7e3      	b.n	800c108 <_strtod_l+0x3f8>
 800c140:	9b08      	ldr	r3, [sp, #32]
 800c142:	3316      	adds	r3, #22
 800c144:	db0b      	blt.n	800c15e <_strtod_l+0x44e>
 800c146:	9b05      	ldr	r3, [sp, #20]
 800c148:	1bdf      	subs	r7, r3, r7
 800c14a:	4b54      	ldr	r3, [pc, #336]	; (800c29c <_strtod_l+0x58c>)
 800c14c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c154:	4640      	mov	r0, r8
 800c156:	4649      	mov	r1, r9
 800c158:	f7f4 fb78 	bl	800084c <__aeabi_ddiv>
 800c15c:	e7d6      	b.n	800c10c <_strtod_l+0x3fc>
 800c15e:	9b08      	ldr	r3, [sp, #32]
 800c160:	1b75      	subs	r5, r6, r5
 800c162:	441d      	add	r5, r3
 800c164:	2d00      	cmp	r5, #0
 800c166:	dd70      	ble.n	800c24a <_strtod_l+0x53a>
 800c168:	f015 030f 	ands.w	r3, r5, #15
 800c16c:	d00a      	beq.n	800c184 <_strtod_l+0x474>
 800c16e:	494b      	ldr	r1, [pc, #300]	; (800c29c <_strtod_l+0x58c>)
 800c170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c17c:	f7f4 fa3c 	bl	80005f8 <__aeabi_dmul>
 800c180:	4680      	mov	r8, r0
 800c182:	4689      	mov	r9, r1
 800c184:	f035 050f 	bics.w	r5, r5, #15
 800c188:	d04d      	beq.n	800c226 <_strtod_l+0x516>
 800c18a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c18e:	dd22      	ble.n	800c1d6 <_strtod_l+0x4c6>
 800c190:	2500      	movs	r5, #0
 800c192:	46ab      	mov	fp, r5
 800c194:	9509      	str	r5, [sp, #36]	; 0x24
 800c196:	9505      	str	r5, [sp, #20]
 800c198:	2322      	movs	r3, #34	; 0x22
 800c19a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c2a4 <_strtod_l+0x594>
 800c19e:	6023      	str	r3, [r4, #0]
 800c1a0:	f04f 0800 	mov.w	r8, #0
 800c1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f43f aded 	beq.w	800bd86 <_strtod_l+0x76>
 800c1ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f002 fd5a 	bl	800ec68 <_Bfree>
 800c1b4:	9905      	ldr	r1, [sp, #20]
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f002 fd56 	bl	800ec68 <_Bfree>
 800c1bc:	4659      	mov	r1, fp
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f002 fd52 	bl	800ec68 <_Bfree>
 800c1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f002 fd4e 	bl	800ec68 <_Bfree>
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f002 fd4a 	bl	800ec68 <_Bfree>
 800c1d4:	e5d7      	b.n	800bd86 <_strtod_l+0x76>
 800c1d6:	4b32      	ldr	r3, [pc, #200]	; (800c2a0 <_strtod_l+0x590>)
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	112d      	asrs	r5, r5, #4
 800c1de:	4640      	mov	r0, r8
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	469a      	mov	sl, r3
 800c1e4:	2d01      	cmp	r5, #1
 800c1e6:	dc21      	bgt.n	800c22c <_strtod_l+0x51c>
 800c1e8:	b10b      	cbz	r3, 800c1ee <_strtod_l+0x4de>
 800c1ea:	4680      	mov	r8, r0
 800c1ec:	4689      	mov	r9, r1
 800c1ee:	492c      	ldr	r1, [pc, #176]	; (800c2a0 <_strtod_l+0x590>)
 800c1f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c1f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	4b27      	ldr	r3, [pc, #156]	; (800c2a4 <_strtod_l+0x594>)
 800c206:	460a      	mov	r2, r1
 800c208:	400b      	ands	r3, r1
 800c20a:	4927      	ldr	r1, [pc, #156]	; (800c2a8 <_strtod_l+0x598>)
 800c20c:	428b      	cmp	r3, r1
 800c20e:	4680      	mov	r8, r0
 800c210:	d8be      	bhi.n	800c190 <_strtod_l+0x480>
 800c212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c216:	428b      	cmp	r3, r1
 800c218:	bf86      	itte	hi
 800c21a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c2ac <_strtod_l+0x59c>
 800c21e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c222:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c226:	2300      	movs	r3, #0
 800c228:	9304      	str	r3, [sp, #16]
 800c22a:	e07b      	b.n	800c324 <_strtod_l+0x614>
 800c22c:	07ea      	lsls	r2, r5, #31
 800c22e:	d505      	bpl.n	800c23c <_strtod_l+0x52c>
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 f9df 	bl	80005f8 <__aeabi_dmul>
 800c23a:	2301      	movs	r3, #1
 800c23c:	9a04      	ldr	r2, [sp, #16]
 800c23e:	3208      	adds	r2, #8
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	106d      	asrs	r5, r5, #1
 800c246:	9204      	str	r2, [sp, #16]
 800c248:	e7cc      	b.n	800c1e4 <_strtod_l+0x4d4>
 800c24a:	d0ec      	beq.n	800c226 <_strtod_l+0x516>
 800c24c:	426d      	negs	r5, r5
 800c24e:	f015 020f 	ands.w	r2, r5, #15
 800c252:	d00a      	beq.n	800c26a <_strtod_l+0x55a>
 800c254:	4b11      	ldr	r3, [pc, #68]	; (800c29c <_strtod_l+0x58c>)
 800c256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25a:	4640      	mov	r0, r8
 800c25c:	4649      	mov	r1, r9
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 faf3 	bl	800084c <__aeabi_ddiv>
 800c266:	4680      	mov	r8, r0
 800c268:	4689      	mov	r9, r1
 800c26a:	112d      	asrs	r5, r5, #4
 800c26c:	d0db      	beq.n	800c226 <_strtod_l+0x516>
 800c26e:	2d1f      	cmp	r5, #31
 800c270:	dd1e      	ble.n	800c2b0 <_strtod_l+0x5a0>
 800c272:	2500      	movs	r5, #0
 800c274:	46ab      	mov	fp, r5
 800c276:	9509      	str	r5, [sp, #36]	; 0x24
 800c278:	9505      	str	r5, [sp, #20]
 800c27a:	2322      	movs	r3, #34	; 0x22
 800c27c:	f04f 0800 	mov.w	r8, #0
 800c280:	f04f 0900 	mov.w	r9, #0
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	e78d      	b.n	800c1a4 <_strtod_l+0x494>
 800c288:	0801025d 	.word	0x0801025d
 800c28c:	08010214 	.word	0x08010214
 800c290:	08010255 	.word	0x08010255
 800c294:	0801028f 	.word	0x0801028f
 800c298:	08010621 	.word	0x08010621
 800c29c:	08010400 	.word	0x08010400
 800c2a0:	080103d8 	.word	0x080103d8
 800c2a4:	7ff00000 	.word	0x7ff00000
 800c2a8:	7ca00000 	.word	0x7ca00000
 800c2ac:	7fefffff 	.word	0x7fefffff
 800c2b0:	f015 0310 	ands.w	r3, r5, #16
 800c2b4:	bf18      	it	ne
 800c2b6:	236a      	movne	r3, #106	; 0x6a
 800c2b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c65c <_strtod_l+0x94c>
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	07ea      	lsls	r2, r5, #31
 800c2c6:	d504      	bpl.n	800c2d2 <_strtod_l+0x5c2>
 800c2c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800c2cc:	f7f4 f994 	bl	80005f8 <__aeabi_dmul>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	106d      	asrs	r5, r5, #1
 800c2d4:	f10a 0a08 	add.w	sl, sl, #8
 800c2d8:	d1f4      	bne.n	800c2c4 <_strtod_l+0x5b4>
 800c2da:	b10b      	cbz	r3, 800c2e0 <_strtod_l+0x5d0>
 800c2dc:	4680      	mov	r8, r0
 800c2de:	4689      	mov	r9, r1
 800c2e0:	9b04      	ldr	r3, [sp, #16]
 800c2e2:	b1bb      	cbz	r3, 800c314 <_strtod_l+0x604>
 800c2e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c2e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	dd10      	ble.n	800c314 <_strtod_l+0x604>
 800c2f2:	2b1f      	cmp	r3, #31
 800c2f4:	f340 811e 	ble.w	800c534 <_strtod_l+0x824>
 800c2f8:	2b34      	cmp	r3, #52	; 0x34
 800c2fa:	bfde      	ittt	le
 800c2fc:	f04f 33ff 	movle.w	r3, #4294967295
 800c300:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c304:	4093      	lslle	r3, r2
 800c306:	f04f 0800 	mov.w	r8, #0
 800c30a:	bfcc      	ite	gt
 800c30c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c310:	ea03 0901 	andle.w	r9, r3, r1
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f4 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c320:	2800      	cmp	r0, #0
 800c322:	d1a6      	bne.n	800c272 <_strtod_l+0x562>
 800c324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c32a:	4633      	mov	r3, r6
 800c32c:	465a      	mov	r2, fp
 800c32e:	4620      	mov	r0, r4
 800c330:	f002 fd02 	bl	800ed38 <__s2b>
 800c334:	9009      	str	r0, [sp, #36]	; 0x24
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f af2a 	beq.w	800c190 <_strtod_l+0x480>
 800c33c:	9a08      	ldr	r2, [sp, #32]
 800c33e:	9b05      	ldr	r3, [sp, #20]
 800c340:	2a00      	cmp	r2, #0
 800c342:	eba3 0307 	sub.w	r3, r3, r7
 800c346:	bfa8      	it	ge
 800c348:	2300      	movge	r3, #0
 800c34a:	930c      	str	r3, [sp, #48]	; 0x30
 800c34c:	2500      	movs	r5, #0
 800c34e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c352:	9312      	str	r3, [sp, #72]	; 0x48
 800c354:	46ab      	mov	fp, r5
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	4620      	mov	r0, r4
 800c35a:	6859      	ldr	r1, [r3, #4]
 800c35c:	f002 fc44 	bl	800ebe8 <_Balloc>
 800c360:	9005      	str	r0, [sp, #20]
 800c362:	2800      	cmp	r0, #0
 800c364:	f43f af18 	beq.w	800c198 <_strtod_l+0x488>
 800c368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36a:	691a      	ldr	r2, [r3, #16]
 800c36c:	3202      	adds	r2, #2
 800c36e:	f103 010c 	add.w	r1, r3, #12
 800c372:	0092      	lsls	r2, r2, #2
 800c374:	300c      	adds	r0, #12
 800c376:	f001 f93d 	bl	800d5f4 <memcpy>
 800c37a:	ec49 8b10 	vmov	d0, r8, r9
 800c37e:	aa18      	add	r2, sp, #96	; 0x60
 800c380:	a917      	add	r1, sp, #92	; 0x5c
 800c382:	4620      	mov	r0, r4
 800c384:	f003 f80c 	bl	800f3a0 <__d2b>
 800c388:	ec49 8b18 	vmov	d8, r8, r9
 800c38c:	9016      	str	r0, [sp, #88]	; 0x58
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f af02 	beq.w	800c198 <_strtod_l+0x488>
 800c394:	2101      	movs	r1, #1
 800c396:	4620      	mov	r0, r4
 800c398:	f002 fd66 	bl	800ee68 <__i2b>
 800c39c:	4683      	mov	fp, r0
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	f43f aefa 	beq.w	800c198 <_strtod_l+0x488>
 800c3a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c3a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3a8:	2e00      	cmp	r6, #0
 800c3aa:	bfab      	itete	ge
 800c3ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c3ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c3b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c3b6:	bfac      	ite	ge
 800c3b8:	eb06 0a03 	addge.w	sl, r6, r3
 800c3bc:	1b9f      	sublt	r7, r3, r6
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	1af6      	subs	r6, r6, r3
 800c3c2:	4416      	add	r6, r2
 800c3c4:	4ba0      	ldr	r3, [pc, #640]	; (800c648 <_strtod_l+0x938>)
 800c3c6:	3e01      	subs	r6, #1
 800c3c8:	429e      	cmp	r6, r3
 800c3ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3ce:	f280 80c4 	bge.w	800c55a <_strtod_l+0x84a>
 800c3d2:	1b9b      	subs	r3, r3, r6
 800c3d4:	2b1f      	cmp	r3, #31
 800c3d6:	eba2 0203 	sub.w	r2, r2, r3
 800c3da:	f04f 0101 	mov.w	r1, #1
 800c3de:	f300 80b0 	bgt.w	800c542 <_strtod_l+0x832>
 800c3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3e6:	930e      	str	r3, [sp, #56]	; 0x38
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c3ec:	eb0a 0602 	add.w	r6, sl, r2
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	45b2      	cmp	sl, r6
 800c3f4:	4417      	add	r7, r2
 800c3f6:	441f      	add	r7, r3
 800c3f8:	4653      	mov	r3, sl
 800c3fa:	bfa8      	it	ge
 800c3fc:	4633      	movge	r3, r6
 800c3fe:	42bb      	cmp	r3, r7
 800c400:	bfa8      	it	ge
 800c402:	463b      	movge	r3, r7
 800c404:	2b00      	cmp	r3, #0
 800c406:	bfc2      	ittt	gt
 800c408:	1af6      	subgt	r6, r6, r3
 800c40a:	1aff      	subgt	r7, r7, r3
 800c40c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c412:	2b00      	cmp	r3, #0
 800c414:	dd17      	ble.n	800c446 <_strtod_l+0x736>
 800c416:	4659      	mov	r1, fp
 800c418:	461a      	mov	r2, r3
 800c41a:	4620      	mov	r0, r4
 800c41c:	f002 fde4 	bl	800efe8 <__pow5mult>
 800c420:	4683      	mov	fp, r0
 800c422:	2800      	cmp	r0, #0
 800c424:	f43f aeb8 	beq.w	800c198 <_strtod_l+0x488>
 800c428:	4601      	mov	r1, r0
 800c42a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c42c:	4620      	mov	r0, r4
 800c42e:	f002 fd31 	bl	800ee94 <__multiply>
 800c432:	900b      	str	r0, [sp, #44]	; 0x2c
 800c434:	2800      	cmp	r0, #0
 800c436:	f43f aeaf 	beq.w	800c198 <_strtod_l+0x488>
 800c43a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c43c:	4620      	mov	r0, r4
 800c43e:	f002 fc13 	bl	800ec68 <_Bfree>
 800c442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c444:	9316      	str	r3, [sp, #88]	; 0x58
 800c446:	2e00      	cmp	r6, #0
 800c448:	f300 808c 	bgt.w	800c564 <_strtod_l+0x854>
 800c44c:	9b08      	ldr	r3, [sp, #32]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dd08      	ble.n	800c464 <_strtod_l+0x754>
 800c452:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c454:	9905      	ldr	r1, [sp, #20]
 800c456:	4620      	mov	r0, r4
 800c458:	f002 fdc6 	bl	800efe8 <__pow5mult>
 800c45c:	9005      	str	r0, [sp, #20]
 800c45e:	2800      	cmp	r0, #0
 800c460:	f43f ae9a 	beq.w	800c198 <_strtod_l+0x488>
 800c464:	2f00      	cmp	r7, #0
 800c466:	dd08      	ble.n	800c47a <_strtod_l+0x76a>
 800c468:	9905      	ldr	r1, [sp, #20]
 800c46a:	463a      	mov	r2, r7
 800c46c:	4620      	mov	r0, r4
 800c46e:	f002 fe15 	bl	800f09c <__lshift>
 800c472:	9005      	str	r0, [sp, #20]
 800c474:	2800      	cmp	r0, #0
 800c476:	f43f ae8f 	beq.w	800c198 <_strtod_l+0x488>
 800c47a:	f1ba 0f00 	cmp.w	sl, #0
 800c47e:	dd08      	ble.n	800c492 <_strtod_l+0x782>
 800c480:	4659      	mov	r1, fp
 800c482:	4652      	mov	r2, sl
 800c484:	4620      	mov	r0, r4
 800c486:	f002 fe09 	bl	800f09c <__lshift>
 800c48a:	4683      	mov	fp, r0
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f43f ae83 	beq.w	800c198 <_strtod_l+0x488>
 800c492:	9a05      	ldr	r2, [sp, #20]
 800c494:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c496:	4620      	mov	r0, r4
 800c498:	f002 fe88 	bl	800f1ac <__mdiff>
 800c49c:	4605      	mov	r5, r0
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f43f ae7a 	beq.w	800c198 <_strtod_l+0x488>
 800c4a4:	68c3      	ldr	r3, [r0, #12]
 800c4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60c3      	str	r3, [r0, #12]
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	f002 fe61 	bl	800f174 <__mcmp>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	da60      	bge.n	800c578 <_strtod_l+0x868>
 800c4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b8:	ea53 0308 	orrs.w	r3, r3, r8
 800c4bc:	f040 8084 	bne.w	800c5c8 <_strtod_l+0x8b8>
 800c4c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d17f      	bne.n	800c5c8 <_strtod_l+0x8b8>
 800c4c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4cc:	0d1b      	lsrs	r3, r3, #20
 800c4ce:	051b      	lsls	r3, r3, #20
 800c4d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4d4:	d978      	bls.n	800c5c8 <_strtod_l+0x8b8>
 800c4d6:	696b      	ldr	r3, [r5, #20]
 800c4d8:	b913      	cbnz	r3, 800c4e0 <_strtod_l+0x7d0>
 800c4da:	692b      	ldr	r3, [r5, #16]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	dd73      	ble.n	800c5c8 <_strtod_l+0x8b8>
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f002 fdd9 	bl	800f09c <__lshift>
 800c4ea:	4659      	mov	r1, fp
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	f002 fe41 	bl	800f174 <__mcmp>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	dd68      	ble.n	800c5c8 <_strtod_l+0x8b8>
 800c4f6:	9904      	ldr	r1, [sp, #16]
 800c4f8:	4a54      	ldr	r2, [pc, #336]	; (800c64c <_strtod_l+0x93c>)
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	f000 8084 	beq.w	800c60a <_strtod_l+0x8fa>
 800c502:	ea02 0109 	and.w	r1, r2, r9
 800c506:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c50a:	dc7e      	bgt.n	800c60a <_strtod_l+0x8fa>
 800c50c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c510:	f77f aeb3 	ble.w	800c27a <_strtod_l+0x56a>
 800c514:	4b4e      	ldr	r3, [pc, #312]	; (800c650 <_strtod_l+0x940>)
 800c516:	4640      	mov	r0, r8
 800c518:	4649      	mov	r1, r9
 800c51a:	2200      	movs	r2, #0
 800c51c:	f7f4 f86c 	bl	80005f8 <__aeabi_dmul>
 800c520:	4b4a      	ldr	r3, [pc, #296]	; (800c64c <_strtod_l+0x93c>)
 800c522:	400b      	ands	r3, r1
 800c524:	4680      	mov	r8, r0
 800c526:	4689      	mov	r9, r1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f47f ae3f 	bne.w	800c1ac <_strtod_l+0x49c>
 800c52e:	2322      	movs	r3, #34	; 0x22
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	e63b      	b.n	800c1ac <_strtod_l+0x49c>
 800c534:	f04f 32ff 	mov.w	r2, #4294967295
 800c538:	fa02 f303 	lsl.w	r3, r2, r3
 800c53c:	ea03 0808 	and.w	r8, r3, r8
 800c540:	e6e8      	b.n	800c314 <_strtod_l+0x604>
 800c542:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c546:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c54a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c54e:	36e2      	adds	r6, #226	; 0xe2
 800c550:	fa01 f306 	lsl.w	r3, r1, r6
 800c554:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c558:	e748      	b.n	800c3ec <_strtod_l+0x6dc>
 800c55a:	2100      	movs	r1, #0
 800c55c:	2301      	movs	r3, #1
 800c55e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c562:	e743      	b.n	800c3ec <_strtod_l+0x6dc>
 800c564:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c566:	4632      	mov	r2, r6
 800c568:	4620      	mov	r0, r4
 800c56a:	f002 fd97 	bl	800f09c <__lshift>
 800c56e:	9016      	str	r0, [sp, #88]	; 0x58
 800c570:	2800      	cmp	r0, #0
 800c572:	f47f af6b 	bne.w	800c44c <_strtod_l+0x73c>
 800c576:	e60f      	b.n	800c198 <_strtod_l+0x488>
 800c578:	46ca      	mov	sl, r9
 800c57a:	d171      	bne.n	800c660 <_strtod_l+0x950>
 800c57c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c57e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c582:	b352      	cbz	r2, 800c5da <_strtod_l+0x8ca>
 800c584:	4a33      	ldr	r2, [pc, #204]	; (800c654 <_strtod_l+0x944>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d12a      	bne.n	800c5e0 <_strtod_l+0x8d0>
 800c58a:	9b04      	ldr	r3, [sp, #16]
 800c58c:	4641      	mov	r1, r8
 800c58e:	b1fb      	cbz	r3, 800c5d0 <_strtod_l+0x8c0>
 800c590:	4b2e      	ldr	r3, [pc, #184]	; (800c64c <_strtod_l+0x93c>)
 800c592:	ea09 0303 	and.w	r3, r9, r3
 800c596:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c59a:	f04f 32ff 	mov.w	r2, #4294967295
 800c59e:	d81a      	bhi.n	800c5d6 <_strtod_l+0x8c6>
 800c5a0:	0d1b      	lsrs	r3, r3, #20
 800c5a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	d118      	bne.n	800c5e0 <_strtod_l+0x8d0>
 800c5ae:	4b2a      	ldr	r3, [pc, #168]	; (800c658 <_strtod_l+0x948>)
 800c5b0:	459a      	cmp	sl, r3
 800c5b2:	d102      	bne.n	800c5ba <_strtod_l+0x8aa>
 800c5b4:	3101      	adds	r1, #1
 800c5b6:	f43f adef 	beq.w	800c198 <_strtod_l+0x488>
 800c5ba:	4b24      	ldr	r3, [pc, #144]	; (800c64c <_strtod_l+0x93c>)
 800c5bc:	ea0a 0303 	and.w	r3, sl, r3
 800c5c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	9b04      	ldr	r3, [sp, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1a2      	bne.n	800c514 <_strtod_l+0x804>
 800c5ce:	e5ed      	b.n	800c1ac <_strtod_l+0x49c>
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	e7e9      	b.n	800c5aa <_strtod_l+0x89a>
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	e7e7      	b.n	800c5aa <_strtod_l+0x89a>
 800c5da:	ea53 0308 	orrs.w	r3, r3, r8
 800c5de:	d08a      	beq.n	800c4f6 <_strtod_l+0x7e6>
 800c5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5e2:	b1e3      	cbz	r3, 800c61e <_strtod_l+0x90e>
 800c5e4:	ea13 0f0a 	tst.w	r3, sl
 800c5e8:	d0ee      	beq.n	800c5c8 <_strtod_l+0x8b8>
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	9a04      	ldr	r2, [sp, #16]
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	b1c3      	cbz	r3, 800c626 <_strtod_l+0x916>
 800c5f4:	f7ff fb6d 	bl	800bcd2 <sulp>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	ec51 0b18 	vmov	r0, r1, d8
 800c600:	f7f3 fe44 	bl	800028c <__adddf3>
 800c604:	4680      	mov	r8, r0
 800c606:	4689      	mov	r9, r1
 800c608:	e7de      	b.n	800c5c8 <_strtod_l+0x8b8>
 800c60a:	4013      	ands	r3, r2
 800c60c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c610:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c614:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c618:	f04f 38ff 	mov.w	r8, #4294967295
 800c61c:	e7d4      	b.n	800c5c8 <_strtod_l+0x8b8>
 800c61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c620:	ea13 0f08 	tst.w	r3, r8
 800c624:	e7e0      	b.n	800c5e8 <_strtod_l+0x8d8>
 800c626:	f7ff fb54 	bl	800bcd2 <sulp>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	ec51 0b18 	vmov	r0, r1, d8
 800c632:	f7f3 fe29 	bl	8000288 <__aeabi_dsub>
 800c636:	2200      	movs	r2, #0
 800c638:	2300      	movs	r3, #0
 800c63a:	4680      	mov	r8, r0
 800c63c:	4689      	mov	r9, r1
 800c63e:	f7f4 fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c642:	2800      	cmp	r0, #0
 800c644:	d0c0      	beq.n	800c5c8 <_strtod_l+0x8b8>
 800c646:	e618      	b.n	800c27a <_strtod_l+0x56a>
 800c648:	fffffc02 	.word	0xfffffc02
 800c64c:	7ff00000 	.word	0x7ff00000
 800c650:	39500000 	.word	0x39500000
 800c654:	000fffff 	.word	0x000fffff
 800c658:	7fefffff 	.word	0x7fefffff
 800c65c:	08010228 	.word	0x08010228
 800c660:	4659      	mov	r1, fp
 800c662:	4628      	mov	r0, r5
 800c664:	f002 fef6 	bl	800f454 <__ratio>
 800c668:	ec57 6b10 	vmov	r6, r7, d0
 800c66c:	ee10 0a10 	vmov	r0, s0
 800c670:	2200      	movs	r2, #0
 800c672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c676:	4639      	mov	r1, r7
 800c678:	f7f4 fa3a 	bl	8000af0 <__aeabi_dcmple>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d071      	beq.n	800c764 <_strtod_l+0xa54>
 800c680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d17c      	bne.n	800c780 <_strtod_l+0xa70>
 800c686:	f1b8 0f00 	cmp.w	r8, #0
 800c68a:	d15a      	bne.n	800c742 <_strtod_l+0xa32>
 800c68c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c690:	2b00      	cmp	r3, #0
 800c692:	d15d      	bne.n	800c750 <_strtod_l+0xa40>
 800c694:	4b90      	ldr	r3, [pc, #576]	; (800c8d8 <_strtod_l+0xbc8>)
 800c696:	2200      	movs	r2, #0
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7f4 fa1e 	bl	8000adc <__aeabi_dcmplt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d15c      	bne.n	800c75e <_strtod_l+0xa4e>
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	4b8c      	ldr	r3, [pc, #560]	; (800c8dc <_strtod_l+0xbcc>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f7f3 ffa4 	bl	80005f8 <__aeabi_dmul>
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c6b8:	9606      	str	r6, [sp, #24]
 800c6ba:	9307      	str	r3, [sp, #28]
 800c6bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c6c4:	4b86      	ldr	r3, [pc, #536]	; (800c8e0 <_strtod_l+0xbd0>)
 800c6c6:	ea0a 0303 	and.w	r3, sl, r3
 800c6ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c6cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6ce:	4b85      	ldr	r3, [pc, #532]	; (800c8e4 <_strtod_l+0xbd4>)
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	f040 8090 	bne.w	800c7f6 <_strtod_l+0xae6>
 800c6d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c6da:	ec49 8b10 	vmov	d0, r8, r9
 800c6de:	f002 fdef 	bl	800f2c0 <__ulp>
 800c6e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6e6:	ec51 0b10 	vmov	r0, r1, d0
 800c6ea:	f7f3 ff85 	bl	80005f8 <__aeabi_dmul>
 800c6ee:	4642      	mov	r2, r8
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	f7f3 fdcb 	bl	800028c <__adddf3>
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4979      	ldr	r1, [pc, #484]	; (800c8e0 <_strtod_l+0xbd0>)
 800c6fa:	4a7b      	ldr	r2, [pc, #492]	; (800c8e8 <_strtod_l+0xbd8>)
 800c6fc:	4019      	ands	r1, r3
 800c6fe:	4291      	cmp	r1, r2
 800c700:	4680      	mov	r8, r0
 800c702:	d944      	bls.n	800c78e <_strtod_l+0xa7e>
 800c704:	ee18 2a90 	vmov	r2, s17
 800c708:	4b78      	ldr	r3, [pc, #480]	; (800c8ec <_strtod_l+0xbdc>)
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d104      	bne.n	800c718 <_strtod_l+0xa08>
 800c70e:	ee18 3a10 	vmov	r3, s16
 800c712:	3301      	adds	r3, #1
 800c714:	f43f ad40 	beq.w	800c198 <_strtod_l+0x488>
 800c718:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c8ec <_strtod_l+0xbdc>
 800c71c:	f04f 38ff 	mov.w	r8, #4294967295
 800c720:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c722:	4620      	mov	r0, r4
 800c724:	f002 faa0 	bl	800ec68 <_Bfree>
 800c728:	9905      	ldr	r1, [sp, #20]
 800c72a:	4620      	mov	r0, r4
 800c72c:	f002 fa9c 	bl	800ec68 <_Bfree>
 800c730:	4659      	mov	r1, fp
 800c732:	4620      	mov	r0, r4
 800c734:	f002 fa98 	bl	800ec68 <_Bfree>
 800c738:	4629      	mov	r1, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	f002 fa94 	bl	800ec68 <_Bfree>
 800c740:	e609      	b.n	800c356 <_strtod_l+0x646>
 800c742:	f1b8 0f01 	cmp.w	r8, #1
 800c746:	d103      	bne.n	800c750 <_strtod_l+0xa40>
 800c748:	f1b9 0f00 	cmp.w	r9, #0
 800c74c:	f43f ad95 	beq.w	800c27a <_strtod_l+0x56a>
 800c750:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c8a8 <_strtod_l+0xb98>
 800c754:	4f60      	ldr	r7, [pc, #384]	; (800c8d8 <_strtod_l+0xbc8>)
 800c756:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c75a:	2600      	movs	r6, #0
 800c75c:	e7ae      	b.n	800c6bc <_strtod_l+0x9ac>
 800c75e:	4f5f      	ldr	r7, [pc, #380]	; (800c8dc <_strtod_l+0xbcc>)
 800c760:	2600      	movs	r6, #0
 800c762:	e7a7      	b.n	800c6b4 <_strtod_l+0x9a4>
 800c764:	4b5d      	ldr	r3, [pc, #372]	; (800c8dc <_strtod_l+0xbcc>)
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	2200      	movs	r2, #0
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d09c      	beq.n	800c6b4 <_strtod_l+0x9a4>
 800c77a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c77e:	e79d      	b.n	800c6bc <_strtod_l+0x9ac>
 800c780:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c8b0 <_strtod_l+0xba0>
 800c784:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c788:	ec57 6b17 	vmov	r6, r7, d7
 800c78c:	e796      	b.n	800c6bc <_strtod_l+0x9ac>
 800c78e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	46ca      	mov	sl, r9
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1c2      	bne.n	800c720 <_strtod_l+0xa10>
 800c79a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7a0:	0d1b      	lsrs	r3, r3, #20
 800c7a2:	051b      	lsls	r3, r3, #20
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d1bb      	bne.n	800c720 <_strtod_l+0xa10>
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f7f4 fa84 	bl	8000cb8 <__aeabi_d2lz>
 800c7b0:	f7f3 fef4 	bl	800059c <__aeabi_l2d>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f3 fd64 	bl	8000288 <__aeabi_dsub>
 800c7c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7c6:	ea43 0308 	orr.w	r3, r3, r8
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	d054      	beq.n	800c87c <_strtod_l+0xb6c>
 800c7d2:	a339      	add	r3, pc, #228	; (adr r3, 800c8b8 <_strtod_l+0xba8>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	f7f4 f980 	bl	8000adc <__aeabi_dcmplt>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f47f ace5 	bne.w	800c1ac <_strtod_l+0x49c>
 800c7e2:	a337      	add	r3, pc, #220	; (adr r3, 800c8c0 <_strtod_l+0xbb0>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	f7f4 f994 	bl	8000b18 <__aeabi_dcmpgt>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d095      	beq.n	800c720 <_strtod_l+0xa10>
 800c7f4:	e4da      	b.n	800c1ac <_strtod_l+0x49c>
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	b333      	cbz	r3, 800c848 <_strtod_l+0xb38>
 800c7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c800:	d822      	bhi.n	800c848 <_strtod_l+0xb38>
 800c802:	a331      	add	r3, pc, #196	; (adr r3, 800c8c8 <_strtod_l+0xbb8>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f4 f970 	bl	8000af0 <__aeabi_dcmple>
 800c810:	b1a0      	cbz	r0, 800c83c <_strtod_l+0xb2c>
 800c812:	4639      	mov	r1, r7
 800c814:	4630      	mov	r0, r6
 800c816:	f7f4 f9c7 	bl	8000ba8 <__aeabi_d2uiz>
 800c81a:	2801      	cmp	r0, #1
 800c81c:	bf38      	it	cc
 800c81e:	2001      	movcc	r0, #1
 800c820:	f7f3 fe70 	bl	8000504 <__aeabi_ui2d>
 800c824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	bb23      	cbnz	r3, 800c876 <_strtod_l+0xb66>
 800c82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c830:	9010      	str	r0, [sp, #64]	; 0x40
 800c832:	9311      	str	r3, [sp, #68]	; 0x44
 800c834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c838:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	930f      	str	r3, [sp, #60]	; 0x3c
 800c848:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c84c:	eeb0 0a48 	vmov.f32	s0, s16
 800c850:	eef0 0a68 	vmov.f32	s1, s17
 800c854:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c858:	f002 fd32 	bl	800f2c0 <__ulp>
 800c85c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c860:	ec53 2b10 	vmov	r2, r3, d0
 800c864:	f7f3 fec8 	bl	80005f8 <__aeabi_dmul>
 800c868:	ec53 2b18 	vmov	r2, r3, d8
 800c86c:	f7f3 fd0e 	bl	800028c <__adddf3>
 800c870:	4680      	mov	r8, r0
 800c872:	4689      	mov	r9, r1
 800c874:	e78d      	b.n	800c792 <_strtod_l+0xa82>
 800c876:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c87a:	e7db      	b.n	800c834 <_strtod_l+0xb24>
 800c87c:	a314      	add	r3, pc, #80	; (adr r3, 800c8d0 <_strtod_l+0xbc0>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f4 f92b 	bl	8000adc <__aeabi_dcmplt>
 800c886:	e7b3      	b.n	800c7f0 <_strtod_l+0xae0>
 800c888:	2300      	movs	r3, #0
 800c88a:	930a      	str	r3, [sp, #40]	; 0x28
 800c88c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	f7ff ba7c 	b.w	800bd8e <_strtod_l+0x7e>
 800c896:	2a65      	cmp	r2, #101	; 0x65
 800c898:	f43f ab75 	beq.w	800bf86 <_strtod_l+0x276>
 800c89c:	2a45      	cmp	r2, #69	; 0x45
 800c89e:	f43f ab72 	beq.w	800bf86 <_strtod_l+0x276>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	f7ff bbaa 	b.w	800bffc <_strtod_l+0x2ec>
 800c8a8:	00000000 	.word	0x00000000
 800c8ac:	bff00000 	.word	0xbff00000
 800c8b0:	00000000 	.word	0x00000000
 800c8b4:	3ff00000 	.word	0x3ff00000
 800c8b8:	94a03595 	.word	0x94a03595
 800c8bc:	3fdfffff 	.word	0x3fdfffff
 800c8c0:	35afe535 	.word	0x35afe535
 800c8c4:	3fe00000 	.word	0x3fe00000
 800c8c8:	ffc00000 	.word	0xffc00000
 800c8cc:	41dfffff 	.word	0x41dfffff
 800c8d0:	94a03595 	.word	0x94a03595
 800c8d4:	3fcfffff 	.word	0x3fcfffff
 800c8d8:	3ff00000 	.word	0x3ff00000
 800c8dc:	3fe00000 	.word	0x3fe00000
 800c8e0:	7ff00000 	.word	0x7ff00000
 800c8e4:	7fe00000 	.word	0x7fe00000
 800c8e8:	7c9fffff 	.word	0x7c9fffff
 800c8ec:	7fefffff 	.word	0x7fefffff

0800c8f0 <strtod>:
 800c8f0:	460a      	mov	r2, r1
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	4802      	ldr	r0, [pc, #8]	; (800c900 <strtod+0x10>)
 800c8f6:	4b03      	ldr	r3, [pc, #12]	; (800c904 <strtod+0x14>)
 800c8f8:	6800      	ldr	r0, [r0, #0]
 800c8fa:	f7ff ba09 	b.w	800bd10 <_strtod_l>
 800c8fe:	bf00      	nop
 800c900:	200001d4 	.word	0x200001d4
 800c904:	2000001c 	.word	0x2000001c

0800c908 <__cvt>:
 800c908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	ec55 4b10 	vmov	r4, r5, d0
 800c910:	2d00      	cmp	r5, #0
 800c912:	460e      	mov	r6, r1
 800c914:	4619      	mov	r1, r3
 800c916:	462b      	mov	r3, r5
 800c918:	bfbb      	ittet	lt
 800c91a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c91e:	461d      	movlt	r5, r3
 800c920:	2300      	movge	r3, #0
 800c922:	232d      	movlt	r3, #45	; 0x2d
 800c924:	700b      	strb	r3, [r1, #0]
 800c926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c92c:	4691      	mov	r9, r2
 800c92e:	f023 0820 	bic.w	r8, r3, #32
 800c932:	bfbc      	itt	lt
 800c934:	4622      	movlt	r2, r4
 800c936:	4614      	movlt	r4, r2
 800c938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c93c:	d005      	beq.n	800c94a <__cvt+0x42>
 800c93e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c942:	d100      	bne.n	800c946 <__cvt+0x3e>
 800c944:	3601      	adds	r6, #1
 800c946:	2102      	movs	r1, #2
 800c948:	e000      	b.n	800c94c <__cvt+0x44>
 800c94a:	2103      	movs	r1, #3
 800c94c:	ab03      	add	r3, sp, #12
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	ab02      	add	r3, sp, #8
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	ec45 4b10 	vmov	d0, r4, r5
 800c958:	4653      	mov	r3, sl
 800c95a:	4632      	mov	r2, r6
 800c95c:	f000 fee8 	bl	800d730 <_dtoa_r>
 800c960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c964:	4607      	mov	r7, r0
 800c966:	d102      	bne.n	800c96e <__cvt+0x66>
 800c968:	f019 0f01 	tst.w	r9, #1
 800c96c:	d022      	beq.n	800c9b4 <__cvt+0xac>
 800c96e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c972:	eb07 0906 	add.w	r9, r7, r6
 800c976:	d110      	bne.n	800c99a <__cvt+0x92>
 800c978:	783b      	ldrb	r3, [r7, #0]
 800c97a:	2b30      	cmp	r3, #48	; 0x30
 800c97c:	d10a      	bne.n	800c994 <__cvt+0x8c>
 800c97e:	2200      	movs	r2, #0
 800c980:	2300      	movs	r3, #0
 800c982:	4620      	mov	r0, r4
 800c984:	4629      	mov	r1, r5
 800c986:	f7f4 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c98a:	b918      	cbnz	r0, 800c994 <__cvt+0x8c>
 800c98c:	f1c6 0601 	rsb	r6, r6, #1
 800c990:	f8ca 6000 	str.w	r6, [sl]
 800c994:	f8da 3000 	ldr.w	r3, [sl]
 800c998:	4499      	add	r9, r3
 800c99a:	2200      	movs	r2, #0
 800c99c:	2300      	movs	r3, #0
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	f7f4 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9a6:	b108      	cbz	r0, 800c9ac <__cvt+0xa4>
 800c9a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9ac:	2230      	movs	r2, #48	; 0x30
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	454b      	cmp	r3, r9
 800c9b2:	d307      	bcc.n	800c9c4 <__cvt+0xbc>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9b8:	1bdb      	subs	r3, r3, r7
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	b004      	add	sp, #16
 800c9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c4:	1c59      	adds	r1, r3, #1
 800c9c6:	9103      	str	r1, [sp, #12]
 800c9c8:	701a      	strb	r2, [r3, #0]
 800c9ca:	e7f0      	b.n	800c9ae <__cvt+0xa6>

0800c9cc <__exponent>:
 800c9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2900      	cmp	r1, #0
 800c9d2:	bfb8      	it	lt
 800c9d4:	4249      	neglt	r1, r1
 800c9d6:	f803 2b02 	strb.w	r2, [r3], #2
 800c9da:	bfb4      	ite	lt
 800c9dc:	222d      	movlt	r2, #45	; 0x2d
 800c9de:	222b      	movge	r2, #43	; 0x2b
 800c9e0:	2909      	cmp	r1, #9
 800c9e2:	7042      	strb	r2, [r0, #1]
 800c9e4:	dd2a      	ble.n	800ca3c <__exponent+0x70>
 800c9e6:	f10d 0207 	add.w	r2, sp, #7
 800c9ea:	4617      	mov	r7, r2
 800c9ec:	260a      	movs	r6, #10
 800c9ee:	4694      	mov	ip, r2
 800c9f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c9f4:	fb06 1415 	mls	r4, r6, r5, r1
 800c9f8:	3430      	adds	r4, #48	; 0x30
 800c9fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c9fe:	460c      	mov	r4, r1
 800ca00:	2c63      	cmp	r4, #99	; 0x63
 800ca02:	f102 32ff 	add.w	r2, r2, #4294967295
 800ca06:	4629      	mov	r1, r5
 800ca08:	dcf1      	bgt.n	800c9ee <__exponent+0x22>
 800ca0a:	3130      	adds	r1, #48	; 0x30
 800ca0c:	f1ac 0402 	sub.w	r4, ip, #2
 800ca10:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca14:	1c41      	adds	r1, r0, #1
 800ca16:	4622      	mov	r2, r4
 800ca18:	42ba      	cmp	r2, r7
 800ca1a:	d30a      	bcc.n	800ca32 <__exponent+0x66>
 800ca1c:	f10d 0209 	add.w	r2, sp, #9
 800ca20:	eba2 020c 	sub.w	r2, r2, ip
 800ca24:	42bc      	cmp	r4, r7
 800ca26:	bf88      	it	hi
 800ca28:	2200      	movhi	r2, #0
 800ca2a:	4413      	add	r3, r2
 800ca2c:	1a18      	subs	r0, r3, r0
 800ca2e:	b003      	add	sp, #12
 800ca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca32:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca36:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ca3a:	e7ed      	b.n	800ca18 <__exponent+0x4c>
 800ca3c:	2330      	movs	r3, #48	; 0x30
 800ca3e:	3130      	adds	r1, #48	; 0x30
 800ca40:	7083      	strb	r3, [r0, #2]
 800ca42:	70c1      	strb	r1, [r0, #3]
 800ca44:	1d03      	adds	r3, r0, #4
 800ca46:	e7f1      	b.n	800ca2c <__exponent+0x60>

0800ca48 <_printf_float>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	ed2d 8b02 	vpush	{d8}
 800ca50:	b08d      	sub	sp, #52	; 0x34
 800ca52:	460c      	mov	r4, r1
 800ca54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca58:	4616      	mov	r6, r2
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	f000 fcfd 	bl	800d45c <_localeconv_r>
 800ca62:	f8d0 a000 	ldr.w	sl, [r0]
 800ca66:	4650      	mov	r0, sl
 800ca68:	f7f3 fc02 	bl	8000270 <strlen>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	9305      	str	r3, [sp, #20]
 800ca74:	f8d8 3000 	ldr.w	r3, [r8]
 800ca78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	f023 0307 	bic.w	r3, r3, #7
 800ca82:	f103 0208 	add.w	r2, r3, #8
 800ca86:	f8c8 2000 	str.w	r2, [r8]
 800ca8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca92:	9307      	str	r3, [sp, #28]
 800ca94:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca98:	ee08 0a10 	vmov	s16, r0
 800ca9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800caa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caa4:	4b9e      	ldr	r3, [pc, #632]	; (800cd20 <_printf_float+0x2d8>)
 800caa6:	f04f 32ff 	mov.w	r2, #4294967295
 800caaa:	f7f4 f83f 	bl	8000b2c <__aeabi_dcmpun>
 800caae:	bb88      	cbnz	r0, 800cb14 <_printf_float+0xcc>
 800cab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cab4:	4b9a      	ldr	r3, [pc, #616]	; (800cd20 <_printf_float+0x2d8>)
 800cab6:	f04f 32ff 	mov.w	r2, #4294967295
 800caba:	f7f4 f819 	bl	8000af0 <__aeabi_dcmple>
 800cabe:	bb48      	cbnz	r0, 800cb14 <_printf_float+0xcc>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4640      	mov	r0, r8
 800cac6:	4649      	mov	r1, r9
 800cac8:	f7f4 f808 	bl	8000adc <__aeabi_dcmplt>
 800cacc:	b110      	cbz	r0, 800cad4 <_printf_float+0x8c>
 800cace:	232d      	movs	r3, #45	; 0x2d
 800cad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad4:	4a93      	ldr	r2, [pc, #588]	; (800cd24 <_printf_float+0x2dc>)
 800cad6:	4b94      	ldr	r3, [pc, #592]	; (800cd28 <_printf_float+0x2e0>)
 800cad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cadc:	bf94      	ite	ls
 800cade:	4690      	movls	r8, r2
 800cae0:	4698      	movhi	r8, r3
 800cae2:	2303      	movs	r3, #3
 800cae4:	6123      	str	r3, [r4, #16]
 800cae6:	9b05      	ldr	r3, [sp, #20]
 800cae8:	f023 0304 	bic.w	r3, r3, #4
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	f04f 0900 	mov.w	r9, #0
 800caf2:	9700      	str	r7, [sp, #0]
 800caf4:	4633      	mov	r3, r6
 800caf6:	aa0b      	add	r2, sp, #44	; 0x2c
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f9da 	bl	800ceb4 <_printf_common>
 800cb00:	3001      	adds	r0, #1
 800cb02:	f040 8090 	bne.w	800cc26 <_printf_float+0x1de>
 800cb06:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0a:	b00d      	add	sp, #52	; 0x34
 800cb0c:	ecbd 8b02 	vpop	{d8}
 800cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb14:	4642      	mov	r2, r8
 800cb16:	464b      	mov	r3, r9
 800cb18:	4640      	mov	r0, r8
 800cb1a:	4649      	mov	r1, r9
 800cb1c:	f7f4 f806 	bl	8000b2c <__aeabi_dcmpun>
 800cb20:	b140      	cbz	r0, 800cb34 <_printf_float+0xec>
 800cb22:	464b      	mov	r3, r9
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	bfbc      	itt	lt
 800cb28:	232d      	movlt	r3, #45	; 0x2d
 800cb2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb2e:	4a7f      	ldr	r2, [pc, #508]	; (800cd2c <_printf_float+0x2e4>)
 800cb30:	4b7f      	ldr	r3, [pc, #508]	; (800cd30 <_printf_float+0x2e8>)
 800cb32:	e7d1      	b.n	800cad8 <_printf_float+0x90>
 800cb34:	6863      	ldr	r3, [r4, #4]
 800cb36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb3a:	9206      	str	r2, [sp, #24]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	d13f      	bne.n	800cbc0 <_printf_float+0x178>
 800cb40:	2306      	movs	r3, #6
 800cb42:	6063      	str	r3, [r4, #4]
 800cb44:	9b05      	ldr	r3, [sp, #20]
 800cb46:	6861      	ldr	r1, [r4, #4]
 800cb48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9303      	str	r3, [sp, #12]
 800cb50:	ab0a      	add	r3, sp, #40	; 0x28
 800cb52:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb56:	ab09      	add	r3, sp, #36	; 0x24
 800cb58:	ec49 8b10 	vmov	d0, r8, r9
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb64:	4628      	mov	r0, r5
 800cb66:	f7ff fecf 	bl	800c908 <__cvt>
 800cb6a:	9b06      	ldr	r3, [sp, #24]
 800cb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb6e:	2b47      	cmp	r3, #71	; 0x47
 800cb70:	4680      	mov	r8, r0
 800cb72:	d108      	bne.n	800cb86 <_printf_float+0x13e>
 800cb74:	1cc8      	adds	r0, r1, #3
 800cb76:	db02      	blt.n	800cb7e <_printf_float+0x136>
 800cb78:	6863      	ldr	r3, [r4, #4]
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	dd41      	ble.n	800cc02 <_printf_float+0x1ba>
 800cb7e:	f1ab 0302 	sub.w	r3, fp, #2
 800cb82:	fa5f fb83 	uxtb.w	fp, r3
 800cb86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb8a:	d820      	bhi.n	800cbce <_printf_float+0x186>
 800cb8c:	3901      	subs	r1, #1
 800cb8e:	465a      	mov	r2, fp
 800cb90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb94:	9109      	str	r1, [sp, #36]	; 0x24
 800cb96:	f7ff ff19 	bl	800c9cc <__exponent>
 800cb9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb9c:	1813      	adds	r3, r2, r0
 800cb9e:	2a01      	cmp	r2, #1
 800cba0:	4681      	mov	r9, r0
 800cba2:	6123      	str	r3, [r4, #16]
 800cba4:	dc02      	bgt.n	800cbac <_printf_float+0x164>
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	07d2      	lsls	r2, r2, #31
 800cbaa:	d501      	bpl.n	800cbb0 <_printf_float+0x168>
 800cbac:	3301      	adds	r3, #1
 800cbae:	6123      	str	r3, [r4, #16]
 800cbb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d09c      	beq.n	800caf2 <_printf_float+0xaa>
 800cbb8:	232d      	movs	r3, #45	; 0x2d
 800cbba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbbe:	e798      	b.n	800caf2 <_printf_float+0xaa>
 800cbc0:	9a06      	ldr	r2, [sp, #24]
 800cbc2:	2a47      	cmp	r2, #71	; 0x47
 800cbc4:	d1be      	bne.n	800cb44 <_printf_float+0xfc>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1bc      	bne.n	800cb44 <_printf_float+0xfc>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e7b9      	b.n	800cb42 <_printf_float+0xfa>
 800cbce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbd2:	d118      	bne.n	800cc06 <_printf_float+0x1be>
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	dd0b      	ble.n	800cbf2 <_printf_float+0x1aa>
 800cbda:	6121      	str	r1, [r4, #16]
 800cbdc:	b913      	cbnz	r3, 800cbe4 <_printf_float+0x19c>
 800cbde:	6822      	ldr	r2, [r4, #0]
 800cbe0:	07d0      	lsls	r0, r2, #31
 800cbe2:	d502      	bpl.n	800cbea <_printf_float+0x1a2>
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	440b      	add	r3, r1
 800cbe8:	6123      	str	r3, [r4, #16]
 800cbea:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	e7de      	b.n	800cbb0 <_printf_float+0x168>
 800cbf2:	b913      	cbnz	r3, 800cbfa <_printf_float+0x1b2>
 800cbf4:	6822      	ldr	r2, [r4, #0]
 800cbf6:	07d2      	lsls	r2, r2, #31
 800cbf8:	d501      	bpl.n	800cbfe <_printf_float+0x1b6>
 800cbfa:	3302      	adds	r3, #2
 800cbfc:	e7f4      	b.n	800cbe8 <_printf_float+0x1a0>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e7f2      	b.n	800cbe8 <_printf_float+0x1a0>
 800cc02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc08:	4299      	cmp	r1, r3
 800cc0a:	db05      	blt.n	800cc18 <_printf_float+0x1d0>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	6121      	str	r1, [r4, #16]
 800cc10:	07d8      	lsls	r0, r3, #31
 800cc12:	d5ea      	bpl.n	800cbea <_printf_float+0x1a2>
 800cc14:	1c4b      	adds	r3, r1, #1
 800cc16:	e7e7      	b.n	800cbe8 <_printf_float+0x1a0>
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	bfd4      	ite	le
 800cc1c:	f1c1 0202 	rsble	r2, r1, #2
 800cc20:	2201      	movgt	r2, #1
 800cc22:	4413      	add	r3, r2
 800cc24:	e7e0      	b.n	800cbe8 <_printf_float+0x1a0>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	055a      	lsls	r2, r3, #21
 800cc2a:	d407      	bmi.n	800cc3c <_printf_float+0x1f4>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	4642      	mov	r2, r8
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	d12c      	bne.n	800cc94 <_printf_float+0x24c>
 800cc3a:	e764      	b.n	800cb06 <_printf_float+0xbe>
 800cc3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc40:	f240 80e0 	bls.w	800ce04 <_printf_float+0x3bc>
 800cc44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f7f3 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d034      	beq.n	800ccbe <_printf_float+0x276>
 800cc54:	4a37      	ldr	r2, [pc, #220]	; (800cd34 <_printf_float+0x2ec>)
 800cc56:	2301      	movs	r3, #1
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f af51 	beq.w	800cb06 <_printf_float+0xbe>
 800cc64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	db02      	blt.n	800cc72 <_printf_float+0x22a>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	07d8      	lsls	r0, r3, #31
 800cc70:	d510      	bpl.n	800cc94 <_printf_float+0x24c>
 800cc72:	ee18 3a10 	vmov	r3, s16
 800cc76:	4652      	mov	r2, sl
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b8      	blx	r7
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f43f af41 	beq.w	800cb06 <_printf_float+0xbe>
 800cc84:	f04f 0800 	mov.w	r8, #0
 800cc88:	f104 091a 	add.w	r9, r4, #26
 800cc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4543      	cmp	r3, r8
 800cc92:	dc09      	bgt.n	800cca8 <_printf_float+0x260>
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	079b      	lsls	r3, r3, #30
 800cc98:	f100 8107 	bmi.w	800ceaa <_printf_float+0x462>
 800cc9c:	68e0      	ldr	r0, [r4, #12]
 800cc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca0:	4298      	cmp	r0, r3
 800cca2:	bfb8      	it	lt
 800cca4:	4618      	movlt	r0, r3
 800cca6:	e730      	b.n	800cb0a <_printf_float+0xc2>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	464a      	mov	r2, r9
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	47b8      	blx	r7
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	f43f af27 	beq.w	800cb06 <_printf_float+0xbe>
 800ccb8:	f108 0801 	add.w	r8, r8, #1
 800ccbc:	e7e6      	b.n	800cc8c <_printf_float+0x244>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	dc39      	bgt.n	800cd38 <_printf_float+0x2f0>
 800ccc4:	4a1b      	ldr	r2, [pc, #108]	; (800cd34 <_printf_float+0x2ec>)
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f af19 	beq.w	800cb06 <_printf_float+0xbe>
 800ccd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	d102      	bne.n	800cce2 <_printf_float+0x29a>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	07d9      	lsls	r1, r3, #31
 800cce0:	d5d8      	bpl.n	800cc94 <_printf_float+0x24c>
 800cce2:	ee18 3a10 	vmov	r3, s16
 800cce6:	4652      	mov	r2, sl
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	47b8      	blx	r7
 800ccee:	3001      	adds	r0, #1
 800ccf0:	f43f af09 	beq.w	800cb06 <_printf_float+0xbe>
 800ccf4:	f04f 0900 	mov.w	r9, #0
 800ccf8:	f104 0a1a 	add.w	sl, r4, #26
 800ccfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfe:	425b      	negs	r3, r3
 800cd00:	454b      	cmp	r3, r9
 800cd02:	dc01      	bgt.n	800cd08 <_printf_float+0x2c0>
 800cd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd06:	e792      	b.n	800cc2e <_printf_float+0x1e6>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	4652      	mov	r2, sl
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	47b8      	blx	r7
 800cd12:	3001      	adds	r0, #1
 800cd14:	f43f aef7 	beq.w	800cb06 <_printf_float+0xbe>
 800cd18:	f109 0901 	add.w	r9, r9, #1
 800cd1c:	e7ee      	b.n	800ccfc <_printf_float+0x2b4>
 800cd1e:	bf00      	nop
 800cd20:	7fefffff 	.word	0x7fefffff
 800cd24:	08010250 	.word	0x08010250
 800cd28:	08010254 	.word	0x08010254
 800cd2c:	08010258 	.word	0x08010258
 800cd30:	0801025c 	.word	0x0801025c
 800cd34:	08010260 	.word	0x08010260
 800cd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	bfa8      	it	ge
 800cd40:	461a      	movge	r2, r3
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	4691      	mov	r9, r2
 800cd46:	dc37      	bgt.n	800cdb8 <_printf_float+0x370>
 800cd48:	f04f 0b00 	mov.w	fp, #0
 800cd4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd50:	f104 021a 	add.w	r2, r4, #26
 800cd54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	eba3 0309 	sub.w	r3, r3, r9
 800cd5c:	455b      	cmp	r3, fp
 800cd5e:	dc33      	bgt.n	800cdc8 <_printf_float+0x380>
 800cd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd64:	429a      	cmp	r2, r3
 800cd66:	db3b      	blt.n	800cde0 <_printf_float+0x398>
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	07da      	lsls	r2, r3, #31
 800cd6c:	d438      	bmi.n	800cde0 <_printf_float+0x398>
 800cd6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd72:	eba2 0903 	sub.w	r9, r2, r3
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	1ad2      	subs	r2, r2, r3
 800cd7a:	4591      	cmp	r9, r2
 800cd7c:	bfa8      	it	ge
 800cd7e:	4691      	movge	r9, r2
 800cd80:	f1b9 0f00 	cmp.w	r9, #0
 800cd84:	dc35      	bgt.n	800cdf2 <_printf_float+0x3aa>
 800cd86:	f04f 0800 	mov.w	r8, #0
 800cd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd8e:	f104 0a1a 	add.w	sl, r4, #26
 800cd92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	eba3 0309 	sub.w	r3, r3, r9
 800cd9c:	4543      	cmp	r3, r8
 800cd9e:	f77f af79 	ble.w	800cc94 <_printf_float+0x24c>
 800cda2:	2301      	movs	r3, #1
 800cda4:	4652      	mov	r2, sl
 800cda6:	4631      	mov	r1, r6
 800cda8:	4628      	mov	r0, r5
 800cdaa:	47b8      	blx	r7
 800cdac:	3001      	adds	r0, #1
 800cdae:	f43f aeaa 	beq.w	800cb06 <_printf_float+0xbe>
 800cdb2:	f108 0801 	add.w	r8, r8, #1
 800cdb6:	e7ec      	b.n	800cd92 <_printf_float+0x34a>
 800cdb8:	4613      	mov	r3, r2
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4642      	mov	r2, r8
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b8      	blx	r7
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d1c0      	bne.n	800cd48 <_printf_float+0x300>
 800cdc6:	e69e      	b.n	800cb06 <_printf_float+0xbe>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4628      	mov	r0, r5
 800cdce:	9205      	str	r2, [sp, #20]
 800cdd0:	47b8      	blx	r7
 800cdd2:	3001      	adds	r0, #1
 800cdd4:	f43f ae97 	beq.w	800cb06 <_printf_float+0xbe>
 800cdd8:	9a05      	ldr	r2, [sp, #20]
 800cdda:	f10b 0b01 	add.w	fp, fp, #1
 800cdde:	e7b9      	b.n	800cd54 <_printf_float+0x30c>
 800cde0:	ee18 3a10 	vmov	r3, s16
 800cde4:	4652      	mov	r2, sl
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	d1be      	bne.n	800cd6e <_printf_float+0x326>
 800cdf0:	e689      	b.n	800cb06 <_printf_float+0xbe>
 800cdf2:	9a05      	ldr	r2, [sp, #20]
 800cdf4:	464b      	mov	r3, r9
 800cdf6:	4442      	add	r2, r8
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47b8      	blx	r7
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d1c1      	bne.n	800cd86 <_printf_float+0x33e>
 800ce02:	e680      	b.n	800cb06 <_printf_float+0xbe>
 800ce04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce06:	2a01      	cmp	r2, #1
 800ce08:	dc01      	bgt.n	800ce0e <_printf_float+0x3c6>
 800ce0a:	07db      	lsls	r3, r3, #31
 800ce0c:	d53a      	bpl.n	800ce84 <_printf_float+0x43c>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4642      	mov	r2, r8
 800ce12:	4631      	mov	r1, r6
 800ce14:	4628      	mov	r0, r5
 800ce16:	47b8      	blx	r7
 800ce18:	3001      	adds	r0, #1
 800ce1a:	f43f ae74 	beq.w	800cb06 <_printf_float+0xbe>
 800ce1e:	ee18 3a10 	vmov	r3, s16
 800ce22:	4652      	mov	r2, sl
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f ae6b 	beq.w	800cb06 <_printf_float+0xbe>
 800ce30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce34:	2200      	movs	r2, #0
 800ce36:	2300      	movs	r3, #0
 800ce38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ce3c:	f7f3 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce40:	b9d8      	cbnz	r0, 800ce7a <_printf_float+0x432>
 800ce42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce46:	f108 0201 	add.w	r2, r8, #1
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	47b8      	blx	r7
 800ce50:	3001      	adds	r0, #1
 800ce52:	d10e      	bne.n	800ce72 <_printf_float+0x42a>
 800ce54:	e657      	b.n	800cb06 <_printf_float+0xbe>
 800ce56:	2301      	movs	r3, #1
 800ce58:	4652      	mov	r2, sl
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f ae50 	beq.w	800cb06 <_printf_float+0xbe>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	4543      	cmp	r3, r8
 800ce70:	dcf1      	bgt.n	800ce56 <_printf_float+0x40e>
 800ce72:	464b      	mov	r3, r9
 800ce74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce78:	e6da      	b.n	800cc30 <_printf_float+0x1e8>
 800ce7a:	f04f 0800 	mov.w	r8, #0
 800ce7e:	f104 0a1a 	add.w	sl, r4, #26
 800ce82:	e7f2      	b.n	800ce6a <_printf_float+0x422>
 800ce84:	2301      	movs	r3, #1
 800ce86:	4642      	mov	r2, r8
 800ce88:	e7df      	b.n	800ce4a <_printf_float+0x402>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	464a      	mov	r2, r9
 800ce8e:	4631      	mov	r1, r6
 800ce90:	4628      	mov	r0, r5
 800ce92:	47b8      	blx	r7
 800ce94:	3001      	adds	r0, #1
 800ce96:	f43f ae36 	beq.w	800cb06 <_printf_float+0xbe>
 800ce9a:	f108 0801 	add.w	r8, r8, #1
 800ce9e:	68e3      	ldr	r3, [r4, #12]
 800cea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cea2:	1a5b      	subs	r3, r3, r1
 800cea4:	4543      	cmp	r3, r8
 800cea6:	dcf0      	bgt.n	800ce8a <_printf_float+0x442>
 800cea8:	e6f8      	b.n	800cc9c <_printf_float+0x254>
 800ceaa:	f04f 0800 	mov.w	r8, #0
 800ceae:	f104 0919 	add.w	r9, r4, #25
 800ceb2:	e7f4      	b.n	800ce9e <_printf_float+0x456>

0800ceb4 <_printf_common>:
 800ceb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	4616      	mov	r6, r2
 800ceba:	4699      	mov	r9, r3
 800cebc:	688a      	ldr	r2, [r1, #8]
 800cebe:	690b      	ldr	r3, [r1, #16]
 800cec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cec4:	4293      	cmp	r3, r2
 800cec6:	bfb8      	it	lt
 800cec8:	4613      	movlt	r3, r2
 800ceca:	6033      	str	r3, [r6, #0]
 800cecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ced0:	4607      	mov	r7, r0
 800ced2:	460c      	mov	r4, r1
 800ced4:	b10a      	cbz	r2, 800ceda <_printf_common+0x26>
 800ced6:	3301      	adds	r3, #1
 800ced8:	6033      	str	r3, [r6, #0]
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	0699      	lsls	r1, r3, #26
 800cede:	bf42      	ittt	mi
 800cee0:	6833      	ldrmi	r3, [r6, #0]
 800cee2:	3302      	addmi	r3, #2
 800cee4:	6033      	strmi	r3, [r6, #0]
 800cee6:	6825      	ldr	r5, [r4, #0]
 800cee8:	f015 0506 	ands.w	r5, r5, #6
 800ceec:	d106      	bne.n	800cefc <_printf_common+0x48>
 800ceee:	f104 0a19 	add.w	sl, r4, #25
 800cef2:	68e3      	ldr	r3, [r4, #12]
 800cef4:	6832      	ldr	r2, [r6, #0]
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	dc26      	bgt.n	800cf4a <_printf_common+0x96>
 800cefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf00:	1e13      	subs	r3, r2, #0
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	bf18      	it	ne
 800cf06:	2301      	movne	r3, #1
 800cf08:	0692      	lsls	r2, r2, #26
 800cf0a:	d42b      	bmi.n	800cf64 <_printf_common+0xb0>
 800cf0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf10:	4649      	mov	r1, r9
 800cf12:	4638      	mov	r0, r7
 800cf14:	47c0      	blx	r8
 800cf16:	3001      	adds	r0, #1
 800cf18:	d01e      	beq.n	800cf58 <_printf_common+0xa4>
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	6922      	ldr	r2, [r4, #16]
 800cf1e:	f003 0306 	and.w	r3, r3, #6
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	bf02      	ittt	eq
 800cf26:	68e5      	ldreq	r5, [r4, #12]
 800cf28:	6833      	ldreq	r3, [r6, #0]
 800cf2a:	1aed      	subeq	r5, r5, r3
 800cf2c:	68a3      	ldr	r3, [r4, #8]
 800cf2e:	bf0c      	ite	eq
 800cf30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf34:	2500      	movne	r5, #0
 800cf36:	4293      	cmp	r3, r2
 800cf38:	bfc4      	itt	gt
 800cf3a:	1a9b      	subgt	r3, r3, r2
 800cf3c:	18ed      	addgt	r5, r5, r3
 800cf3e:	2600      	movs	r6, #0
 800cf40:	341a      	adds	r4, #26
 800cf42:	42b5      	cmp	r5, r6
 800cf44:	d11a      	bne.n	800cf7c <_printf_common+0xc8>
 800cf46:	2000      	movs	r0, #0
 800cf48:	e008      	b.n	800cf5c <_printf_common+0xa8>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	4652      	mov	r2, sl
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4638      	mov	r0, r7
 800cf52:	47c0      	blx	r8
 800cf54:	3001      	adds	r0, #1
 800cf56:	d103      	bne.n	800cf60 <_printf_common+0xac>
 800cf58:	f04f 30ff 	mov.w	r0, #4294967295
 800cf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf60:	3501      	adds	r5, #1
 800cf62:	e7c6      	b.n	800cef2 <_printf_common+0x3e>
 800cf64:	18e1      	adds	r1, r4, r3
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	2030      	movs	r0, #48	; 0x30
 800cf6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf6e:	4422      	add	r2, r4
 800cf70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf78:	3302      	adds	r3, #2
 800cf7a:	e7c7      	b.n	800cf0c <_printf_common+0x58>
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	4622      	mov	r2, r4
 800cf80:	4649      	mov	r1, r9
 800cf82:	4638      	mov	r0, r7
 800cf84:	47c0      	blx	r8
 800cf86:	3001      	adds	r0, #1
 800cf88:	d0e6      	beq.n	800cf58 <_printf_common+0xa4>
 800cf8a:	3601      	adds	r6, #1
 800cf8c:	e7d9      	b.n	800cf42 <_printf_common+0x8e>
	...

0800cf90 <_printf_i>:
 800cf90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf94:	7e0f      	ldrb	r7, [r1, #24]
 800cf96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf98:	2f78      	cmp	r7, #120	; 0x78
 800cf9a:	4691      	mov	r9, r2
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	469a      	mov	sl, r3
 800cfa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfa6:	d807      	bhi.n	800cfb8 <_printf_i+0x28>
 800cfa8:	2f62      	cmp	r7, #98	; 0x62
 800cfaa:	d80a      	bhi.n	800cfc2 <_printf_i+0x32>
 800cfac:	2f00      	cmp	r7, #0
 800cfae:	f000 80d4 	beq.w	800d15a <_printf_i+0x1ca>
 800cfb2:	2f58      	cmp	r7, #88	; 0x58
 800cfb4:	f000 80c0 	beq.w	800d138 <_printf_i+0x1a8>
 800cfb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfc0:	e03a      	b.n	800d038 <_printf_i+0xa8>
 800cfc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfc6:	2b15      	cmp	r3, #21
 800cfc8:	d8f6      	bhi.n	800cfb8 <_printf_i+0x28>
 800cfca:	a101      	add	r1, pc, #4	; (adr r1, 800cfd0 <_printf_i+0x40>)
 800cfcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfd0:	0800d029 	.word	0x0800d029
 800cfd4:	0800d03d 	.word	0x0800d03d
 800cfd8:	0800cfb9 	.word	0x0800cfb9
 800cfdc:	0800cfb9 	.word	0x0800cfb9
 800cfe0:	0800cfb9 	.word	0x0800cfb9
 800cfe4:	0800cfb9 	.word	0x0800cfb9
 800cfe8:	0800d03d 	.word	0x0800d03d
 800cfec:	0800cfb9 	.word	0x0800cfb9
 800cff0:	0800cfb9 	.word	0x0800cfb9
 800cff4:	0800cfb9 	.word	0x0800cfb9
 800cff8:	0800cfb9 	.word	0x0800cfb9
 800cffc:	0800d141 	.word	0x0800d141
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800d0fb 	.word	0x0800d0fb
 800d008:	0800cfb9 	.word	0x0800cfb9
 800d00c:	0800cfb9 	.word	0x0800cfb9
 800d010:	0800d163 	.word	0x0800d163
 800d014:	0800cfb9 	.word	0x0800cfb9
 800d018:	0800d069 	.word	0x0800d069
 800d01c:	0800cfb9 	.word	0x0800cfb9
 800d020:	0800cfb9 	.word	0x0800cfb9
 800d024:	0800d103 	.word	0x0800d103
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	1d1a      	adds	r2, r3, #4
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	602a      	str	r2, [r5, #0]
 800d030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d038:	2301      	movs	r3, #1
 800d03a:	e09f      	b.n	800d17c <_printf_i+0x1ec>
 800d03c:	6820      	ldr	r0, [r4, #0]
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	0607      	lsls	r7, r0, #24
 800d042:	f103 0104 	add.w	r1, r3, #4
 800d046:	6029      	str	r1, [r5, #0]
 800d048:	d501      	bpl.n	800d04e <_printf_i+0xbe>
 800d04a:	681e      	ldr	r6, [r3, #0]
 800d04c:	e003      	b.n	800d056 <_printf_i+0xc6>
 800d04e:	0646      	lsls	r6, r0, #25
 800d050:	d5fb      	bpl.n	800d04a <_printf_i+0xba>
 800d052:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d056:	2e00      	cmp	r6, #0
 800d058:	da03      	bge.n	800d062 <_printf_i+0xd2>
 800d05a:	232d      	movs	r3, #45	; 0x2d
 800d05c:	4276      	negs	r6, r6
 800d05e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d062:	485a      	ldr	r0, [pc, #360]	; (800d1cc <_printf_i+0x23c>)
 800d064:	230a      	movs	r3, #10
 800d066:	e012      	b.n	800d08e <_printf_i+0xfe>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	6820      	ldr	r0, [r4, #0]
 800d06c:	1d19      	adds	r1, r3, #4
 800d06e:	6029      	str	r1, [r5, #0]
 800d070:	0605      	lsls	r5, r0, #24
 800d072:	d501      	bpl.n	800d078 <_printf_i+0xe8>
 800d074:	681e      	ldr	r6, [r3, #0]
 800d076:	e002      	b.n	800d07e <_printf_i+0xee>
 800d078:	0641      	lsls	r1, r0, #25
 800d07a:	d5fb      	bpl.n	800d074 <_printf_i+0xe4>
 800d07c:	881e      	ldrh	r6, [r3, #0]
 800d07e:	4853      	ldr	r0, [pc, #332]	; (800d1cc <_printf_i+0x23c>)
 800d080:	2f6f      	cmp	r7, #111	; 0x6f
 800d082:	bf0c      	ite	eq
 800d084:	2308      	moveq	r3, #8
 800d086:	230a      	movne	r3, #10
 800d088:	2100      	movs	r1, #0
 800d08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d08e:	6865      	ldr	r5, [r4, #4]
 800d090:	60a5      	str	r5, [r4, #8]
 800d092:	2d00      	cmp	r5, #0
 800d094:	bfa2      	ittt	ge
 800d096:	6821      	ldrge	r1, [r4, #0]
 800d098:	f021 0104 	bicge.w	r1, r1, #4
 800d09c:	6021      	strge	r1, [r4, #0]
 800d09e:	b90e      	cbnz	r6, 800d0a4 <_printf_i+0x114>
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	d04b      	beq.n	800d13c <_printf_i+0x1ac>
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0aa:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ae:	5dc7      	ldrb	r7, [r0, r7]
 800d0b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0b4:	4637      	mov	r7, r6
 800d0b6:	42bb      	cmp	r3, r7
 800d0b8:	460e      	mov	r6, r1
 800d0ba:	d9f4      	bls.n	800d0a6 <_printf_i+0x116>
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d10b      	bne.n	800d0d8 <_printf_i+0x148>
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	07de      	lsls	r6, r3, #31
 800d0c4:	d508      	bpl.n	800d0d8 <_printf_i+0x148>
 800d0c6:	6923      	ldr	r3, [r4, #16]
 800d0c8:	6861      	ldr	r1, [r4, #4]
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	bfde      	ittt	le
 800d0ce:	2330      	movle	r3, #48	; 0x30
 800d0d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0d8:	1b52      	subs	r2, r2, r5
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	f8cd a000 	str.w	sl, [sp]
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	aa03      	add	r2, sp, #12
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f7ff fee4 	bl	800ceb4 <_printf_common>
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d14a      	bne.n	800d186 <_printf_i+0x1f6>
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	b004      	add	sp, #16
 800d0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	f043 0320 	orr.w	r3, r3, #32
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	4833      	ldr	r0, [pc, #204]	; (800d1d0 <_printf_i+0x240>)
 800d104:	2778      	movs	r7, #120	; 0x78
 800d106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	6829      	ldr	r1, [r5, #0]
 800d10e:	061f      	lsls	r7, r3, #24
 800d110:	f851 6b04 	ldr.w	r6, [r1], #4
 800d114:	d402      	bmi.n	800d11c <_printf_i+0x18c>
 800d116:	065f      	lsls	r7, r3, #25
 800d118:	bf48      	it	mi
 800d11a:	b2b6      	uxthmi	r6, r6
 800d11c:	07df      	lsls	r7, r3, #31
 800d11e:	bf48      	it	mi
 800d120:	f043 0320 	orrmi.w	r3, r3, #32
 800d124:	6029      	str	r1, [r5, #0]
 800d126:	bf48      	it	mi
 800d128:	6023      	strmi	r3, [r4, #0]
 800d12a:	b91e      	cbnz	r6, 800d134 <_printf_i+0x1a4>
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	f023 0320 	bic.w	r3, r3, #32
 800d132:	6023      	str	r3, [r4, #0]
 800d134:	2310      	movs	r3, #16
 800d136:	e7a7      	b.n	800d088 <_printf_i+0xf8>
 800d138:	4824      	ldr	r0, [pc, #144]	; (800d1cc <_printf_i+0x23c>)
 800d13a:	e7e4      	b.n	800d106 <_printf_i+0x176>
 800d13c:	4615      	mov	r5, r2
 800d13e:	e7bd      	b.n	800d0bc <_printf_i+0x12c>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	6826      	ldr	r6, [r4, #0]
 800d144:	6961      	ldr	r1, [r4, #20]
 800d146:	1d18      	adds	r0, r3, #4
 800d148:	6028      	str	r0, [r5, #0]
 800d14a:	0635      	lsls	r5, r6, #24
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	d501      	bpl.n	800d154 <_printf_i+0x1c4>
 800d150:	6019      	str	r1, [r3, #0]
 800d152:	e002      	b.n	800d15a <_printf_i+0x1ca>
 800d154:	0670      	lsls	r0, r6, #25
 800d156:	d5fb      	bpl.n	800d150 <_printf_i+0x1c0>
 800d158:	8019      	strh	r1, [r3, #0]
 800d15a:	2300      	movs	r3, #0
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	4615      	mov	r5, r2
 800d160:	e7bc      	b.n	800d0dc <_printf_i+0x14c>
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	1d1a      	adds	r2, r3, #4
 800d166:	602a      	str	r2, [r5, #0]
 800d168:	681d      	ldr	r5, [r3, #0]
 800d16a:	6862      	ldr	r2, [r4, #4]
 800d16c:	2100      	movs	r1, #0
 800d16e:	4628      	mov	r0, r5
 800d170:	f7f3 f82e 	bl	80001d0 <memchr>
 800d174:	b108      	cbz	r0, 800d17a <_printf_i+0x1ea>
 800d176:	1b40      	subs	r0, r0, r5
 800d178:	6060      	str	r0, [r4, #4]
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	2300      	movs	r3, #0
 800d180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d184:	e7aa      	b.n	800d0dc <_printf_i+0x14c>
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	462a      	mov	r2, r5
 800d18a:	4649      	mov	r1, r9
 800d18c:	4640      	mov	r0, r8
 800d18e:	47d0      	blx	sl
 800d190:	3001      	adds	r0, #1
 800d192:	d0ad      	beq.n	800d0f0 <_printf_i+0x160>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	079b      	lsls	r3, r3, #30
 800d198:	d413      	bmi.n	800d1c2 <_printf_i+0x232>
 800d19a:	68e0      	ldr	r0, [r4, #12]
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	4298      	cmp	r0, r3
 800d1a0:	bfb8      	it	lt
 800d1a2:	4618      	movlt	r0, r3
 800d1a4:	e7a6      	b.n	800d0f4 <_printf_i+0x164>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	47d0      	blx	sl
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d09d      	beq.n	800d0f0 <_printf_i+0x160>
 800d1b4:	3501      	adds	r5, #1
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	9903      	ldr	r1, [sp, #12]
 800d1ba:	1a5b      	subs	r3, r3, r1
 800d1bc:	42ab      	cmp	r3, r5
 800d1be:	dcf2      	bgt.n	800d1a6 <_printf_i+0x216>
 800d1c0:	e7eb      	b.n	800d19a <_printf_i+0x20a>
 800d1c2:	2500      	movs	r5, #0
 800d1c4:	f104 0619 	add.w	r6, r4, #25
 800d1c8:	e7f5      	b.n	800d1b6 <_printf_i+0x226>
 800d1ca:	bf00      	nop
 800d1cc:	08010262 	.word	0x08010262
 800d1d0:	08010273 	.word	0x08010273

0800d1d4 <std>:
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	b510      	push	{r4, lr}
 800d1d8:	4604      	mov	r4, r0
 800d1da:	e9c0 3300 	strd	r3, r3, [r0]
 800d1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1e2:	6083      	str	r3, [r0, #8]
 800d1e4:	8181      	strh	r1, [r0, #12]
 800d1e6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1e8:	81c2      	strh	r2, [r0, #14]
 800d1ea:	6183      	str	r3, [r0, #24]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	2208      	movs	r2, #8
 800d1f0:	305c      	adds	r0, #92	; 0x5c
 800d1f2:	f000 f902 	bl	800d3fa <memset>
 800d1f6:	4b05      	ldr	r3, [pc, #20]	; (800d20c <std+0x38>)
 800d1f8:	6263      	str	r3, [r4, #36]	; 0x24
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <std+0x3c>)
 800d1fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1fe:	4b05      	ldr	r3, [pc, #20]	; (800d214 <std+0x40>)
 800d200:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d202:	4b05      	ldr	r3, [pc, #20]	; (800d218 <std+0x44>)
 800d204:	6224      	str	r4, [r4, #32]
 800d206:	6323      	str	r3, [r4, #48]	; 0x30
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	bf00      	nop
 800d20c:	0800d375 	.word	0x0800d375
 800d210:	0800d397 	.word	0x0800d397
 800d214:	0800d3cf 	.word	0x0800d3cf
 800d218:	0800d3f3 	.word	0x0800d3f3

0800d21c <stdio_exit_handler>:
 800d21c:	4a02      	ldr	r2, [pc, #8]	; (800d228 <stdio_exit_handler+0xc>)
 800d21e:	4903      	ldr	r1, [pc, #12]	; (800d22c <stdio_exit_handler+0x10>)
 800d220:	4803      	ldr	r0, [pc, #12]	; (800d230 <stdio_exit_handler+0x14>)
 800d222:	f000 b869 	b.w	800d2f8 <_fwalk_sglue>
 800d226:	bf00      	nop
 800d228:	20000010 	.word	0x20000010
 800d22c:	0800f919 	.word	0x0800f919
 800d230:	20000188 	.word	0x20000188

0800d234 <cleanup_stdio>:
 800d234:	6841      	ldr	r1, [r0, #4]
 800d236:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <cleanup_stdio+0x34>)
 800d238:	4299      	cmp	r1, r3
 800d23a:	b510      	push	{r4, lr}
 800d23c:	4604      	mov	r4, r0
 800d23e:	d001      	beq.n	800d244 <cleanup_stdio+0x10>
 800d240:	f002 fb6a 	bl	800f918 <_fflush_r>
 800d244:	68a1      	ldr	r1, [r4, #8]
 800d246:	4b09      	ldr	r3, [pc, #36]	; (800d26c <cleanup_stdio+0x38>)
 800d248:	4299      	cmp	r1, r3
 800d24a:	d002      	beq.n	800d252 <cleanup_stdio+0x1e>
 800d24c:	4620      	mov	r0, r4
 800d24e:	f002 fb63 	bl	800f918 <_fflush_r>
 800d252:	68e1      	ldr	r1, [r4, #12]
 800d254:	4b06      	ldr	r3, [pc, #24]	; (800d270 <cleanup_stdio+0x3c>)
 800d256:	4299      	cmp	r1, r3
 800d258:	d004      	beq.n	800d264 <cleanup_stdio+0x30>
 800d25a:	4620      	mov	r0, r4
 800d25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d260:	f002 bb5a 	b.w	800f918 <_fflush_r>
 800d264:	bd10      	pop	{r4, pc}
 800d266:	bf00      	nop
 800d268:	20003040 	.word	0x20003040
 800d26c:	200030a8 	.word	0x200030a8
 800d270:	20003110 	.word	0x20003110

0800d274 <global_stdio_init.part.0>:
 800d274:	b510      	push	{r4, lr}
 800d276:	4b0b      	ldr	r3, [pc, #44]	; (800d2a4 <global_stdio_init.part.0+0x30>)
 800d278:	4c0b      	ldr	r4, [pc, #44]	; (800d2a8 <global_stdio_init.part.0+0x34>)
 800d27a:	4a0c      	ldr	r2, [pc, #48]	; (800d2ac <global_stdio_init.part.0+0x38>)
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	4620      	mov	r0, r4
 800d280:	2200      	movs	r2, #0
 800d282:	2104      	movs	r1, #4
 800d284:	f7ff ffa6 	bl	800d1d4 <std>
 800d288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d28c:	2201      	movs	r2, #1
 800d28e:	2109      	movs	r1, #9
 800d290:	f7ff ffa0 	bl	800d1d4 <std>
 800d294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d298:	2202      	movs	r2, #2
 800d29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d29e:	2112      	movs	r1, #18
 800d2a0:	f7ff bf98 	b.w	800d1d4 <std>
 800d2a4:	20003178 	.word	0x20003178
 800d2a8:	20003040 	.word	0x20003040
 800d2ac:	0800d21d 	.word	0x0800d21d

0800d2b0 <__sfp_lock_acquire>:
 800d2b0:	4801      	ldr	r0, [pc, #4]	; (800d2b8 <__sfp_lock_acquire+0x8>)
 800d2b2:	f000 b99d 	b.w	800d5f0 <__retarget_lock_acquire_recursive>
 800d2b6:	bf00      	nop
 800d2b8:	20003181 	.word	0x20003181

0800d2bc <__sfp_lock_release>:
 800d2bc:	4801      	ldr	r0, [pc, #4]	; (800d2c4 <__sfp_lock_release+0x8>)
 800d2be:	f000 b998 	b.w	800d5f2 <__retarget_lock_release_recursive>
 800d2c2:	bf00      	nop
 800d2c4:	20003181 	.word	0x20003181

0800d2c8 <__sinit>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	f7ff fff0 	bl	800d2b0 <__sfp_lock_acquire>
 800d2d0:	6a23      	ldr	r3, [r4, #32]
 800d2d2:	b11b      	cbz	r3, 800d2dc <__sinit+0x14>
 800d2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2d8:	f7ff bff0 	b.w	800d2bc <__sfp_lock_release>
 800d2dc:	4b04      	ldr	r3, [pc, #16]	; (800d2f0 <__sinit+0x28>)
 800d2de:	6223      	str	r3, [r4, #32]
 800d2e0:	4b04      	ldr	r3, [pc, #16]	; (800d2f4 <__sinit+0x2c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1f5      	bne.n	800d2d4 <__sinit+0xc>
 800d2e8:	f7ff ffc4 	bl	800d274 <global_stdio_init.part.0>
 800d2ec:	e7f2      	b.n	800d2d4 <__sinit+0xc>
 800d2ee:	bf00      	nop
 800d2f0:	0800d235 	.word	0x0800d235
 800d2f4:	20003178 	.word	0x20003178

0800d2f8 <_fwalk_sglue>:
 800d2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2fc:	4607      	mov	r7, r0
 800d2fe:	4688      	mov	r8, r1
 800d300:	4614      	mov	r4, r2
 800d302:	2600      	movs	r6, #0
 800d304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d308:	f1b9 0901 	subs.w	r9, r9, #1
 800d30c:	d505      	bpl.n	800d31a <_fwalk_sglue+0x22>
 800d30e:	6824      	ldr	r4, [r4, #0]
 800d310:	2c00      	cmp	r4, #0
 800d312:	d1f7      	bne.n	800d304 <_fwalk_sglue+0xc>
 800d314:	4630      	mov	r0, r6
 800d316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d31a:	89ab      	ldrh	r3, [r5, #12]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d907      	bls.n	800d330 <_fwalk_sglue+0x38>
 800d320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d324:	3301      	adds	r3, #1
 800d326:	d003      	beq.n	800d330 <_fwalk_sglue+0x38>
 800d328:	4629      	mov	r1, r5
 800d32a:	4638      	mov	r0, r7
 800d32c:	47c0      	blx	r8
 800d32e:	4306      	orrs	r6, r0
 800d330:	3568      	adds	r5, #104	; 0x68
 800d332:	e7e9      	b.n	800d308 <_fwalk_sglue+0x10>

0800d334 <siprintf>:
 800d334:	b40e      	push	{r1, r2, r3}
 800d336:	b500      	push	{lr}
 800d338:	b09c      	sub	sp, #112	; 0x70
 800d33a:	ab1d      	add	r3, sp, #116	; 0x74
 800d33c:	9002      	str	r0, [sp, #8]
 800d33e:	9006      	str	r0, [sp, #24]
 800d340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d344:	4809      	ldr	r0, [pc, #36]	; (800d36c <siprintf+0x38>)
 800d346:	9107      	str	r1, [sp, #28]
 800d348:	9104      	str	r1, [sp, #16]
 800d34a:	4909      	ldr	r1, [pc, #36]	; (800d370 <siprintf+0x3c>)
 800d34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d350:	9105      	str	r1, [sp, #20]
 800d352:	6800      	ldr	r0, [r0, #0]
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	a902      	add	r1, sp, #8
 800d358:	f002 f95a 	bl	800f610 <_svfiprintf_r>
 800d35c:	9b02      	ldr	r3, [sp, #8]
 800d35e:	2200      	movs	r2, #0
 800d360:	701a      	strb	r2, [r3, #0]
 800d362:	b01c      	add	sp, #112	; 0x70
 800d364:	f85d eb04 	ldr.w	lr, [sp], #4
 800d368:	b003      	add	sp, #12
 800d36a:	4770      	bx	lr
 800d36c:	200001d4 	.word	0x200001d4
 800d370:	ffff0208 	.word	0xffff0208

0800d374 <__sread>:
 800d374:	b510      	push	{r4, lr}
 800d376:	460c      	mov	r4, r1
 800d378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37c:	f000 f8ea 	bl	800d554 <_read_r>
 800d380:	2800      	cmp	r0, #0
 800d382:	bfab      	itete	ge
 800d384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d386:	89a3      	ldrhlt	r3, [r4, #12]
 800d388:	181b      	addge	r3, r3, r0
 800d38a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d38e:	bfac      	ite	ge
 800d390:	6563      	strge	r3, [r4, #84]	; 0x54
 800d392:	81a3      	strhlt	r3, [r4, #12]
 800d394:	bd10      	pop	{r4, pc}

0800d396 <__swrite>:
 800d396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39a:	461f      	mov	r7, r3
 800d39c:	898b      	ldrh	r3, [r1, #12]
 800d39e:	05db      	lsls	r3, r3, #23
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	4616      	mov	r6, r2
 800d3a6:	d505      	bpl.n	800d3b4 <__swrite+0x1e>
 800d3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f000 f8be 	bl	800d530 <_lseek_r>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3be:	81a3      	strh	r3, [r4, #12]
 800d3c0:	4632      	mov	r2, r6
 800d3c2:	463b      	mov	r3, r7
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ca:	f000 b8d5 	b.w	800d578 <_write_r>

0800d3ce <__sseek>:
 800d3ce:	b510      	push	{r4, lr}
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d6:	f000 f8ab 	bl	800d530 <_lseek_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	bf15      	itete	ne
 800d3e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3ea:	81a3      	strheq	r3, [r4, #12]
 800d3ec:	bf18      	it	ne
 800d3ee:	81a3      	strhne	r3, [r4, #12]
 800d3f0:	bd10      	pop	{r4, pc}

0800d3f2 <__sclose>:
 800d3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f6:	f000 b835 	b.w	800d464 <_close_r>

0800d3fa <memset>:
 800d3fa:	4402      	add	r2, r0
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d100      	bne.n	800d404 <memset+0xa>
 800d402:	4770      	bx	lr
 800d404:	f803 1b01 	strb.w	r1, [r3], #1
 800d408:	e7f9      	b.n	800d3fe <memset+0x4>

0800d40a <strncmp>:
 800d40a:	b510      	push	{r4, lr}
 800d40c:	b16a      	cbz	r2, 800d42a <strncmp+0x20>
 800d40e:	3901      	subs	r1, #1
 800d410:	1884      	adds	r4, r0, r2
 800d412:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d416:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d103      	bne.n	800d426 <strncmp+0x1c>
 800d41e:	42a0      	cmp	r0, r4
 800d420:	d001      	beq.n	800d426 <strncmp+0x1c>
 800d422:	2a00      	cmp	r2, #0
 800d424:	d1f5      	bne.n	800d412 <strncmp+0x8>
 800d426:	1ad0      	subs	r0, r2, r3
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	4610      	mov	r0, r2
 800d42c:	e7fc      	b.n	800d428 <strncmp+0x1e>

0800d42e <strstr>:
 800d42e:	780a      	ldrb	r2, [r1, #0]
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	b96a      	cbnz	r2, 800d450 <strstr+0x22>
 800d434:	bd70      	pop	{r4, r5, r6, pc}
 800d436:	429a      	cmp	r2, r3
 800d438:	d109      	bne.n	800d44e <strstr+0x20>
 800d43a:	460c      	mov	r4, r1
 800d43c:	4605      	mov	r5, r0
 800d43e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0f6      	beq.n	800d434 <strstr+0x6>
 800d446:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d44a:	429e      	cmp	r6, r3
 800d44c:	d0f7      	beq.n	800d43e <strstr+0x10>
 800d44e:	3001      	adds	r0, #1
 800d450:	7803      	ldrb	r3, [r0, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1ef      	bne.n	800d436 <strstr+0x8>
 800d456:	4618      	mov	r0, r3
 800d458:	e7ec      	b.n	800d434 <strstr+0x6>
	...

0800d45c <_localeconv_r>:
 800d45c:	4800      	ldr	r0, [pc, #0]	; (800d460 <_localeconv_r+0x4>)
 800d45e:	4770      	bx	lr
 800d460:	2000010c 	.word	0x2000010c

0800d464 <_close_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4d06      	ldr	r5, [pc, #24]	; (800d480 <_close_r+0x1c>)
 800d468:	2300      	movs	r3, #0
 800d46a:	4604      	mov	r4, r0
 800d46c:	4608      	mov	r0, r1
 800d46e:	602b      	str	r3, [r5, #0]
 800d470:	f7f4 ff65 	bl	800233e <_close>
 800d474:	1c43      	adds	r3, r0, #1
 800d476:	d102      	bne.n	800d47e <_close_r+0x1a>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	b103      	cbz	r3, 800d47e <_close_r+0x1a>
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	bd38      	pop	{r3, r4, r5, pc}
 800d480:	2000317c 	.word	0x2000317c

0800d484 <_reclaim_reent>:
 800d484:	4b29      	ldr	r3, [pc, #164]	; (800d52c <_reclaim_reent+0xa8>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4283      	cmp	r3, r0
 800d48a:	b570      	push	{r4, r5, r6, lr}
 800d48c:	4604      	mov	r4, r0
 800d48e:	d04b      	beq.n	800d528 <_reclaim_reent+0xa4>
 800d490:	69c3      	ldr	r3, [r0, #28]
 800d492:	b143      	cbz	r3, 800d4a6 <_reclaim_reent+0x22>
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d144      	bne.n	800d524 <_reclaim_reent+0xa0>
 800d49a:	69e3      	ldr	r3, [r4, #28]
 800d49c:	6819      	ldr	r1, [r3, #0]
 800d49e:	b111      	cbz	r1, 800d4a6 <_reclaim_reent+0x22>
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f000 ff37 	bl	800e314 <_free_r>
 800d4a6:	6961      	ldr	r1, [r4, #20]
 800d4a8:	b111      	cbz	r1, 800d4b0 <_reclaim_reent+0x2c>
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 ff32 	bl	800e314 <_free_r>
 800d4b0:	69e1      	ldr	r1, [r4, #28]
 800d4b2:	b111      	cbz	r1, 800d4ba <_reclaim_reent+0x36>
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 ff2d 	bl	800e314 <_free_r>
 800d4ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d4bc:	b111      	cbz	r1, 800d4c4 <_reclaim_reent+0x40>
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 ff28 	bl	800e314 <_free_r>
 800d4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4c6:	b111      	cbz	r1, 800d4ce <_reclaim_reent+0x4a>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 ff23 	bl	800e314 <_free_r>
 800d4ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d4d0:	b111      	cbz	r1, 800d4d8 <_reclaim_reent+0x54>
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 ff1e 	bl	800e314 <_free_r>
 800d4d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d4da:	b111      	cbz	r1, 800d4e2 <_reclaim_reent+0x5e>
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 ff19 	bl	800e314 <_free_r>
 800d4e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d4e4:	b111      	cbz	r1, 800d4ec <_reclaim_reent+0x68>
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 ff14 	bl	800e314 <_free_r>
 800d4ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d4ee:	b111      	cbz	r1, 800d4f6 <_reclaim_reent+0x72>
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 ff0f 	bl	800e314 <_free_r>
 800d4f6:	6a23      	ldr	r3, [r4, #32]
 800d4f8:	b1b3      	cbz	r3, 800d528 <_reclaim_reent+0xa4>
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d500:	4718      	bx	r3
 800d502:	5949      	ldr	r1, [r1, r5]
 800d504:	b941      	cbnz	r1, 800d518 <_reclaim_reent+0x94>
 800d506:	3504      	adds	r5, #4
 800d508:	69e3      	ldr	r3, [r4, #28]
 800d50a:	2d80      	cmp	r5, #128	; 0x80
 800d50c:	68d9      	ldr	r1, [r3, #12]
 800d50e:	d1f8      	bne.n	800d502 <_reclaim_reent+0x7e>
 800d510:	4620      	mov	r0, r4
 800d512:	f000 feff 	bl	800e314 <_free_r>
 800d516:	e7c0      	b.n	800d49a <_reclaim_reent+0x16>
 800d518:	680e      	ldr	r6, [r1, #0]
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 fefa 	bl	800e314 <_free_r>
 800d520:	4631      	mov	r1, r6
 800d522:	e7ef      	b.n	800d504 <_reclaim_reent+0x80>
 800d524:	2500      	movs	r5, #0
 800d526:	e7ef      	b.n	800d508 <_reclaim_reent+0x84>
 800d528:	bd70      	pop	{r4, r5, r6, pc}
 800d52a:	bf00      	nop
 800d52c:	200001d4 	.word	0x200001d4

0800d530 <_lseek_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	4d07      	ldr	r5, [pc, #28]	; (800d550 <_lseek_r+0x20>)
 800d534:	4604      	mov	r4, r0
 800d536:	4608      	mov	r0, r1
 800d538:	4611      	mov	r1, r2
 800d53a:	2200      	movs	r2, #0
 800d53c:	602a      	str	r2, [r5, #0]
 800d53e:	461a      	mov	r2, r3
 800d540:	f7f4 ff24 	bl	800238c <_lseek>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_lseek_r+0x1e>
 800d548:	682b      	ldr	r3, [r5, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_lseek_r+0x1e>
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	2000317c 	.word	0x2000317c

0800d554 <_read_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d07      	ldr	r5, [pc, #28]	; (800d574 <_read_r+0x20>)
 800d558:	4604      	mov	r4, r0
 800d55a:	4608      	mov	r0, r1
 800d55c:	4611      	mov	r1, r2
 800d55e:	2200      	movs	r2, #0
 800d560:	602a      	str	r2, [r5, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	f7f4 feb2 	bl	80022cc <_read>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_read_r+0x1e>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_read_r+0x1e>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	2000317c 	.word	0x2000317c

0800d578 <_write_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4d07      	ldr	r5, [pc, #28]	; (800d598 <_write_r+0x20>)
 800d57c:	4604      	mov	r4, r0
 800d57e:	4608      	mov	r0, r1
 800d580:	4611      	mov	r1, r2
 800d582:	2200      	movs	r2, #0
 800d584:	602a      	str	r2, [r5, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	f7f4 febd 	bl	8002306 <_write>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_write_r+0x1e>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_write_r+0x1e>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	2000317c 	.word	0x2000317c

0800d59c <__errno>:
 800d59c:	4b01      	ldr	r3, [pc, #4]	; (800d5a4 <__errno+0x8>)
 800d59e:	6818      	ldr	r0, [r3, #0]
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	200001d4 	.word	0x200001d4

0800d5a8 <__libc_init_array>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4d0d      	ldr	r5, [pc, #52]	; (800d5e0 <__libc_init_array+0x38>)
 800d5ac:	4c0d      	ldr	r4, [pc, #52]	; (800d5e4 <__libc_init_array+0x3c>)
 800d5ae:	1b64      	subs	r4, r4, r5
 800d5b0:	10a4      	asrs	r4, r4, #2
 800d5b2:	2600      	movs	r6, #0
 800d5b4:	42a6      	cmp	r6, r4
 800d5b6:	d109      	bne.n	800d5cc <__libc_init_array+0x24>
 800d5b8:	4d0b      	ldr	r5, [pc, #44]	; (800d5e8 <__libc_init_array+0x40>)
 800d5ba:	4c0c      	ldr	r4, [pc, #48]	; (800d5ec <__libc_init_array+0x44>)
 800d5bc:	f002 fd24 	bl	8010008 <_init>
 800d5c0:	1b64      	subs	r4, r4, r5
 800d5c2:	10a4      	asrs	r4, r4, #2
 800d5c4:	2600      	movs	r6, #0
 800d5c6:	42a6      	cmp	r6, r4
 800d5c8:	d105      	bne.n	800d5d6 <__libc_init_array+0x2e>
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5d0:	4798      	blx	r3
 800d5d2:	3601      	adds	r6, #1
 800d5d4:	e7ee      	b.n	800d5b4 <__libc_init_array+0xc>
 800d5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5da:	4798      	blx	r3
 800d5dc:	3601      	adds	r6, #1
 800d5de:	e7f2      	b.n	800d5c6 <__libc_init_array+0x1e>
 800d5e0:	0801062c 	.word	0x0801062c
 800d5e4:	0801062c 	.word	0x0801062c
 800d5e8:	0801062c 	.word	0x0801062c
 800d5ec:	08010630 	.word	0x08010630

0800d5f0 <__retarget_lock_acquire_recursive>:
 800d5f0:	4770      	bx	lr

0800d5f2 <__retarget_lock_release_recursive>:
 800d5f2:	4770      	bx	lr

0800d5f4 <memcpy>:
 800d5f4:	440a      	add	r2, r1
 800d5f6:	4291      	cmp	r1, r2
 800d5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5fc:	d100      	bne.n	800d600 <memcpy+0xc>
 800d5fe:	4770      	bx	lr
 800d600:	b510      	push	{r4, lr}
 800d602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d60a:	4291      	cmp	r1, r2
 800d60c:	d1f9      	bne.n	800d602 <memcpy+0xe>
 800d60e:	bd10      	pop	{r4, pc}

0800d610 <nan>:
 800d610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d618 <nan+0x8>
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	00000000 	.word	0x00000000
 800d61c:	7ff80000 	.word	0x7ff80000

0800d620 <quorem>:
 800d620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	6903      	ldr	r3, [r0, #16]
 800d626:	690c      	ldr	r4, [r1, #16]
 800d628:	42a3      	cmp	r3, r4
 800d62a:	4607      	mov	r7, r0
 800d62c:	db7e      	blt.n	800d72c <quorem+0x10c>
 800d62e:	3c01      	subs	r4, #1
 800d630:	f101 0814 	add.w	r8, r1, #20
 800d634:	f100 0514 	add.w	r5, r0, #20
 800d638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d63c:	9301      	str	r3, [sp, #4]
 800d63e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d646:	3301      	adds	r3, #1
 800d648:	429a      	cmp	r2, r3
 800d64a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d64e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d652:	fbb2 f6f3 	udiv	r6, r2, r3
 800d656:	d331      	bcc.n	800d6bc <quorem+0x9c>
 800d658:	f04f 0e00 	mov.w	lr, #0
 800d65c:	4640      	mov	r0, r8
 800d65e:	46ac      	mov	ip, r5
 800d660:	46f2      	mov	sl, lr
 800d662:	f850 2b04 	ldr.w	r2, [r0], #4
 800d666:	b293      	uxth	r3, r2
 800d668:	fb06 e303 	mla	r3, r6, r3, lr
 800d66c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d670:	0c1a      	lsrs	r2, r3, #16
 800d672:	b29b      	uxth	r3, r3
 800d674:	ebaa 0303 	sub.w	r3, sl, r3
 800d678:	f8dc a000 	ldr.w	sl, [ip]
 800d67c:	fa13 f38a 	uxtah	r3, r3, sl
 800d680:	fb06 220e 	mla	r2, r6, lr, r2
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d68c:	b292      	uxth	r2, r2
 800d68e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d692:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d696:	f8bd 3000 	ldrh.w	r3, [sp]
 800d69a:	4581      	cmp	r9, r0
 800d69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6a0:	f84c 3b04 	str.w	r3, [ip], #4
 800d6a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6a8:	d2db      	bcs.n	800d662 <quorem+0x42>
 800d6aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6ae:	b92b      	cbnz	r3, 800d6bc <quorem+0x9c>
 800d6b0:	9b01      	ldr	r3, [sp, #4]
 800d6b2:	3b04      	subs	r3, #4
 800d6b4:	429d      	cmp	r5, r3
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	d32c      	bcc.n	800d714 <quorem+0xf4>
 800d6ba:	613c      	str	r4, [r7, #16]
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f001 fd59 	bl	800f174 <__mcmp>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	db22      	blt.n	800d70c <quorem+0xec>
 800d6c6:	3601      	adds	r6, #1
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6d0:	f8d1 c000 	ldr.w	ip, [r1]
 800d6d4:	b293      	uxth	r3, r2
 800d6d6:	1ac3      	subs	r3, r0, r3
 800d6d8:	0c12      	lsrs	r2, r2, #16
 800d6da:	fa13 f38c 	uxtah	r3, r3, ip
 800d6de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d6e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6ec:	45c1      	cmp	r9, r8
 800d6ee:	f841 3b04 	str.w	r3, [r1], #4
 800d6f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6f6:	d2e9      	bcs.n	800d6cc <quorem+0xac>
 800d6f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d700:	b922      	cbnz	r2, 800d70c <quorem+0xec>
 800d702:	3b04      	subs	r3, #4
 800d704:	429d      	cmp	r5, r3
 800d706:	461a      	mov	r2, r3
 800d708:	d30a      	bcc.n	800d720 <quorem+0x100>
 800d70a:	613c      	str	r4, [r7, #16]
 800d70c:	4630      	mov	r0, r6
 800d70e:	b003      	add	sp, #12
 800d710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	3b04      	subs	r3, #4
 800d718:	2a00      	cmp	r2, #0
 800d71a:	d1ce      	bne.n	800d6ba <quorem+0x9a>
 800d71c:	3c01      	subs	r4, #1
 800d71e:	e7c9      	b.n	800d6b4 <quorem+0x94>
 800d720:	6812      	ldr	r2, [r2, #0]
 800d722:	3b04      	subs	r3, #4
 800d724:	2a00      	cmp	r2, #0
 800d726:	d1f0      	bne.n	800d70a <quorem+0xea>
 800d728:	3c01      	subs	r4, #1
 800d72a:	e7eb      	b.n	800d704 <quorem+0xe4>
 800d72c:	2000      	movs	r0, #0
 800d72e:	e7ee      	b.n	800d70e <quorem+0xee>

0800d730 <_dtoa_r>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	ed2d 8b04 	vpush	{d8-d9}
 800d738:	69c5      	ldr	r5, [r0, #28]
 800d73a:	b093      	sub	sp, #76	; 0x4c
 800d73c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d740:	ec57 6b10 	vmov	r6, r7, d0
 800d744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d748:	9107      	str	r1, [sp, #28]
 800d74a:	4604      	mov	r4, r0
 800d74c:	920a      	str	r2, [sp, #40]	; 0x28
 800d74e:	930d      	str	r3, [sp, #52]	; 0x34
 800d750:	b975      	cbnz	r5, 800d770 <_dtoa_r+0x40>
 800d752:	2010      	movs	r0, #16
 800d754:	f001 f982 	bl	800ea5c <malloc>
 800d758:	4602      	mov	r2, r0
 800d75a:	61e0      	str	r0, [r4, #28]
 800d75c:	b920      	cbnz	r0, 800d768 <_dtoa_r+0x38>
 800d75e:	4bae      	ldr	r3, [pc, #696]	; (800da18 <_dtoa_r+0x2e8>)
 800d760:	21ef      	movs	r1, #239	; 0xef
 800d762:	48ae      	ldr	r0, [pc, #696]	; (800da1c <_dtoa_r+0x2ec>)
 800d764:	f002 f92a 	bl	800f9bc <__assert_func>
 800d768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d76c:	6005      	str	r5, [r0, #0]
 800d76e:	60c5      	str	r5, [r0, #12]
 800d770:	69e3      	ldr	r3, [r4, #28]
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	b151      	cbz	r1, 800d78c <_dtoa_r+0x5c>
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	604a      	str	r2, [r1, #4]
 800d77a:	2301      	movs	r3, #1
 800d77c:	4093      	lsls	r3, r2
 800d77e:	608b      	str	r3, [r1, #8]
 800d780:	4620      	mov	r0, r4
 800d782:	f001 fa71 	bl	800ec68 <_Bfree>
 800d786:	69e3      	ldr	r3, [r4, #28]
 800d788:	2200      	movs	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]
 800d78c:	1e3b      	subs	r3, r7, #0
 800d78e:	bfbb      	ittet	lt
 800d790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d794:	9303      	strlt	r3, [sp, #12]
 800d796:	2300      	movge	r3, #0
 800d798:	2201      	movlt	r2, #1
 800d79a:	bfac      	ite	ge
 800d79c:	f8c8 3000 	strge.w	r3, [r8]
 800d7a0:	f8c8 2000 	strlt.w	r2, [r8]
 800d7a4:	4b9e      	ldr	r3, [pc, #632]	; (800da20 <_dtoa_r+0x2f0>)
 800d7a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d7aa:	ea33 0308 	bics.w	r3, r3, r8
 800d7ae:	d11b      	bne.n	800d7e8 <_dtoa_r+0xb8>
 800d7b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d7bc:	4333      	orrs	r3, r6
 800d7be:	f000 8593 	beq.w	800e2e8 <_dtoa_r+0xbb8>
 800d7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c4:	b963      	cbnz	r3, 800d7e0 <_dtoa_r+0xb0>
 800d7c6:	4b97      	ldr	r3, [pc, #604]	; (800da24 <_dtoa_r+0x2f4>)
 800d7c8:	e027      	b.n	800d81a <_dtoa_r+0xea>
 800d7ca:	4b97      	ldr	r3, [pc, #604]	; (800da28 <_dtoa_r+0x2f8>)
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	9800      	ldr	r0, [sp, #0]
 800d7d6:	b013      	add	sp, #76	; 0x4c
 800d7d8:	ecbd 8b04 	vpop	{d8-d9}
 800d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	4b90      	ldr	r3, [pc, #576]	; (800da24 <_dtoa_r+0x2f4>)
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	3303      	adds	r3, #3
 800d7e6:	e7f3      	b.n	800d7d0 <_dtoa_r+0xa0>
 800d7e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	ec51 0b17 	vmov	r0, r1, d7
 800d7f2:	eeb0 8a47 	vmov.f32	s16, s14
 800d7f6:	eef0 8a67 	vmov.f32	s17, s15
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f7f3 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800d800:	4681      	mov	r9, r0
 800d802:	b160      	cbz	r0, 800d81e <_dtoa_r+0xee>
 800d804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d806:	2301      	movs	r3, #1
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 8568 	beq.w	800e2e2 <_dtoa_r+0xbb2>
 800d812:	4b86      	ldr	r3, [pc, #536]	; (800da2c <_dtoa_r+0x2fc>)
 800d814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	3b01      	subs	r3, #1
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	e7da      	b.n	800d7d4 <_dtoa_r+0xa4>
 800d81e:	aa10      	add	r2, sp, #64	; 0x40
 800d820:	a911      	add	r1, sp, #68	; 0x44
 800d822:	4620      	mov	r0, r4
 800d824:	eeb0 0a48 	vmov.f32	s0, s16
 800d828:	eef0 0a68 	vmov.f32	s1, s17
 800d82c:	f001 fdb8 	bl	800f3a0 <__d2b>
 800d830:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d834:	4682      	mov	sl, r0
 800d836:	2d00      	cmp	r5, #0
 800d838:	d07f      	beq.n	800d93a <_dtoa_r+0x20a>
 800d83a:	ee18 3a90 	vmov	r3, s17
 800d83e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d842:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d846:	ec51 0b18 	vmov	r0, r1, d8
 800d84a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d84e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d852:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d856:	4619      	mov	r1, r3
 800d858:	2200      	movs	r2, #0
 800d85a:	4b75      	ldr	r3, [pc, #468]	; (800da30 <_dtoa_r+0x300>)
 800d85c:	f7f2 fd14 	bl	8000288 <__aeabi_dsub>
 800d860:	a367      	add	r3, pc, #412	; (adr r3, 800da00 <_dtoa_r+0x2d0>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fec7 	bl	80005f8 <__aeabi_dmul>
 800d86a:	a367      	add	r3, pc, #412	; (adr r3, 800da08 <_dtoa_r+0x2d8>)
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	f7f2 fd0c 	bl	800028c <__adddf3>
 800d874:	4606      	mov	r6, r0
 800d876:	4628      	mov	r0, r5
 800d878:	460f      	mov	r7, r1
 800d87a:	f7f2 fe53 	bl	8000524 <__aeabi_i2d>
 800d87e:	a364      	add	r3, pc, #400	; (adr r3, 800da10 <_dtoa_r+0x2e0>)
 800d880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4630      	mov	r0, r6
 800d88e:	4639      	mov	r1, r7
 800d890:	f7f2 fcfc 	bl	800028c <__adddf3>
 800d894:	4606      	mov	r6, r0
 800d896:	460f      	mov	r7, r1
 800d898:	f7f3 f95e 	bl	8000b58 <__aeabi_d2iz>
 800d89c:	2200      	movs	r2, #0
 800d89e:	4683      	mov	fp, r0
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f3 f919 	bl	8000adc <__aeabi_dcmplt>
 800d8aa:	b148      	cbz	r0, 800d8c0 <_dtoa_r+0x190>
 800d8ac:	4658      	mov	r0, fp
 800d8ae:	f7f2 fe39 	bl	8000524 <__aeabi_i2d>
 800d8b2:	4632      	mov	r2, r6
 800d8b4:	463b      	mov	r3, r7
 800d8b6:	f7f3 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ba:	b908      	cbnz	r0, 800d8c0 <_dtoa_r+0x190>
 800d8bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8c0:	f1bb 0f16 	cmp.w	fp, #22
 800d8c4:	d857      	bhi.n	800d976 <_dtoa_r+0x246>
 800d8c6:	4b5b      	ldr	r3, [pc, #364]	; (800da34 <_dtoa_r+0x304>)
 800d8c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	ec51 0b18 	vmov	r0, r1, d8
 800d8d4:	f7f3 f902 	bl	8000adc <__aeabi_dcmplt>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d04e      	beq.n	800d97a <_dtoa_r+0x24a>
 800d8dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	930c      	str	r3, [sp, #48]	; 0x30
 800d8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8e6:	1b5b      	subs	r3, r3, r5
 800d8e8:	1e5a      	subs	r2, r3, #1
 800d8ea:	bf45      	ittet	mi
 800d8ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800d8f0:	9305      	strmi	r3, [sp, #20]
 800d8f2:	2300      	movpl	r3, #0
 800d8f4:	2300      	movmi	r3, #0
 800d8f6:	9206      	str	r2, [sp, #24]
 800d8f8:	bf54      	ite	pl
 800d8fa:	9305      	strpl	r3, [sp, #20]
 800d8fc:	9306      	strmi	r3, [sp, #24]
 800d8fe:	f1bb 0f00 	cmp.w	fp, #0
 800d902:	db3c      	blt.n	800d97e <_dtoa_r+0x24e>
 800d904:	9b06      	ldr	r3, [sp, #24]
 800d906:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d90a:	445b      	add	r3, fp
 800d90c:	9306      	str	r3, [sp, #24]
 800d90e:	2300      	movs	r3, #0
 800d910:	9308      	str	r3, [sp, #32]
 800d912:	9b07      	ldr	r3, [sp, #28]
 800d914:	2b09      	cmp	r3, #9
 800d916:	d868      	bhi.n	800d9ea <_dtoa_r+0x2ba>
 800d918:	2b05      	cmp	r3, #5
 800d91a:	bfc4      	itt	gt
 800d91c:	3b04      	subgt	r3, #4
 800d91e:	9307      	strgt	r3, [sp, #28]
 800d920:	9b07      	ldr	r3, [sp, #28]
 800d922:	f1a3 0302 	sub.w	r3, r3, #2
 800d926:	bfcc      	ite	gt
 800d928:	2500      	movgt	r5, #0
 800d92a:	2501      	movle	r5, #1
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	f200 8085 	bhi.w	800da3c <_dtoa_r+0x30c>
 800d932:	e8df f003 	tbb	[pc, r3]
 800d936:	3b2e      	.short	0x3b2e
 800d938:	5839      	.short	0x5839
 800d93a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d93e:	441d      	add	r5, r3
 800d940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d944:	2b20      	cmp	r3, #32
 800d946:	bfc1      	itttt	gt
 800d948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d94c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d950:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d954:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d958:	bfd6      	itet	le
 800d95a:	f1c3 0320 	rsble	r3, r3, #32
 800d95e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d962:	fa06 f003 	lslle.w	r0, r6, r3
 800d966:	f7f2 fdcd 	bl	8000504 <__aeabi_ui2d>
 800d96a:	2201      	movs	r2, #1
 800d96c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d970:	3d01      	subs	r5, #1
 800d972:	920e      	str	r2, [sp, #56]	; 0x38
 800d974:	e76f      	b.n	800d856 <_dtoa_r+0x126>
 800d976:	2301      	movs	r3, #1
 800d978:	e7b3      	b.n	800d8e2 <_dtoa_r+0x1b2>
 800d97a:	900c      	str	r0, [sp, #48]	; 0x30
 800d97c:	e7b2      	b.n	800d8e4 <_dtoa_r+0x1b4>
 800d97e:	9b05      	ldr	r3, [sp, #20]
 800d980:	eba3 030b 	sub.w	r3, r3, fp
 800d984:	9305      	str	r3, [sp, #20]
 800d986:	f1cb 0300 	rsb	r3, fp, #0
 800d98a:	9308      	str	r3, [sp, #32]
 800d98c:	2300      	movs	r3, #0
 800d98e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d990:	e7bf      	b.n	800d912 <_dtoa_r+0x1e2>
 800d992:	2300      	movs	r3, #0
 800d994:	9309      	str	r3, [sp, #36]	; 0x24
 800d996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dc52      	bgt.n	800da42 <_dtoa_r+0x312>
 800d99c:	2301      	movs	r3, #1
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	920a      	str	r2, [sp, #40]	; 0x28
 800d9a6:	e00b      	b.n	800d9c0 <_dtoa_r+0x290>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e7f3      	b.n	800d994 <_dtoa_r+0x264>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b2:	445b      	add	r3, fp
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	bfb8      	it	lt
 800d9be:	2301      	movlt	r3, #1
 800d9c0:	69e0      	ldr	r0, [r4, #28]
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	f102 0614 	add.w	r6, r2, #20
 800d9ca:	429e      	cmp	r6, r3
 800d9cc:	d93d      	bls.n	800da4a <_dtoa_r+0x31a>
 800d9ce:	6041      	str	r1, [r0, #4]
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f001 f909 	bl	800ebe8 <_Balloc>
 800d9d6:	9000      	str	r0, [sp, #0]
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d139      	bne.n	800da50 <_dtoa_r+0x320>
 800d9dc:	4b16      	ldr	r3, [pc, #88]	; (800da38 <_dtoa_r+0x308>)
 800d9de:	4602      	mov	r2, r0
 800d9e0:	f240 11af 	movw	r1, #431	; 0x1af
 800d9e4:	e6bd      	b.n	800d762 <_dtoa_r+0x32>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e7e1      	b.n	800d9ae <_dtoa_r+0x27e>
 800d9ea:	2501      	movs	r5, #1
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	9509      	str	r5, [sp, #36]	; 0x24
 800d9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	2312      	movs	r3, #18
 800d9fe:	e7d1      	b.n	800d9a4 <_dtoa_r+0x274>
 800da00:	636f4361 	.word	0x636f4361
 800da04:	3fd287a7 	.word	0x3fd287a7
 800da08:	8b60c8b3 	.word	0x8b60c8b3
 800da0c:	3fc68a28 	.word	0x3fc68a28
 800da10:	509f79fb 	.word	0x509f79fb
 800da14:	3fd34413 	.word	0x3fd34413
 800da18:	08010299 	.word	0x08010299
 800da1c:	080102b0 	.word	0x080102b0
 800da20:	7ff00000 	.word	0x7ff00000
 800da24:	08010295 	.word	0x08010295
 800da28:	0801028c 	.word	0x0801028c
 800da2c:	08010261 	.word	0x08010261
 800da30:	3ff80000 	.word	0x3ff80000
 800da34:	08010400 	.word	0x08010400
 800da38:	08010308 	.word	0x08010308
 800da3c:	2301      	movs	r3, #1
 800da3e:	9309      	str	r3, [sp, #36]	; 0x24
 800da40:	e7d7      	b.n	800d9f2 <_dtoa_r+0x2c2>
 800da42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	9304      	str	r3, [sp, #16]
 800da48:	e7ba      	b.n	800d9c0 <_dtoa_r+0x290>
 800da4a:	3101      	adds	r1, #1
 800da4c:	0052      	lsls	r2, r2, #1
 800da4e:	e7ba      	b.n	800d9c6 <_dtoa_r+0x296>
 800da50:	69e3      	ldr	r3, [r4, #28]
 800da52:	9a00      	ldr	r2, [sp, #0]
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	9b04      	ldr	r3, [sp, #16]
 800da58:	2b0e      	cmp	r3, #14
 800da5a:	f200 80a8 	bhi.w	800dbae <_dtoa_r+0x47e>
 800da5e:	2d00      	cmp	r5, #0
 800da60:	f000 80a5 	beq.w	800dbae <_dtoa_r+0x47e>
 800da64:	f1bb 0f00 	cmp.w	fp, #0
 800da68:	dd38      	ble.n	800dadc <_dtoa_r+0x3ac>
 800da6a:	4bc0      	ldr	r3, [pc, #768]	; (800dd6c <_dtoa_r+0x63c>)
 800da6c:	f00b 020f 	and.w	r2, fp, #15
 800da70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800da78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800da7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800da80:	d019      	beq.n	800dab6 <_dtoa_r+0x386>
 800da82:	4bbb      	ldr	r3, [pc, #748]	; (800dd70 <_dtoa_r+0x640>)
 800da84:	ec51 0b18 	vmov	r0, r1, d8
 800da88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da8c:	f7f2 fede 	bl	800084c <__aeabi_ddiv>
 800da90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da94:	f008 080f 	and.w	r8, r8, #15
 800da98:	2503      	movs	r5, #3
 800da9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dd70 <_dtoa_r+0x640>
 800da9e:	f1b8 0f00 	cmp.w	r8, #0
 800daa2:	d10a      	bne.n	800daba <_dtoa_r+0x38a>
 800daa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa8:	4632      	mov	r2, r6
 800daaa:	463b      	mov	r3, r7
 800daac:	f7f2 fece 	bl	800084c <__aeabi_ddiv>
 800dab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dab4:	e02b      	b.n	800db0e <_dtoa_r+0x3de>
 800dab6:	2502      	movs	r5, #2
 800dab8:	e7ef      	b.n	800da9a <_dtoa_r+0x36a>
 800daba:	f018 0f01 	tst.w	r8, #1
 800dabe:	d008      	beq.n	800dad2 <_dtoa_r+0x3a2>
 800dac0:	4630      	mov	r0, r6
 800dac2:	4639      	mov	r1, r7
 800dac4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dac8:	f7f2 fd96 	bl	80005f8 <__aeabi_dmul>
 800dacc:	3501      	adds	r5, #1
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dad6:	f109 0908 	add.w	r9, r9, #8
 800dada:	e7e0      	b.n	800da9e <_dtoa_r+0x36e>
 800dadc:	f000 809f 	beq.w	800dc1e <_dtoa_r+0x4ee>
 800dae0:	f1cb 0600 	rsb	r6, fp, #0
 800dae4:	4ba1      	ldr	r3, [pc, #644]	; (800dd6c <_dtoa_r+0x63c>)
 800dae6:	4fa2      	ldr	r7, [pc, #648]	; (800dd70 <_dtoa_r+0x640>)
 800dae8:	f006 020f 	and.w	r2, r6, #15
 800daec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	ec51 0b18 	vmov	r0, r1, d8
 800daf8:	f7f2 fd7e 	bl	80005f8 <__aeabi_dmul>
 800dafc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db00:	1136      	asrs	r6, r6, #4
 800db02:	2300      	movs	r3, #0
 800db04:	2502      	movs	r5, #2
 800db06:	2e00      	cmp	r6, #0
 800db08:	d17e      	bne.n	800dc08 <_dtoa_r+0x4d8>
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1d0      	bne.n	800dab0 <_dtoa_r+0x380>
 800db0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 8084 	beq.w	800dc22 <_dtoa_r+0x4f2>
 800db1a:	4b96      	ldr	r3, [pc, #600]	; (800dd74 <_dtoa_r+0x644>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	4640      	mov	r0, r8
 800db20:	4649      	mov	r1, r9
 800db22:	f7f2 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800db26:	2800      	cmp	r0, #0
 800db28:	d07b      	beq.n	800dc22 <_dtoa_r+0x4f2>
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d078      	beq.n	800dc22 <_dtoa_r+0x4f2>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	dd39      	ble.n	800dbaa <_dtoa_r+0x47a>
 800db36:	4b90      	ldr	r3, [pc, #576]	; (800dd78 <_dtoa_r+0x648>)
 800db38:	2200      	movs	r2, #0
 800db3a:	4640      	mov	r0, r8
 800db3c:	4649      	mov	r1, r9
 800db3e:	f7f2 fd5b 	bl	80005f8 <__aeabi_dmul>
 800db42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db46:	9e01      	ldr	r6, [sp, #4]
 800db48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800db4c:	3501      	adds	r5, #1
 800db4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800db52:	4628      	mov	r0, r5
 800db54:	f7f2 fce6 	bl	8000524 <__aeabi_i2d>
 800db58:	4642      	mov	r2, r8
 800db5a:	464b      	mov	r3, r9
 800db5c:	f7f2 fd4c 	bl	80005f8 <__aeabi_dmul>
 800db60:	4b86      	ldr	r3, [pc, #536]	; (800dd7c <_dtoa_r+0x64c>)
 800db62:	2200      	movs	r2, #0
 800db64:	f7f2 fb92 	bl	800028c <__adddf3>
 800db68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800db6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db70:	9303      	str	r3, [sp, #12]
 800db72:	2e00      	cmp	r6, #0
 800db74:	d158      	bne.n	800dc28 <_dtoa_r+0x4f8>
 800db76:	4b82      	ldr	r3, [pc, #520]	; (800dd80 <_dtoa_r+0x650>)
 800db78:	2200      	movs	r2, #0
 800db7a:	4640      	mov	r0, r8
 800db7c:	4649      	mov	r1, r9
 800db7e:	f7f2 fb83 	bl	8000288 <__aeabi_dsub>
 800db82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db86:	4680      	mov	r8, r0
 800db88:	4689      	mov	r9, r1
 800db8a:	f7f2 ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f040 8296 	bne.w	800e0c0 <_dtoa_r+0x990>
 800db94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800db98:	4640      	mov	r0, r8
 800db9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7f2 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f040 8289 	bne.w	800e0bc <_dtoa_r+0x98c>
 800dbaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dbae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f2c0 814e 	blt.w	800de52 <_dtoa_r+0x722>
 800dbb6:	f1bb 0f0e 	cmp.w	fp, #14
 800dbba:	f300 814a 	bgt.w	800de52 <_dtoa_r+0x722>
 800dbbe:	4b6b      	ldr	r3, [pc, #428]	; (800dd6c <_dtoa_r+0x63c>)
 800dbc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dbc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f280 80dc 	bge.w	800dd88 <_dtoa_r+0x658>
 800dbd0:	9b04      	ldr	r3, [sp, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f300 80d8 	bgt.w	800dd88 <_dtoa_r+0x658>
 800dbd8:	f040 826f 	bne.w	800e0ba <_dtoa_r+0x98a>
 800dbdc:	4b68      	ldr	r3, [pc, #416]	; (800dd80 <_dtoa_r+0x650>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbec:	f7f2 ff8a 	bl	8000b04 <__aeabi_dcmpge>
 800dbf0:	9e04      	ldr	r6, [sp, #16]
 800dbf2:	4637      	mov	r7, r6
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	f040 8245 	bne.w	800e084 <_dtoa_r+0x954>
 800dbfa:	9d00      	ldr	r5, [sp, #0]
 800dbfc:	2331      	movs	r3, #49	; 0x31
 800dbfe:	f805 3b01 	strb.w	r3, [r5], #1
 800dc02:	f10b 0b01 	add.w	fp, fp, #1
 800dc06:	e241      	b.n	800e08c <_dtoa_r+0x95c>
 800dc08:	07f2      	lsls	r2, r6, #31
 800dc0a:	d505      	bpl.n	800dc18 <_dtoa_r+0x4e8>
 800dc0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc10:	f7f2 fcf2 	bl	80005f8 <__aeabi_dmul>
 800dc14:	3501      	adds	r5, #1
 800dc16:	2301      	movs	r3, #1
 800dc18:	1076      	asrs	r6, r6, #1
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	e773      	b.n	800db06 <_dtoa_r+0x3d6>
 800dc1e:	2502      	movs	r5, #2
 800dc20:	e775      	b.n	800db0e <_dtoa_r+0x3de>
 800dc22:	9e04      	ldr	r6, [sp, #16]
 800dc24:	465f      	mov	r7, fp
 800dc26:	e792      	b.n	800db4e <_dtoa_r+0x41e>
 800dc28:	9900      	ldr	r1, [sp, #0]
 800dc2a:	4b50      	ldr	r3, [pc, #320]	; (800dd6c <_dtoa_r+0x63c>)
 800dc2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc30:	4431      	add	r1, r6
 800dc32:	9102      	str	r1, [sp, #8]
 800dc34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc36:	eeb0 9a47 	vmov.f32	s18, s14
 800dc3a:	eef0 9a67 	vmov.f32	s19, s15
 800dc3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc46:	2900      	cmp	r1, #0
 800dc48:	d044      	beq.n	800dcd4 <_dtoa_r+0x5a4>
 800dc4a:	494e      	ldr	r1, [pc, #312]	; (800dd84 <_dtoa_r+0x654>)
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f7f2 fdfd 	bl	800084c <__aeabi_ddiv>
 800dc52:	ec53 2b19 	vmov	r2, r3, d9
 800dc56:	f7f2 fb17 	bl	8000288 <__aeabi_dsub>
 800dc5a:	9d00      	ldr	r5, [sp, #0]
 800dc5c:	ec41 0b19 	vmov	d9, r0, r1
 800dc60:	4649      	mov	r1, r9
 800dc62:	4640      	mov	r0, r8
 800dc64:	f7f2 ff78 	bl	8000b58 <__aeabi_d2iz>
 800dc68:	4606      	mov	r6, r0
 800dc6a:	f7f2 fc5b 	bl	8000524 <__aeabi_i2d>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4640      	mov	r0, r8
 800dc74:	4649      	mov	r1, r9
 800dc76:	f7f2 fb07 	bl	8000288 <__aeabi_dsub>
 800dc7a:	3630      	adds	r6, #48	; 0x30
 800dc7c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc80:	ec53 2b19 	vmov	r2, r3, d9
 800dc84:	4680      	mov	r8, r0
 800dc86:	4689      	mov	r9, r1
 800dc88:	f7f2 ff28 	bl	8000adc <__aeabi_dcmplt>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d164      	bne.n	800dd5a <_dtoa_r+0x62a>
 800dc90:	4642      	mov	r2, r8
 800dc92:	464b      	mov	r3, r9
 800dc94:	4937      	ldr	r1, [pc, #220]	; (800dd74 <_dtoa_r+0x644>)
 800dc96:	2000      	movs	r0, #0
 800dc98:	f7f2 faf6 	bl	8000288 <__aeabi_dsub>
 800dc9c:	ec53 2b19 	vmov	r2, r3, d9
 800dca0:	f7f2 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	f040 80b6 	bne.w	800de16 <_dtoa_r+0x6e6>
 800dcaa:	9b02      	ldr	r3, [sp, #8]
 800dcac:	429d      	cmp	r5, r3
 800dcae:	f43f af7c 	beq.w	800dbaa <_dtoa_r+0x47a>
 800dcb2:	4b31      	ldr	r3, [pc, #196]	; (800dd78 <_dtoa_r+0x648>)
 800dcb4:	ec51 0b19 	vmov	r0, r1, d9
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f7f2 fc9d 	bl	80005f8 <__aeabi_dmul>
 800dcbe:	4b2e      	ldr	r3, [pc, #184]	; (800dd78 <_dtoa_r+0x648>)
 800dcc0:	ec41 0b19 	vmov	d9, r0, r1
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 fc95 	bl	80005f8 <__aeabi_dmul>
 800dcce:	4680      	mov	r8, r0
 800dcd0:	4689      	mov	r9, r1
 800dcd2:	e7c5      	b.n	800dc60 <_dtoa_r+0x530>
 800dcd4:	ec51 0b17 	vmov	r0, r1, d7
 800dcd8:	f7f2 fc8e 	bl	80005f8 <__aeabi_dmul>
 800dcdc:	9b02      	ldr	r3, [sp, #8]
 800dcde:	9d00      	ldr	r5, [sp, #0]
 800dce0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dce2:	ec41 0b19 	vmov	d9, r0, r1
 800dce6:	4649      	mov	r1, r9
 800dce8:	4640      	mov	r0, r8
 800dcea:	f7f2 ff35 	bl	8000b58 <__aeabi_d2iz>
 800dcee:	4606      	mov	r6, r0
 800dcf0:	f7f2 fc18 	bl	8000524 <__aeabi_i2d>
 800dcf4:	3630      	adds	r6, #48	; 0x30
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4640      	mov	r0, r8
 800dcfc:	4649      	mov	r1, r9
 800dcfe:	f7f2 fac3 	bl	8000288 <__aeabi_dsub>
 800dd02:	f805 6b01 	strb.w	r6, [r5], #1
 800dd06:	9b02      	ldr	r3, [sp, #8]
 800dd08:	429d      	cmp	r5, r3
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	f04f 0200 	mov.w	r2, #0
 800dd12:	d124      	bne.n	800dd5e <_dtoa_r+0x62e>
 800dd14:	4b1b      	ldr	r3, [pc, #108]	; (800dd84 <_dtoa_r+0x654>)
 800dd16:	ec51 0b19 	vmov	r0, r1, d9
 800dd1a:	f7f2 fab7 	bl	800028c <__adddf3>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	4640      	mov	r0, r8
 800dd24:	4649      	mov	r1, r9
 800dd26:	f7f2 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d173      	bne.n	800de16 <_dtoa_r+0x6e6>
 800dd2e:	ec53 2b19 	vmov	r2, r3, d9
 800dd32:	4914      	ldr	r1, [pc, #80]	; (800dd84 <_dtoa_r+0x654>)
 800dd34:	2000      	movs	r0, #0
 800dd36:	f7f2 faa7 	bl	8000288 <__aeabi_dsub>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4640      	mov	r0, r8
 800dd40:	4649      	mov	r1, r9
 800dd42:	f7f2 fecb 	bl	8000adc <__aeabi_dcmplt>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f43f af2f 	beq.w	800dbaa <_dtoa_r+0x47a>
 800dd4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd4e:	1e6b      	subs	r3, r5, #1
 800dd50:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd56:	2b30      	cmp	r3, #48	; 0x30
 800dd58:	d0f8      	beq.n	800dd4c <_dtoa_r+0x61c>
 800dd5a:	46bb      	mov	fp, r7
 800dd5c:	e04a      	b.n	800ddf4 <_dtoa_r+0x6c4>
 800dd5e:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <_dtoa_r+0x648>)
 800dd60:	f7f2 fc4a 	bl	80005f8 <__aeabi_dmul>
 800dd64:	4680      	mov	r8, r0
 800dd66:	4689      	mov	r9, r1
 800dd68:	e7bd      	b.n	800dce6 <_dtoa_r+0x5b6>
 800dd6a:	bf00      	nop
 800dd6c:	08010400 	.word	0x08010400
 800dd70:	080103d8 	.word	0x080103d8
 800dd74:	3ff00000 	.word	0x3ff00000
 800dd78:	40240000 	.word	0x40240000
 800dd7c:	401c0000 	.word	0x401c0000
 800dd80:	40140000 	.word	0x40140000
 800dd84:	3fe00000 	.word	0x3fe00000
 800dd88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd8c:	9d00      	ldr	r5, [sp, #0]
 800dd8e:	4642      	mov	r2, r8
 800dd90:	464b      	mov	r3, r9
 800dd92:	4630      	mov	r0, r6
 800dd94:	4639      	mov	r1, r7
 800dd96:	f7f2 fd59 	bl	800084c <__aeabi_ddiv>
 800dd9a:	f7f2 fedd 	bl	8000b58 <__aeabi_d2iz>
 800dd9e:	9001      	str	r0, [sp, #4]
 800dda0:	f7f2 fbc0 	bl	8000524 <__aeabi_i2d>
 800dda4:	4642      	mov	r2, r8
 800dda6:	464b      	mov	r3, r9
 800dda8:	f7f2 fc26 	bl	80005f8 <__aeabi_dmul>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	f7f2 fa68 	bl	8000288 <__aeabi_dsub>
 800ddb8:	9e01      	ldr	r6, [sp, #4]
 800ddba:	9f04      	ldr	r7, [sp, #16]
 800ddbc:	3630      	adds	r6, #48	; 0x30
 800ddbe:	f805 6b01 	strb.w	r6, [r5], #1
 800ddc2:	9e00      	ldr	r6, [sp, #0]
 800ddc4:	1bae      	subs	r6, r5, r6
 800ddc6:	42b7      	cmp	r7, r6
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	d134      	bne.n	800de38 <_dtoa_r+0x708>
 800ddce:	f7f2 fa5d 	bl	800028c <__adddf3>
 800ddd2:	4642      	mov	r2, r8
 800ddd4:	464b      	mov	r3, r9
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	f7f2 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 800ddde:	b9c8      	cbnz	r0, 800de14 <_dtoa_r+0x6e4>
 800dde0:	4642      	mov	r2, r8
 800dde2:	464b      	mov	r3, r9
 800dde4:	4630      	mov	r0, r6
 800dde6:	4639      	mov	r1, r7
 800dde8:	f7f2 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddec:	b110      	cbz	r0, 800ddf4 <_dtoa_r+0x6c4>
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	07db      	lsls	r3, r3, #31
 800ddf2:	d40f      	bmi.n	800de14 <_dtoa_r+0x6e4>
 800ddf4:	4651      	mov	r1, sl
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f000 ff36 	bl	800ec68 <_Bfree>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de00:	702b      	strb	r3, [r5, #0]
 800de02:	f10b 0301 	add.w	r3, fp, #1
 800de06:	6013      	str	r3, [r2, #0]
 800de08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f43f ace2 	beq.w	800d7d4 <_dtoa_r+0xa4>
 800de10:	601d      	str	r5, [r3, #0]
 800de12:	e4df      	b.n	800d7d4 <_dtoa_r+0xa4>
 800de14:	465f      	mov	r7, fp
 800de16:	462b      	mov	r3, r5
 800de18:	461d      	mov	r5, r3
 800de1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de1e:	2a39      	cmp	r2, #57	; 0x39
 800de20:	d106      	bne.n	800de30 <_dtoa_r+0x700>
 800de22:	9a00      	ldr	r2, [sp, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d1f7      	bne.n	800de18 <_dtoa_r+0x6e8>
 800de28:	9900      	ldr	r1, [sp, #0]
 800de2a:	2230      	movs	r2, #48	; 0x30
 800de2c:	3701      	adds	r7, #1
 800de2e:	700a      	strb	r2, [r1, #0]
 800de30:	781a      	ldrb	r2, [r3, #0]
 800de32:	3201      	adds	r2, #1
 800de34:	701a      	strb	r2, [r3, #0]
 800de36:	e790      	b.n	800dd5a <_dtoa_r+0x62a>
 800de38:	4ba3      	ldr	r3, [pc, #652]	; (800e0c8 <_dtoa_r+0x998>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	f7f2 fbdc 	bl	80005f8 <__aeabi_dmul>
 800de40:	2200      	movs	r2, #0
 800de42:	2300      	movs	r3, #0
 800de44:	4606      	mov	r6, r0
 800de46:	460f      	mov	r7, r1
 800de48:	f7f2 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d09e      	beq.n	800dd8e <_dtoa_r+0x65e>
 800de50:	e7d0      	b.n	800ddf4 <_dtoa_r+0x6c4>
 800de52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de54:	2a00      	cmp	r2, #0
 800de56:	f000 80ca 	beq.w	800dfee <_dtoa_r+0x8be>
 800de5a:	9a07      	ldr	r2, [sp, #28]
 800de5c:	2a01      	cmp	r2, #1
 800de5e:	f300 80ad 	bgt.w	800dfbc <_dtoa_r+0x88c>
 800de62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de64:	2a00      	cmp	r2, #0
 800de66:	f000 80a5 	beq.w	800dfb4 <_dtoa_r+0x884>
 800de6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de6e:	9e08      	ldr	r6, [sp, #32]
 800de70:	9d05      	ldr	r5, [sp, #20]
 800de72:	9a05      	ldr	r2, [sp, #20]
 800de74:	441a      	add	r2, r3
 800de76:	9205      	str	r2, [sp, #20]
 800de78:	9a06      	ldr	r2, [sp, #24]
 800de7a:	2101      	movs	r1, #1
 800de7c:	441a      	add	r2, r3
 800de7e:	4620      	mov	r0, r4
 800de80:	9206      	str	r2, [sp, #24]
 800de82:	f000 fff1 	bl	800ee68 <__i2b>
 800de86:	4607      	mov	r7, r0
 800de88:	b165      	cbz	r5, 800dea4 <_dtoa_r+0x774>
 800de8a:	9b06      	ldr	r3, [sp, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	dd09      	ble.n	800dea4 <_dtoa_r+0x774>
 800de90:	42ab      	cmp	r3, r5
 800de92:	9a05      	ldr	r2, [sp, #20]
 800de94:	bfa8      	it	ge
 800de96:	462b      	movge	r3, r5
 800de98:	1ad2      	subs	r2, r2, r3
 800de9a:	9205      	str	r2, [sp, #20]
 800de9c:	9a06      	ldr	r2, [sp, #24]
 800de9e:	1aed      	subs	r5, r5, r3
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	9306      	str	r3, [sp, #24]
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	b1f3      	cbz	r3, 800dee6 <_dtoa_r+0x7b6>
 800dea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 80a3 	beq.w	800dff6 <_dtoa_r+0x8c6>
 800deb0:	2e00      	cmp	r6, #0
 800deb2:	dd10      	ble.n	800ded6 <_dtoa_r+0x7a6>
 800deb4:	4639      	mov	r1, r7
 800deb6:	4632      	mov	r2, r6
 800deb8:	4620      	mov	r0, r4
 800deba:	f001 f895 	bl	800efe8 <__pow5mult>
 800debe:	4652      	mov	r2, sl
 800dec0:	4601      	mov	r1, r0
 800dec2:	4607      	mov	r7, r0
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 ffe5 	bl	800ee94 <__multiply>
 800deca:	4651      	mov	r1, sl
 800decc:	4680      	mov	r8, r0
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 feca 	bl	800ec68 <_Bfree>
 800ded4:	46c2      	mov	sl, r8
 800ded6:	9b08      	ldr	r3, [sp, #32]
 800ded8:	1b9a      	subs	r2, r3, r6
 800deda:	d004      	beq.n	800dee6 <_dtoa_r+0x7b6>
 800dedc:	4651      	mov	r1, sl
 800dede:	4620      	mov	r0, r4
 800dee0:	f001 f882 	bl	800efe8 <__pow5mult>
 800dee4:	4682      	mov	sl, r0
 800dee6:	2101      	movs	r1, #1
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 ffbd 	bl	800ee68 <__i2b>
 800deee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800def0:	2b00      	cmp	r3, #0
 800def2:	4606      	mov	r6, r0
 800def4:	f340 8081 	ble.w	800dffa <_dtoa_r+0x8ca>
 800def8:	461a      	mov	r2, r3
 800defa:	4601      	mov	r1, r0
 800defc:	4620      	mov	r0, r4
 800defe:	f001 f873 	bl	800efe8 <__pow5mult>
 800df02:	9b07      	ldr	r3, [sp, #28]
 800df04:	2b01      	cmp	r3, #1
 800df06:	4606      	mov	r6, r0
 800df08:	dd7a      	ble.n	800e000 <_dtoa_r+0x8d0>
 800df0a:	f04f 0800 	mov.w	r8, #0
 800df0e:	6933      	ldr	r3, [r6, #16]
 800df10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df14:	6918      	ldr	r0, [r3, #16]
 800df16:	f000 ff59 	bl	800edcc <__hi0bits>
 800df1a:	f1c0 0020 	rsb	r0, r0, #32
 800df1e:	9b06      	ldr	r3, [sp, #24]
 800df20:	4418      	add	r0, r3
 800df22:	f010 001f 	ands.w	r0, r0, #31
 800df26:	f000 8094 	beq.w	800e052 <_dtoa_r+0x922>
 800df2a:	f1c0 0320 	rsb	r3, r0, #32
 800df2e:	2b04      	cmp	r3, #4
 800df30:	f340 8085 	ble.w	800e03e <_dtoa_r+0x90e>
 800df34:	9b05      	ldr	r3, [sp, #20]
 800df36:	f1c0 001c 	rsb	r0, r0, #28
 800df3a:	4403      	add	r3, r0
 800df3c:	9305      	str	r3, [sp, #20]
 800df3e:	9b06      	ldr	r3, [sp, #24]
 800df40:	4403      	add	r3, r0
 800df42:	4405      	add	r5, r0
 800df44:	9306      	str	r3, [sp, #24]
 800df46:	9b05      	ldr	r3, [sp, #20]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	dd05      	ble.n	800df58 <_dtoa_r+0x828>
 800df4c:	4651      	mov	r1, sl
 800df4e:	461a      	mov	r2, r3
 800df50:	4620      	mov	r0, r4
 800df52:	f001 f8a3 	bl	800f09c <__lshift>
 800df56:	4682      	mov	sl, r0
 800df58:	9b06      	ldr	r3, [sp, #24]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dd05      	ble.n	800df6a <_dtoa_r+0x83a>
 800df5e:	4631      	mov	r1, r6
 800df60:	461a      	mov	r2, r3
 800df62:	4620      	mov	r0, r4
 800df64:	f001 f89a 	bl	800f09c <__lshift>
 800df68:	4606      	mov	r6, r0
 800df6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d072      	beq.n	800e056 <_dtoa_r+0x926>
 800df70:	4631      	mov	r1, r6
 800df72:	4650      	mov	r0, sl
 800df74:	f001 f8fe 	bl	800f174 <__mcmp>
 800df78:	2800      	cmp	r0, #0
 800df7a:	da6c      	bge.n	800e056 <_dtoa_r+0x926>
 800df7c:	2300      	movs	r3, #0
 800df7e:	4651      	mov	r1, sl
 800df80:	220a      	movs	r2, #10
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fe92 	bl	800ecac <__multadd>
 800df88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df8e:	4682      	mov	sl, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 81b0 	beq.w	800e2f6 <_dtoa_r+0xbc6>
 800df96:	2300      	movs	r3, #0
 800df98:	4639      	mov	r1, r7
 800df9a:	220a      	movs	r2, #10
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fe85 	bl	800ecac <__multadd>
 800dfa2:	9b01      	ldr	r3, [sp, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	4607      	mov	r7, r0
 800dfa8:	f300 8096 	bgt.w	800e0d8 <_dtoa_r+0x9a8>
 800dfac:	9b07      	ldr	r3, [sp, #28]
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	dc59      	bgt.n	800e066 <_dtoa_r+0x936>
 800dfb2:	e091      	b.n	800e0d8 <_dtoa_r+0x9a8>
 800dfb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dfba:	e758      	b.n	800de6e <_dtoa_r+0x73e>
 800dfbc:	9b04      	ldr	r3, [sp, #16]
 800dfbe:	1e5e      	subs	r6, r3, #1
 800dfc0:	9b08      	ldr	r3, [sp, #32]
 800dfc2:	42b3      	cmp	r3, r6
 800dfc4:	bfbf      	itttt	lt
 800dfc6:	9b08      	ldrlt	r3, [sp, #32]
 800dfc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dfca:	9608      	strlt	r6, [sp, #32]
 800dfcc:	1af3      	sublt	r3, r6, r3
 800dfce:	bfb4      	ite	lt
 800dfd0:	18d2      	addlt	r2, r2, r3
 800dfd2:	1b9e      	subge	r6, r3, r6
 800dfd4:	9b04      	ldr	r3, [sp, #16]
 800dfd6:	bfbc      	itt	lt
 800dfd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dfda:	2600      	movlt	r6, #0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bfb7      	itett	lt
 800dfe0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dfe4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dfe8:	1a9d      	sublt	r5, r3, r2
 800dfea:	2300      	movlt	r3, #0
 800dfec:	e741      	b.n	800de72 <_dtoa_r+0x742>
 800dfee:	9e08      	ldr	r6, [sp, #32]
 800dff0:	9d05      	ldr	r5, [sp, #20]
 800dff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dff4:	e748      	b.n	800de88 <_dtoa_r+0x758>
 800dff6:	9a08      	ldr	r2, [sp, #32]
 800dff8:	e770      	b.n	800dedc <_dtoa_r+0x7ac>
 800dffa:	9b07      	ldr	r3, [sp, #28]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	dc19      	bgt.n	800e034 <_dtoa_r+0x904>
 800e000:	9b02      	ldr	r3, [sp, #8]
 800e002:	b9bb      	cbnz	r3, 800e034 <_dtoa_r+0x904>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e00a:	b99b      	cbnz	r3, 800e034 <_dtoa_r+0x904>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e012:	0d1b      	lsrs	r3, r3, #20
 800e014:	051b      	lsls	r3, r3, #20
 800e016:	b183      	cbz	r3, 800e03a <_dtoa_r+0x90a>
 800e018:	9b05      	ldr	r3, [sp, #20]
 800e01a:	3301      	adds	r3, #1
 800e01c:	9305      	str	r3, [sp, #20]
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	3301      	adds	r3, #1
 800e022:	9306      	str	r3, [sp, #24]
 800e024:	f04f 0801 	mov.w	r8, #1
 800e028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f47f af6f 	bne.w	800df0e <_dtoa_r+0x7de>
 800e030:	2001      	movs	r0, #1
 800e032:	e774      	b.n	800df1e <_dtoa_r+0x7ee>
 800e034:	f04f 0800 	mov.w	r8, #0
 800e038:	e7f6      	b.n	800e028 <_dtoa_r+0x8f8>
 800e03a:	4698      	mov	r8, r3
 800e03c:	e7f4      	b.n	800e028 <_dtoa_r+0x8f8>
 800e03e:	d082      	beq.n	800df46 <_dtoa_r+0x816>
 800e040:	9a05      	ldr	r2, [sp, #20]
 800e042:	331c      	adds	r3, #28
 800e044:	441a      	add	r2, r3
 800e046:	9205      	str	r2, [sp, #20]
 800e048:	9a06      	ldr	r2, [sp, #24]
 800e04a:	441a      	add	r2, r3
 800e04c:	441d      	add	r5, r3
 800e04e:	9206      	str	r2, [sp, #24]
 800e050:	e779      	b.n	800df46 <_dtoa_r+0x816>
 800e052:	4603      	mov	r3, r0
 800e054:	e7f4      	b.n	800e040 <_dtoa_r+0x910>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	dc37      	bgt.n	800e0cc <_dtoa_r+0x99c>
 800e05c:	9b07      	ldr	r3, [sp, #28]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	dd34      	ble.n	800e0cc <_dtoa_r+0x99c>
 800e062:	9b04      	ldr	r3, [sp, #16]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	b963      	cbnz	r3, 800e084 <_dtoa_r+0x954>
 800e06a:	4631      	mov	r1, r6
 800e06c:	2205      	movs	r2, #5
 800e06e:	4620      	mov	r0, r4
 800e070:	f000 fe1c 	bl	800ecac <__multadd>
 800e074:	4601      	mov	r1, r0
 800e076:	4606      	mov	r6, r0
 800e078:	4650      	mov	r0, sl
 800e07a:	f001 f87b 	bl	800f174 <__mcmp>
 800e07e:	2800      	cmp	r0, #0
 800e080:	f73f adbb 	bgt.w	800dbfa <_dtoa_r+0x4ca>
 800e084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e086:	9d00      	ldr	r5, [sp, #0]
 800e088:	ea6f 0b03 	mvn.w	fp, r3
 800e08c:	f04f 0800 	mov.w	r8, #0
 800e090:	4631      	mov	r1, r6
 800e092:	4620      	mov	r0, r4
 800e094:	f000 fde8 	bl	800ec68 <_Bfree>
 800e098:	2f00      	cmp	r7, #0
 800e09a:	f43f aeab 	beq.w	800ddf4 <_dtoa_r+0x6c4>
 800e09e:	f1b8 0f00 	cmp.w	r8, #0
 800e0a2:	d005      	beq.n	800e0b0 <_dtoa_r+0x980>
 800e0a4:	45b8      	cmp	r8, r7
 800e0a6:	d003      	beq.n	800e0b0 <_dtoa_r+0x980>
 800e0a8:	4641      	mov	r1, r8
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 fddc 	bl	800ec68 <_Bfree>
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f000 fdd8 	bl	800ec68 <_Bfree>
 800e0b8:	e69c      	b.n	800ddf4 <_dtoa_r+0x6c4>
 800e0ba:	2600      	movs	r6, #0
 800e0bc:	4637      	mov	r7, r6
 800e0be:	e7e1      	b.n	800e084 <_dtoa_r+0x954>
 800e0c0:	46bb      	mov	fp, r7
 800e0c2:	4637      	mov	r7, r6
 800e0c4:	e599      	b.n	800dbfa <_dtoa_r+0x4ca>
 800e0c6:	bf00      	nop
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 80c8 	beq.w	800e264 <_dtoa_r+0xb34>
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	2d00      	cmp	r5, #0
 800e0da:	dd05      	ble.n	800e0e8 <_dtoa_r+0x9b8>
 800e0dc:	4639      	mov	r1, r7
 800e0de:	462a      	mov	r2, r5
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 ffdb 	bl	800f09c <__lshift>
 800e0e6:	4607      	mov	r7, r0
 800e0e8:	f1b8 0f00 	cmp.w	r8, #0
 800e0ec:	d05b      	beq.n	800e1a6 <_dtoa_r+0xa76>
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 fd79 	bl	800ebe8 <_Balloc>
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	b928      	cbnz	r0, 800e106 <_dtoa_r+0x9d6>
 800e0fa:	4b83      	ldr	r3, [pc, #524]	; (800e308 <_dtoa_r+0xbd8>)
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e102:	f7ff bb2e 	b.w	800d762 <_dtoa_r+0x32>
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	3202      	adds	r2, #2
 800e10a:	0092      	lsls	r2, r2, #2
 800e10c:	f107 010c 	add.w	r1, r7, #12
 800e110:	300c      	adds	r0, #12
 800e112:	f7ff fa6f 	bl	800d5f4 <memcpy>
 800e116:	2201      	movs	r2, #1
 800e118:	4629      	mov	r1, r5
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 ffbe 	bl	800f09c <__lshift>
 800e120:	9b00      	ldr	r3, [sp, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12a:	4413      	add	r3, r2
 800e12c:	9308      	str	r3, [sp, #32]
 800e12e:	9b02      	ldr	r3, [sp, #8]
 800e130:	f003 0301 	and.w	r3, r3, #1
 800e134:	46b8      	mov	r8, r7
 800e136:	9306      	str	r3, [sp, #24]
 800e138:	4607      	mov	r7, r0
 800e13a:	9b04      	ldr	r3, [sp, #16]
 800e13c:	4631      	mov	r1, r6
 800e13e:	3b01      	subs	r3, #1
 800e140:	4650      	mov	r0, sl
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	f7ff fa6c 	bl	800d620 <quorem>
 800e148:	4641      	mov	r1, r8
 800e14a:	9002      	str	r0, [sp, #8]
 800e14c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e150:	4650      	mov	r0, sl
 800e152:	f001 f80f 	bl	800f174 <__mcmp>
 800e156:	463a      	mov	r2, r7
 800e158:	9005      	str	r0, [sp, #20]
 800e15a:	4631      	mov	r1, r6
 800e15c:	4620      	mov	r0, r4
 800e15e:	f001 f825 	bl	800f1ac <__mdiff>
 800e162:	68c2      	ldr	r2, [r0, #12]
 800e164:	4605      	mov	r5, r0
 800e166:	bb02      	cbnz	r2, 800e1aa <_dtoa_r+0xa7a>
 800e168:	4601      	mov	r1, r0
 800e16a:	4650      	mov	r0, sl
 800e16c:	f001 f802 	bl	800f174 <__mcmp>
 800e170:	4602      	mov	r2, r0
 800e172:	4629      	mov	r1, r5
 800e174:	4620      	mov	r0, r4
 800e176:	9209      	str	r2, [sp, #36]	; 0x24
 800e178:	f000 fd76 	bl	800ec68 <_Bfree>
 800e17c:	9b07      	ldr	r3, [sp, #28]
 800e17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e180:	9d04      	ldr	r5, [sp, #16]
 800e182:	ea43 0102 	orr.w	r1, r3, r2
 800e186:	9b06      	ldr	r3, [sp, #24]
 800e188:	4319      	orrs	r1, r3
 800e18a:	d110      	bne.n	800e1ae <_dtoa_r+0xa7e>
 800e18c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e190:	d029      	beq.n	800e1e6 <_dtoa_r+0xab6>
 800e192:	9b05      	ldr	r3, [sp, #20]
 800e194:	2b00      	cmp	r3, #0
 800e196:	dd02      	ble.n	800e19e <_dtoa_r+0xa6e>
 800e198:	9b02      	ldr	r3, [sp, #8]
 800e19a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e19e:	9b01      	ldr	r3, [sp, #4]
 800e1a0:	f883 9000 	strb.w	r9, [r3]
 800e1a4:	e774      	b.n	800e090 <_dtoa_r+0x960>
 800e1a6:	4638      	mov	r0, r7
 800e1a8:	e7ba      	b.n	800e120 <_dtoa_r+0x9f0>
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	e7e1      	b.n	800e172 <_dtoa_r+0xa42>
 800e1ae:	9b05      	ldr	r3, [sp, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	db04      	blt.n	800e1be <_dtoa_r+0xa8e>
 800e1b4:	9907      	ldr	r1, [sp, #28]
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	9906      	ldr	r1, [sp, #24]
 800e1ba:	430b      	orrs	r3, r1
 800e1bc:	d120      	bne.n	800e200 <_dtoa_r+0xad0>
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	dded      	ble.n	800e19e <_dtoa_r+0xa6e>
 800e1c2:	4651      	mov	r1, sl
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 ff68 	bl	800f09c <__lshift>
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	4682      	mov	sl, r0
 800e1d0:	f000 ffd0 	bl	800f174 <__mcmp>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	dc03      	bgt.n	800e1e0 <_dtoa_r+0xab0>
 800e1d8:	d1e1      	bne.n	800e19e <_dtoa_r+0xa6e>
 800e1da:	f019 0f01 	tst.w	r9, #1
 800e1de:	d0de      	beq.n	800e19e <_dtoa_r+0xa6e>
 800e1e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e1e4:	d1d8      	bne.n	800e198 <_dtoa_r+0xa68>
 800e1e6:	9a01      	ldr	r2, [sp, #4]
 800e1e8:	2339      	movs	r3, #57	; 0x39
 800e1ea:	7013      	strb	r3, [r2, #0]
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	461d      	mov	r5, r3
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1f6:	2a39      	cmp	r2, #57	; 0x39
 800e1f8:	d06c      	beq.n	800e2d4 <_dtoa_r+0xba4>
 800e1fa:	3201      	adds	r2, #1
 800e1fc:	701a      	strb	r2, [r3, #0]
 800e1fe:	e747      	b.n	800e090 <_dtoa_r+0x960>
 800e200:	2a00      	cmp	r2, #0
 800e202:	dd07      	ble.n	800e214 <_dtoa_r+0xae4>
 800e204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e208:	d0ed      	beq.n	800e1e6 <_dtoa_r+0xab6>
 800e20a:	9a01      	ldr	r2, [sp, #4]
 800e20c:	f109 0301 	add.w	r3, r9, #1
 800e210:	7013      	strb	r3, [r2, #0]
 800e212:	e73d      	b.n	800e090 <_dtoa_r+0x960>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	9a08      	ldr	r2, [sp, #32]
 800e218:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d043      	beq.n	800e2a8 <_dtoa_r+0xb78>
 800e220:	4651      	mov	r1, sl
 800e222:	2300      	movs	r3, #0
 800e224:	220a      	movs	r2, #10
 800e226:	4620      	mov	r0, r4
 800e228:	f000 fd40 	bl	800ecac <__multadd>
 800e22c:	45b8      	cmp	r8, r7
 800e22e:	4682      	mov	sl, r0
 800e230:	f04f 0300 	mov.w	r3, #0
 800e234:	f04f 020a 	mov.w	r2, #10
 800e238:	4641      	mov	r1, r8
 800e23a:	4620      	mov	r0, r4
 800e23c:	d107      	bne.n	800e24e <_dtoa_r+0xb1e>
 800e23e:	f000 fd35 	bl	800ecac <__multadd>
 800e242:	4680      	mov	r8, r0
 800e244:	4607      	mov	r7, r0
 800e246:	9b04      	ldr	r3, [sp, #16]
 800e248:	3301      	adds	r3, #1
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	e775      	b.n	800e13a <_dtoa_r+0xa0a>
 800e24e:	f000 fd2d 	bl	800ecac <__multadd>
 800e252:	4639      	mov	r1, r7
 800e254:	4680      	mov	r8, r0
 800e256:	2300      	movs	r3, #0
 800e258:	220a      	movs	r2, #10
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fd26 	bl	800ecac <__multadd>
 800e260:	4607      	mov	r7, r0
 800e262:	e7f0      	b.n	800e246 <_dtoa_r+0xb16>
 800e264:	9b04      	ldr	r3, [sp, #16]
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	9d00      	ldr	r5, [sp, #0]
 800e26a:	4631      	mov	r1, r6
 800e26c:	4650      	mov	r0, sl
 800e26e:	f7ff f9d7 	bl	800d620 <quorem>
 800e272:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	f805 9b01 	strb.w	r9, [r5], #1
 800e27c:	1aea      	subs	r2, r5, r3
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	4293      	cmp	r3, r2
 800e282:	dd07      	ble.n	800e294 <_dtoa_r+0xb64>
 800e284:	4651      	mov	r1, sl
 800e286:	2300      	movs	r3, #0
 800e288:	220a      	movs	r2, #10
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 fd0e 	bl	800ecac <__multadd>
 800e290:	4682      	mov	sl, r0
 800e292:	e7ea      	b.n	800e26a <_dtoa_r+0xb3a>
 800e294:	9b01      	ldr	r3, [sp, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	bfc8      	it	gt
 800e29a:	461d      	movgt	r5, r3
 800e29c:	9b00      	ldr	r3, [sp, #0]
 800e29e:	bfd8      	it	le
 800e2a0:	2501      	movle	r5, #1
 800e2a2:	441d      	add	r5, r3
 800e2a4:	f04f 0800 	mov.w	r8, #0
 800e2a8:	4651      	mov	r1, sl
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 fef5 	bl	800f09c <__lshift>
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	f000 ff5d 	bl	800f174 <__mcmp>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	dc96      	bgt.n	800e1ec <_dtoa_r+0xabc>
 800e2be:	d102      	bne.n	800e2c6 <_dtoa_r+0xb96>
 800e2c0:	f019 0f01 	tst.w	r9, #1
 800e2c4:	d192      	bne.n	800e1ec <_dtoa_r+0xabc>
 800e2c6:	462b      	mov	r3, r5
 800e2c8:	461d      	mov	r5, r3
 800e2ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2ce:	2a30      	cmp	r2, #48	; 0x30
 800e2d0:	d0fa      	beq.n	800e2c8 <_dtoa_r+0xb98>
 800e2d2:	e6dd      	b.n	800e090 <_dtoa_r+0x960>
 800e2d4:	9a00      	ldr	r2, [sp, #0]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d189      	bne.n	800e1ee <_dtoa_r+0xabe>
 800e2da:	f10b 0b01 	add.w	fp, fp, #1
 800e2de:	2331      	movs	r3, #49	; 0x31
 800e2e0:	e796      	b.n	800e210 <_dtoa_r+0xae0>
 800e2e2:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <_dtoa_r+0xbdc>)
 800e2e4:	f7ff ba99 	b.w	800d81a <_dtoa_r+0xea>
 800e2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f47f aa6d 	bne.w	800d7ca <_dtoa_r+0x9a>
 800e2f0:	4b07      	ldr	r3, [pc, #28]	; (800e310 <_dtoa_r+0xbe0>)
 800e2f2:	f7ff ba92 	b.w	800d81a <_dtoa_r+0xea>
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	dcb5      	bgt.n	800e268 <_dtoa_r+0xb38>
 800e2fc:	9b07      	ldr	r3, [sp, #28]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	f73f aeb1 	bgt.w	800e066 <_dtoa_r+0x936>
 800e304:	e7b0      	b.n	800e268 <_dtoa_r+0xb38>
 800e306:	bf00      	nop
 800e308:	08010308 	.word	0x08010308
 800e30c:	08010260 	.word	0x08010260
 800e310:	0801028c 	.word	0x0801028c

0800e314 <_free_r>:
 800e314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e316:	2900      	cmp	r1, #0
 800e318:	d044      	beq.n	800e3a4 <_free_r+0x90>
 800e31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e31e:	9001      	str	r0, [sp, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	f1a1 0404 	sub.w	r4, r1, #4
 800e326:	bfb8      	it	lt
 800e328:	18e4      	addlt	r4, r4, r3
 800e32a:	f000 fc51 	bl	800ebd0 <__malloc_lock>
 800e32e:	4a1e      	ldr	r2, [pc, #120]	; (800e3a8 <_free_r+0x94>)
 800e330:	9801      	ldr	r0, [sp, #4]
 800e332:	6813      	ldr	r3, [r2, #0]
 800e334:	b933      	cbnz	r3, 800e344 <_free_r+0x30>
 800e336:	6063      	str	r3, [r4, #4]
 800e338:	6014      	str	r4, [r2, #0]
 800e33a:	b003      	add	sp, #12
 800e33c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e340:	f000 bc4c 	b.w	800ebdc <__malloc_unlock>
 800e344:	42a3      	cmp	r3, r4
 800e346:	d908      	bls.n	800e35a <_free_r+0x46>
 800e348:	6825      	ldr	r5, [r4, #0]
 800e34a:	1961      	adds	r1, r4, r5
 800e34c:	428b      	cmp	r3, r1
 800e34e:	bf01      	itttt	eq
 800e350:	6819      	ldreq	r1, [r3, #0]
 800e352:	685b      	ldreq	r3, [r3, #4]
 800e354:	1949      	addeq	r1, r1, r5
 800e356:	6021      	streq	r1, [r4, #0]
 800e358:	e7ed      	b.n	800e336 <_free_r+0x22>
 800e35a:	461a      	mov	r2, r3
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	b10b      	cbz	r3, 800e364 <_free_r+0x50>
 800e360:	42a3      	cmp	r3, r4
 800e362:	d9fa      	bls.n	800e35a <_free_r+0x46>
 800e364:	6811      	ldr	r1, [r2, #0]
 800e366:	1855      	adds	r5, r2, r1
 800e368:	42a5      	cmp	r5, r4
 800e36a:	d10b      	bne.n	800e384 <_free_r+0x70>
 800e36c:	6824      	ldr	r4, [r4, #0]
 800e36e:	4421      	add	r1, r4
 800e370:	1854      	adds	r4, r2, r1
 800e372:	42a3      	cmp	r3, r4
 800e374:	6011      	str	r1, [r2, #0]
 800e376:	d1e0      	bne.n	800e33a <_free_r+0x26>
 800e378:	681c      	ldr	r4, [r3, #0]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	6053      	str	r3, [r2, #4]
 800e37e:	440c      	add	r4, r1
 800e380:	6014      	str	r4, [r2, #0]
 800e382:	e7da      	b.n	800e33a <_free_r+0x26>
 800e384:	d902      	bls.n	800e38c <_free_r+0x78>
 800e386:	230c      	movs	r3, #12
 800e388:	6003      	str	r3, [r0, #0]
 800e38a:	e7d6      	b.n	800e33a <_free_r+0x26>
 800e38c:	6825      	ldr	r5, [r4, #0]
 800e38e:	1961      	adds	r1, r4, r5
 800e390:	428b      	cmp	r3, r1
 800e392:	bf04      	itt	eq
 800e394:	6819      	ldreq	r1, [r3, #0]
 800e396:	685b      	ldreq	r3, [r3, #4]
 800e398:	6063      	str	r3, [r4, #4]
 800e39a:	bf04      	itt	eq
 800e39c:	1949      	addeq	r1, r1, r5
 800e39e:	6021      	streq	r1, [r4, #0]
 800e3a0:	6054      	str	r4, [r2, #4]
 800e3a2:	e7ca      	b.n	800e33a <_free_r+0x26>
 800e3a4:	b003      	add	sp, #12
 800e3a6:	bd30      	pop	{r4, r5, pc}
 800e3a8:	20003184 	.word	0x20003184

0800e3ac <rshift>:
 800e3ac:	6903      	ldr	r3, [r0, #16]
 800e3ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3ba:	f100 0414 	add.w	r4, r0, #20
 800e3be:	dd45      	ble.n	800e44c <rshift+0xa0>
 800e3c0:	f011 011f 	ands.w	r1, r1, #31
 800e3c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e3c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e3cc:	d10c      	bne.n	800e3e8 <rshift+0x3c>
 800e3ce:	f100 0710 	add.w	r7, r0, #16
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	42b1      	cmp	r1, r6
 800e3d6:	d334      	bcc.n	800e442 <rshift+0x96>
 800e3d8:	1a9b      	subs	r3, r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	1eea      	subs	r2, r5, #3
 800e3de:	4296      	cmp	r6, r2
 800e3e0:	bf38      	it	cc
 800e3e2:	2300      	movcc	r3, #0
 800e3e4:	4423      	add	r3, r4
 800e3e6:	e015      	b.n	800e414 <rshift+0x68>
 800e3e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e3ec:	f1c1 0820 	rsb	r8, r1, #32
 800e3f0:	40cf      	lsrs	r7, r1
 800e3f2:	f105 0e04 	add.w	lr, r5, #4
 800e3f6:	46a1      	mov	r9, r4
 800e3f8:	4576      	cmp	r6, lr
 800e3fa:	46f4      	mov	ip, lr
 800e3fc:	d815      	bhi.n	800e42a <rshift+0x7e>
 800e3fe:	1a9a      	subs	r2, r3, r2
 800e400:	0092      	lsls	r2, r2, #2
 800e402:	3a04      	subs	r2, #4
 800e404:	3501      	adds	r5, #1
 800e406:	42ae      	cmp	r6, r5
 800e408:	bf38      	it	cc
 800e40a:	2200      	movcc	r2, #0
 800e40c:	18a3      	adds	r3, r4, r2
 800e40e:	50a7      	str	r7, [r4, r2]
 800e410:	b107      	cbz	r7, 800e414 <rshift+0x68>
 800e412:	3304      	adds	r3, #4
 800e414:	1b1a      	subs	r2, r3, r4
 800e416:	42a3      	cmp	r3, r4
 800e418:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e41c:	bf08      	it	eq
 800e41e:	2300      	moveq	r3, #0
 800e420:	6102      	str	r2, [r0, #16]
 800e422:	bf08      	it	eq
 800e424:	6143      	streq	r3, [r0, #20]
 800e426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42a:	f8dc c000 	ldr.w	ip, [ip]
 800e42e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e432:	ea4c 0707 	orr.w	r7, ip, r7
 800e436:	f849 7b04 	str.w	r7, [r9], #4
 800e43a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e43e:	40cf      	lsrs	r7, r1
 800e440:	e7da      	b.n	800e3f8 <rshift+0x4c>
 800e442:	f851 cb04 	ldr.w	ip, [r1], #4
 800e446:	f847 cf04 	str.w	ip, [r7, #4]!
 800e44a:	e7c3      	b.n	800e3d4 <rshift+0x28>
 800e44c:	4623      	mov	r3, r4
 800e44e:	e7e1      	b.n	800e414 <rshift+0x68>

0800e450 <__hexdig_fun>:
 800e450:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e454:	2b09      	cmp	r3, #9
 800e456:	d802      	bhi.n	800e45e <__hexdig_fun+0xe>
 800e458:	3820      	subs	r0, #32
 800e45a:	b2c0      	uxtb	r0, r0
 800e45c:	4770      	bx	lr
 800e45e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e462:	2b05      	cmp	r3, #5
 800e464:	d801      	bhi.n	800e46a <__hexdig_fun+0x1a>
 800e466:	3847      	subs	r0, #71	; 0x47
 800e468:	e7f7      	b.n	800e45a <__hexdig_fun+0xa>
 800e46a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e46e:	2b05      	cmp	r3, #5
 800e470:	d801      	bhi.n	800e476 <__hexdig_fun+0x26>
 800e472:	3827      	subs	r0, #39	; 0x27
 800e474:	e7f1      	b.n	800e45a <__hexdig_fun+0xa>
 800e476:	2000      	movs	r0, #0
 800e478:	4770      	bx	lr
	...

0800e47c <__gethex>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	4617      	mov	r7, r2
 800e482:	680a      	ldr	r2, [r1, #0]
 800e484:	b085      	sub	sp, #20
 800e486:	f102 0b02 	add.w	fp, r2, #2
 800e48a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e48e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e492:	4681      	mov	r9, r0
 800e494:	468a      	mov	sl, r1
 800e496:	9302      	str	r3, [sp, #8]
 800e498:	32fe      	adds	r2, #254	; 0xfe
 800e49a:	eb02 030b 	add.w	r3, r2, fp
 800e49e:	46d8      	mov	r8, fp
 800e4a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e4a4:	9301      	str	r3, [sp, #4]
 800e4a6:	2830      	cmp	r0, #48	; 0x30
 800e4a8:	d0f7      	beq.n	800e49a <__gethex+0x1e>
 800e4aa:	f7ff ffd1 	bl	800e450 <__hexdig_fun>
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d138      	bne.n	800e526 <__gethex+0xaa>
 800e4b4:	49a7      	ldr	r1, [pc, #668]	; (800e754 <__gethex+0x2d8>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	f7fe ffa6 	bl	800d40a <strncmp>
 800e4be:	4606      	mov	r6, r0
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d169      	bne.n	800e598 <__gethex+0x11c>
 800e4c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e4c8:	465d      	mov	r5, fp
 800e4ca:	f7ff ffc1 	bl	800e450 <__hexdig_fun>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d064      	beq.n	800e59c <__gethex+0x120>
 800e4d2:	465a      	mov	r2, fp
 800e4d4:	7810      	ldrb	r0, [r2, #0]
 800e4d6:	2830      	cmp	r0, #48	; 0x30
 800e4d8:	4690      	mov	r8, r2
 800e4da:	f102 0201 	add.w	r2, r2, #1
 800e4de:	d0f9      	beq.n	800e4d4 <__gethex+0x58>
 800e4e0:	f7ff ffb6 	bl	800e450 <__hexdig_fun>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	fab0 f480 	clz	r4, r0
 800e4ea:	0964      	lsrs	r4, r4, #5
 800e4ec:	465e      	mov	r6, fp
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	4642      	mov	r2, r8
 800e4f2:	4615      	mov	r5, r2
 800e4f4:	3201      	adds	r2, #1
 800e4f6:	7828      	ldrb	r0, [r5, #0]
 800e4f8:	f7ff ffaa 	bl	800e450 <__hexdig_fun>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d1f8      	bne.n	800e4f2 <__gethex+0x76>
 800e500:	4994      	ldr	r1, [pc, #592]	; (800e754 <__gethex+0x2d8>)
 800e502:	2201      	movs	r2, #1
 800e504:	4628      	mov	r0, r5
 800e506:	f7fe ff80 	bl	800d40a <strncmp>
 800e50a:	b978      	cbnz	r0, 800e52c <__gethex+0xb0>
 800e50c:	b946      	cbnz	r6, 800e520 <__gethex+0xa4>
 800e50e:	1c6e      	adds	r6, r5, #1
 800e510:	4632      	mov	r2, r6
 800e512:	4615      	mov	r5, r2
 800e514:	3201      	adds	r2, #1
 800e516:	7828      	ldrb	r0, [r5, #0]
 800e518:	f7ff ff9a 	bl	800e450 <__hexdig_fun>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d1f8      	bne.n	800e512 <__gethex+0x96>
 800e520:	1b73      	subs	r3, r6, r5
 800e522:	009e      	lsls	r6, r3, #2
 800e524:	e004      	b.n	800e530 <__gethex+0xb4>
 800e526:	2400      	movs	r4, #0
 800e528:	4626      	mov	r6, r4
 800e52a:	e7e1      	b.n	800e4f0 <__gethex+0x74>
 800e52c:	2e00      	cmp	r6, #0
 800e52e:	d1f7      	bne.n	800e520 <__gethex+0xa4>
 800e530:	782b      	ldrb	r3, [r5, #0]
 800e532:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e536:	2b50      	cmp	r3, #80	; 0x50
 800e538:	d13d      	bne.n	800e5b6 <__gethex+0x13a>
 800e53a:	786b      	ldrb	r3, [r5, #1]
 800e53c:	2b2b      	cmp	r3, #43	; 0x2b
 800e53e:	d02f      	beq.n	800e5a0 <__gethex+0x124>
 800e540:	2b2d      	cmp	r3, #45	; 0x2d
 800e542:	d031      	beq.n	800e5a8 <__gethex+0x12c>
 800e544:	1c69      	adds	r1, r5, #1
 800e546:	f04f 0b00 	mov.w	fp, #0
 800e54a:	7808      	ldrb	r0, [r1, #0]
 800e54c:	f7ff ff80 	bl	800e450 <__hexdig_fun>
 800e550:	1e42      	subs	r2, r0, #1
 800e552:	b2d2      	uxtb	r2, r2
 800e554:	2a18      	cmp	r2, #24
 800e556:	d82e      	bhi.n	800e5b6 <__gethex+0x13a>
 800e558:	f1a0 0210 	sub.w	r2, r0, #16
 800e55c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e560:	f7ff ff76 	bl	800e450 <__hexdig_fun>
 800e564:	f100 3cff 	add.w	ip, r0, #4294967295
 800e568:	fa5f fc8c 	uxtb.w	ip, ip
 800e56c:	f1bc 0f18 	cmp.w	ip, #24
 800e570:	d91d      	bls.n	800e5ae <__gethex+0x132>
 800e572:	f1bb 0f00 	cmp.w	fp, #0
 800e576:	d000      	beq.n	800e57a <__gethex+0xfe>
 800e578:	4252      	negs	r2, r2
 800e57a:	4416      	add	r6, r2
 800e57c:	f8ca 1000 	str.w	r1, [sl]
 800e580:	b1dc      	cbz	r4, 800e5ba <__gethex+0x13e>
 800e582:	9b01      	ldr	r3, [sp, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	bf14      	ite	ne
 800e588:	f04f 0800 	movne.w	r8, #0
 800e58c:	f04f 0806 	moveq.w	r8, #6
 800e590:	4640      	mov	r0, r8
 800e592:	b005      	add	sp, #20
 800e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e598:	4645      	mov	r5, r8
 800e59a:	4626      	mov	r6, r4
 800e59c:	2401      	movs	r4, #1
 800e59e:	e7c7      	b.n	800e530 <__gethex+0xb4>
 800e5a0:	f04f 0b00 	mov.w	fp, #0
 800e5a4:	1ca9      	adds	r1, r5, #2
 800e5a6:	e7d0      	b.n	800e54a <__gethex+0xce>
 800e5a8:	f04f 0b01 	mov.w	fp, #1
 800e5ac:	e7fa      	b.n	800e5a4 <__gethex+0x128>
 800e5ae:	230a      	movs	r3, #10
 800e5b0:	fb03 0002 	mla	r0, r3, r2, r0
 800e5b4:	e7d0      	b.n	800e558 <__gethex+0xdc>
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	e7e0      	b.n	800e57c <__gethex+0x100>
 800e5ba:	eba5 0308 	sub.w	r3, r5, r8
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	2b07      	cmp	r3, #7
 800e5c4:	dc0a      	bgt.n	800e5dc <__gethex+0x160>
 800e5c6:	4648      	mov	r0, r9
 800e5c8:	f000 fb0e 	bl	800ebe8 <_Balloc>
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	b940      	cbnz	r0, 800e5e2 <__gethex+0x166>
 800e5d0:	4b61      	ldr	r3, [pc, #388]	; (800e758 <__gethex+0x2dc>)
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	21e4      	movs	r1, #228	; 0xe4
 800e5d6:	4861      	ldr	r0, [pc, #388]	; (800e75c <__gethex+0x2e0>)
 800e5d8:	f001 f9f0 	bl	800f9bc <__assert_func>
 800e5dc:	3101      	adds	r1, #1
 800e5de:	105b      	asrs	r3, r3, #1
 800e5e0:	e7ef      	b.n	800e5c2 <__gethex+0x146>
 800e5e2:	f100 0a14 	add.w	sl, r0, #20
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	495a      	ldr	r1, [pc, #360]	; (800e754 <__gethex+0x2d8>)
 800e5ea:	f8cd a004 	str.w	sl, [sp, #4]
 800e5ee:	469b      	mov	fp, r3
 800e5f0:	45a8      	cmp	r8, r5
 800e5f2:	d342      	bcc.n	800e67a <__gethex+0x1fe>
 800e5f4:	9801      	ldr	r0, [sp, #4]
 800e5f6:	f840 bb04 	str.w	fp, [r0], #4
 800e5fa:	eba0 000a 	sub.w	r0, r0, sl
 800e5fe:	1080      	asrs	r0, r0, #2
 800e600:	6120      	str	r0, [r4, #16]
 800e602:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e606:	4658      	mov	r0, fp
 800e608:	f000 fbe0 	bl	800edcc <__hi0bits>
 800e60c:	683d      	ldr	r5, [r7, #0]
 800e60e:	eba8 0000 	sub.w	r0, r8, r0
 800e612:	42a8      	cmp	r0, r5
 800e614:	dd59      	ble.n	800e6ca <__gethex+0x24e>
 800e616:	eba0 0805 	sub.w	r8, r0, r5
 800e61a:	4641      	mov	r1, r8
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 ff6f 	bl	800f500 <__any_on>
 800e622:	4683      	mov	fp, r0
 800e624:	b1b8      	cbz	r0, 800e656 <__gethex+0x1da>
 800e626:	f108 33ff 	add.w	r3, r8, #4294967295
 800e62a:	1159      	asrs	r1, r3, #5
 800e62c:	f003 021f 	and.w	r2, r3, #31
 800e630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e634:	f04f 0b01 	mov.w	fp, #1
 800e638:	fa0b f202 	lsl.w	r2, fp, r2
 800e63c:	420a      	tst	r2, r1
 800e63e:	d00a      	beq.n	800e656 <__gethex+0x1da>
 800e640:	455b      	cmp	r3, fp
 800e642:	dd06      	ble.n	800e652 <__gethex+0x1d6>
 800e644:	f1a8 0102 	sub.w	r1, r8, #2
 800e648:	4620      	mov	r0, r4
 800e64a:	f000 ff59 	bl	800f500 <__any_on>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d138      	bne.n	800e6c4 <__gethex+0x248>
 800e652:	f04f 0b02 	mov.w	fp, #2
 800e656:	4641      	mov	r1, r8
 800e658:	4620      	mov	r0, r4
 800e65a:	f7ff fea7 	bl	800e3ac <rshift>
 800e65e:	4446      	add	r6, r8
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	42b3      	cmp	r3, r6
 800e664:	da41      	bge.n	800e6ea <__gethex+0x26e>
 800e666:	4621      	mov	r1, r4
 800e668:	4648      	mov	r0, r9
 800e66a:	f000 fafd 	bl	800ec68 <_Bfree>
 800e66e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e670:	2300      	movs	r3, #0
 800e672:	6013      	str	r3, [r2, #0]
 800e674:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e678:	e78a      	b.n	800e590 <__gethex+0x114>
 800e67a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e67e:	2a2e      	cmp	r2, #46	; 0x2e
 800e680:	d014      	beq.n	800e6ac <__gethex+0x230>
 800e682:	2b20      	cmp	r3, #32
 800e684:	d106      	bne.n	800e694 <__gethex+0x218>
 800e686:	9b01      	ldr	r3, [sp, #4]
 800e688:	f843 bb04 	str.w	fp, [r3], #4
 800e68c:	f04f 0b00 	mov.w	fp, #0
 800e690:	9301      	str	r3, [sp, #4]
 800e692:	465b      	mov	r3, fp
 800e694:	7828      	ldrb	r0, [r5, #0]
 800e696:	9303      	str	r3, [sp, #12]
 800e698:	f7ff feda 	bl	800e450 <__hexdig_fun>
 800e69c:	9b03      	ldr	r3, [sp, #12]
 800e69e:	f000 000f 	and.w	r0, r0, #15
 800e6a2:	4098      	lsls	r0, r3
 800e6a4:	ea4b 0b00 	orr.w	fp, fp, r0
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	e7a1      	b.n	800e5f0 <__gethex+0x174>
 800e6ac:	45a8      	cmp	r8, r5
 800e6ae:	d8e8      	bhi.n	800e682 <__gethex+0x206>
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	9303      	str	r3, [sp, #12]
 800e6b6:	f7fe fea8 	bl	800d40a <strncmp>
 800e6ba:	4926      	ldr	r1, [pc, #152]	; (800e754 <__gethex+0x2d8>)
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d1df      	bne.n	800e682 <__gethex+0x206>
 800e6c2:	e795      	b.n	800e5f0 <__gethex+0x174>
 800e6c4:	f04f 0b03 	mov.w	fp, #3
 800e6c8:	e7c5      	b.n	800e656 <__gethex+0x1da>
 800e6ca:	da0b      	bge.n	800e6e4 <__gethex+0x268>
 800e6cc:	eba5 0800 	sub.w	r8, r5, r0
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4642      	mov	r2, r8
 800e6d4:	4648      	mov	r0, r9
 800e6d6:	f000 fce1 	bl	800f09c <__lshift>
 800e6da:	eba6 0608 	sub.w	r6, r6, r8
 800e6de:	4604      	mov	r4, r0
 800e6e0:	f100 0a14 	add.w	sl, r0, #20
 800e6e4:	f04f 0b00 	mov.w	fp, #0
 800e6e8:	e7ba      	b.n	800e660 <__gethex+0x1e4>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	42b3      	cmp	r3, r6
 800e6ee:	dd73      	ble.n	800e7d8 <__gethex+0x35c>
 800e6f0:	1b9e      	subs	r6, r3, r6
 800e6f2:	42b5      	cmp	r5, r6
 800e6f4:	dc34      	bgt.n	800e760 <__gethex+0x2e4>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d023      	beq.n	800e744 <__gethex+0x2c8>
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d025      	beq.n	800e74c <__gethex+0x2d0>
 800e700:	2b01      	cmp	r3, #1
 800e702:	d115      	bne.n	800e730 <__gethex+0x2b4>
 800e704:	42b5      	cmp	r5, r6
 800e706:	d113      	bne.n	800e730 <__gethex+0x2b4>
 800e708:	2d01      	cmp	r5, #1
 800e70a:	d10b      	bne.n	800e724 <__gethex+0x2a8>
 800e70c:	9a02      	ldr	r2, [sp, #8]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6013      	str	r3, [r2, #0]
 800e712:	2301      	movs	r3, #1
 800e714:	6123      	str	r3, [r4, #16]
 800e716:	f8ca 3000 	str.w	r3, [sl]
 800e71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e71c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e720:	601c      	str	r4, [r3, #0]
 800e722:	e735      	b.n	800e590 <__gethex+0x114>
 800e724:	1e69      	subs	r1, r5, #1
 800e726:	4620      	mov	r0, r4
 800e728:	f000 feea 	bl	800f500 <__any_on>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d1ed      	bne.n	800e70c <__gethex+0x290>
 800e730:	4621      	mov	r1, r4
 800e732:	4648      	mov	r0, r9
 800e734:	f000 fa98 	bl	800ec68 <_Bfree>
 800e738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e73a:	2300      	movs	r3, #0
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e742:	e725      	b.n	800e590 <__gethex+0x114>
 800e744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1f2      	bne.n	800e730 <__gethex+0x2b4>
 800e74a:	e7df      	b.n	800e70c <__gethex+0x290>
 800e74c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1dc      	bne.n	800e70c <__gethex+0x290>
 800e752:	e7ed      	b.n	800e730 <__gethex+0x2b4>
 800e754:	080101fc 	.word	0x080101fc
 800e758:	08010308 	.word	0x08010308
 800e75c:	08010319 	.word	0x08010319
 800e760:	f106 38ff 	add.w	r8, r6, #4294967295
 800e764:	f1bb 0f00 	cmp.w	fp, #0
 800e768:	d133      	bne.n	800e7d2 <__gethex+0x356>
 800e76a:	f1b8 0f00 	cmp.w	r8, #0
 800e76e:	d004      	beq.n	800e77a <__gethex+0x2fe>
 800e770:	4641      	mov	r1, r8
 800e772:	4620      	mov	r0, r4
 800e774:	f000 fec4 	bl	800f500 <__any_on>
 800e778:	4683      	mov	fp, r0
 800e77a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e77e:	2301      	movs	r3, #1
 800e780:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e784:	f008 081f 	and.w	r8, r8, #31
 800e788:	fa03 f308 	lsl.w	r3, r3, r8
 800e78c:	4213      	tst	r3, r2
 800e78e:	4631      	mov	r1, r6
 800e790:	4620      	mov	r0, r4
 800e792:	bf18      	it	ne
 800e794:	f04b 0b02 	orrne.w	fp, fp, #2
 800e798:	1bad      	subs	r5, r5, r6
 800e79a:	f7ff fe07 	bl	800e3ac <rshift>
 800e79e:	687e      	ldr	r6, [r7, #4]
 800e7a0:	f04f 0802 	mov.w	r8, #2
 800e7a4:	f1bb 0f00 	cmp.w	fp, #0
 800e7a8:	d04a      	beq.n	800e840 <__gethex+0x3c4>
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d016      	beq.n	800e7de <__gethex+0x362>
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	d018      	beq.n	800e7e6 <__gethex+0x36a>
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d109      	bne.n	800e7cc <__gethex+0x350>
 800e7b8:	f01b 0f02 	tst.w	fp, #2
 800e7bc:	d006      	beq.n	800e7cc <__gethex+0x350>
 800e7be:	f8da 3000 	ldr.w	r3, [sl]
 800e7c2:	ea4b 0b03 	orr.w	fp, fp, r3
 800e7c6:	f01b 0f01 	tst.w	fp, #1
 800e7ca:	d10f      	bne.n	800e7ec <__gethex+0x370>
 800e7cc:	f048 0810 	orr.w	r8, r8, #16
 800e7d0:	e036      	b.n	800e840 <__gethex+0x3c4>
 800e7d2:	f04f 0b01 	mov.w	fp, #1
 800e7d6:	e7d0      	b.n	800e77a <__gethex+0x2fe>
 800e7d8:	f04f 0801 	mov.w	r8, #1
 800e7dc:	e7e2      	b.n	800e7a4 <__gethex+0x328>
 800e7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7e0:	f1c3 0301 	rsb	r3, r3, #1
 800e7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d0ef      	beq.n	800e7cc <__gethex+0x350>
 800e7ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7f0:	f104 0214 	add.w	r2, r4, #20
 800e7f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e7fe:	2300      	movs	r3, #0
 800e800:	4694      	mov	ip, r2
 800e802:	f852 1b04 	ldr.w	r1, [r2], #4
 800e806:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e80a:	d01e      	beq.n	800e84a <__gethex+0x3ce>
 800e80c:	3101      	adds	r1, #1
 800e80e:	f8cc 1000 	str.w	r1, [ip]
 800e812:	f1b8 0f02 	cmp.w	r8, #2
 800e816:	f104 0214 	add.w	r2, r4, #20
 800e81a:	d13d      	bne.n	800e898 <__gethex+0x41c>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	3b01      	subs	r3, #1
 800e820:	42ab      	cmp	r3, r5
 800e822:	d10b      	bne.n	800e83c <__gethex+0x3c0>
 800e824:	1169      	asrs	r1, r5, #5
 800e826:	2301      	movs	r3, #1
 800e828:	f005 051f 	and.w	r5, r5, #31
 800e82c:	fa03 f505 	lsl.w	r5, r3, r5
 800e830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e834:	421d      	tst	r5, r3
 800e836:	bf18      	it	ne
 800e838:	f04f 0801 	movne.w	r8, #1
 800e83c:	f048 0820 	orr.w	r8, r8, #32
 800e840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e842:	601c      	str	r4, [r3, #0]
 800e844:	9b02      	ldr	r3, [sp, #8]
 800e846:	601e      	str	r6, [r3, #0]
 800e848:	e6a2      	b.n	800e590 <__gethex+0x114>
 800e84a:	4290      	cmp	r0, r2
 800e84c:	f842 3c04 	str.w	r3, [r2, #-4]
 800e850:	d8d6      	bhi.n	800e800 <__gethex+0x384>
 800e852:	68a2      	ldr	r2, [r4, #8]
 800e854:	4593      	cmp	fp, r2
 800e856:	db17      	blt.n	800e888 <__gethex+0x40c>
 800e858:	6861      	ldr	r1, [r4, #4]
 800e85a:	4648      	mov	r0, r9
 800e85c:	3101      	adds	r1, #1
 800e85e:	f000 f9c3 	bl	800ebe8 <_Balloc>
 800e862:	4682      	mov	sl, r0
 800e864:	b918      	cbnz	r0, 800e86e <__gethex+0x3f2>
 800e866:	4b1b      	ldr	r3, [pc, #108]	; (800e8d4 <__gethex+0x458>)
 800e868:	4602      	mov	r2, r0
 800e86a:	2184      	movs	r1, #132	; 0x84
 800e86c:	e6b3      	b.n	800e5d6 <__gethex+0x15a>
 800e86e:	6922      	ldr	r2, [r4, #16]
 800e870:	3202      	adds	r2, #2
 800e872:	f104 010c 	add.w	r1, r4, #12
 800e876:	0092      	lsls	r2, r2, #2
 800e878:	300c      	adds	r0, #12
 800e87a:	f7fe febb 	bl	800d5f4 <memcpy>
 800e87e:	4621      	mov	r1, r4
 800e880:	4648      	mov	r0, r9
 800e882:	f000 f9f1 	bl	800ec68 <_Bfree>
 800e886:	4654      	mov	r4, sl
 800e888:	6922      	ldr	r2, [r4, #16]
 800e88a:	1c51      	adds	r1, r2, #1
 800e88c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e890:	6121      	str	r1, [r4, #16]
 800e892:	2101      	movs	r1, #1
 800e894:	6151      	str	r1, [r2, #20]
 800e896:	e7bc      	b.n	800e812 <__gethex+0x396>
 800e898:	6921      	ldr	r1, [r4, #16]
 800e89a:	4559      	cmp	r1, fp
 800e89c:	dd0b      	ble.n	800e8b6 <__gethex+0x43a>
 800e89e:	2101      	movs	r1, #1
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f7ff fd83 	bl	800e3ac <rshift>
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	3601      	adds	r6, #1
 800e8aa:	42b3      	cmp	r3, r6
 800e8ac:	f6ff aedb 	blt.w	800e666 <__gethex+0x1ea>
 800e8b0:	f04f 0801 	mov.w	r8, #1
 800e8b4:	e7c2      	b.n	800e83c <__gethex+0x3c0>
 800e8b6:	f015 051f 	ands.w	r5, r5, #31
 800e8ba:	d0f9      	beq.n	800e8b0 <__gethex+0x434>
 800e8bc:	9b01      	ldr	r3, [sp, #4]
 800e8be:	441a      	add	r2, r3
 800e8c0:	f1c5 0520 	rsb	r5, r5, #32
 800e8c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e8c8:	f000 fa80 	bl	800edcc <__hi0bits>
 800e8cc:	42a8      	cmp	r0, r5
 800e8ce:	dbe6      	blt.n	800e89e <__gethex+0x422>
 800e8d0:	e7ee      	b.n	800e8b0 <__gethex+0x434>
 800e8d2:	bf00      	nop
 800e8d4:	08010308 	.word	0x08010308

0800e8d8 <L_shift>:
 800e8d8:	f1c2 0208 	rsb	r2, r2, #8
 800e8dc:	0092      	lsls	r2, r2, #2
 800e8de:	b570      	push	{r4, r5, r6, lr}
 800e8e0:	f1c2 0620 	rsb	r6, r2, #32
 800e8e4:	6843      	ldr	r3, [r0, #4]
 800e8e6:	6804      	ldr	r4, [r0, #0]
 800e8e8:	fa03 f506 	lsl.w	r5, r3, r6
 800e8ec:	432c      	orrs	r4, r5
 800e8ee:	40d3      	lsrs	r3, r2
 800e8f0:	6004      	str	r4, [r0, #0]
 800e8f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8f6:	4288      	cmp	r0, r1
 800e8f8:	d3f4      	bcc.n	800e8e4 <L_shift+0xc>
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}

0800e8fc <__match>:
 800e8fc:	b530      	push	{r4, r5, lr}
 800e8fe:	6803      	ldr	r3, [r0, #0]
 800e900:	3301      	adds	r3, #1
 800e902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e906:	b914      	cbnz	r4, 800e90e <__match+0x12>
 800e908:	6003      	str	r3, [r0, #0]
 800e90a:	2001      	movs	r0, #1
 800e90c:	bd30      	pop	{r4, r5, pc}
 800e90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e912:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e916:	2d19      	cmp	r5, #25
 800e918:	bf98      	it	ls
 800e91a:	3220      	addls	r2, #32
 800e91c:	42a2      	cmp	r2, r4
 800e91e:	d0f0      	beq.n	800e902 <__match+0x6>
 800e920:	2000      	movs	r0, #0
 800e922:	e7f3      	b.n	800e90c <__match+0x10>

0800e924 <__hexnan>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	680b      	ldr	r3, [r1, #0]
 800e92a:	6801      	ldr	r1, [r0, #0]
 800e92c:	115e      	asrs	r6, r3, #5
 800e92e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e932:	f013 031f 	ands.w	r3, r3, #31
 800e936:	b087      	sub	sp, #28
 800e938:	bf18      	it	ne
 800e93a:	3604      	addne	r6, #4
 800e93c:	2500      	movs	r5, #0
 800e93e:	1f37      	subs	r7, r6, #4
 800e940:	4682      	mov	sl, r0
 800e942:	4690      	mov	r8, r2
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	f846 5c04 	str.w	r5, [r6, #-4]
 800e94a:	46b9      	mov	r9, r7
 800e94c:	463c      	mov	r4, r7
 800e94e:	9502      	str	r5, [sp, #8]
 800e950:	46ab      	mov	fp, r5
 800e952:	784a      	ldrb	r2, [r1, #1]
 800e954:	1c4b      	adds	r3, r1, #1
 800e956:	9303      	str	r3, [sp, #12]
 800e958:	b342      	cbz	r2, 800e9ac <__hexnan+0x88>
 800e95a:	4610      	mov	r0, r2
 800e95c:	9105      	str	r1, [sp, #20]
 800e95e:	9204      	str	r2, [sp, #16]
 800e960:	f7ff fd76 	bl	800e450 <__hexdig_fun>
 800e964:	2800      	cmp	r0, #0
 800e966:	d14f      	bne.n	800ea08 <__hexnan+0xe4>
 800e968:	9a04      	ldr	r2, [sp, #16]
 800e96a:	9905      	ldr	r1, [sp, #20]
 800e96c:	2a20      	cmp	r2, #32
 800e96e:	d818      	bhi.n	800e9a2 <__hexnan+0x7e>
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	459b      	cmp	fp, r3
 800e974:	dd13      	ble.n	800e99e <__hexnan+0x7a>
 800e976:	454c      	cmp	r4, r9
 800e978:	d206      	bcs.n	800e988 <__hexnan+0x64>
 800e97a:	2d07      	cmp	r5, #7
 800e97c:	dc04      	bgt.n	800e988 <__hexnan+0x64>
 800e97e:	462a      	mov	r2, r5
 800e980:	4649      	mov	r1, r9
 800e982:	4620      	mov	r0, r4
 800e984:	f7ff ffa8 	bl	800e8d8 <L_shift>
 800e988:	4544      	cmp	r4, r8
 800e98a:	d950      	bls.n	800ea2e <__hexnan+0x10a>
 800e98c:	2300      	movs	r3, #0
 800e98e:	f1a4 0904 	sub.w	r9, r4, #4
 800e992:	f844 3c04 	str.w	r3, [r4, #-4]
 800e996:	f8cd b008 	str.w	fp, [sp, #8]
 800e99a:	464c      	mov	r4, r9
 800e99c:	461d      	mov	r5, r3
 800e99e:	9903      	ldr	r1, [sp, #12]
 800e9a0:	e7d7      	b.n	800e952 <__hexnan+0x2e>
 800e9a2:	2a29      	cmp	r2, #41	; 0x29
 800e9a4:	d155      	bne.n	800ea52 <__hexnan+0x12e>
 800e9a6:	3102      	adds	r1, #2
 800e9a8:	f8ca 1000 	str.w	r1, [sl]
 800e9ac:	f1bb 0f00 	cmp.w	fp, #0
 800e9b0:	d04f      	beq.n	800ea52 <__hexnan+0x12e>
 800e9b2:	454c      	cmp	r4, r9
 800e9b4:	d206      	bcs.n	800e9c4 <__hexnan+0xa0>
 800e9b6:	2d07      	cmp	r5, #7
 800e9b8:	dc04      	bgt.n	800e9c4 <__hexnan+0xa0>
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4649      	mov	r1, r9
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f7ff ff8a 	bl	800e8d8 <L_shift>
 800e9c4:	4544      	cmp	r4, r8
 800e9c6:	d934      	bls.n	800ea32 <__hexnan+0x10e>
 800e9c8:	f1a8 0204 	sub.w	r2, r8, #4
 800e9cc:	4623      	mov	r3, r4
 800e9ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800e9d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e9d6:	429f      	cmp	r7, r3
 800e9d8:	d2f9      	bcs.n	800e9ce <__hexnan+0xaa>
 800e9da:	1b3b      	subs	r3, r7, r4
 800e9dc:	f023 0303 	bic.w	r3, r3, #3
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	3e03      	subs	r6, #3
 800e9e4:	3401      	adds	r4, #1
 800e9e6:	42a6      	cmp	r6, r4
 800e9e8:	bf38      	it	cc
 800e9ea:	2304      	movcc	r3, #4
 800e9ec:	4443      	add	r3, r8
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f843 2b04 	str.w	r2, [r3], #4
 800e9f4:	429f      	cmp	r7, r3
 800e9f6:	d2fb      	bcs.n	800e9f0 <__hexnan+0xcc>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	b91b      	cbnz	r3, 800ea04 <__hexnan+0xe0>
 800e9fc:	4547      	cmp	r7, r8
 800e9fe:	d126      	bne.n	800ea4e <__hexnan+0x12a>
 800ea00:	2301      	movs	r3, #1
 800ea02:	603b      	str	r3, [r7, #0]
 800ea04:	2005      	movs	r0, #5
 800ea06:	e025      	b.n	800ea54 <__hexnan+0x130>
 800ea08:	3501      	adds	r5, #1
 800ea0a:	2d08      	cmp	r5, #8
 800ea0c:	f10b 0b01 	add.w	fp, fp, #1
 800ea10:	dd06      	ble.n	800ea20 <__hexnan+0xfc>
 800ea12:	4544      	cmp	r4, r8
 800ea14:	d9c3      	bls.n	800e99e <__hexnan+0x7a>
 800ea16:	2300      	movs	r3, #0
 800ea18:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea1c:	2501      	movs	r5, #1
 800ea1e:	3c04      	subs	r4, #4
 800ea20:	6822      	ldr	r2, [r4, #0]
 800ea22:	f000 000f 	and.w	r0, r0, #15
 800ea26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ea2a:	6020      	str	r0, [r4, #0]
 800ea2c:	e7b7      	b.n	800e99e <__hexnan+0x7a>
 800ea2e:	2508      	movs	r5, #8
 800ea30:	e7b5      	b.n	800e99e <__hexnan+0x7a>
 800ea32:	9b01      	ldr	r3, [sp, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d0df      	beq.n	800e9f8 <__hexnan+0xd4>
 800ea38:	f1c3 0320 	rsb	r3, r3, #32
 800ea3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea40:	40da      	lsrs	r2, r3
 800ea42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ea46:	4013      	ands	r3, r2
 800ea48:	f846 3c04 	str.w	r3, [r6, #-4]
 800ea4c:	e7d4      	b.n	800e9f8 <__hexnan+0xd4>
 800ea4e:	3f04      	subs	r7, #4
 800ea50:	e7d2      	b.n	800e9f8 <__hexnan+0xd4>
 800ea52:	2004      	movs	r0, #4
 800ea54:	b007      	add	sp, #28
 800ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ea5c <malloc>:
 800ea5c:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <malloc+0xc>)
 800ea5e:	4601      	mov	r1, r0
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	f000 b823 	b.w	800eaac <_malloc_r>
 800ea66:	bf00      	nop
 800ea68:	200001d4 	.word	0x200001d4

0800ea6c <sbrk_aligned>:
 800ea6c:	b570      	push	{r4, r5, r6, lr}
 800ea6e:	4e0e      	ldr	r6, [pc, #56]	; (800eaa8 <sbrk_aligned+0x3c>)
 800ea70:	460c      	mov	r4, r1
 800ea72:	6831      	ldr	r1, [r6, #0]
 800ea74:	4605      	mov	r5, r0
 800ea76:	b911      	cbnz	r1, 800ea7e <sbrk_aligned+0x12>
 800ea78:	f000 ff90 	bl	800f99c <_sbrk_r>
 800ea7c:	6030      	str	r0, [r6, #0]
 800ea7e:	4621      	mov	r1, r4
 800ea80:	4628      	mov	r0, r5
 800ea82:	f000 ff8b 	bl	800f99c <_sbrk_r>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	d00a      	beq.n	800eaa0 <sbrk_aligned+0x34>
 800ea8a:	1cc4      	adds	r4, r0, #3
 800ea8c:	f024 0403 	bic.w	r4, r4, #3
 800ea90:	42a0      	cmp	r0, r4
 800ea92:	d007      	beq.n	800eaa4 <sbrk_aligned+0x38>
 800ea94:	1a21      	subs	r1, r4, r0
 800ea96:	4628      	mov	r0, r5
 800ea98:	f000 ff80 	bl	800f99c <_sbrk_r>
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	d101      	bne.n	800eaa4 <sbrk_aligned+0x38>
 800eaa0:	f04f 34ff 	mov.w	r4, #4294967295
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
 800eaa8:	20003188 	.word	0x20003188

0800eaac <_malloc_r>:
 800eaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab0:	1ccd      	adds	r5, r1, #3
 800eab2:	f025 0503 	bic.w	r5, r5, #3
 800eab6:	3508      	adds	r5, #8
 800eab8:	2d0c      	cmp	r5, #12
 800eaba:	bf38      	it	cc
 800eabc:	250c      	movcc	r5, #12
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	4607      	mov	r7, r0
 800eac2:	db01      	blt.n	800eac8 <_malloc_r+0x1c>
 800eac4:	42a9      	cmp	r1, r5
 800eac6:	d905      	bls.n	800ead4 <_malloc_r+0x28>
 800eac8:	230c      	movs	r3, #12
 800eaca:	603b      	str	r3, [r7, #0]
 800eacc:	2600      	movs	r6, #0
 800eace:	4630      	mov	r0, r6
 800ead0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eba8 <_malloc_r+0xfc>
 800ead8:	f000 f87a 	bl	800ebd0 <__malloc_lock>
 800eadc:	f8d8 3000 	ldr.w	r3, [r8]
 800eae0:	461c      	mov	r4, r3
 800eae2:	bb5c      	cbnz	r4, 800eb3c <_malloc_r+0x90>
 800eae4:	4629      	mov	r1, r5
 800eae6:	4638      	mov	r0, r7
 800eae8:	f7ff ffc0 	bl	800ea6c <sbrk_aligned>
 800eaec:	1c43      	adds	r3, r0, #1
 800eaee:	4604      	mov	r4, r0
 800eaf0:	d155      	bne.n	800eb9e <_malloc_r+0xf2>
 800eaf2:	f8d8 4000 	ldr.w	r4, [r8]
 800eaf6:	4626      	mov	r6, r4
 800eaf8:	2e00      	cmp	r6, #0
 800eafa:	d145      	bne.n	800eb88 <_malloc_r+0xdc>
 800eafc:	2c00      	cmp	r4, #0
 800eafe:	d048      	beq.n	800eb92 <_malloc_r+0xe6>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	4631      	mov	r1, r6
 800eb04:	4638      	mov	r0, r7
 800eb06:	eb04 0903 	add.w	r9, r4, r3
 800eb0a:	f000 ff47 	bl	800f99c <_sbrk_r>
 800eb0e:	4581      	cmp	r9, r0
 800eb10:	d13f      	bne.n	800eb92 <_malloc_r+0xe6>
 800eb12:	6821      	ldr	r1, [r4, #0]
 800eb14:	1a6d      	subs	r5, r5, r1
 800eb16:	4629      	mov	r1, r5
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f7ff ffa7 	bl	800ea6c <sbrk_aligned>
 800eb1e:	3001      	adds	r0, #1
 800eb20:	d037      	beq.n	800eb92 <_malloc_r+0xe6>
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	442b      	add	r3, r5
 800eb26:	6023      	str	r3, [r4, #0]
 800eb28:	f8d8 3000 	ldr.w	r3, [r8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d038      	beq.n	800eba2 <_malloc_r+0xf6>
 800eb30:	685a      	ldr	r2, [r3, #4]
 800eb32:	42a2      	cmp	r2, r4
 800eb34:	d12b      	bne.n	800eb8e <_malloc_r+0xe2>
 800eb36:	2200      	movs	r2, #0
 800eb38:	605a      	str	r2, [r3, #4]
 800eb3a:	e00f      	b.n	800eb5c <_malloc_r+0xb0>
 800eb3c:	6822      	ldr	r2, [r4, #0]
 800eb3e:	1b52      	subs	r2, r2, r5
 800eb40:	d41f      	bmi.n	800eb82 <_malloc_r+0xd6>
 800eb42:	2a0b      	cmp	r2, #11
 800eb44:	d917      	bls.n	800eb76 <_malloc_r+0xca>
 800eb46:	1961      	adds	r1, r4, r5
 800eb48:	42a3      	cmp	r3, r4
 800eb4a:	6025      	str	r5, [r4, #0]
 800eb4c:	bf18      	it	ne
 800eb4e:	6059      	strne	r1, [r3, #4]
 800eb50:	6863      	ldr	r3, [r4, #4]
 800eb52:	bf08      	it	eq
 800eb54:	f8c8 1000 	streq.w	r1, [r8]
 800eb58:	5162      	str	r2, [r4, r5]
 800eb5a:	604b      	str	r3, [r1, #4]
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	f104 060b 	add.w	r6, r4, #11
 800eb62:	f000 f83b 	bl	800ebdc <__malloc_unlock>
 800eb66:	f026 0607 	bic.w	r6, r6, #7
 800eb6a:	1d23      	adds	r3, r4, #4
 800eb6c:	1af2      	subs	r2, r6, r3
 800eb6e:	d0ae      	beq.n	800eace <_malloc_r+0x22>
 800eb70:	1b9b      	subs	r3, r3, r6
 800eb72:	50a3      	str	r3, [r4, r2]
 800eb74:	e7ab      	b.n	800eace <_malloc_r+0x22>
 800eb76:	42a3      	cmp	r3, r4
 800eb78:	6862      	ldr	r2, [r4, #4]
 800eb7a:	d1dd      	bne.n	800eb38 <_malloc_r+0x8c>
 800eb7c:	f8c8 2000 	str.w	r2, [r8]
 800eb80:	e7ec      	b.n	800eb5c <_malloc_r+0xb0>
 800eb82:	4623      	mov	r3, r4
 800eb84:	6864      	ldr	r4, [r4, #4]
 800eb86:	e7ac      	b.n	800eae2 <_malloc_r+0x36>
 800eb88:	4634      	mov	r4, r6
 800eb8a:	6876      	ldr	r6, [r6, #4]
 800eb8c:	e7b4      	b.n	800eaf8 <_malloc_r+0x4c>
 800eb8e:	4613      	mov	r3, r2
 800eb90:	e7cc      	b.n	800eb2c <_malloc_r+0x80>
 800eb92:	230c      	movs	r3, #12
 800eb94:	603b      	str	r3, [r7, #0]
 800eb96:	4638      	mov	r0, r7
 800eb98:	f000 f820 	bl	800ebdc <__malloc_unlock>
 800eb9c:	e797      	b.n	800eace <_malloc_r+0x22>
 800eb9e:	6025      	str	r5, [r4, #0]
 800eba0:	e7dc      	b.n	800eb5c <_malloc_r+0xb0>
 800eba2:	605b      	str	r3, [r3, #4]
 800eba4:	deff      	udf	#255	; 0xff
 800eba6:	bf00      	nop
 800eba8:	20003184 	.word	0x20003184

0800ebac <__ascii_mbtowc>:
 800ebac:	b082      	sub	sp, #8
 800ebae:	b901      	cbnz	r1, 800ebb2 <__ascii_mbtowc+0x6>
 800ebb0:	a901      	add	r1, sp, #4
 800ebb2:	b142      	cbz	r2, 800ebc6 <__ascii_mbtowc+0x1a>
 800ebb4:	b14b      	cbz	r3, 800ebca <__ascii_mbtowc+0x1e>
 800ebb6:	7813      	ldrb	r3, [r2, #0]
 800ebb8:	600b      	str	r3, [r1, #0]
 800ebba:	7812      	ldrb	r2, [r2, #0]
 800ebbc:	1e10      	subs	r0, r2, #0
 800ebbe:	bf18      	it	ne
 800ebc0:	2001      	movne	r0, #1
 800ebc2:	b002      	add	sp, #8
 800ebc4:	4770      	bx	lr
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	e7fb      	b.n	800ebc2 <__ascii_mbtowc+0x16>
 800ebca:	f06f 0001 	mvn.w	r0, #1
 800ebce:	e7f8      	b.n	800ebc2 <__ascii_mbtowc+0x16>

0800ebd0 <__malloc_lock>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__malloc_lock+0x8>)
 800ebd2:	f7fe bd0d 	b.w	800d5f0 <__retarget_lock_acquire_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	20003180 	.word	0x20003180

0800ebdc <__malloc_unlock>:
 800ebdc:	4801      	ldr	r0, [pc, #4]	; (800ebe4 <__malloc_unlock+0x8>)
 800ebde:	f7fe bd08 	b.w	800d5f2 <__retarget_lock_release_recursive>
 800ebe2:	bf00      	nop
 800ebe4:	20003180 	.word	0x20003180

0800ebe8 <_Balloc>:
 800ebe8:	b570      	push	{r4, r5, r6, lr}
 800ebea:	69c6      	ldr	r6, [r0, #28]
 800ebec:	4604      	mov	r4, r0
 800ebee:	460d      	mov	r5, r1
 800ebf0:	b976      	cbnz	r6, 800ec10 <_Balloc+0x28>
 800ebf2:	2010      	movs	r0, #16
 800ebf4:	f7ff ff32 	bl	800ea5c <malloc>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	61e0      	str	r0, [r4, #28]
 800ebfc:	b920      	cbnz	r0, 800ec08 <_Balloc+0x20>
 800ebfe:	4b18      	ldr	r3, [pc, #96]	; (800ec60 <_Balloc+0x78>)
 800ec00:	4818      	ldr	r0, [pc, #96]	; (800ec64 <_Balloc+0x7c>)
 800ec02:	216b      	movs	r1, #107	; 0x6b
 800ec04:	f000 feda 	bl	800f9bc <__assert_func>
 800ec08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec0c:	6006      	str	r6, [r0, #0]
 800ec0e:	60c6      	str	r6, [r0, #12]
 800ec10:	69e6      	ldr	r6, [r4, #28]
 800ec12:	68f3      	ldr	r3, [r6, #12]
 800ec14:	b183      	cbz	r3, 800ec38 <_Balloc+0x50>
 800ec16:	69e3      	ldr	r3, [r4, #28]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec1e:	b9b8      	cbnz	r0, 800ec50 <_Balloc+0x68>
 800ec20:	2101      	movs	r1, #1
 800ec22:	fa01 f605 	lsl.w	r6, r1, r5
 800ec26:	1d72      	adds	r2, r6, #5
 800ec28:	0092      	lsls	r2, r2, #2
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f000 fee4 	bl	800f9f8 <_calloc_r>
 800ec30:	b160      	cbz	r0, 800ec4c <_Balloc+0x64>
 800ec32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec36:	e00e      	b.n	800ec56 <_Balloc+0x6e>
 800ec38:	2221      	movs	r2, #33	; 0x21
 800ec3a:	2104      	movs	r1, #4
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f000 fedb 	bl	800f9f8 <_calloc_r>
 800ec42:	69e3      	ldr	r3, [r4, #28]
 800ec44:	60f0      	str	r0, [r6, #12]
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1e4      	bne.n	800ec16 <_Balloc+0x2e>
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	bd70      	pop	{r4, r5, r6, pc}
 800ec50:	6802      	ldr	r2, [r0, #0]
 800ec52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec56:	2300      	movs	r3, #0
 800ec58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec5c:	e7f7      	b.n	800ec4e <_Balloc+0x66>
 800ec5e:	bf00      	nop
 800ec60:	08010299 	.word	0x08010299
 800ec64:	08010379 	.word	0x08010379

0800ec68 <_Bfree>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	69c6      	ldr	r6, [r0, #28]
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	b976      	cbnz	r6, 800ec90 <_Bfree+0x28>
 800ec72:	2010      	movs	r0, #16
 800ec74:	f7ff fef2 	bl	800ea5c <malloc>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	61e8      	str	r0, [r5, #28]
 800ec7c:	b920      	cbnz	r0, 800ec88 <_Bfree+0x20>
 800ec7e:	4b09      	ldr	r3, [pc, #36]	; (800eca4 <_Bfree+0x3c>)
 800ec80:	4809      	ldr	r0, [pc, #36]	; (800eca8 <_Bfree+0x40>)
 800ec82:	218f      	movs	r1, #143	; 0x8f
 800ec84:	f000 fe9a 	bl	800f9bc <__assert_func>
 800ec88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec8c:	6006      	str	r6, [r0, #0]
 800ec8e:	60c6      	str	r6, [r0, #12]
 800ec90:	b13c      	cbz	r4, 800eca2 <_Bfree+0x3a>
 800ec92:	69eb      	ldr	r3, [r5, #28]
 800ec94:	6862      	ldr	r2, [r4, #4]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec9c:	6021      	str	r1, [r4, #0]
 800ec9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eca2:	bd70      	pop	{r4, r5, r6, pc}
 800eca4:	08010299 	.word	0x08010299
 800eca8:	08010379 	.word	0x08010379

0800ecac <__multadd>:
 800ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb0:	690d      	ldr	r5, [r1, #16]
 800ecb2:	4607      	mov	r7, r0
 800ecb4:	460c      	mov	r4, r1
 800ecb6:	461e      	mov	r6, r3
 800ecb8:	f101 0c14 	add.w	ip, r1, #20
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ecc2:	b299      	uxth	r1, r3
 800ecc4:	fb02 6101 	mla	r1, r2, r1, r6
 800ecc8:	0c1e      	lsrs	r6, r3, #16
 800ecca:	0c0b      	lsrs	r3, r1, #16
 800eccc:	fb02 3306 	mla	r3, r2, r6, r3
 800ecd0:	b289      	uxth	r1, r1
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecd8:	4285      	cmp	r5, r0
 800ecda:	f84c 1b04 	str.w	r1, [ip], #4
 800ecde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ece2:	dcec      	bgt.n	800ecbe <__multadd+0x12>
 800ece4:	b30e      	cbz	r6, 800ed2a <__multadd+0x7e>
 800ece6:	68a3      	ldr	r3, [r4, #8]
 800ece8:	42ab      	cmp	r3, r5
 800ecea:	dc19      	bgt.n	800ed20 <__multadd+0x74>
 800ecec:	6861      	ldr	r1, [r4, #4]
 800ecee:	4638      	mov	r0, r7
 800ecf0:	3101      	adds	r1, #1
 800ecf2:	f7ff ff79 	bl	800ebe8 <_Balloc>
 800ecf6:	4680      	mov	r8, r0
 800ecf8:	b928      	cbnz	r0, 800ed06 <__multadd+0x5a>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	4b0c      	ldr	r3, [pc, #48]	; (800ed30 <__multadd+0x84>)
 800ecfe:	480d      	ldr	r0, [pc, #52]	; (800ed34 <__multadd+0x88>)
 800ed00:	21ba      	movs	r1, #186	; 0xba
 800ed02:	f000 fe5b 	bl	800f9bc <__assert_func>
 800ed06:	6922      	ldr	r2, [r4, #16]
 800ed08:	3202      	adds	r2, #2
 800ed0a:	f104 010c 	add.w	r1, r4, #12
 800ed0e:	0092      	lsls	r2, r2, #2
 800ed10:	300c      	adds	r0, #12
 800ed12:	f7fe fc6f 	bl	800d5f4 <memcpy>
 800ed16:	4621      	mov	r1, r4
 800ed18:	4638      	mov	r0, r7
 800ed1a:	f7ff ffa5 	bl	800ec68 <_Bfree>
 800ed1e:	4644      	mov	r4, r8
 800ed20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed24:	3501      	adds	r5, #1
 800ed26:	615e      	str	r6, [r3, #20]
 800ed28:	6125      	str	r5, [r4, #16]
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed30:	08010308 	.word	0x08010308
 800ed34:	08010379 	.word	0x08010379

0800ed38 <__s2b>:
 800ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	4615      	mov	r5, r2
 800ed40:	461f      	mov	r7, r3
 800ed42:	2209      	movs	r2, #9
 800ed44:	3308      	adds	r3, #8
 800ed46:	4606      	mov	r6, r0
 800ed48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	2201      	movs	r2, #1
 800ed50:	429a      	cmp	r2, r3
 800ed52:	db09      	blt.n	800ed68 <__s2b+0x30>
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff ff47 	bl	800ebe8 <_Balloc>
 800ed5a:	b940      	cbnz	r0, 800ed6e <__s2b+0x36>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	4b19      	ldr	r3, [pc, #100]	; (800edc4 <__s2b+0x8c>)
 800ed60:	4819      	ldr	r0, [pc, #100]	; (800edc8 <__s2b+0x90>)
 800ed62:	21d3      	movs	r1, #211	; 0xd3
 800ed64:	f000 fe2a 	bl	800f9bc <__assert_func>
 800ed68:	0052      	lsls	r2, r2, #1
 800ed6a:	3101      	adds	r1, #1
 800ed6c:	e7f0      	b.n	800ed50 <__s2b+0x18>
 800ed6e:	9b08      	ldr	r3, [sp, #32]
 800ed70:	6143      	str	r3, [r0, #20]
 800ed72:	2d09      	cmp	r5, #9
 800ed74:	f04f 0301 	mov.w	r3, #1
 800ed78:	6103      	str	r3, [r0, #16]
 800ed7a:	dd16      	ble.n	800edaa <__s2b+0x72>
 800ed7c:	f104 0909 	add.w	r9, r4, #9
 800ed80:	46c8      	mov	r8, r9
 800ed82:	442c      	add	r4, r5
 800ed84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed88:	4601      	mov	r1, r0
 800ed8a:	3b30      	subs	r3, #48	; 0x30
 800ed8c:	220a      	movs	r2, #10
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f7ff ff8c 	bl	800ecac <__multadd>
 800ed94:	45a0      	cmp	r8, r4
 800ed96:	d1f5      	bne.n	800ed84 <__s2b+0x4c>
 800ed98:	f1a5 0408 	sub.w	r4, r5, #8
 800ed9c:	444c      	add	r4, r9
 800ed9e:	1b2d      	subs	r5, r5, r4
 800eda0:	1963      	adds	r3, r4, r5
 800eda2:	42bb      	cmp	r3, r7
 800eda4:	db04      	blt.n	800edb0 <__s2b+0x78>
 800eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edaa:	340a      	adds	r4, #10
 800edac:	2509      	movs	r5, #9
 800edae:	e7f6      	b.n	800ed9e <__s2b+0x66>
 800edb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edb4:	4601      	mov	r1, r0
 800edb6:	3b30      	subs	r3, #48	; 0x30
 800edb8:	220a      	movs	r2, #10
 800edba:	4630      	mov	r0, r6
 800edbc:	f7ff ff76 	bl	800ecac <__multadd>
 800edc0:	e7ee      	b.n	800eda0 <__s2b+0x68>
 800edc2:	bf00      	nop
 800edc4:	08010308 	.word	0x08010308
 800edc8:	08010379 	.word	0x08010379

0800edcc <__hi0bits>:
 800edcc:	0c03      	lsrs	r3, r0, #16
 800edce:	041b      	lsls	r3, r3, #16
 800edd0:	b9d3      	cbnz	r3, 800ee08 <__hi0bits+0x3c>
 800edd2:	0400      	lsls	r0, r0, #16
 800edd4:	2310      	movs	r3, #16
 800edd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edda:	bf04      	itt	eq
 800eddc:	0200      	lsleq	r0, r0, #8
 800edde:	3308      	addeq	r3, #8
 800ede0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ede4:	bf04      	itt	eq
 800ede6:	0100      	lsleq	r0, r0, #4
 800ede8:	3304      	addeq	r3, #4
 800edea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800edee:	bf04      	itt	eq
 800edf0:	0080      	lsleq	r0, r0, #2
 800edf2:	3302      	addeq	r3, #2
 800edf4:	2800      	cmp	r0, #0
 800edf6:	db05      	blt.n	800ee04 <__hi0bits+0x38>
 800edf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800edfc:	f103 0301 	add.w	r3, r3, #1
 800ee00:	bf08      	it	eq
 800ee02:	2320      	moveq	r3, #32
 800ee04:	4618      	mov	r0, r3
 800ee06:	4770      	bx	lr
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e7e4      	b.n	800edd6 <__hi0bits+0xa>

0800ee0c <__lo0bits>:
 800ee0c:	6803      	ldr	r3, [r0, #0]
 800ee0e:	f013 0207 	ands.w	r2, r3, #7
 800ee12:	d00c      	beq.n	800ee2e <__lo0bits+0x22>
 800ee14:	07d9      	lsls	r1, r3, #31
 800ee16:	d422      	bmi.n	800ee5e <__lo0bits+0x52>
 800ee18:	079a      	lsls	r2, r3, #30
 800ee1a:	bf49      	itett	mi
 800ee1c:	085b      	lsrmi	r3, r3, #1
 800ee1e:	089b      	lsrpl	r3, r3, #2
 800ee20:	6003      	strmi	r3, [r0, #0]
 800ee22:	2201      	movmi	r2, #1
 800ee24:	bf5c      	itt	pl
 800ee26:	6003      	strpl	r3, [r0, #0]
 800ee28:	2202      	movpl	r2, #2
 800ee2a:	4610      	mov	r0, r2
 800ee2c:	4770      	bx	lr
 800ee2e:	b299      	uxth	r1, r3
 800ee30:	b909      	cbnz	r1, 800ee36 <__lo0bits+0x2a>
 800ee32:	0c1b      	lsrs	r3, r3, #16
 800ee34:	2210      	movs	r2, #16
 800ee36:	b2d9      	uxtb	r1, r3
 800ee38:	b909      	cbnz	r1, 800ee3e <__lo0bits+0x32>
 800ee3a:	3208      	adds	r2, #8
 800ee3c:	0a1b      	lsrs	r3, r3, #8
 800ee3e:	0719      	lsls	r1, r3, #28
 800ee40:	bf04      	itt	eq
 800ee42:	091b      	lsreq	r3, r3, #4
 800ee44:	3204      	addeq	r2, #4
 800ee46:	0799      	lsls	r1, r3, #30
 800ee48:	bf04      	itt	eq
 800ee4a:	089b      	lsreq	r3, r3, #2
 800ee4c:	3202      	addeq	r2, #2
 800ee4e:	07d9      	lsls	r1, r3, #31
 800ee50:	d403      	bmi.n	800ee5a <__lo0bits+0x4e>
 800ee52:	085b      	lsrs	r3, r3, #1
 800ee54:	f102 0201 	add.w	r2, r2, #1
 800ee58:	d003      	beq.n	800ee62 <__lo0bits+0x56>
 800ee5a:	6003      	str	r3, [r0, #0]
 800ee5c:	e7e5      	b.n	800ee2a <__lo0bits+0x1e>
 800ee5e:	2200      	movs	r2, #0
 800ee60:	e7e3      	b.n	800ee2a <__lo0bits+0x1e>
 800ee62:	2220      	movs	r2, #32
 800ee64:	e7e1      	b.n	800ee2a <__lo0bits+0x1e>
	...

0800ee68 <__i2b>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	f7ff febb 	bl	800ebe8 <_Balloc>
 800ee72:	4602      	mov	r2, r0
 800ee74:	b928      	cbnz	r0, 800ee82 <__i2b+0x1a>
 800ee76:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <__i2b+0x24>)
 800ee78:	4805      	ldr	r0, [pc, #20]	; (800ee90 <__i2b+0x28>)
 800ee7a:	f240 1145 	movw	r1, #325	; 0x145
 800ee7e:	f000 fd9d 	bl	800f9bc <__assert_func>
 800ee82:	2301      	movs	r3, #1
 800ee84:	6144      	str	r4, [r0, #20]
 800ee86:	6103      	str	r3, [r0, #16]
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	bf00      	nop
 800ee8c:	08010308 	.word	0x08010308
 800ee90:	08010379 	.word	0x08010379

0800ee94 <__multiply>:
 800ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee98:	4691      	mov	r9, r2
 800ee9a:	690a      	ldr	r2, [r1, #16]
 800ee9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	bfb8      	it	lt
 800eea4:	460b      	movlt	r3, r1
 800eea6:	460c      	mov	r4, r1
 800eea8:	bfbc      	itt	lt
 800eeaa:	464c      	movlt	r4, r9
 800eeac:	4699      	movlt	r9, r3
 800eeae:	6927      	ldr	r7, [r4, #16]
 800eeb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	6861      	ldr	r1, [r4, #4]
 800eeb8:	eb07 060a 	add.w	r6, r7, sl
 800eebc:	42b3      	cmp	r3, r6
 800eebe:	b085      	sub	sp, #20
 800eec0:	bfb8      	it	lt
 800eec2:	3101      	addlt	r1, #1
 800eec4:	f7ff fe90 	bl	800ebe8 <_Balloc>
 800eec8:	b930      	cbnz	r0, 800eed8 <__multiply+0x44>
 800eeca:	4602      	mov	r2, r0
 800eecc:	4b44      	ldr	r3, [pc, #272]	; (800efe0 <__multiply+0x14c>)
 800eece:	4845      	ldr	r0, [pc, #276]	; (800efe4 <__multiply+0x150>)
 800eed0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800eed4:	f000 fd72 	bl	800f9bc <__assert_func>
 800eed8:	f100 0514 	add.w	r5, r0, #20
 800eedc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eee0:	462b      	mov	r3, r5
 800eee2:	2200      	movs	r2, #0
 800eee4:	4543      	cmp	r3, r8
 800eee6:	d321      	bcc.n	800ef2c <__multiply+0x98>
 800eee8:	f104 0314 	add.w	r3, r4, #20
 800eeec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eef0:	f109 0314 	add.w	r3, r9, #20
 800eef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eef8:	9202      	str	r2, [sp, #8]
 800eefa:	1b3a      	subs	r2, r7, r4
 800eefc:	3a15      	subs	r2, #21
 800eefe:	f022 0203 	bic.w	r2, r2, #3
 800ef02:	3204      	adds	r2, #4
 800ef04:	f104 0115 	add.w	r1, r4, #21
 800ef08:	428f      	cmp	r7, r1
 800ef0a:	bf38      	it	cc
 800ef0c:	2204      	movcc	r2, #4
 800ef0e:	9201      	str	r2, [sp, #4]
 800ef10:	9a02      	ldr	r2, [sp, #8]
 800ef12:	9303      	str	r3, [sp, #12]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d80c      	bhi.n	800ef32 <__multiply+0x9e>
 800ef18:	2e00      	cmp	r6, #0
 800ef1a:	dd03      	ble.n	800ef24 <__multiply+0x90>
 800ef1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d05b      	beq.n	800efdc <__multiply+0x148>
 800ef24:	6106      	str	r6, [r0, #16]
 800ef26:	b005      	add	sp, #20
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	f843 2b04 	str.w	r2, [r3], #4
 800ef30:	e7d8      	b.n	800eee4 <__multiply+0x50>
 800ef32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef36:	f1ba 0f00 	cmp.w	sl, #0
 800ef3a:	d024      	beq.n	800ef86 <__multiply+0xf2>
 800ef3c:	f104 0e14 	add.w	lr, r4, #20
 800ef40:	46a9      	mov	r9, r5
 800ef42:	f04f 0c00 	mov.w	ip, #0
 800ef46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ef4e:	fa1f fb82 	uxth.w	fp, r2
 800ef52:	b289      	uxth	r1, r1
 800ef54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ef60:	4461      	add	r1, ip
 800ef62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef6e:	b289      	uxth	r1, r1
 800ef70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef74:	4577      	cmp	r7, lr
 800ef76:	f849 1b04 	str.w	r1, [r9], #4
 800ef7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef7e:	d8e2      	bhi.n	800ef46 <__multiply+0xb2>
 800ef80:	9a01      	ldr	r2, [sp, #4]
 800ef82:	f845 c002 	str.w	ip, [r5, r2]
 800ef86:	9a03      	ldr	r2, [sp, #12]
 800ef88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	f1b9 0f00 	cmp.w	r9, #0
 800ef92:	d021      	beq.n	800efd8 <__multiply+0x144>
 800ef94:	6829      	ldr	r1, [r5, #0]
 800ef96:	f104 0c14 	add.w	ip, r4, #20
 800ef9a:	46ae      	mov	lr, r5
 800ef9c:	f04f 0a00 	mov.w	sl, #0
 800efa0:	f8bc b000 	ldrh.w	fp, [ip]
 800efa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efa8:	fb09 220b 	mla	r2, r9, fp, r2
 800efac:	4452      	add	r2, sl
 800efae:	b289      	uxth	r1, r1
 800efb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800efb4:	f84e 1b04 	str.w	r1, [lr], #4
 800efb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800efbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800efc0:	f8be 1000 	ldrh.w	r1, [lr]
 800efc4:	fb09 110a 	mla	r1, r9, sl, r1
 800efc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800efcc:	4567      	cmp	r7, ip
 800efce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800efd2:	d8e5      	bhi.n	800efa0 <__multiply+0x10c>
 800efd4:	9a01      	ldr	r2, [sp, #4]
 800efd6:	50a9      	str	r1, [r5, r2]
 800efd8:	3504      	adds	r5, #4
 800efda:	e799      	b.n	800ef10 <__multiply+0x7c>
 800efdc:	3e01      	subs	r6, #1
 800efde:	e79b      	b.n	800ef18 <__multiply+0x84>
 800efe0:	08010308 	.word	0x08010308
 800efe4:	08010379 	.word	0x08010379

0800efe8 <__pow5mult>:
 800efe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efec:	4615      	mov	r5, r2
 800efee:	f012 0203 	ands.w	r2, r2, #3
 800eff2:	4606      	mov	r6, r0
 800eff4:	460f      	mov	r7, r1
 800eff6:	d007      	beq.n	800f008 <__pow5mult+0x20>
 800eff8:	4c25      	ldr	r4, [pc, #148]	; (800f090 <__pow5mult+0xa8>)
 800effa:	3a01      	subs	r2, #1
 800effc:	2300      	movs	r3, #0
 800effe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f002:	f7ff fe53 	bl	800ecac <__multadd>
 800f006:	4607      	mov	r7, r0
 800f008:	10ad      	asrs	r5, r5, #2
 800f00a:	d03d      	beq.n	800f088 <__pow5mult+0xa0>
 800f00c:	69f4      	ldr	r4, [r6, #28]
 800f00e:	b97c      	cbnz	r4, 800f030 <__pow5mult+0x48>
 800f010:	2010      	movs	r0, #16
 800f012:	f7ff fd23 	bl	800ea5c <malloc>
 800f016:	4602      	mov	r2, r0
 800f018:	61f0      	str	r0, [r6, #28]
 800f01a:	b928      	cbnz	r0, 800f028 <__pow5mult+0x40>
 800f01c:	4b1d      	ldr	r3, [pc, #116]	; (800f094 <__pow5mult+0xac>)
 800f01e:	481e      	ldr	r0, [pc, #120]	; (800f098 <__pow5mult+0xb0>)
 800f020:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f024:	f000 fcca 	bl	800f9bc <__assert_func>
 800f028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f02c:	6004      	str	r4, [r0, #0]
 800f02e:	60c4      	str	r4, [r0, #12]
 800f030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f038:	b94c      	cbnz	r4, 800f04e <__pow5mult+0x66>
 800f03a:	f240 2171 	movw	r1, #625	; 0x271
 800f03e:	4630      	mov	r0, r6
 800f040:	f7ff ff12 	bl	800ee68 <__i2b>
 800f044:	2300      	movs	r3, #0
 800f046:	f8c8 0008 	str.w	r0, [r8, #8]
 800f04a:	4604      	mov	r4, r0
 800f04c:	6003      	str	r3, [r0, #0]
 800f04e:	f04f 0900 	mov.w	r9, #0
 800f052:	07eb      	lsls	r3, r5, #31
 800f054:	d50a      	bpl.n	800f06c <__pow5mult+0x84>
 800f056:	4639      	mov	r1, r7
 800f058:	4622      	mov	r2, r4
 800f05a:	4630      	mov	r0, r6
 800f05c:	f7ff ff1a 	bl	800ee94 <__multiply>
 800f060:	4639      	mov	r1, r7
 800f062:	4680      	mov	r8, r0
 800f064:	4630      	mov	r0, r6
 800f066:	f7ff fdff 	bl	800ec68 <_Bfree>
 800f06a:	4647      	mov	r7, r8
 800f06c:	106d      	asrs	r5, r5, #1
 800f06e:	d00b      	beq.n	800f088 <__pow5mult+0xa0>
 800f070:	6820      	ldr	r0, [r4, #0]
 800f072:	b938      	cbnz	r0, 800f084 <__pow5mult+0x9c>
 800f074:	4622      	mov	r2, r4
 800f076:	4621      	mov	r1, r4
 800f078:	4630      	mov	r0, r6
 800f07a:	f7ff ff0b 	bl	800ee94 <__multiply>
 800f07e:	6020      	str	r0, [r4, #0]
 800f080:	f8c0 9000 	str.w	r9, [r0]
 800f084:	4604      	mov	r4, r0
 800f086:	e7e4      	b.n	800f052 <__pow5mult+0x6a>
 800f088:	4638      	mov	r0, r7
 800f08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08e:	bf00      	nop
 800f090:	080104c8 	.word	0x080104c8
 800f094:	08010299 	.word	0x08010299
 800f098:	08010379 	.word	0x08010379

0800f09c <__lshift>:
 800f09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a0:	460c      	mov	r4, r1
 800f0a2:	6849      	ldr	r1, [r1, #4]
 800f0a4:	6923      	ldr	r3, [r4, #16]
 800f0a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0aa:	68a3      	ldr	r3, [r4, #8]
 800f0ac:	4607      	mov	r7, r0
 800f0ae:	4691      	mov	r9, r2
 800f0b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0b4:	f108 0601 	add.w	r6, r8, #1
 800f0b8:	42b3      	cmp	r3, r6
 800f0ba:	db0b      	blt.n	800f0d4 <__lshift+0x38>
 800f0bc:	4638      	mov	r0, r7
 800f0be:	f7ff fd93 	bl	800ebe8 <_Balloc>
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	b948      	cbnz	r0, 800f0da <__lshift+0x3e>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	4b28      	ldr	r3, [pc, #160]	; (800f16c <__lshift+0xd0>)
 800f0ca:	4829      	ldr	r0, [pc, #164]	; (800f170 <__lshift+0xd4>)
 800f0cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f0d0:	f000 fc74 	bl	800f9bc <__assert_func>
 800f0d4:	3101      	adds	r1, #1
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	e7ee      	b.n	800f0b8 <__lshift+0x1c>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f100 0114 	add.w	r1, r0, #20
 800f0e0:	f100 0210 	add.w	r2, r0, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	4553      	cmp	r3, sl
 800f0e8:	db33      	blt.n	800f152 <__lshift+0xb6>
 800f0ea:	6920      	ldr	r0, [r4, #16]
 800f0ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0f0:	f104 0314 	add.w	r3, r4, #20
 800f0f4:	f019 091f 	ands.w	r9, r9, #31
 800f0f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f100:	d02b      	beq.n	800f15a <__lshift+0xbe>
 800f102:	f1c9 0e20 	rsb	lr, r9, #32
 800f106:	468a      	mov	sl, r1
 800f108:	2200      	movs	r2, #0
 800f10a:	6818      	ldr	r0, [r3, #0]
 800f10c:	fa00 f009 	lsl.w	r0, r0, r9
 800f110:	4310      	orrs	r0, r2
 800f112:	f84a 0b04 	str.w	r0, [sl], #4
 800f116:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11a:	459c      	cmp	ip, r3
 800f11c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f120:	d8f3      	bhi.n	800f10a <__lshift+0x6e>
 800f122:	ebac 0304 	sub.w	r3, ip, r4
 800f126:	3b15      	subs	r3, #21
 800f128:	f023 0303 	bic.w	r3, r3, #3
 800f12c:	3304      	adds	r3, #4
 800f12e:	f104 0015 	add.w	r0, r4, #21
 800f132:	4584      	cmp	ip, r0
 800f134:	bf38      	it	cc
 800f136:	2304      	movcc	r3, #4
 800f138:	50ca      	str	r2, [r1, r3]
 800f13a:	b10a      	cbz	r2, 800f140 <__lshift+0xa4>
 800f13c:	f108 0602 	add.w	r6, r8, #2
 800f140:	3e01      	subs	r6, #1
 800f142:	4638      	mov	r0, r7
 800f144:	612e      	str	r6, [r5, #16]
 800f146:	4621      	mov	r1, r4
 800f148:	f7ff fd8e 	bl	800ec68 <_Bfree>
 800f14c:	4628      	mov	r0, r5
 800f14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f152:	f842 0f04 	str.w	r0, [r2, #4]!
 800f156:	3301      	adds	r3, #1
 800f158:	e7c5      	b.n	800f0e6 <__lshift+0x4a>
 800f15a:	3904      	subs	r1, #4
 800f15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f160:	f841 2f04 	str.w	r2, [r1, #4]!
 800f164:	459c      	cmp	ip, r3
 800f166:	d8f9      	bhi.n	800f15c <__lshift+0xc0>
 800f168:	e7ea      	b.n	800f140 <__lshift+0xa4>
 800f16a:	bf00      	nop
 800f16c:	08010308 	.word	0x08010308
 800f170:	08010379 	.word	0x08010379

0800f174 <__mcmp>:
 800f174:	b530      	push	{r4, r5, lr}
 800f176:	6902      	ldr	r2, [r0, #16]
 800f178:	690c      	ldr	r4, [r1, #16]
 800f17a:	1b12      	subs	r2, r2, r4
 800f17c:	d10e      	bne.n	800f19c <__mcmp+0x28>
 800f17e:	f100 0314 	add.w	r3, r0, #20
 800f182:	3114      	adds	r1, #20
 800f184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f18c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f194:	42a5      	cmp	r5, r4
 800f196:	d003      	beq.n	800f1a0 <__mcmp+0x2c>
 800f198:	d305      	bcc.n	800f1a6 <__mcmp+0x32>
 800f19a:	2201      	movs	r2, #1
 800f19c:	4610      	mov	r0, r2
 800f19e:	bd30      	pop	{r4, r5, pc}
 800f1a0:	4283      	cmp	r3, r0
 800f1a2:	d3f3      	bcc.n	800f18c <__mcmp+0x18>
 800f1a4:	e7fa      	b.n	800f19c <__mcmp+0x28>
 800f1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1aa:	e7f7      	b.n	800f19c <__mcmp+0x28>

0800f1ac <__mdiff>:
 800f1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	4690      	mov	r8, r2
 800f1ba:	f7ff ffdb 	bl	800f174 <__mcmp>
 800f1be:	1e05      	subs	r5, r0, #0
 800f1c0:	d110      	bne.n	800f1e4 <__mdiff+0x38>
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f7ff fd0f 	bl	800ebe8 <_Balloc>
 800f1ca:	b930      	cbnz	r0, 800f1da <__mdiff+0x2e>
 800f1cc:	4b3a      	ldr	r3, [pc, #232]	; (800f2b8 <__mdiff+0x10c>)
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	f240 2137 	movw	r1, #567	; 0x237
 800f1d4:	4839      	ldr	r0, [pc, #228]	; (800f2bc <__mdiff+0x110>)
 800f1d6:	f000 fbf1 	bl	800f9bc <__assert_func>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e4:	bfa4      	itt	ge
 800f1e6:	4643      	movge	r3, r8
 800f1e8:	46a0      	movge	r8, r4
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1f0:	bfa6      	itte	ge
 800f1f2:	461c      	movge	r4, r3
 800f1f4:	2500      	movge	r5, #0
 800f1f6:	2501      	movlt	r5, #1
 800f1f8:	f7ff fcf6 	bl	800ebe8 <_Balloc>
 800f1fc:	b920      	cbnz	r0, 800f208 <__mdiff+0x5c>
 800f1fe:	4b2e      	ldr	r3, [pc, #184]	; (800f2b8 <__mdiff+0x10c>)
 800f200:	4602      	mov	r2, r0
 800f202:	f240 2145 	movw	r1, #581	; 0x245
 800f206:	e7e5      	b.n	800f1d4 <__mdiff+0x28>
 800f208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f20c:	6926      	ldr	r6, [r4, #16]
 800f20e:	60c5      	str	r5, [r0, #12]
 800f210:	f104 0914 	add.w	r9, r4, #20
 800f214:	f108 0514 	add.w	r5, r8, #20
 800f218:	f100 0e14 	add.w	lr, r0, #20
 800f21c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f224:	f108 0210 	add.w	r2, r8, #16
 800f228:	46f2      	mov	sl, lr
 800f22a:	2100      	movs	r1, #0
 800f22c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f234:	fa11 f88b 	uxtah	r8, r1, fp
 800f238:	b299      	uxth	r1, r3
 800f23a:	0c1b      	lsrs	r3, r3, #16
 800f23c:	eba8 0801 	sub.w	r8, r8, r1
 800f240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f244:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f248:	fa1f f888 	uxth.w	r8, r8
 800f24c:	1419      	asrs	r1, r3, #16
 800f24e:	454e      	cmp	r6, r9
 800f250:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f254:	f84a 3b04 	str.w	r3, [sl], #4
 800f258:	d8e8      	bhi.n	800f22c <__mdiff+0x80>
 800f25a:	1b33      	subs	r3, r6, r4
 800f25c:	3b15      	subs	r3, #21
 800f25e:	f023 0303 	bic.w	r3, r3, #3
 800f262:	3304      	adds	r3, #4
 800f264:	3415      	adds	r4, #21
 800f266:	42a6      	cmp	r6, r4
 800f268:	bf38      	it	cc
 800f26a:	2304      	movcc	r3, #4
 800f26c:	441d      	add	r5, r3
 800f26e:	4473      	add	r3, lr
 800f270:	469e      	mov	lr, r3
 800f272:	462e      	mov	r6, r5
 800f274:	4566      	cmp	r6, ip
 800f276:	d30e      	bcc.n	800f296 <__mdiff+0xea>
 800f278:	f10c 0203 	add.w	r2, ip, #3
 800f27c:	1b52      	subs	r2, r2, r5
 800f27e:	f022 0203 	bic.w	r2, r2, #3
 800f282:	3d03      	subs	r5, #3
 800f284:	45ac      	cmp	ip, r5
 800f286:	bf38      	it	cc
 800f288:	2200      	movcc	r2, #0
 800f28a:	4413      	add	r3, r2
 800f28c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f290:	b17a      	cbz	r2, 800f2b2 <__mdiff+0x106>
 800f292:	6107      	str	r7, [r0, #16]
 800f294:	e7a4      	b.n	800f1e0 <__mdiff+0x34>
 800f296:	f856 8b04 	ldr.w	r8, [r6], #4
 800f29a:	fa11 f288 	uxtah	r2, r1, r8
 800f29e:	1414      	asrs	r4, r2, #16
 800f2a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2a4:	b292      	uxth	r2, r2
 800f2a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2aa:	f84e 2b04 	str.w	r2, [lr], #4
 800f2ae:	1421      	asrs	r1, r4, #16
 800f2b0:	e7e0      	b.n	800f274 <__mdiff+0xc8>
 800f2b2:	3f01      	subs	r7, #1
 800f2b4:	e7ea      	b.n	800f28c <__mdiff+0xe0>
 800f2b6:	bf00      	nop
 800f2b8:	08010308 	.word	0x08010308
 800f2bc:	08010379 	.word	0x08010379

0800f2c0 <__ulp>:
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	ed8d 0b00 	vstr	d0, [sp]
 800f2c6:	9a01      	ldr	r2, [sp, #4]
 800f2c8:	4b0f      	ldr	r3, [pc, #60]	; (800f308 <__ulp+0x48>)
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	dc08      	bgt.n	800f2e6 <__ulp+0x26>
 800f2d4:	425b      	negs	r3, r3
 800f2d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f2da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f2de:	da04      	bge.n	800f2ea <__ulp+0x2a>
 800f2e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f2e4:	4113      	asrs	r3, r2
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	e008      	b.n	800f2fc <__ulp+0x3c>
 800f2ea:	f1a2 0314 	sub.w	r3, r2, #20
 800f2ee:	2b1e      	cmp	r3, #30
 800f2f0:	bfda      	itte	le
 800f2f2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f2f6:	40da      	lsrle	r2, r3
 800f2f8:	2201      	movgt	r2, #1
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4610      	mov	r0, r2
 800f300:	ec41 0b10 	vmov	d0, r0, r1
 800f304:	b002      	add	sp, #8
 800f306:	4770      	bx	lr
 800f308:	7ff00000 	.word	0x7ff00000

0800f30c <__b2d>:
 800f30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f310:	6906      	ldr	r6, [r0, #16]
 800f312:	f100 0814 	add.w	r8, r0, #20
 800f316:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f31a:	1f37      	subs	r7, r6, #4
 800f31c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f320:	4610      	mov	r0, r2
 800f322:	f7ff fd53 	bl	800edcc <__hi0bits>
 800f326:	f1c0 0320 	rsb	r3, r0, #32
 800f32a:	280a      	cmp	r0, #10
 800f32c:	600b      	str	r3, [r1, #0]
 800f32e:	491b      	ldr	r1, [pc, #108]	; (800f39c <__b2d+0x90>)
 800f330:	dc15      	bgt.n	800f35e <__b2d+0x52>
 800f332:	f1c0 0c0b 	rsb	ip, r0, #11
 800f336:	fa22 f30c 	lsr.w	r3, r2, ip
 800f33a:	45b8      	cmp	r8, r7
 800f33c:	ea43 0501 	orr.w	r5, r3, r1
 800f340:	bf34      	ite	cc
 800f342:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f346:	2300      	movcs	r3, #0
 800f348:	3015      	adds	r0, #21
 800f34a:	fa02 f000 	lsl.w	r0, r2, r0
 800f34e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f352:	4303      	orrs	r3, r0
 800f354:	461c      	mov	r4, r3
 800f356:	ec45 4b10 	vmov	d0, r4, r5
 800f35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f35e:	45b8      	cmp	r8, r7
 800f360:	bf3a      	itte	cc
 800f362:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f366:	f1a6 0708 	subcc.w	r7, r6, #8
 800f36a:	2300      	movcs	r3, #0
 800f36c:	380b      	subs	r0, #11
 800f36e:	d012      	beq.n	800f396 <__b2d+0x8a>
 800f370:	f1c0 0120 	rsb	r1, r0, #32
 800f374:	fa23 f401 	lsr.w	r4, r3, r1
 800f378:	4082      	lsls	r2, r0
 800f37a:	4322      	orrs	r2, r4
 800f37c:	4547      	cmp	r7, r8
 800f37e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f382:	bf8c      	ite	hi
 800f384:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f388:	2200      	movls	r2, #0
 800f38a:	4083      	lsls	r3, r0
 800f38c:	40ca      	lsrs	r2, r1
 800f38e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f392:	4313      	orrs	r3, r2
 800f394:	e7de      	b.n	800f354 <__b2d+0x48>
 800f396:	ea42 0501 	orr.w	r5, r2, r1
 800f39a:	e7db      	b.n	800f354 <__b2d+0x48>
 800f39c:	3ff00000 	.word	0x3ff00000

0800f3a0 <__d2b>:
 800f3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3a4:	460f      	mov	r7, r1
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	ec59 8b10 	vmov	r8, r9, d0
 800f3ac:	4616      	mov	r6, r2
 800f3ae:	f7ff fc1b 	bl	800ebe8 <_Balloc>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	b930      	cbnz	r0, 800f3c4 <__d2b+0x24>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	4b24      	ldr	r3, [pc, #144]	; (800f44c <__d2b+0xac>)
 800f3ba:	4825      	ldr	r0, [pc, #148]	; (800f450 <__d2b+0xb0>)
 800f3bc:	f240 310f 	movw	r1, #783	; 0x30f
 800f3c0:	f000 fafc 	bl	800f9bc <__assert_func>
 800f3c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3cc:	bb2d      	cbnz	r5, 800f41a <__d2b+0x7a>
 800f3ce:	9301      	str	r3, [sp, #4]
 800f3d0:	f1b8 0300 	subs.w	r3, r8, #0
 800f3d4:	d026      	beq.n	800f424 <__d2b+0x84>
 800f3d6:	4668      	mov	r0, sp
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	f7ff fd17 	bl	800ee0c <__lo0bits>
 800f3de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3e2:	b1e8      	cbz	r0, 800f420 <__d2b+0x80>
 800f3e4:	f1c0 0320 	rsb	r3, r0, #32
 800f3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ec:	430b      	orrs	r3, r1
 800f3ee:	40c2      	lsrs	r2, r0
 800f3f0:	6163      	str	r3, [r4, #20]
 800f3f2:	9201      	str	r2, [sp, #4]
 800f3f4:	9b01      	ldr	r3, [sp, #4]
 800f3f6:	61a3      	str	r3, [r4, #24]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	bf14      	ite	ne
 800f3fc:	2202      	movne	r2, #2
 800f3fe:	2201      	moveq	r2, #1
 800f400:	6122      	str	r2, [r4, #16]
 800f402:	b1bd      	cbz	r5, 800f434 <__d2b+0x94>
 800f404:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f408:	4405      	add	r5, r0
 800f40a:	603d      	str	r5, [r7, #0]
 800f40c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f410:	6030      	str	r0, [r6, #0]
 800f412:	4620      	mov	r0, r4
 800f414:	b003      	add	sp, #12
 800f416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f41a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f41e:	e7d6      	b.n	800f3ce <__d2b+0x2e>
 800f420:	6161      	str	r1, [r4, #20]
 800f422:	e7e7      	b.n	800f3f4 <__d2b+0x54>
 800f424:	a801      	add	r0, sp, #4
 800f426:	f7ff fcf1 	bl	800ee0c <__lo0bits>
 800f42a:	9b01      	ldr	r3, [sp, #4]
 800f42c:	6163      	str	r3, [r4, #20]
 800f42e:	3020      	adds	r0, #32
 800f430:	2201      	movs	r2, #1
 800f432:	e7e5      	b.n	800f400 <__d2b+0x60>
 800f434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f43c:	6038      	str	r0, [r7, #0]
 800f43e:	6918      	ldr	r0, [r3, #16]
 800f440:	f7ff fcc4 	bl	800edcc <__hi0bits>
 800f444:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f448:	e7e2      	b.n	800f410 <__d2b+0x70>
 800f44a:	bf00      	nop
 800f44c:	08010308 	.word	0x08010308
 800f450:	08010379 	.word	0x08010379

0800f454 <__ratio>:
 800f454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	4688      	mov	r8, r1
 800f45a:	4669      	mov	r1, sp
 800f45c:	4681      	mov	r9, r0
 800f45e:	f7ff ff55 	bl	800f30c <__b2d>
 800f462:	a901      	add	r1, sp, #4
 800f464:	4640      	mov	r0, r8
 800f466:	ec55 4b10 	vmov	r4, r5, d0
 800f46a:	f7ff ff4f 	bl	800f30c <__b2d>
 800f46e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f472:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f476:	eba3 0c02 	sub.w	ip, r3, r2
 800f47a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f47e:	1a9b      	subs	r3, r3, r2
 800f480:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f484:	ec51 0b10 	vmov	r0, r1, d0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfd6      	itet	le
 800f48c:	460a      	movle	r2, r1
 800f48e:	462a      	movgt	r2, r5
 800f490:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f494:	468b      	mov	fp, r1
 800f496:	462f      	mov	r7, r5
 800f498:	bfd4      	ite	le
 800f49a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f49e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	ee10 2a10 	vmov	r2, s0
 800f4a8:	465b      	mov	r3, fp
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	f7f1 f9ce 	bl	800084c <__aeabi_ddiv>
 800f4b0:	ec41 0b10 	vmov	d0, r0, r1
 800f4b4:	b003      	add	sp, #12
 800f4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4ba <__copybits>:
 800f4ba:	3901      	subs	r1, #1
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	1149      	asrs	r1, r1, #5
 800f4c0:	6914      	ldr	r4, [r2, #16]
 800f4c2:	3101      	adds	r1, #1
 800f4c4:	f102 0314 	add.w	r3, r2, #20
 800f4c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4d0:	1f05      	subs	r5, r0, #4
 800f4d2:	42a3      	cmp	r3, r4
 800f4d4:	d30c      	bcc.n	800f4f0 <__copybits+0x36>
 800f4d6:	1aa3      	subs	r3, r4, r2
 800f4d8:	3b11      	subs	r3, #17
 800f4da:	f023 0303 	bic.w	r3, r3, #3
 800f4de:	3211      	adds	r2, #17
 800f4e0:	42a2      	cmp	r2, r4
 800f4e2:	bf88      	it	hi
 800f4e4:	2300      	movhi	r3, #0
 800f4e6:	4418      	add	r0, r3
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4288      	cmp	r0, r1
 800f4ec:	d305      	bcc.n	800f4fa <__copybits+0x40>
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}
 800f4f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f4f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f4f8:	e7eb      	b.n	800f4d2 <__copybits+0x18>
 800f4fa:	f840 3b04 	str.w	r3, [r0], #4
 800f4fe:	e7f4      	b.n	800f4ea <__copybits+0x30>

0800f500 <__any_on>:
 800f500:	f100 0214 	add.w	r2, r0, #20
 800f504:	6900      	ldr	r0, [r0, #16]
 800f506:	114b      	asrs	r3, r1, #5
 800f508:	4298      	cmp	r0, r3
 800f50a:	b510      	push	{r4, lr}
 800f50c:	db11      	blt.n	800f532 <__any_on+0x32>
 800f50e:	dd0a      	ble.n	800f526 <__any_on+0x26>
 800f510:	f011 011f 	ands.w	r1, r1, #31
 800f514:	d007      	beq.n	800f526 <__any_on+0x26>
 800f516:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f51a:	fa24 f001 	lsr.w	r0, r4, r1
 800f51e:	fa00 f101 	lsl.w	r1, r0, r1
 800f522:	428c      	cmp	r4, r1
 800f524:	d10b      	bne.n	800f53e <__any_on+0x3e>
 800f526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d803      	bhi.n	800f536 <__any_on+0x36>
 800f52e:	2000      	movs	r0, #0
 800f530:	bd10      	pop	{r4, pc}
 800f532:	4603      	mov	r3, r0
 800f534:	e7f7      	b.n	800f526 <__any_on+0x26>
 800f536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f53a:	2900      	cmp	r1, #0
 800f53c:	d0f5      	beq.n	800f52a <__any_on+0x2a>
 800f53e:	2001      	movs	r0, #1
 800f540:	e7f6      	b.n	800f530 <__any_on+0x30>

0800f542 <__ascii_wctomb>:
 800f542:	b149      	cbz	r1, 800f558 <__ascii_wctomb+0x16>
 800f544:	2aff      	cmp	r2, #255	; 0xff
 800f546:	bf85      	ittet	hi
 800f548:	238a      	movhi	r3, #138	; 0x8a
 800f54a:	6003      	strhi	r3, [r0, #0]
 800f54c:	700a      	strbls	r2, [r1, #0]
 800f54e:	f04f 30ff 	movhi.w	r0, #4294967295
 800f552:	bf98      	it	ls
 800f554:	2001      	movls	r0, #1
 800f556:	4770      	bx	lr
 800f558:	4608      	mov	r0, r1
 800f55a:	4770      	bx	lr

0800f55c <__ssputs_r>:
 800f55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f560:	688e      	ldr	r6, [r1, #8]
 800f562:	461f      	mov	r7, r3
 800f564:	42be      	cmp	r6, r7
 800f566:	680b      	ldr	r3, [r1, #0]
 800f568:	4682      	mov	sl, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	4690      	mov	r8, r2
 800f56e:	d82c      	bhi.n	800f5ca <__ssputs_r+0x6e>
 800f570:	898a      	ldrh	r2, [r1, #12]
 800f572:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f576:	d026      	beq.n	800f5c6 <__ssputs_r+0x6a>
 800f578:	6965      	ldr	r5, [r4, #20]
 800f57a:	6909      	ldr	r1, [r1, #16]
 800f57c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f580:	eba3 0901 	sub.w	r9, r3, r1
 800f584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f588:	1c7b      	adds	r3, r7, #1
 800f58a:	444b      	add	r3, r9
 800f58c:	106d      	asrs	r5, r5, #1
 800f58e:	429d      	cmp	r5, r3
 800f590:	bf38      	it	cc
 800f592:	461d      	movcc	r5, r3
 800f594:	0553      	lsls	r3, r2, #21
 800f596:	d527      	bpl.n	800f5e8 <__ssputs_r+0x8c>
 800f598:	4629      	mov	r1, r5
 800f59a:	f7ff fa87 	bl	800eaac <_malloc_r>
 800f59e:	4606      	mov	r6, r0
 800f5a0:	b360      	cbz	r0, 800f5fc <__ssputs_r+0xa0>
 800f5a2:	6921      	ldr	r1, [r4, #16]
 800f5a4:	464a      	mov	r2, r9
 800f5a6:	f7fe f825 	bl	800d5f4 <memcpy>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5b4:	81a3      	strh	r3, [r4, #12]
 800f5b6:	6126      	str	r6, [r4, #16]
 800f5b8:	6165      	str	r5, [r4, #20]
 800f5ba:	444e      	add	r6, r9
 800f5bc:	eba5 0509 	sub.w	r5, r5, r9
 800f5c0:	6026      	str	r6, [r4, #0]
 800f5c2:	60a5      	str	r5, [r4, #8]
 800f5c4:	463e      	mov	r6, r7
 800f5c6:	42be      	cmp	r6, r7
 800f5c8:	d900      	bls.n	800f5cc <__ssputs_r+0x70>
 800f5ca:	463e      	mov	r6, r7
 800f5cc:	6820      	ldr	r0, [r4, #0]
 800f5ce:	4632      	mov	r2, r6
 800f5d0:	4641      	mov	r1, r8
 800f5d2:	f000 f9c9 	bl	800f968 <memmove>
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	1b9b      	subs	r3, r3, r6
 800f5da:	60a3      	str	r3, [r4, #8]
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	4433      	add	r3, r6
 800f5e0:	6023      	str	r3, [r4, #0]
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5e8:	462a      	mov	r2, r5
 800f5ea:	f000 fa1b 	bl	800fa24 <_realloc_r>
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d1e0      	bne.n	800f5b6 <__ssputs_r+0x5a>
 800f5f4:	6921      	ldr	r1, [r4, #16]
 800f5f6:	4650      	mov	r0, sl
 800f5f8:	f7fe fe8c 	bl	800e314 <_free_r>
 800f5fc:	230c      	movs	r3, #12
 800f5fe:	f8ca 3000 	str.w	r3, [sl]
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f608:	81a3      	strh	r3, [r4, #12]
 800f60a:	f04f 30ff 	mov.w	r0, #4294967295
 800f60e:	e7e9      	b.n	800f5e4 <__ssputs_r+0x88>

0800f610 <_svfiprintf_r>:
 800f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	4698      	mov	r8, r3
 800f616:	898b      	ldrh	r3, [r1, #12]
 800f618:	061b      	lsls	r3, r3, #24
 800f61a:	b09d      	sub	sp, #116	; 0x74
 800f61c:	4607      	mov	r7, r0
 800f61e:	460d      	mov	r5, r1
 800f620:	4614      	mov	r4, r2
 800f622:	d50e      	bpl.n	800f642 <_svfiprintf_r+0x32>
 800f624:	690b      	ldr	r3, [r1, #16]
 800f626:	b963      	cbnz	r3, 800f642 <_svfiprintf_r+0x32>
 800f628:	2140      	movs	r1, #64	; 0x40
 800f62a:	f7ff fa3f 	bl	800eaac <_malloc_r>
 800f62e:	6028      	str	r0, [r5, #0]
 800f630:	6128      	str	r0, [r5, #16]
 800f632:	b920      	cbnz	r0, 800f63e <_svfiprintf_r+0x2e>
 800f634:	230c      	movs	r3, #12
 800f636:	603b      	str	r3, [r7, #0]
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	e0d0      	b.n	800f7e0 <_svfiprintf_r+0x1d0>
 800f63e:	2340      	movs	r3, #64	; 0x40
 800f640:	616b      	str	r3, [r5, #20]
 800f642:	2300      	movs	r3, #0
 800f644:	9309      	str	r3, [sp, #36]	; 0x24
 800f646:	2320      	movs	r3, #32
 800f648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f64c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f650:	2330      	movs	r3, #48	; 0x30
 800f652:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f7f8 <_svfiprintf_r+0x1e8>
 800f656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f65a:	f04f 0901 	mov.w	r9, #1
 800f65e:	4623      	mov	r3, r4
 800f660:	469a      	mov	sl, r3
 800f662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f666:	b10a      	cbz	r2, 800f66c <_svfiprintf_r+0x5c>
 800f668:	2a25      	cmp	r2, #37	; 0x25
 800f66a:	d1f9      	bne.n	800f660 <_svfiprintf_r+0x50>
 800f66c:	ebba 0b04 	subs.w	fp, sl, r4
 800f670:	d00b      	beq.n	800f68a <_svfiprintf_r+0x7a>
 800f672:	465b      	mov	r3, fp
 800f674:	4622      	mov	r2, r4
 800f676:	4629      	mov	r1, r5
 800f678:	4638      	mov	r0, r7
 800f67a:	f7ff ff6f 	bl	800f55c <__ssputs_r>
 800f67e:	3001      	adds	r0, #1
 800f680:	f000 80a9 	beq.w	800f7d6 <_svfiprintf_r+0x1c6>
 800f684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f686:	445a      	add	r2, fp
 800f688:	9209      	str	r2, [sp, #36]	; 0x24
 800f68a:	f89a 3000 	ldrb.w	r3, [sl]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 80a1 	beq.w	800f7d6 <_svfiprintf_r+0x1c6>
 800f694:	2300      	movs	r3, #0
 800f696:	f04f 32ff 	mov.w	r2, #4294967295
 800f69a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f69e:	f10a 0a01 	add.w	sl, sl, #1
 800f6a2:	9304      	str	r3, [sp, #16]
 800f6a4:	9307      	str	r3, [sp, #28]
 800f6a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6aa:	931a      	str	r3, [sp, #104]	; 0x68
 800f6ac:	4654      	mov	r4, sl
 800f6ae:	2205      	movs	r2, #5
 800f6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b4:	4850      	ldr	r0, [pc, #320]	; (800f7f8 <_svfiprintf_r+0x1e8>)
 800f6b6:	f7f0 fd8b 	bl	80001d0 <memchr>
 800f6ba:	9a04      	ldr	r2, [sp, #16]
 800f6bc:	b9d8      	cbnz	r0, 800f6f6 <_svfiprintf_r+0xe6>
 800f6be:	06d0      	lsls	r0, r2, #27
 800f6c0:	bf44      	itt	mi
 800f6c2:	2320      	movmi	r3, #32
 800f6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6c8:	0711      	lsls	r1, r2, #28
 800f6ca:	bf44      	itt	mi
 800f6cc:	232b      	movmi	r3, #43	; 0x2b
 800f6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6d8:	d015      	beq.n	800f706 <_svfiprintf_r+0xf6>
 800f6da:	9a07      	ldr	r2, [sp, #28]
 800f6dc:	4654      	mov	r4, sl
 800f6de:	2000      	movs	r0, #0
 800f6e0:	f04f 0c0a 	mov.w	ip, #10
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6ea:	3b30      	subs	r3, #48	; 0x30
 800f6ec:	2b09      	cmp	r3, #9
 800f6ee:	d94d      	bls.n	800f78c <_svfiprintf_r+0x17c>
 800f6f0:	b1b0      	cbz	r0, 800f720 <_svfiprintf_r+0x110>
 800f6f2:	9207      	str	r2, [sp, #28]
 800f6f4:	e014      	b.n	800f720 <_svfiprintf_r+0x110>
 800f6f6:	eba0 0308 	sub.w	r3, r0, r8
 800f6fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f6fe:	4313      	orrs	r3, r2
 800f700:	9304      	str	r3, [sp, #16]
 800f702:	46a2      	mov	sl, r4
 800f704:	e7d2      	b.n	800f6ac <_svfiprintf_r+0x9c>
 800f706:	9b03      	ldr	r3, [sp, #12]
 800f708:	1d19      	adds	r1, r3, #4
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	9103      	str	r1, [sp, #12]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bfbb      	ittet	lt
 800f712:	425b      	neglt	r3, r3
 800f714:	f042 0202 	orrlt.w	r2, r2, #2
 800f718:	9307      	strge	r3, [sp, #28]
 800f71a:	9307      	strlt	r3, [sp, #28]
 800f71c:	bfb8      	it	lt
 800f71e:	9204      	strlt	r2, [sp, #16]
 800f720:	7823      	ldrb	r3, [r4, #0]
 800f722:	2b2e      	cmp	r3, #46	; 0x2e
 800f724:	d10c      	bne.n	800f740 <_svfiprintf_r+0x130>
 800f726:	7863      	ldrb	r3, [r4, #1]
 800f728:	2b2a      	cmp	r3, #42	; 0x2a
 800f72a:	d134      	bne.n	800f796 <_svfiprintf_r+0x186>
 800f72c:	9b03      	ldr	r3, [sp, #12]
 800f72e:	1d1a      	adds	r2, r3, #4
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	9203      	str	r2, [sp, #12]
 800f734:	2b00      	cmp	r3, #0
 800f736:	bfb8      	it	lt
 800f738:	f04f 33ff 	movlt.w	r3, #4294967295
 800f73c:	3402      	adds	r4, #2
 800f73e:	9305      	str	r3, [sp, #20]
 800f740:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f808 <_svfiprintf_r+0x1f8>
 800f744:	7821      	ldrb	r1, [r4, #0]
 800f746:	2203      	movs	r2, #3
 800f748:	4650      	mov	r0, sl
 800f74a:	f7f0 fd41 	bl	80001d0 <memchr>
 800f74e:	b138      	cbz	r0, 800f760 <_svfiprintf_r+0x150>
 800f750:	9b04      	ldr	r3, [sp, #16]
 800f752:	eba0 000a 	sub.w	r0, r0, sl
 800f756:	2240      	movs	r2, #64	; 0x40
 800f758:	4082      	lsls	r2, r0
 800f75a:	4313      	orrs	r3, r2
 800f75c:	3401      	adds	r4, #1
 800f75e:	9304      	str	r3, [sp, #16]
 800f760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f764:	4825      	ldr	r0, [pc, #148]	; (800f7fc <_svfiprintf_r+0x1ec>)
 800f766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f76a:	2206      	movs	r2, #6
 800f76c:	f7f0 fd30 	bl	80001d0 <memchr>
 800f770:	2800      	cmp	r0, #0
 800f772:	d038      	beq.n	800f7e6 <_svfiprintf_r+0x1d6>
 800f774:	4b22      	ldr	r3, [pc, #136]	; (800f800 <_svfiprintf_r+0x1f0>)
 800f776:	bb1b      	cbnz	r3, 800f7c0 <_svfiprintf_r+0x1b0>
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	3307      	adds	r3, #7
 800f77c:	f023 0307 	bic.w	r3, r3, #7
 800f780:	3308      	adds	r3, #8
 800f782:	9303      	str	r3, [sp, #12]
 800f784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f786:	4433      	add	r3, r6
 800f788:	9309      	str	r3, [sp, #36]	; 0x24
 800f78a:	e768      	b.n	800f65e <_svfiprintf_r+0x4e>
 800f78c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f790:	460c      	mov	r4, r1
 800f792:	2001      	movs	r0, #1
 800f794:	e7a6      	b.n	800f6e4 <_svfiprintf_r+0xd4>
 800f796:	2300      	movs	r3, #0
 800f798:	3401      	adds	r4, #1
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	4619      	mov	r1, r3
 800f79e:	f04f 0c0a 	mov.w	ip, #10
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7a8:	3a30      	subs	r2, #48	; 0x30
 800f7aa:	2a09      	cmp	r2, #9
 800f7ac:	d903      	bls.n	800f7b6 <_svfiprintf_r+0x1a6>
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d0c6      	beq.n	800f740 <_svfiprintf_r+0x130>
 800f7b2:	9105      	str	r1, [sp, #20]
 800f7b4:	e7c4      	b.n	800f740 <_svfiprintf_r+0x130>
 800f7b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e7f0      	b.n	800f7a2 <_svfiprintf_r+0x192>
 800f7c0:	ab03      	add	r3, sp, #12
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	462a      	mov	r2, r5
 800f7c6:	4b0f      	ldr	r3, [pc, #60]	; (800f804 <_svfiprintf_r+0x1f4>)
 800f7c8:	a904      	add	r1, sp, #16
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7fd f93c 	bl	800ca48 <_printf_float>
 800f7d0:	1c42      	adds	r2, r0, #1
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	d1d6      	bne.n	800f784 <_svfiprintf_r+0x174>
 800f7d6:	89ab      	ldrh	r3, [r5, #12]
 800f7d8:	065b      	lsls	r3, r3, #25
 800f7da:	f53f af2d 	bmi.w	800f638 <_svfiprintf_r+0x28>
 800f7de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7e0:	b01d      	add	sp, #116	; 0x74
 800f7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e6:	ab03      	add	r3, sp, #12
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	462a      	mov	r2, r5
 800f7ec:	4b05      	ldr	r3, [pc, #20]	; (800f804 <_svfiprintf_r+0x1f4>)
 800f7ee:	a904      	add	r1, sp, #16
 800f7f0:	4638      	mov	r0, r7
 800f7f2:	f7fd fbcd 	bl	800cf90 <_printf_i>
 800f7f6:	e7eb      	b.n	800f7d0 <_svfiprintf_r+0x1c0>
 800f7f8:	080105d5 	.word	0x080105d5
 800f7fc:	080105df 	.word	0x080105df
 800f800:	0800ca49 	.word	0x0800ca49
 800f804:	0800f55d 	.word	0x0800f55d
 800f808:	080105db 	.word	0x080105db

0800f80c <__sflush_r>:
 800f80c:	898a      	ldrh	r2, [r1, #12]
 800f80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f812:	4605      	mov	r5, r0
 800f814:	0710      	lsls	r0, r2, #28
 800f816:	460c      	mov	r4, r1
 800f818:	d458      	bmi.n	800f8cc <__sflush_r+0xc0>
 800f81a:	684b      	ldr	r3, [r1, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dc05      	bgt.n	800f82c <__sflush_r+0x20>
 800f820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f822:	2b00      	cmp	r3, #0
 800f824:	dc02      	bgt.n	800f82c <__sflush_r+0x20>
 800f826:	2000      	movs	r0, #0
 800f828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f82e:	2e00      	cmp	r6, #0
 800f830:	d0f9      	beq.n	800f826 <__sflush_r+0x1a>
 800f832:	2300      	movs	r3, #0
 800f834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f838:	682f      	ldr	r7, [r5, #0]
 800f83a:	6a21      	ldr	r1, [r4, #32]
 800f83c:	602b      	str	r3, [r5, #0]
 800f83e:	d032      	beq.n	800f8a6 <__sflush_r+0x9a>
 800f840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	075a      	lsls	r2, r3, #29
 800f846:	d505      	bpl.n	800f854 <__sflush_r+0x48>
 800f848:	6863      	ldr	r3, [r4, #4]
 800f84a:	1ac0      	subs	r0, r0, r3
 800f84c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f84e:	b10b      	cbz	r3, 800f854 <__sflush_r+0x48>
 800f850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f852:	1ac0      	subs	r0, r0, r3
 800f854:	2300      	movs	r3, #0
 800f856:	4602      	mov	r2, r0
 800f858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f85a:	6a21      	ldr	r1, [r4, #32]
 800f85c:	4628      	mov	r0, r5
 800f85e:	47b0      	blx	r6
 800f860:	1c43      	adds	r3, r0, #1
 800f862:	89a3      	ldrh	r3, [r4, #12]
 800f864:	d106      	bne.n	800f874 <__sflush_r+0x68>
 800f866:	6829      	ldr	r1, [r5, #0]
 800f868:	291d      	cmp	r1, #29
 800f86a:	d82b      	bhi.n	800f8c4 <__sflush_r+0xb8>
 800f86c:	4a29      	ldr	r2, [pc, #164]	; (800f914 <__sflush_r+0x108>)
 800f86e:	410a      	asrs	r2, r1
 800f870:	07d6      	lsls	r6, r2, #31
 800f872:	d427      	bmi.n	800f8c4 <__sflush_r+0xb8>
 800f874:	2200      	movs	r2, #0
 800f876:	6062      	str	r2, [r4, #4]
 800f878:	04d9      	lsls	r1, r3, #19
 800f87a:	6922      	ldr	r2, [r4, #16]
 800f87c:	6022      	str	r2, [r4, #0]
 800f87e:	d504      	bpl.n	800f88a <__sflush_r+0x7e>
 800f880:	1c42      	adds	r2, r0, #1
 800f882:	d101      	bne.n	800f888 <__sflush_r+0x7c>
 800f884:	682b      	ldr	r3, [r5, #0]
 800f886:	b903      	cbnz	r3, 800f88a <__sflush_r+0x7e>
 800f888:	6560      	str	r0, [r4, #84]	; 0x54
 800f88a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f88c:	602f      	str	r7, [r5, #0]
 800f88e:	2900      	cmp	r1, #0
 800f890:	d0c9      	beq.n	800f826 <__sflush_r+0x1a>
 800f892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f896:	4299      	cmp	r1, r3
 800f898:	d002      	beq.n	800f8a0 <__sflush_r+0x94>
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7fe fd3a 	bl	800e314 <_free_r>
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	6360      	str	r0, [r4, #52]	; 0x34
 800f8a4:	e7c0      	b.n	800f828 <__sflush_r+0x1c>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	47b0      	blx	r6
 800f8ac:	1c41      	adds	r1, r0, #1
 800f8ae:	d1c8      	bne.n	800f842 <__sflush_r+0x36>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d0c5      	beq.n	800f842 <__sflush_r+0x36>
 800f8b6:	2b1d      	cmp	r3, #29
 800f8b8:	d001      	beq.n	800f8be <__sflush_r+0xb2>
 800f8ba:	2b16      	cmp	r3, #22
 800f8bc:	d101      	bne.n	800f8c2 <__sflush_r+0xb6>
 800f8be:	602f      	str	r7, [r5, #0]
 800f8c0:	e7b1      	b.n	800f826 <__sflush_r+0x1a>
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	e7ad      	b.n	800f828 <__sflush_r+0x1c>
 800f8cc:	690f      	ldr	r7, [r1, #16]
 800f8ce:	2f00      	cmp	r7, #0
 800f8d0:	d0a9      	beq.n	800f826 <__sflush_r+0x1a>
 800f8d2:	0793      	lsls	r3, r2, #30
 800f8d4:	680e      	ldr	r6, [r1, #0]
 800f8d6:	bf08      	it	eq
 800f8d8:	694b      	ldreq	r3, [r1, #20]
 800f8da:	600f      	str	r7, [r1, #0]
 800f8dc:	bf18      	it	ne
 800f8de:	2300      	movne	r3, #0
 800f8e0:	eba6 0807 	sub.w	r8, r6, r7
 800f8e4:	608b      	str	r3, [r1, #8]
 800f8e6:	f1b8 0f00 	cmp.w	r8, #0
 800f8ea:	dd9c      	ble.n	800f826 <__sflush_r+0x1a>
 800f8ec:	6a21      	ldr	r1, [r4, #32]
 800f8ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8f0:	4643      	mov	r3, r8
 800f8f2:	463a      	mov	r2, r7
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b0      	blx	r6
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	dc06      	bgt.n	800f90a <__sflush_r+0xfe>
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f902:	81a3      	strh	r3, [r4, #12]
 800f904:	f04f 30ff 	mov.w	r0, #4294967295
 800f908:	e78e      	b.n	800f828 <__sflush_r+0x1c>
 800f90a:	4407      	add	r7, r0
 800f90c:	eba8 0800 	sub.w	r8, r8, r0
 800f910:	e7e9      	b.n	800f8e6 <__sflush_r+0xda>
 800f912:	bf00      	nop
 800f914:	dfbffffe 	.word	0xdfbffffe

0800f918 <_fflush_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	690b      	ldr	r3, [r1, #16]
 800f91c:	4605      	mov	r5, r0
 800f91e:	460c      	mov	r4, r1
 800f920:	b913      	cbnz	r3, 800f928 <_fflush_r+0x10>
 800f922:	2500      	movs	r5, #0
 800f924:	4628      	mov	r0, r5
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	b118      	cbz	r0, 800f932 <_fflush_r+0x1a>
 800f92a:	6a03      	ldr	r3, [r0, #32]
 800f92c:	b90b      	cbnz	r3, 800f932 <_fflush_r+0x1a>
 800f92e:	f7fd fccb 	bl	800d2c8 <__sinit>
 800f932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d0f3      	beq.n	800f922 <_fflush_r+0xa>
 800f93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f93c:	07d0      	lsls	r0, r2, #31
 800f93e:	d404      	bmi.n	800f94a <_fflush_r+0x32>
 800f940:	0599      	lsls	r1, r3, #22
 800f942:	d402      	bmi.n	800f94a <_fflush_r+0x32>
 800f944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f946:	f7fd fe53 	bl	800d5f0 <__retarget_lock_acquire_recursive>
 800f94a:	4628      	mov	r0, r5
 800f94c:	4621      	mov	r1, r4
 800f94e:	f7ff ff5d 	bl	800f80c <__sflush_r>
 800f952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f954:	07da      	lsls	r2, r3, #31
 800f956:	4605      	mov	r5, r0
 800f958:	d4e4      	bmi.n	800f924 <_fflush_r+0xc>
 800f95a:	89a3      	ldrh	r3, [r4, #12]
 800f95c:	059b      	lsls	r3, r3, #22
 800f95e:	d4e1      	bmi.n	800f924 <_fflush_r+0xc>
 800f960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f962:	f7fd fe46 	bl	800d5f2 <__retarget_lock_release_recursive>
 800f966:	e7dd      	b.n	800f924 <_fflush_r+0xc>

0800f968 <memmove>:
 800f968:	4288      	cmp	r0, r1
 800f96a:	b510      	push	{r4, lr}
 800f96c:	eb01 0402 	add.w	r4, r1, r2
 800f970:	d902      	bls.n	800f978 <memmove+0x10>
 800f972:	4284      	cmp	r4, r0
 800f974:	4623      	mov	r3, r4
 800f976:	d807      	bhi.n	800f988 <memmove+0x20>
 800f978:	1e43      	subs	r3, r0, #1
 800f97a:	42a1      	cmp	r1, r4
 800f97c:	d008      	beq.n	800f990 <memmove+0x28>
 800f97e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f982:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f986:	e7f8      	b.n	800f97a <memmove+0x12>
 800f988:	4402      	add	r2, r0
 800f98a:	4601      	mov	r1, r0
 800f98c:	428a      	cmp	r2, r1
 800f98e:	d100      	bne.n	800f992 <memmove+0x2a>
 800f990:	bd10      	pop	{r4, pc}
 800f992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f99a:	e7f7      	b.n	800f98c <memmove+0x24>

0800f99c <_sbrk_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d06      	ldr	r5, [pc, #24]	; (800f9b8 <_sbrk_r+0x1c>)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	4608      	mov	r0, r1
 800f9a6:	602b      	str	r3, [r5, #0]
 800f9a8:	f7f2 fcfe 	bl	80023a8 <_sbrk>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	d102      	bne.n	800f9b6 <_sbrk_r+0x1a>
 800f9b0:	682b      	ldr	r3, [r5, #0]
 800f9b2:	b103      	cbz	r3, 800f9b6 <_sbrk_r+0x1a>
 800f9b4:	6023      	str	r3, [r4, #0]
 800f9b6:	bd38      	pop	{r3, r4, r5, pc}
 800f9b8:	2000317c 	.word	0x2000317c

0800f9bc <__assert_func>:
 800f9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9be:	4614      	mov	r4, r2
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <__assert_func+0x2c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	68d8      	ldr	r0, [r3, #12]
 800f9ca:	b14c      	cbz	r4, 800f9e0 <__assert_func+0x24>
 800f9cc:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <__assert_func+0x30>)
 800f9ce:	9100      	str	r1, [sp, #0]
 800f9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9d4:	4906      	ldr	r1, [pc, #24]	; (800f9f0 <__assert_func+0x34>)
 800f9d6:	462b      	mov	r3, r5
 800f9d8:	f000 f854 	bl	800fa84 <fiprintf>
 800f9dc:	f000 f864 	bl	800faa8 <abort>
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <__assert_func+0x38>)
 800f9e2:	461c      	mov	r4, r3
 800f9e4:	e7f3      	b.n	800f9ce <__assert_func+0x12>
 800f9e6:	bf00      	nop
 800f9e8:	200001d4 	.word	0x200001d4
 800f9ec:	080105e6 	.word	0x080105e6
 800f9f0:	080105f3 	.word	0x080105f3
 800f9f4:	08010621 	.word	0x08010621

0800f9f8 <_calloc_r>:
 800f9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9fa:	fba1 2402 	umull	r2, r4, r1, r2
 800f9fe:	b94c      	cbnz	r4, 800fa14 <_calloc_r+0x1c>
 800fa00:	4611      	mov	r1, r2
 800fa02:	9201      	str	r2, [sp, #4]
 800fa04:	f7ff f852 	bl	800eaac <_malloc_r>
 800fa08:	9a01      	ldr	r2, [sp, #4]
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	b930      	cbnz	r0, 800fa1c <_calloc_r+0x24>
 800fa0e:	4628      	mov	r0, r5
 800fa10:	b003      	add	sp, #12
 800fa12:	bd30      	pop	{r4, r5, pc}
 800fa14:	220c      	movs	r2, #12
 800fa16:	6002      	str	r2, [r0, #0]
 800fa18:	2500      	movs	r5, #0
 800fa1a:	e7f8      	b.n	800fa0e <_calloc_r+0x16>
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	f7fd fcec 	bl	800d3fa <memset>
 800fa22:	e7f4      	b.n	800fa0e <_calloc_r+0x16>

0800fa24 <_realloc_r>:
 800fa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa28:	4680      	mov	r8, r0
 800fa2a:	4614      	mov	r4, r2
 800fa2c:	460e      	mov	r6, r1
 800fa2e:	b921      	cbnz	r1, 800fa3a <_realloc_r+0x16>
 800fa30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa34:	4611      	mov	r1, r2
 800fa36:	f7ff b839 	b.w	800eaac <_malloc_r>
 800fa3a:	b92a      	cbnz	r2, 800fa48 <_realloc_r+0x24>
 800fa3c:	f7fe fc6a 	bl	800e314 <_free_r>
 800fa40:	4625      	mov	r5, r4
 800fa42:	4628      	mov	r0, r5
 800fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa48:	f000 f835 	bl	800fab6 <_malloc_usable_size_r>
 800fa4c:	4284      	cmp	r4, r0
 800fa4e:	4607      	mov	r7, r0
 800fa50:	d802      	bhi.n	800fa58 <_realloc_r+0x34>
 800fa52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa56:	d812      	bhi.n	800fa7e <_realloc_r+0x5a>
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4640      	mov	r0, r8
 800fa5c:	f7ff f826 	bl	800eaac <_malloc_r>
 800fa60:	4605      	mov	r5, r0
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d0ed      	beq.n	800fa42 <_realloc_r+0x1e>
 800fa66:	42bc      	cmp	r4, r7
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	bf28      	it	cs
 800fa6e:	463a      	movcs	r2, r7
 800fa70:	f7fd fdc0 	bl	800d5f4 <memcpy>
 800fa74:	4631      	mov	r1, r6
 800fa76:	4640      	mov	r0, r8
 800fa78:	f7fe fc4c 	bl	800e314 <_free_r>
 800fa7c:	e7e1      	b.n	800fa42 <_realloc_r+0x1e>
 800fa7e:	4635      	mov	r5, r6
 800fa80:	e7df      	b.n	800fa42 <_realloc_r+0x1e>
	...

0800fa84 <fiprintf>:
 800fa84:	b40e      	push	{r1, r2, r3}
 800fa86:	b503      	push	{r0, r1, lr}
 800fa88:	4601      	mov	r1, r0
 800fa8a:	ab03      	add	r3, sp, #12
 800fa8c:	4805      	ldr	r0, [pc, #20]	; (800faa4 <fiprintf+0x20>)
 800fa8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa92:	6800      	ldr	r0, [r0, #0]
 800fa94:	9301      	str	r3, [sp, #4]
 800fa96:	f000 f83f 	bl	800fb18 <_vfiprintf_r>
 800fa9a:	b002      	add	sp, #8
 800fa9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800faa0:	b003      	add	sp, #12
 800faa2:	4770      	bx	lr
 800faa4:	200001d4 	.word	0x200001d4

0800faa8 <abort>:
 800faa8:	b508      	push	{r3, lr}
 800faaa:	2006      	movs	r0, #6
 800faac:	f000 fa0c 	bl	800fec8 <raise>
 800fab0:	2001      	movs	r0, #1
 800fab2:	f7f2 fc01 	bl	80022b8 <_exit>

0800fab6 <_malloc_usable_size_r>:
 800fab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faba:	1f18      	subs	r0, r3, #4
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bfbc      	itt	lt
 800fac0:	580b      	ldrlt	r3, [r1, r0]
 800fac2:	18c0      	addlt	r0, r0, r3
 800fac4:	4770      	bx	lr

0800fac6 <__sfputc_r>:
 800fac6:	6893      	ldr	r3, [r2, #8]
 800fac8:	3b01      	subs	r3, #1
 800faca:	2b00      	cmp	r3, #0
 800facc:	b410      	push	{r4}
 800face:	6093      	str	r3, [r2, #8]
 800fad0:	da08      	bge.n	800fae4 <__sfputc_r+0x1e>
 800fad2:	6994      	ldr	r4, [r2, #24]
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	db01      	blt.n	800fadc <__sfputc_r+0x16>
 800fad8:	290a      	cmp	r1, #10
 800fada:	d103      	bne.n	800fae4 <__sfputc_r+0x1e>
 800fadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fae0:	f000 b934 	b.w	800fd4c <__swbuf_r>
 800fae4:	6813      	ldr	r3, [r2, #0]
 800fae6:	1c58      	adds	r0, r3, #1
 800fae8:	6010      	str	r0, [r2, #0]
 800faea:	7019      	strb	r1, [r3, #0]
 800faec:	4608      	mov	r0, r1
 800faee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faf2:	4770      	bx	lr

0800faf4 <__sfputs_r>:
 800faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf6:	4606      	mov	r6, r0
 800faf8:	460f      	mov	r7, r1
 800fafa:	4614      	mov	r4, r2
 800fafc:	18d5      	adds	r5, r2, r3
 800fafe:	42ac      	cmp	r4, r5
 800fb00:	d101      	bne.n	800fb06 <__sfputs_r+0x12>
 800fb02:	2000      	movs	r0, #0
 800fb04:	e007      	b.n	800fb16 <__sfputs_r+0x22>
 800fb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0a:	463a      	mov	r2, r7
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f7ff ffda 	bl	800fac6 <__sfputc_r>
 800fb12:	1c43      	adds	r3, r0, #1
 800fb14:	d1f3      	bne.n	800fafe <__sfputs_r+0xa>
 800fb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb18 <_vfiprintf_r>:
 800fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	460d      	mov	r5, r1
 800fb1e:	b09d      	sub	sp, #116	; 0x74
 800fb20:	4614      	mov	r4, r2
 800fb22:	4698      	mov	r8, r3
 800fb24:	4606      	mov	r6, r0
 800fb26:	b118      	cbz	r0, 800fb30 <_vfiprintf_r+0x18>
 800fb28:	6a03      	ldr	r3, [r0, #32]
 800fb2a:	b90b      	cbnz	r3, 800fb30 <_vfiprintf_r+0x18>
 800fb2c:	f7fd fbcc 	bl	800d2c8 <__sinit>
 800fb30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb32:	07d9      	lsls	r1, r3, #31
 800fb34:	d405      	bmi.n	800fb42 <_vfiprintf_r+0x2a>
 800fb36:	89ab      	ldrh	r3, [r5, #12]
 800fb38:	059a      	lsls	r2, r3, #22
 800fb3a:	d402      	bmi.n	800fb42 <_vfiprintf_r+0x2a>
 800fb3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb3e:	f7fd fd57 	bl	800d5f0 <__retarget_lock_acquire_recursive>
 800fb42:	89ab      	ldrh	r3, [r5, #12]
 800fb44:	071b      	lsls	r3, r3, #28
 800fb46:	d501      	bpl.n	800fb4c <_vfiprintf_r+0x34>
 800fb48:	692b      	ldr	r3, [r5, #16]
 800fb4a:	b99b      	cbnz	r3, 800fb74 <_vfiprintf_r+0x5c>
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f000 f93a 	bl	800fdc8 <__swsetup_r>
 800fb54:	b170      	cbz	r0, 800fb74 <_vfiprintf_r+0x5c>
 800fb56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb58:	07dc      	lsls	r4, r3, #31
 800fb5a:	d504      	bpl.n	800fb66 <_vfiprintf_r+0x4e>
 800fb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb60:	b01d      	add	sp, #116	; 0x74
 800fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb66:	89ab      	ldrh	r3, [r5, #12]
 800fb68:	0598      	lsls	r0, r3, #22
 800fb6a:	d4f7      	bmi.n	800fb5c <_vfiprintf_r+0x44>
 800fb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb6e:	f7fd fd40 	bl	800d5f2 <__retarget_lock_release_recursive>
 800fb72:	e7f3      	b.n	800fb5c <_vfiprintf_r+0x44>
 800fb74:	2300      	movs	r3, #0
 800fb76:	9309      	str	r3, [sp, #36]	; 0x24
 800fb78:	2320      	movs	r3, #32
 800fb7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb82:	2330      	movs	r3, #48	; 0x30
 800fb84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fd38 <_vfiprintf_r+0x220>
 800fb88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb8c:	f04f 0901 	mov.w	r9, #1
 800fb90:	4623      	mov	r3, r4
 800fb92:	469a      	mov	sl, r3
 800fb94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb98:	b10a      	cbz	r2, 800fb9e <_vfiprintf_r+0x86>
 800fb9a:	2a25      	cmp	r2, #37	; 0x25
 800fb9c:	d1f9      	bne.n	800fb92 <_vfiprintf_r+0x7a>
 800fb9e:	ebba 0b04 	subs.w	fp, sl, r4
 800fba2:	d00b      	beq.n	800fbbc <_vfiprintf_r+0xa4>
 800fba4:	465b      	mov	r3, fp
 800fba6:	4622      	mov	r2, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7ff ffa2 	bl	800faf4 <__sfputs_r>
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	f000 80a9 	beq.w	800fd08 <_vfiprintf_r+0x1f0>
 800fbb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbb8:	445a      	add	r2, fp
 800fbba:	9209      	str	r2, [sp, #36]	; 0x24
 800fbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 80a1 	beq.w	800fd08 <_vfiprintf_r+0x1f0>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbd0:	f10a 0a01 	add.w	sl, sl, #1
 800fbd4:	9304      	str	r3, [sp, #16]
 800fbd6:	9307      	str	r3, [sp, #28]
 800fbd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbdc:	931a      	str	r3, [sp, #104]	; 0x68
 800fbde:	4654      	mov	r4, sl
 800fbe0:	2205      	movs	r2, #5
 800fbe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe6:	4854      	ldr	r0, [pc, #336]	; (800fd38 <_vfiprintf_r+0x220>)
 800fbe8:	f7f0 faf2 	bl	80001d0 <memchr>
 800fbec:	9a04      	ldr	r2, [sp, #16]
 800fbee:	b9d8      	cbnz	r0, 800fc28 <_vfiprintf_r+0x110>
 800fbf0:	06d1      	lsls	r1, r2, #27
 800fbf2:	bf44      	itt	mi
 800fbf4:	2320      	movmi	r3, #32
 800fbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbfa:	0713      	lsls	r3, r2, #28
 800fbfc:	bf44      	itt	mi
 800fbfe:	232b      	movmi	r3, #43	; 0x2b
 800fc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc04:	f89a 3000 	ldrb.w	r3, [sl]
 800fc08:	2b2a      	cmp	r3, #42	; 0x2a
 800fc0a:	d015      	beq.n	800fc38 <_vfiprintf_r+0x120>
 800fc0c:	9a07      	ldr	r2, [sp, #28]
 800fc0e:	4654      	mov	r4, sl
 800fc10:	2000      	movs	r0, #0
 800fc12:	f04f 0c0a 	mov.w	ip, #10
 800fc16:	4621      	mov	r1, r4
 800fc18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc1c:	3b30      	subs	r3, #48	; 0x30
 800fc1e:	2b09      	cmp	r3, #9
 800fc20:	d94d      	bls.n	800fcbe <_vfiprintf_r+0x1a6>
 800fc22:	b1b0      	cbz	r0, 800fc52 <_vfiprintf_r+0x13a>
 800fc24:	9207      	str	r2, [sp, #28]
 800fc26:	e014      	b.n	800fc52 <_vfiprintf_r+0x13a>
 800fc28:	eba0 0308 	sub.w	r3, r0, r8
 800fc2c:	fa09 f303 	lsl.w	r3, r9, r3
 800fc30:	4313      	orrs	r3, r2
 800fc32:	9304      	str	r3, [sp, #16]
 800fc34:	46a2      	mov	sl, r4
 800fc36:	e7d2      	b.n	800fbde <_vfiprintf_r+0xc6>
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	1d19      	adds	r1, r3, #4
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	9103      	str	r1, [sp, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfbb      	ittet	lt
 800fc44:	425b      	neglt	r3, r3
 800fc46:	f042 0202 	orrlt.w	r2, r2, #2
 800fc4a:	9307      	strge	r3, [sp, #28]
 800fc4c:	9307      	strlt	r3, [sp, #28]
 800fc4e:	bfb8      	it	lt
 800fc50:	9204      	strlt	r2, [sp, #16]
 800fc52:	7823      	ldrb	r3, [r4, #0]
 800fc54:	2b2e      	cmp	r3, #46	; 0x2e
 800fc56:	d10c      	bne.n	800fc72 <_vfiprintf_r+0x15a>
 800fc58:	7863      	ldrb	r3, [r4, #1]
 800fc5a:	2b2a      	cmp	r3, #42	; 0x2a
 800fc5c:	d134      	bne.n	800fcc8 <_vfiprintf_r+0x1b0>
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	1d1a      	adds	r2, r3, #4
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	9203      	str	r2, [sp, #12]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bfb8      	it	lt
 800fc6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc6e:	3402      	adds	r4, #2
 800fc70:	9305      	str	r3, [sp, #20]
 800fc72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fd48 <_vfiprintf_r+0x230>
 800fc76:	7821      	ldrb	r1, [r4, #0]
 800fc78:	2203      	movs	r2, #3
 800fc7a:	4650      	mov	r0, sl
 800fc7c:	f7f0 faa8 	bl	80001d0 <memchr>
 800fc80:	b138      	cbz	r0, 800fc92 <_vfiprintf_r+0x17a>
 800fc82:	9b04      	ldr	r3, [sp, #16]
 800fc84:	eba0 000a 	sub.w	r0, r0, sl
 800fc88:	2240      	movs	r2, #64	; 0x40
 800fc8a:	4082      	lsls	r2, r0
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	3401      	adds	r4, #1
 800fc90:	9304      	str	r3, [sp, #16]
 800fc92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc96:	4829      	ldr	r0, [pc, #164]	; (800fd3c <_vfiprintf_r+0x224>)
 800fc98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc9c:	2206      	movs	r2, #6
 800fc9e:	f7f0 fa97 	bl	80001d0 <memchr>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d03f      	beq.n	800fd26 <_vfiprintf_r+0x20e>
 800fca6:	4b26      	ldr	r3, [pc, #152]	; (800fd40 <_vfiprintf_r+0x228>)
 800fca8:	bb1b      	cbnz	r3, 800fcf2 <_vfiprintf_r+0x1da>
 800fcaa:	9b03      	ldr	r3, [sp, #12]
 800fcac:	3307      	adds	r3, #7
 800fcae:	f023 0307 	bic.w	r3, r3, #7
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	9303      	str	r3, [sp, #12]
 800fcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb8:	443b      	add	r3, r7
 800fcba:	9309      	str	r3, [sp, #36]	; 0x24
 800fcbc:	e768      	b.n	800fb90 <_vfiprintf_r+0x78>
 800fcbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	2001      	movs	r0, #1
 800fcc6:	e7a6      	b.n	800fc16 <_vfiprintf_r+0xfe>
 800fcc8:	2300      	movs	r3, #0
 800fcca:	3401      	adds	r4, #1
 800fccc:	9305      	str	r3, [sp, #20]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	f04f 0c0a 	mov.w	ip, #10
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcda:	3a30      	subs	r2, #48	; 0x30
 800fcdc:	2a09      	cmp	r2, #9
 800fcde:	d903      	bls.n	800fce8 <_vfiprintf_r+0x1d0>
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d0c6      	beq.n	800fc72 <_vfiprintf_r+0x15a>
 800fce4:	9105      	str	r1, [sp, #20]
 800fce6:	e7c4      	b.n	800fc72 <_vfiprintf_r+0x15a>
 800fce8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcec:	4604      	mov	r4, r0
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e7f0      	b.n	800fcd4 <_vfiprintf_r+0x1bc>
 800fcf2:	ab03      	add	r3, sp, #12
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	462a      	mov	r2, r5
 800fcf8:	4b12      	ldr	r3, [pc, #72]	; (800fd44 <_vfiprintf_r+0x22c>)
 800fcfa:	a904      	add	r1, sp, #16
 800fcfc:	4630      	mov	r0, r6
 800fcfe:	f7fc fea3 	bl	800ca48 <_printf_float>
 800fd02:	4607      	mov	r7, r0
 800fd04:	1c78      	adds	r0, r7, #1
 800fd06:	d1d6      	bne.n	800fcb6 <_vfiprintf_r+0x19e>
 800fd08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd0a:	07d9      	lsls	r1, r3, #31
 800fd0c:	d405      	bmi.n	800fd1a <_vfiprintf_r+0x202>
 800fd0e:	89ab      	ldrh	r3, [r5, #12]
 800fd10:	059a      	lsls	r2, r3, #22
 800fd12:	d402      	bmi.n	800fd1a <_vfiprintf_r+0x202>
 800fd14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd16:	f7fd fc6c 	bl	800d5f2 <__retarget_lock_release_recursive>
 800fd1a:	89ab      	ldrh	r3, [r5, #12]
 800fd1c:	065b      	lsls	r3, r3, #25
 800fd1e:	f53f af1d 	bmi.w	800fb5c <_vfiprintf_r+0x44>
 800fd22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd24:	e71c      	b.n	800fb60 <_vfiprintf_r+0x48>
 800fd26:	ab03      	add	r3, sp, #12
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	462a      	mov	r2, r5
 800fd2c:	4b05      	ldr	r3, [pc, #20]	; (800fd44 <_vfiprintf_r+0x22c>)
 800fd2e:	a904      	add	r1, sp, #16
 800fd30:	4630      	mov	r0, r6
 800fd32:	f7fd f92d 	bl	800cf90 <_printf_i>
 800fd36:	e7e4      	b.n	800fd02 <_vfiprintf_r+0x1ea>
 800fd38:	080105d5 	.word	0x080105d5
 800fd3c:	080105df 	.word	0x080105df
 800fd40:	0800ca49 	.word	0x0800ca49
 800fd44:	0800faf5 	.word	0x0800faf5
 800fd48:	080105db 	.word	0x080105db

0800fd4c <__swbuf_r>:
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	460e      	mov	r6, r1
 800fd50:	4614      	mov	r4, r2
 800fd52:	4605      	mov	r5, r0
 800fd54:	b118      	cbz	r0, 800fd5e <__swbuf_r+0x12>
 800fd56:	6a03      	ldr	r3, [r0, #32]
 800fd58:	b90b      	cbnz	r3, 800fd5e <__swbuf_r+0x12>
 800fd5a:	f7fd fab5 	bl	800d2c8 <__sinit>
 800fd5e:	69a3      	ldr	r3, [r4, #24]
 800fd60:	60a3      	str	r3, [r4, #8]
 800fd62:	89a3      	ldrh	r3, [r4, #12]
 800fd64:	071a      	lsls	r2, r3, #28
 800fd66:	d525      	bpl.n	800fdb4 <__swbuf_r+0x68>
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	b31b      	cbz	r3, 800fdb4 <__swbuf_r+0x68>
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	6922      	ldr	r2, [r4, #16]
 800fd70:	1a98      	subs	r0, r3, r2
 800fd72:	6963      	ldr	r3, [r4, #20]
 800fd74:	b2f6      	uxtb	r6, r6
 800fd76:	4283      	cmp	r3, r0
 800fd78:	4637      	mov	r7, r6
 800fd7a:	dc04      	bgt.n	800fd86 <__swbuf_r+0x3a>
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7ff fdca 	bl	800f918 <_fflush_r>
 800fd84:	b9e0      	cbnz	r0, 800fdc0 <__swbuf_r+0x74>
 800fd86:	68a3      	ldr	r3, [r4, #8]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	60a3      	str	r3, [r4, #8]
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	6022      	str	r2, [r4, #0]
 800fd92:	701e      	strb	r6, [r3, #0]
 800fd94:	6962      	ldr	r2, [r4, #20]
 800fd96:	1c43      	adds	r3, r0, #1
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d004      	beq.n	800fda6 <__swbuf_r+0x5a>
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	07db      	lsls	r3, r3, #31
 800fda0:	d506      	bpl.n	800fdb0 <__swbuf_r+0x64>
 800fda2:	2e0a      	cmp	r6, #10
 800fda4:	d104      	bne.n	800fdb0 <__swbuf_r+0x64>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f7ff fdb5 	bl	800f918 <_fflush_r>
 800fdae:	b938      	cbnz	r0, 800fdc0 <__swbuf_r+0x74>
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f000 f806 	bl	800fdc8 <__swsetup_r>
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	d0d5      	beq.n	800fd6c <__swbuf_r+0x20>
 800fdc0:	f04f 37ff 	mov.w	r7, #4294967295
 800fdc4:	e7f4      	b.n	800fdb0 <__swbuf_r+0x64>
	...

0800fdc8 <__swsetup_r>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	4b2a      	ldr	r3, [pc, #168]	; (800fe74 <__swsetup_r+0xac>)
 800fdcc:	4605      	mov	r5, r0
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	b118      	cbz	r0, 800fddc <__swsetup_r+0x14>
 800fdd4:	6a03      	ldr	r3, [r0, #32]
 800fdd6:	b90b      	cbnz	r3, 800fddc <__swsetup_r+0x14>
 800fdd8:	f7fd fa76 	bl	800d2c8 <__sinit>
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fde2:	0718      	lsls	r0, r3, #28
 800fde4:	d422      	bmi.n	800fe2c <__swsetup_r+0x64>
 800fde6:	06d9      	lsls	r1, r3, #27
 800fde8:	d407      	bmi.n	800fdfa <__swsetup_r+0x32>
 800fdea:	2309      	movs	r3, #9
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fdf2:	81a3      	strh	r3, [r4, #12]
 800fdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf8:	e034      	b.n	800fe64 <__swsetup_r+0x9c>
 800fdfa:	0758      	lsls	r0, r3, #29
 800fdfc:	d512      	bpl.n	800fe24 <__swsetup_r+0x5c>
 800fdfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe00:	b141      	cbz	r1, 800fe14 <__swsetup_r+0x4c>
 800fe02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe06:	4299      	cmp	r1, r3
 800fe08:	d002      	beq.n	800fe10 <__swsetup_r+0x48>
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	f7fe fa82 	bl	800e314 <_free_r>
 800fe10:	2300      	movs	r3, #0
 800fe12:	6363      	str	r3, [r4, #52]	; 0x34
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe1a:	81a3      	strh	r3, [r4, #12]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6063      	str	r3, [r4, #4]
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	6023      	str	r3, [r4, #0]
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	f043 0308 	orr.w	r3, r3, #8
 800fe2a:	81a3      	strh	r3, [r4, #12]
 800fe2c:	6923      	ldr	r3, [r4, #16]
 800fe2e:	b94b      	cbnz	r3, 800fe44 <__swsetup_r+0x7c>
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe3a:	d003      	beq.n	800fe44 <__swsetup_r+0x7c>
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 f884 	bl	800ff4c <__smakebuf_r>
 800fe44:	89a0      	ldrh	r0, [r4, #12]
 800fe46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe4a:	f010 0301 	ands.w	r3, r0, #1
 800fe4e:	d00a      	beq.n	800fe66 <__swsetup_r+0x9e>
 800fe50:	2300      	movs	r3, #0
 800fe52:	60a3      	str	r3, [r4, #8]
 800fe54:	6963      	ldr	r3, [r4, #20]
 800fe56:	425b      	negs	r3, r3
 800fe58:	61a3      	str	r3, [r4, #24]
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	b943      	cbnz	r3, 800fe70 <__swsetup_r+0xa8>
 800fe5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe62:	d1c4      	bne.n	800fdee <__swsetup_r+0x26>
 800fe64:	bd38      	pop	{r3, r4, r5, pc}
 800fe66:	0781      	lsls	r1, r0, #30
 800fe68:	bf58      	it	pl
 800fe6a:	6963      	ldrpl	r3, [r4, #20]
 800fe6c:	60a3      	str	r3, [r4, #8]
 800fe6e:	e7f4      	b.n	800fe5a <__swsetup_r+0x92>
 800fe70:	2000      	movs	r0, #0
 800fe72:	e7f7      	b.n	800fe64 <__swsetup_r+0x9c>
 800fe74:	200001d4 	.word	0x200001d4

0800fe78 <_raise_r>:
 800fe78:	291f      	cmp	r1, #31
 800fe7a:	b538      	push	{r3, r4, r5, lr}
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	d904      	bls.n	800fe8c <_raise_r+0x14>
 800fe82:	2316      	movs	r3, #22
 800fe84:	6003      	str	r3, [r0, #0]
 800fe86:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fe8e:	b112      	cbz	r2, 800fe96 <_raise_r+0x1e>
 800fe90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe94:	b94b      	cbnz	r3, 800feaa <_raise_r+0x32>
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 f830 	bl	800fefc <_getpid_r>
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	4601      	mov	r1, r0
 800fea0:	4620      	mov	r0, r4
 800fea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fea6:	f000 b817 	b.w	800fed8 <_kill_r>
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d00a      	beq.n	800fec4 <_raise_r+0x4c>
 800feae:	1c59      	adds	r1, r3, #1
 800feb0:	d103      	bne.n	800feba <_raise_r+0x42>
 800feb2:	2316      	movs	r3, #22
 800feb4:	6003      	str	r3, [r0, #0]
 800feb6:	2001      	movs	r0, #1
 800feb8:	e7e7      	b.n	800fe8a <_raise_r+0x12>
 800feba:	2400      	movs	r4, #0
 800febc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fec0:	4628      	mov	r0, r5
 800fec2:	4798      	blx	r3
 800fec4:	2000      	movs	r0, #0
 800fec6:	e7e0      	b.n	800fe8a <_raise_r+0x12>

0800fec8 <raise>:
 800fec8:	4b02      	ldr	r3, [pc, #8]	; (800fed4 <raise+0xc>)
 800feca:	4601      	mov	r1, r0
 800fecc:	6818      	ldr	r0, [r3, #0]
 800fece:	f7ff bfd3 	b.w	800fe78 <_raise_r>
 800fed2:	bf00      	nop
 800fed4:	200001d4 	.word	0x200001d4

0800fed8 <_kill_r>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	4d07      	ldr	r5, [pc, #28]	; (800fef8 <_kill_r+0x20>)
 800fedc:	2300      	movs	r3, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	4608      	mov	r0, r1
 800fee2:	4611      	mov	r1, r2
 800fee4:	602b      	str	r3, [r5, #0]
 800fee6:	f7f2 f9d7 	bl	8002298 <_kill>
 800feea:	1c43      	adds	r3, r0, #1
 800feec:	d102      	bne.n	800fef4 <_kill_r+0x1c>
 800feee:	682b      	ldr	r3, [r5, #0]
 800fef0:	b103      	cbz	r3, 800fef4 <_kill_r+0x1c>
 800fef2:	6023      	str	r3, [r4, #0]
 800fef4:	bd38      	pop	{r3, r4, r5, pc}
 800fef6:	bf00      	nop
 800fef8:	2000317c 	.word	0x2000317c

0800fefc <_getpid_r>:
 800fefc:	f7f2 b9c4 	b.w	8002288 <_getpid>

0800ff00 <__swhatbuf_r>:
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	460c      	mov	r4, r1
 800ff04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff08:	2900      	cmp	r1, #0
 800ff0a:	b096      	sub	sp, #88	; 0x58
 800ff0c:	4615      	mov	r5, r2
 800ff0e:	461e      	mov	r6, r3
 800ff10:	da0d      	bge.n	800ff2e <__swhatbuf_r+0x2e>
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff18:	f04f 0100 	mov.w	r1, #0
 800ff1c:	bf0c      	ite	eq
 800ff1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff22:	2340      	movne	r3, #64	; 0x40
 800ff24:	2000      	movs	r0, #0
 800ff26:	6031      	str	r1, [r6, #0]
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	b016      	add	sp, #88	; 0x58
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
 800ff2e:	466a      	mov	r2, sp
 800ff30:	f000 f848 	bl	800ffc4 <_fstat_r>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	dbec      	blt.n	800ff12 <__swhatbuf_r+0x12>
 800ff38:	9901      	ldr	r1, [sp, #4]
 800ff3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ff3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ff42:	4259      	negs	r1, r3
 800ff44:	4159      	adcs	r1, r3
 800ff46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff4a:	e7eb      	b.n	800ff24 <__swhatbuf_r+0x24>

0800ff4c <__smakebuf_r>:
 800ff4c:	898b      	ldrh	r3, [r1, #12]
 800ff4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff50:	079d      	lsls	r5, r3, #30
 800ff52:	4606      	mov	r6, r0
 800ff54:	460c      	mov	r4, r1
 800ff56:	d507      	bpl.n	800ff68 <__smakebuf_r+0x1c>
 800ff58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	2301      	movs	r3, #1
 800ff62:	6163      	str	r3, [r4, #20]
 800ff64:	b002      	add	sp, #8
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	ab01      	add	r3, sp, #4
 800ff6a:	466a      	mov	r2, sp
 800ff6c:	f7ff ffc8 	bl	800ff00 <__swhatbuf_r>
 800ff70:	9900      	ldr	r1, [sp, #0]
 800ff72:	4605      	mov	r5, r0
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7fe fd99 	bl	800eaac <_malloc_r>
 800ff7a:	b948      	cbnz	r0, 800ff90 <__smakebuf_r+0x44>
 800ff7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff80:	059a      	lsls	r2, r3, #22
 800ff82:	d4ef      	bmi.n	800ff64 <__smakebuf_r+0x18>
 800ff84:	f023 0303 	bic.w	r3, r3, #3
 800ff88:	f043 0302 	orr.w	r3, r3, #2
 800ff8c:	81a3      	strh	r3, [r4, #12]
 800ff8e:	e7e3      	b.n	800ff58 <__smakebuf_r+0xc>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	6020      	str	r0, [r4, #0]
 800ff94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff98:	81a3      	strh	r3, [r4, #12]
 800ff9a:	9b00      	ldr	r3, [sp, #0]
 800ff9c:	6163      	str	r3, [r4, #20]
 800ff9e:	9b01      	ldr	r3, [sp, #4]
 800ffa0:	6120      	str	r0, [r4, #16]
 800ffa2:	b15b      	cbz	r3, 800ffbc <__smakebuf_r+0x70>
 800ffa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f000 f81d 	bl	800ffe8 <_isatty_r>
 800ffae:	b128      	cbz	r0, 800ffbc <__smakebuf_r+0x70>
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	f023 0303 	bic.w	r3, r3, #3
 800ffb6:	f043 0301 	orr.w	r3, r3, #1
 800ffba:	81a3      	strh	r3, [r4, #12]
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	431d      	orrs	r5, r3
 800ffc0:	81a5      	strh	r5, [r4, #12]
 800ffc2:	e7cf      	b.n	800ff64 <__smakebuf_r+0x18>

0800ffc4 <_fstat_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d07      	ldr	r5, [pc, #28]	; (800ffe4 <_fstat_r+0x20>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4604      	mov	r4, r0
 800ffcc:	4608      	mov	r0, r1
 800ffce:	4611      	mov	r1, r2
 800ffd0:	602b      	str	r3, [r5, #0]
 800ffd2:	f7f2 f9c0 	bl	8002356 <_fstat>
 800ffd6:	1c43      	adds	r3, r0, #1
 800ffd8:	d102      	bne.n	800ffe0 <_fstat_r+0x1c>
 800ffda:	682b      	ldr	r3, [r5, #0]
 800ffdc:	b103      	cbz	r3, 800ffe0 <_fstat_r+0x1c>
 800ffde:	6023      	str	r3, [r4, #0]
 800ffe0:	bd38      	pop	{r3, r4, r5, pc}
 800ffe2:	bf00      	nop
 800ffe4:	2000317c 	.word	0x2000317c

0800ffe8 <_isatty_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d06      	ldr	r5, [pc, #24]	; (8010004 <_isatty_r+0x1c>)
 800ffec:	2300      	movs	r3, #0
 800ffee:	4604      	mov	r4, r0
 800fff0:	4608      	mov	r0, r1
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	f7f2 f9bf 	bl	8002376 <_isatty>
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	d102      	bne.n	8010002 <_isatty_r+0x1a>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	b103      	cbz	r3, 8010002 <_isatty_r+0x1a>
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	bd38      	pop	{r3, r4, r5, pc}
 8010004:	2000317c 	.word	0x2000317c

08010008 <_init>:
 8010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000a:	bf00      	nop
 801000c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801000e:	bc08      	pop	{r3}
 8010010:	469e      	mov	lr, r3
 8010012:	4770      	bx	lr

08010014 <_fini>:
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	bf00      	nop
 8010018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801001a:	bc08      	pop	{r3}
 801001c:	469e      	mov	lr, r3
 801001e:	4770      	bx	lr
